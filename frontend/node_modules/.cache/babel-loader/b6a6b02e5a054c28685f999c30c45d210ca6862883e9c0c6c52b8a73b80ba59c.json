{"ast":null,"code":"var _jsxFileName = \"/Users/gotouhiroaki/Programming/DAN_work/disability-employment-system/frontend/src/components/PaymentReport/PaymentInfoTab.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport PaymentInfoForm from './PaymentInfoForm';\nimport PaymentCalculation from './PaymentCalculation';\nimport PaymentMonthlyData from './PaymentMonthlyData';\nimport { paymentReportApi } from '../../api/paymentReportApi';\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\n\n// フォームデータの型定義\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PaymentInfoTab = ({\n  fiscalYear,\n  reportData\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    year: fiscalYear || '令和7',\n    companyName: '株式会社サンプル',\n    companyNameKana: 'カブシキガイシャサンプル',\n    representativeTitle: '代表取締役',\n    representativeName: '山田太郎',\n    corporateNumber: '1234567890123',\n    postalCode: '100-0001',\n    address: '東京都千代田区千代田1-1-1',\n    industryClassification: '製造業',\n    industryClassificationCode: '26',\n    prefectureCode: '13',\n    employmentOfficeCode: '101',\n    // 月次雇用データ\n    totalRegularEmployees: {\n      april: 120,\n      may: 120,\n      june: 121,\n      july: 121,\n      august: 121,\n      september: 122,\n      october: 122,\n      november: 123,\n      december: 123,\n      january: 123,\n      february: 123,\n      march: 123\n    },\n    workerBaseCount: {\n      april: 118,\n      may: 118,\n      june: 119,\n      july: 119,\n      august: 119,\n      september: 120,\n      october: 120,\n      november: 121,\n      december: 121,\n      january: 121,\n      february: 121,\n      march: 121\n    },\n    disabledEmployees: {\n      april: 3,\n      may: 3,\n      june: 3,\n      july: 3,\n      august: 3,\n      september: 4,\n      october: 4,\n      november: 4,\n      december: 4,\n      january: 4,\n      february: 4,\n      march: 4\n    },\n    shortTimeDisabledEmployees: {\n      april: 1,\n      may: 1,\n      june: 1,\n      july: 1,\n      august: 1,\n      september: 1,\n      october: 1,\n      november: 1,\n      december: 1,\n      january: 1,\n      february: 1,\n      march: 1\n    },\n    // 納付金計算関連データ\n    legalEmploymentRate: 2.3,\n    paymentPerPerson: 50000,\n    adjustmentPaymentPerPerson: 29000,\n    homeWorkingAdjustmentRate: 21000,\n    specialPaymentPerPerson: 7000,\n    // 在宅就業障害者特例調整金関連\n    homeWorkingPaymentTotal: 350000,\n    homeWorkingDivisor: 35000,\n    // 銀行口座情報\n    bankName: 'サンプル銀行',\n    branchName: '本店',\n    accountType: '普通',\n    accountNumber: '1234567',\n    accountHolder: 'カ) サンプル',\n    bankCode: '0123',\n    branchCode: '456'\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [saveSuccess, setSaveSuccess] = useState(false);\n  const [showCreateOption, setShowCreateOption] = useState(false);\n  const [showSampleDataModal, setShowSampleDataModal] = useState(false);\n\n  // 年度数値を取得する\n  const getYearValue = () => {\n    if (fiscalYear.includes('年度')) {\n      return parseInt(fiscalYear.replace('年度', ''));\n    }\n    return new Date().getFullYear();\n  };\n\n  // APIからデータを取得\n  useEffect(() => {\n    console.log(`PaymentInfoTab: fiscalYear変更検知 ${fiscalYear}, reportData:`, reportData);\n    // formDataのyear部分を更新\n    setFormData(prevData => ({\n      ...prevData,\n      year: fiscalYear\n    }));\n    fetchData();\n  }, [fiscalYear, reportData]);\n\n  // データ取得関数\n  const fetchData = async () => {\n    // reportDataが提供されている場合はそちらを使用\n    if (reportData) {\n      try {\n        console.log(`${fiscalYear}のデータを処理します:`, reportData);\n\n        // APIレスポンスデータを元にフォームデータを更新\n        updateFormDataFromApiResponse(reportData);\n        setShowCreateOption(false);\n        return;\n      } catch (error) {\n        console.error('親コンポーネントのデータ処理エラー:', error);\n      }\n    }\n\n    // reportDataがない場合はAPIから取得\n    try {\n      setLoading(true);\n      setError(null);\n      setShowCreateOption(false);\n      const year = getYearValue();\n      try {\n        // 既存レポートの取得を試みる\n        const report = await paymentReportApi.getPaymentReport(year);\n\n        // レポートが取得できた場合の処理\n        if (report) {\n          console.log(`${year}年度のデータを取得:`, report);\n\n          // APIから取得したデータを処理する\n          updateFormDataFromApiResponse(report);\n        }\n      } catch (error) {\n        // まずはエラーの型チェック\n        const fetchError = error;\n        if (fetchError.message && fetchError.message.includes('見つかりません')) {\n          // 404エラーの場合は、新規作成のオプションを提供\n          setError(`${year}年度のデータが見つかりません。新規作成することができます。`);\n          setShowCreateOption(true);\n        } else {\n          throw error; // その他のエラーは再スロー\n        }\n      }\n      setLoading(false);\n    } catch (err) {\n      setLoading(false);\n      setError(err instanceof Error ? err.message : '納付金レポートデータの取得に失敗しました');\n      console.error('納付金レポートデータの取得エラー:', err);\n    }\n  };\n\n  // APIレスポンスからフォームデータを更新する関数\n  const updateFormDataFromApiResponse = apiData => {\n    // 会社情報を取得\n\n    let companyData = {};\n    if (apiData.company_data) {\n      try {\n        // APIレスポンスのcompany_dataがある場合\n        companyData = typeof apiData.company_data === 'string' ? JSON.parse(apiData.company_data) : apiData.company_data;\n      } catch (error) {\n        console.error('会社データのパースエラー:', error);\n      }\n    } else {\n      // APIレスポンスにcompany_dataがない場合、フラットな構造から情報を取得\n      companyData = {\n        companyName: apiData.company_name || '',\n        address: apiData.company_address || '',\n        representativeName: apiData.representative_name || ''\n        // 他のフィールドも同様に\n      };\n    }\n\n    // 月次データを取得\n\n    let monthlyData = {\n      totalRegularEmployees: formData.totalRegularEmployees,\n      workerBaseCount: formData.workerBaseCount,\n      disabledEmployees: formData.disabledEmployees,\n      shortTimeDisabledEmployees: formData.shortTimeDisabledEmployees\n    };\n    if (apiData.monthly_data) {\n      try {\n        // APIレスポンスのmonthly_dataがある場合\n        const parsedData = typeof apiData.monthly_data === 'string' ? JSON.parse(apiData.monthly_data) : apiData.monthly_data;\n        monthlyData = {\n          ...monthlyData,\n          ...parsedData\n        };\n      } catch (error) {\n        console.error('月次データのパースエラー:', error);\n      }\n    } else if (apiData.average_employee_count && apiData.actual_employment_count) {\n      // APIレスポンスにmonthly_dataがない場合、平均値から推定データを生成\n      const avgEmployees = apiData.average_employee_count;\n      const avgDisabled = apiData.actual_employment_count;\n\n      // すべての月で同じ値を使用\n      const months = ['april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december', 'january', 'february', 'march'];\n      const newTotalEmployees = {};\n      const newDisabledEmployees = {};\n      months.forEach(month => {\n        newTotalEmployees[month] = avgEmployees;\n        newDisabledEmployees[month] = avgDisabled;\n      });\n      monthlyData = {\n        ...monthlyData,\n        totalRegularEmployees: newTotalEmployees,\n        disabledEmployees: newDisabledEmployees\n      };\n    }\n\n    // 銀行情報を取得\n\n    let bankInfo = {};\n    if (apiData.bank_info) {\n      try {\n        bankInfo = typeof apiData.bank_info === 'string' ? JSON.parse(apiData.bank_info) : apiData.bank_info;\n      } catch (error) {\n        console.error('銀行情報のパースエラー:', error);\n      }\n    }\n\n    // フォームデータを更新\n    setFormData(prevData => ({\n      ...prevData,\n      year: fiscalYear,\n      // 会社情報\n      companyName: companyData.companyName || apiData.company_name || prevData.companyName,\n      companyNameKana: companyData.companyNameKana || prevData.companyNameKana,\n      representativeTitle: companyData.representativeTitle || prevData.representativeTitle,\n      representativeName: companyData.representativeName || apiData.representative_name || prevData.representativeName,\n      corporateNumber: companyData.corporateNumber || prevData.corporateNumber,\n      postalCode: companyData.postalCode || prevData.postalCode,\n      address: companyData.address || apiData.company_address || prevData.address,\n      industryClassification: companyData.industryClassification || prevData.industryClassification,\n      industryClassificationCode: companyData.industryClassificationCode || prevData.industryClassificationCode,\n      prefectureCode: companyData.prefectureCode || prevData.prefectureCode,\n      employmentOfficeCode: companyData.employmentOfficeCode || prevData.employmentOfficeCode,\n      // 月次データ\n      totalRegularEmployees: monthlyData.totalRegularEmployees || prevData.totalRegularEmployees,\n      workerBaseCount: monthlyData.workerBaseCount || prevData.workerBaseCount,\n      disabledEmployees: monthlyData.disabledEmployees || prevData.disabledEmployees,\n      shortTimeDisabledEmployees: monthlyData.shortTimeDisabledEmployees || prevData.shortTimeDisabledEmployees,\n      // 銀行情報\n      bankName: bankInfo.bankName || prevData.bankName,\n      branchName: bankInfo.branchName || prevData.branchName,\n      accountType: bankInfo.accountType || prevData.accountType,\n      accountNumber: bankInfo.accountNumber || prevData.accountNumber,\n      accountHolder: bankInfo.accountHolder || prevData.accountHolder,\n      bankCode: bankInfo.bankCode || prevData.bankCode,\n      branchCode: bankInfo.branchCode || prevData.branchCode\n    }));\n  };\n\n  // 新規作成ハンドラー\n  const handleCreateNewReport = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const year = getYearValue();\n\n      // 新規レポートの基本データ\n      const initialData = {\n        year,\n        total_employees: 520,\n        disabled_employees: 15,\n        employment_rate: 2.8,\n        legal_employment_rate: 2.3,\n        shortage_count: 0,\n        payment_amount: 0,\n        notes: `${year}年度の納付金レポート（新規作成）`,\n        company_data: JSON.stringify({\n          companyName: '株式会社サンプル',\n          companyNameKana: 'カブシキガイシャサンプル',\n          representativeTitle: '代表取締役',\n          representativeName: '山田太郎',\n          corporateNumber: '1234567890123',\n          postalCode: '100-0001',\n          address: '東京都千代田区千代田1-1-1',\n          industryClassification: '製造業',\n          industryClassificationCode: '26',\n          prefectureCode: '13',\n          employmentOfficeCode: '101'\n        }),\n        monthly_data: JSON.stringify({\n          totalRegularEmployees: {\n            april: 510,\n            may: 515,\n            june: 520,\n            july: 523,\n            august: 525,\n            september: 530,\n            october: 528,\n            november: 527,\n            december: 520,\n            january: 515,\n            february: 510,\n            march: 505\n          },\n          disabledEmployees: {\n            april: 13,\n            may: 13,\n            june: 14,\n            july: 15,\n            august: 15,\n            september: 15,\n            october: 14,\n            november: 14,\n            december: 13,\n            january: 13,\n            february: 12,\n            march: 12\n          }\n        })\n      };\n\n      // 新規レポートを保存\n      const result = await paymentReportApi.savePaymentReport(year, initialData);\n      setLoading(false);\n      alert(`${year}年度の納付金レポートを新規作成しました`);\n\n      // 画面をリロードする\n      window.location.reload();\n    } catch (err) {\n      setLoading(false);\n      setError(err instanceof Error ? err.message : '納付金レポートの作成に失敗しました');\n      console.error('納付金レポートの作成エラー:', err);\n    }\n  };\n\n  // データベース修復処理\n  const repairDatabase = async () => {\n    const confirmRepair = window.confirm('データベースの修復を行います。これにより年度データの不整合が修正される可能性がありますが、一部のデータが初期化される場合もあります。続行しますか？');\n    if (!confirmRepair) return;\n    try {\n      setLoading(true);\n      setError(null);\n\n      // 現在のデータを取得\n      const allReports = await paymentReportApi.getAllPaymentReports();\n      console.log('現在のレポート一覧:', allReports);\n      const years = [2023, 2024, 2025];\n      const repairResults = [];\n\n      // 各年度のデータをチェックして修復\n      for (const year of years) {\n        try {\n          // その年度のデータを取得\n          const reportData = await paymentReportApi.getPaymentReport(year);\n          console.log(`${year}年度のデータ:`, reportData);\n\n          // データが存在するが壊れている場合は修復\n          if (reportData) {\n            const fixedData = {\n              ...reportData,\n              year: year,\n              fiscal_year: year\n            };\n\n            // monthly_data が文字列でもオブジェクトでもない場合、初期データを設定\n            if (!reportData.monthly_data || typeof reportData.monthly_data !== 'string' && typeof reportData.monthly_data !== 'object') {\n              const defaultMonthlyData = {\n                totalRegularEmployees: {\n                  april: 510,\n                  may: 515,\n                  june: 520,\n                  july: 523,\n                  august: 525,\n                  september: 530,\n                  october: 528,\n                  november: 527,\n                  december: 520,\n                  january: 515,\n                  february: 510,\n                  march: 505\n                },\n                disabledEmployees: {\n                  april: 13,\n                  may: 13,\n                  june: 14,\n                  july: 15,\n                  august: 15,\n                  september: 15,\n                  october: 14,\n                  november: 14,\n                  december: 13,\n                  january: 13,\n                  february: 12,\n                  march: 12\n                }\n              };\n              fixedData.monthly_data = defaultMonthlyData;\n            }\n\n            // ID削除（新規作成にする）\n            if (fixedData.id) {\n              delete fixedData.id;\n            }\n\n            // データを保存\n            await paymentReportApi.savePaymentReport(year, fixedData);\n            repairResults.push(`${year}年度のデータを修復しました`);\n            console.log(`${year}年度のデータを修復しました`);\n          }\n        } catch (error) {\n          // データが存在しない場合は新規作成\n          console.log(`${year}年度のデータが見つかりません。新規作成します。`);\n          const newData = {\n            year: year,\n            fiscal_year: year,\n            total_employees: 510,\n            disabled_employees: 15,\n            employment_rate: 2.8,\n            legal_employment_rate: 2.3,\n            status: '作成中',\n            monthly_data: {\n              totalRegularEmployees: {\n                april: 510,\n                may: 515,\n                june: 520,\n                july: 523,\n                august: 525,\n                september: 530,\n                october: 528,\n                november: 527,\n                december: 520,\n                january: 515,\n                february: 510,\n                march: 505\n              },\n              disabledEmployees: {\n                april: 13,\n                may: 13,\n                june: 14,\n                july: 15,\n                august: 15,\n                september: 15,\n                october: 14,\n                november: 14,\n                december: 13,\n                january: 13,\n                february: 12,\n                march: 12\n              }\n            }\n          };\n          try {\n            // ここで、yearはnumber型であることを確認してからAPIを呼び出す\n            await paymentReportApi.savePaymentReport(year, newData);\n            repairResults.push(`${year}年度のデータを新規作成しました`);\n            console.log(`${year}年度のデータを新規作成しました`);\n          } catch (saveError) {\n            repairResults.push(`${year}年度のデータ作成に失敗しました`);\n            console.error(`${year}年度のデータ作成に失敗しました:`, saveError);\n          }\n        }\n      }\n      setLoading(false);\n      alert(`データベース修復結果:\\n${repairResults.join('\\n')}\\n\\nページをリロードします。`);\n      window.location.reload();\n    } catch (error) {\n      setLoading(false);\n      setError('データベースの修復中にエラーが発生しました');\n      console.error('データベース修復エラー:', error);\n      alert('データベースの修復中にエラーが発生しました。');\n    }\n  };\n\n  // すべての年度データを修復する処理\n  const repairAllYearData = async () => {\n    try {\n      setLoading(true);\n\n      // すべての年度のデータを取得\n      const allReports = await paymentReportApi.getAllPaymentReports();\n      for (const report of allReports) {\n        // 年度を取得\n        const year = report.fiscal_year || report.year;\n        if (typeof year !== 'number') {\n          console.error('無効な年度形式:', year);\n          continue; // 無効な年度の場合はスキップ\n        }\n\n        // 月次データの有無をチェック\n        const hasMonthlyData = report.monthly_data && (typeof report.monthly_data === 'string' || typeof report.monthly_data === 'object');\n\n        // 月次データがない場合はデフォルト値を設定\n        if (!hasMonthlyData) {\n          const defaultMonthlyData = {\n            totalRegularEmployees: {\n              april: 510,\n              may: 515,\n              june: 520,\n              july: 523,\n              august: 525,\n              september: 530,\n              october: 528,\n              november: 527,\n              december: 520,\n              january: 515,\n              february: 510,\n              march: 505\n            },\n            disabledEmployees: {\n              april: 13,\n              may: 13,\n              june: 14,\n              july: 15,\n              august: 15,\n              september: 15,\n              october: 14,\n              november: 14,\n              december: 13,\n              january: 13,\n              february: 12,\n              march: 12\n            }\n          };\n\n          // データを更新\n          const updatedData = {\n            ...report,\n            monthly_data: defaultMonthlyData,\n            total_employees: report.total_employees || 520,\n            disabled_employees: report.disabled_employees || 15\n          };\n\n          // IDを削除して新規に作成する形で保存\n          if (updatedData.id) {\n            delete updatedData.id;\n          }\n          await paymentReportApi.savePaymentReport(year, updatedData);\n          console.log(`${year}年度のデータを修復しました`);\n        }\n      }\n      setLoading(false);\n      alert(\"すべての年度データを修復しました。画面をリロードします。\");\n      window.location.reload();\n    } catch (error) {\n      setLoading(false);\n      setError(\"データ修復中にエラーが発生しました\");\n      console.error(\"データ修復エラー:\", error);\n    }\n  };\n\n  // 簡素化されたサンプルデータ作成関数\n  const createSampleData = async () => {\n    try {\n      setLoading(true);\n\n      // 簡素化された2024年度のデータ\n      const data2024 = {\n        year: 2024,\n        fiscal_year: 2024,\n        // yearとfiscal_yearの両方を試す\n        total_employees: 520,\n        disabled_employees: 15,\n        employment_rate: 2.8,\n        legal_employment_rate: 2.3,\n        shortage_count: 0,\n        payment_amount: 0,\n        status: \"作成中\",\n        notes: \"2024年度の納付金レポート（サンプル）\"\n      };\n\n      // 最小限のフィールドだけでまず試す\n      await paymentReportApi.savePaymentReport(2024, data2024);\n      setLoading(false);\n      setShowSampleDataModal(false);\n      alert('サンプルデータを作成しました');\n\n      // 画面をリロードする\n      window.location.reload();\n    } catch (err) {\n      setLoading(false);\n      console.error('サンプルデータ作成エラー:', err);\n      alert('サンプルデータの作成に失敗しました');\n    }\n  };\n\n  // データを保存する関数\n  const handleSave = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      setSaveSuccess(false);\n      const year = getYearValue();\n\n      // APIに送信するデータを整形\n      const paymentReportData = {\n        year,\n        total_employees: Object.values(formData.totalRegularEmployees).reduce((a, b) => a + b, 0) / 12,\n        disabled_employees: Object.values(formData.disabledEmployees).reduce((a, b) => a + b, 0) / 12,\n        employment_rate: Object.values(formData.disabledEmployees).reduce((a, b) => a + b, 0) / Object.values(formData.totalRegularEmployees).reduce((a, b) => a + b, 0) * 100,\n        legal_employment_rate: formData.legalEmploymentRate,\n        shortage_count: Math.max(0, Math.floor(Object.values(formData.workerBaseCount).reduce((a, b) => a + b, 0) * formData.legalEmploymentRate / 100) - Object.values(formData.disabledEmployees).reduce((a, b) => a + b, 0)),\n        payment_amount: calculatePaymentAmount(),\n        notes: `${fiscalYear}の納付金レポート`,\n        company_data: JSON.stringify({\n          companyName: formData.companyName,\n          companyNameKana: formData.companyNameKana,\n          representativeTitle: formData.representativeTitle,\n          representativeName: formData.representativeName,\n          corporateNumber: formData.corporateNumber,\n          postalCode: formData.postalCode,\n          address: formData.address,\n          industryClassification: formData.industryClassification,\n          industryClassificationCode: formData.industryClassificationCode,\n          prefectureCode: formData.prefectureCode,\n          employmentOfficeCode: formData.employmentOfficeCode\n        }),\n        monthly_data: JSON.stringify({\n          totalRegularEmployees: formData.totalRegularEmployees,\n          workerBaseCount: formData.workerBaseCount,\n          disabledEmployees: formData.disabledEmployees,\n          shortTimeDisabledEmployees: formData.shortTimeDisabledEmployees\n        }),\n        bank_info: JSON.stringify({\n          bankName: formData.bankName,\n          branchName: formData.branchName,\n          accountType: formData.accountType,\n          accountNumber: formData.accountNumber,\n          accountHolder: formData.accountHolder,\n          bankCode: formData.bankCode,\n          branchCode: formData.branchCode\n        })\n      };\n\n      // 納付金レポートを保存\n      await paymentReportApi.savePaymentReport(year, paymentReportData);\n      setLoading(false);\n      setSaveSuccess(true);\n\n      // 3秒後に成功メッセージを消す\n      setTimeout(() => {\n        setSaveSuccess(false);\n      }, 3000);\n    } catch (err) {\n      setLoading(false);\n      setError(err instanceof Error ? err.message : '納付金レポートの保存に失敗しました');\n      console.error('納付金レポートの保存エラー:', err);\n    }\n  };\n\n  // PDF 出力ボタンのハンドラー\n  const handlePdfExport = () => {\n    try {\n      setLoading(true);\n      const doc = new jsPDF();\n\n      // ヘッダー情報を追加\n      doc.setFontSize(16);\n      doc.text('障害者雇用納付金申告書', 105, 15, {\n        align: 'center'\n      });\n      doc.setFontSize(12);\n      doc.text(`対象年度: ${fiscalYear}`, 105, 25, {\n        align: 'center'\n      });\n\n      // 会社情報を追加\n      doc.setFontSize(10);\n      doc.text(`法人名: ${formData.companyName}`, 14, 35);\n      doc.text(`代表者: ${formData.representativeName}`, 14, 42);\n      doc.text(`住所: ${formData.address}`, 14, 49);\n\n      // 月別データの表を追加\n      const monthJp = ['4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月', '1月', '2月', '3月'];\n      const monthEn = ['april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december', 'january', 'february', 'march'];\n      const tableData = monthJp.map((month, idx) => {\n        const key = monthEn[idx];\n        const employees = formData.totalRegularEmployees[key] || 0;\n        const disabled = formData.disabledEmployees[key] || 0;\n        const rate = employees > 0 ? (disabled / employees * 100).toFixed(2) : '0.00';\n        return [month, employees.toString(), disabled.toString(), `${rate}%`];\n      });\n\n      // 月別データテーブル\n      doc.text('月別データ', 14, 60);\n      doc.autoTable({\n        startY: 65,\n        head: [['月', '常用労働者数', '障がい者雇用者数', '実雇用率']],\n        body: tableData,\n        theme: 'grid',\n        headStyles: {\n          fillColor: [66, 119, 229],\n          textColor: 255\n        },\n        styles: {\n          fontSize: 8\n        }\n      });\n\n      // 納付金計算結果\n      const totalEmployees = Object.values(formData.totalRegularEmployees).reduce((a, b) => a + b, 0) / 12;\n      const totalDisabled = Object.values(formData.disabledEmployees).reduce((a, b) => a + b, 0) / 12;\n      const employmentRate = (totalDisabled / totalEmployees * 100).toFixed(2);\n      const paymentAmount = calculatePaymentAmount();\n      const tableY = doc.lastAutoTable.finalY + 10;\n      doc.text('納付金計算結果', 14, tableY);\n      doc.autoTable({\n        startY: tableY + 5,\n        body: [['平均常用労働者数', `${Math.round(totalEmployees)}人`], ['平均障がい者雇用者数', `${Math.round(totalDisabled)}人`], ['実雇用率', `${employmentRate}%`], ['法定雇用率', `${formData.legalEmploymentRate}%`], ['納付金額', `${paymentAmount.toLocaleString()}円`]],\n        theme: 'plain',\n        styles: {\n          fontSize: 9\n        },\n        columnStyles: {\n          0: {\n            cellWidth: 80\n          },\n          1: {\n            cellWidth: 50\n          }\n        }\n      });\n\n      // 銀行情報\n      const bankTableY = doc.lastAutoTable.finalY + 10;\n      doc.text('振込先銀行口座情報', 14, bankTableY);\n      doc.autoTable({\n        startY: bankTableY + 5,\n        body: [['銀行名', formData.bankName], ['支店名', formData.branchName], ['口座種別', formData.accountType], ['口座番号', formData.accountNumber], ['口座名義', formData.accountHolder]],\n        theme: 'plain',\n        styles: {\n          fontSize: 9\n        },\n        columnStyles: {\n          0: {\n            cellWidth: 80\n          },\n          1: {\n            cellWidth: 50\n          }\n        }\n      });\n\n      // PDF をダウンロード\n      doc.save(`納付金申告書_${fiscalYear}.pdf`);\n      setLoading(false);\n    } catch (err) {\n      setLoading(false);\n      setError('PDF出力中にエラーが発生しました');\n      console.error('PDF出力エラー:', err);\n    }\n  };\n\n  // 納付金申告処理を実行する関数（ステータス関連の不要機能を削除）\n  const handleSubmit = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // まずは通常の保存処理を実行\n      await handleSave();\n\n      // ここで申告処理の実行（PDFダウンロードやメール送信など）\n      alert('納付金申告処理が完了しました。納付金申告書がダウンロードされます。');\n\n      // PDF出力処理を実行\n      handlePdfExport();\n      setLoading(false);\n    } catch (err) {\n      setLoading(false);\n      setError(err instanceof Error ? err.message : '納付金の申告処理に失敗しました');\n      console.error('納付金申告処理エラー:', err);\n    }\n  };\n\n  // 納付金額を計算する関数\n  const calculatePaymentAmount = () => {\n    // 法定雇用障害者数の年間合計\n    const totalLegalEmployment = Math.floor(Object.values(formData.workerBaseCount).reduce((a, b) => a + b, 0) * formData.legalEmploymentRate / 100);\n\n    // 障害者雇用数の年間合計\n    const totalDisabledEmployees = Object.values(formData.disabledEmployees).reduce((a, b) => a + b, 0);\n\n    // 不足している場合のみ納付金が発生\n    const shortage = Math.max(0, totalLegalEmployment - totalDisabledEmployees);\n    const paymentA = shortage * formData.paymentPerPerson;\n\n    // 在宅就業障害者特例調整金の計算\n    const count = Math.floor(formData.homeWorkingPaymentTotal / formData.homeWorkingDivisor);\n    const paymentB = Math.min(count * formData.homeWorkingAdjustmentRate, totalDisabledEmployees * formData.homeWorkingAdjustmentRate);\n\n    // 納付金額 = A - B（ただし0未満にはならない）\n    return Math.max(0, paymentA - paymentB);\n  };\n\n  // サンプルデータ作成モーダルを開く\n  const openSampleDataModal = () => {\n    setShowSampleDataModal(true);\n  };\n\n  // サンプルデータ作成モーダルを閉じる\n  const closeSampleDataModal = () => {\n    setShowSampleDataModal(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-bold mb-4\",\n      children: [\"\\u7D0D\\u4ED8\\u91D1\\u60C5\\u5831 (\", fiscalYear, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 871,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center py-4\",\n      children: \"\\u30C7\\u30FC\\u30BF\\u3092\\u8AAD\\u307F\\u8FBC\\u307F\\u4E2D...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 873,\n      columnNumber: 19\n    }, this), error && !showCreateOption && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 877,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 876,\n      columnNumber: 9\n    }, this), showCreateOption && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-blue-100 border border-blue-400 text-blue-700 px-4 py-3 rounded mb-4 flex justify-between items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u3053\\u306E\\u30C7\\u30FC\\u30BF\\u306F\\u5B58\\u5728\\u3057\\u307E\\u305B\\u3093\\u3002\\u65B0\\u898F\\u4F5C\\u6210\\u3057\\u307E\\u3059\\u304B\\uFF1F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 883,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded\",\n        onClick: handleCreateNewReport,\n        children: \"\\u65B0\\u898F\\u4F5C\\u6210\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 884,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 882,\n      columnNumber: 9\n    }, this), saveSuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u7D0D\\u4ED8\\u91D1\\u30EC\\u30DD\\u30FC\\u30C8\\u3092\\u4FDD\\u5B58\\u3057\\u307E\\u3057\\u305F\\u3002\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 895,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 894,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white p-6 rounded shadow\",\n      children: [/*#__PURE__*/_jsxDEV(PaymentInfoForm, {\n        formData: formData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 901,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PaymentMonthlyData, {\n        formData: formData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 904,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PaymentCalculation, {\n        formData: formData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 907,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-end gap-4 mt-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded\",\n          onClick: handleCreateNewReport,\n          children: \"\\u65B0\\u898F\\u30C7\\u30FC\\u30BF\\u4F5C\\u6210\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 911,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded\",\n          onClick: openSampleDataModal,\n          disabled: loading,\n          children: \"\\u30B5\\u30F3\\u30D7\\u30EB\\u30C7\\u30FC\\u30BF\\u4F5C\\u6210\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 917,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded\",\n          onClick: repairDatabase,\n          disabled: loading,\n          children: \"\\u30C7\\u30FC\\u30BF\\u30D9\\u30FC\\u30B9\\u4FEE\\u5FA9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 924,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bg-orange-600 hover:bg-orange-700 text-white px-4 py-2 rounded\",\n          onClick: repairAllYearData,\n          disabled: loading,\n          children: \"\\u5168\\u5E74\\u5EA6\\u30C7\\u30FC\\u30BF\\u4FEE\\u5FA9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 931,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded\",\n          onClick: handleSave,\n          disabled: loading,\n          children: \"\\u4FDD\\u5B58\\u3059\\u308B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 938,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded\",\n          onClick: handlePdfExport,\n          disabled: loading,\n          children: \"PDF\\u3067\\u51FA\\u529B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 945,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded\",\n          onClick: handleSubmit,\n          disabled: loading,\n          children: \"\\u7533\\u544A\\u3059\\u308B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 952,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 910,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 899,\n      columnNumber: 7\n    }, this), showSampleDataModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-6 rounded-lg shadow-lg max-w-md w-full\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg font-bold mb-4\",\n          children: \"\\u30B5\\u30F3\\u30D7\\u30EB\\u30C7\\u30FC\\u30BF\\u306E\\u4F5C\\u6210\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 966,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mb-2\",\n            children: \"2024\\u5E74\\u5EA6\\u306E\\u7C21\\u7D20\\u5316\\u3055\\u308C\\u305F\\u30B5\\u30F3\\u30D7\\u30EB\\u30C7\\u30FC\\u30BF\\u3092\\u4F5C\\u6210\\u3057\\u307E\\u3059\\u3002\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 968,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u65E2\\u5B58\\u306E\\u30C7\\u30FC\\u30BF\\u304C\\u3042\\u308B\\u5834\\u5408\\u3001\\u4E0A\\u66F8\\u304D\\u3055\\u308C\\u307E\\u3059\\u3002\\u3088\\u308D\\u3057\\u3044\\u3067\\u3059\\u304B\\uFF1F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 969,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 967,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-end gap-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded\",\n            onClick: closeSampleDataModal,\n            children: \"\\u30AD\\u30E3\\u30F3\\u30BB\\u30EB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 972,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded\",\n            onClick: createSampleData,\n            disabled: loading,\n            children: loading ? '処理中...' : '作成する'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 978,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 971,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 965,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 964,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 870,\n    columnNumber: 5\n  }, this);\n};\n_s(PaymentInfoTab, \"ua4Qbv2pc9lWKTv11bVU6oF9MD4=\");\n_c = PaymentInfoTab;\nexport default PaymentInfoTab;\nvar _c;\n$RefreshReg$(_c, \"PaymentInfoTab\");","map":{"version":3,"names":["React","useState","useEffect","PaymentInfoForm","PaymentCalculation","PaymentMonthlyData","paymentReportApi","jsPDF","jsxDEV","_jsxDEV","PaymentInfoTab","fiscalYear","reportData","_s","formData","setFormData","year","companyName","companyNameKana","representativeTitle","representativeName","corporateNumber","postalCode","address","industryClassification","industryClassificationCode","prefectureCode","employmentOfficeCode","totalRegularEmployees","april","may","june","july","august","september","october","november","december","january","february","march","workerBaseCount","disabledEmployees","shortTimeDisabledEmployees","legalEmploymentRate","paymentPerPerson","adjustmentPaymentPerPerson","homeWorkingAdjustmentRate","specialPaymentPerPerson","homeWorkingPaymentTotal","homeWorkingDivisor","bankName","branchName","accountType","accountNumber","accountHolder","bankCode","branchCode","loading","setLoading","error","setError","saveSuccess","setSaveSuccess","showCreateOption","setShowCreateOption","showSampleDataModal","setShowSampleDataModal","getYearValue","includes","parseInt","replace","Date","getFullYear","console","log","prevData","fetchData","updateFormDataFromApiResponse","report","getPaymentReport","fetchError","message","err","Error","apiData","companyData","company_data","JSON","parse","company_name","company_address","representative_name","monthlyData","monthly_data","parsedData","average_employee_count","actual_employment_count","avgEmployees","avgDisabled","months","newTotalEmployees","newDisabledEmployees","forEach","month","bankInfo","bank_info","handleCreateNewReport","initialData","total_employees","disabled_employees","employment_rate","legal_employment_rate","shortage_count","payment_amount","notes","stringify","result","savePaymentReport","alert","window","location","reload","repairDatabase","confirmRepair","confirm","allReports","getAllPaymentReports","years","repairResults","fixedData","fiscal_year","defaultMonthlyData","id","push","newData","status","saveError","join","repairAllYearData","hasMonthlyData","updatedData","createSampleData","data2024","handleSave","paymentReportData","Object","values","reduce","a","b","Math","max","floor","calculatePaymentAmount","setTimeout","handlePdfExport","doc","setFontSize","text","align","monthJp","monthEn","tableData","map","idx","key","employees","disabled","rate","toFixed","toString","autoTable","startY","head","body","theme","headStyles","fillColor","textColor","styles","fontSize","totalEmployees","totalDisabled","employmentRate","paymentAmount","tableY","lastAutoTable","finalY","round","toLocaleString","columnStyles","cellWidth","bankTableY","save","handleSubmit","totalLegalEmployment","totalDisabledEmployees","shortage","paymentA","count","paymentB","min","openSampleDataModal","closeSampleDataModal","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/gotouhiroaki/Programming/DAN_work/disability-employment-system/frontend/src/components/PaymentReport/PaymentInfoTab.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PaymentInfoForm from './PaymentInfoForm';\nimport PaymentCalculation from './PaymentCalculation';\nimport PaymentMonthlyData from './PaymentMonthlyData';\nimport { paymentReportApi } from '../../api/paymentReportApi';\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\n\ninterface PaymentInfoTabProps {\n  fiscalYear: string;\n  reportData?: any;\n}\n\n// フォームデータの型定義\ninterface FormDataType {\n  year: string;\n  companyName: string;\n  companyNameKana: string;\n  representativeTitle: string;\n  representativeName: string;\n  corporateNumber: string;\n  postalCode: string;\n  address: string;\n  industryClassification: string;\n  industryClassificationCode: string;\n  prefectureCode: string;\n  employmentOfficeCode: string;\n  \n  // 月次雇用データ\n  totalRegularEmployees: {\n    [key: string]: number;\n  };\n  \n  workerBaseCount: {\n    [key: string]: number;\n  };\n  \n  disabledEmployees: {\n    [key: string]: number;\n  };\n  \n  shortTimeDisabledEmployees: {\n    [key: string]: number;\n  };\n  \n  // 納付金計算関連データ\n  legalEmploymentRate: number;\n  paymentPerPerson: number;\n  adjustmentPaymentPerPerson: number;\n  homeWorkingAdjustmentRate: number;\n  specialPaymentPerPerson: number;\n  \n  // 在宅就業障害者特例調整金関連\n  homeWorkingPaymentTotal: number;\n  homeWorkingDivisor: number;\n  \n  // 銀行口座情報\n  bankName: string;\n  branchName: string;\n  accountType: string;\n  accountNumber: string;\n  accountHolder: string;\n  bankCode: string;\n  branchCode: string;\n}\n\nconst PaymentInfoTab: React.FC<PaymentInfoTabProps> = ({ fiscalYear, reportData }) => {\n  const [formData, setFormData] = useState<FormDataType>({\n    year: fiscalYear || '令和7',\n    companyName: '株式会社サンプル',\n    companyNameKana: 'カブシキガイシャサンプル',\n    representativeTitle: '代表取締役',\n    representativeName: '山田太郎',\n    corporateNumber: '1234567890123',\n    postalCode: '100-0001',\n    address: '東京都千代田区千代田1-1-1',\n    industryClassification: '製造業',\n    industryClassificationCode: '26',\n    prefectureCode: '13',\n    employmentOfficeCode: '101',\n    \n    // 月次雇用データ\n    totalRegularEmployees: {\n      april: 120, may: 120, june: 121, july: 121, august: 121,\n      september: 122, october: 122, november: 123, december: 123,\n      january: 123, february: 123, march: 123\n    },\n    \n    workerBaseCount: {\n      april: 118, may: 118, june: 119, july: 119, august: 119,\n      september: 120, october: 120, november: 121, december: 121,\n      january: 121, february: 121, march: 121\n    },\n    \n    disabledEmployees: {\n      april: 3, may: 3, june: 3, july: 3, august: 3,\n      september: 4, october: 4, november: 4, december: 4,\n      january: 4, february: 4, march: 4\n    },\n    \n    shortTimeDisabledEmployees: {\n      april: 1, may: 1, june: 1, july: 1, august: 1,\n      september: 1, october: 1, november: 1, december: 1,\n      january: 1, february: 1, march: 1\n    },\n    \n    // 納付金計算関連データ\n    legalEmploymentRate: 2.3,\n    paymentPerPerson: 50000,\n    adjustmentPaymentPerPerson: 29000,\n    homeWorkingAdjustmentRate: 21000,\n    specialPaymentPerPerson: 7000,\n    \n    // 在宅就業障害者特例調整金関連\n    homeWorkingPaymentTotal: 350000,\n    homeWorkingDivisor: 35000,\n    \n    // 銀行口座情報\n    bankName: 'サンプル銀行',\n    branchName: '本店',\n    accountType: '普通',\n    accountNumber: '1234567',\n    accountHolder: 'カ) サンプル',\n    bankCode: '0123',\n    branchCode: '456'\n  });\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [saveSuccess, setSaveSuccess] = useState(false);\n  const [showCreateOption, setShowCreateOption] = useState(false);\n  const [showSampleDataModal, setShowSampleDataModal] = useState(false);\n\n  // 年度数値を取得する\n  const getYearValue = () => {\n    if (fiscalYear.includes('年度')) {\n      return parseInt(fiscalYear.replace('年度', ''));\n    }\n    return new Date().getFullYear();\n  };\n\n  // APIからデータを取得\n  useEffect(() => {\n    console.log(`PaymentInfoTab: fiscalYear変更検知 ${fiscalYear}, reportData:`, reportData);\n    // formDataのyear部分を更新\n    setFormData(prevData => ({\n      ...prevData,\n      year: fiscalYear\n    }));\n    \n    fetchData();\n  }, [fiscalYear, reportData]);\n\n  // データ取得関数\n  const fetchData = async () => {\n    // reportDataが提供されている場合はそちらを使用\n    if (reportData) {\n      try {\n        console.log(`${fiscalYear}のデータを処理します:`, reportData);\n        \n        // APIレスポンスデータを元にフォームデータを更新\n        updateFormDataFromApiResponse(reportData);\n        \n        setShowCreateOption(false);\n        return;\n      } catch (error) {\n        console.error('親コンポーネントのデータ処理エラー:', error);\n      }\n    }\n    \n    // reportDataがない場合はAPIから取得\n    try {\n      setLoading(true);\n      setError(null);\n      setShowCreateOption(false);\n      \n      const year = getYearValue();\n      \n      try {\n        // 既存レポートの取得を試みる\n        const report = await paymentReportApi.getPaymentReport(year);\n        \n        // レポートが取得できた場合の処理\n        if (report) {\n          console.log(`${year}年度のデータを取得:`, report);\n          \n          // APIから取得したデータを処理する\n          updateFormDataFromApiResponse(report);\n        }\n        \n      } catch (error) {\n        // まずはエラーの型チェック\n        const fetchError = error as Error;\n        \n        if (fetchError.message && fetchError.message.includes('見つかりません')) {\n          // 404エラーの場合は、新規作成のオプションを提供\n          setError(`${year}年度のデータが見つかりません。新規作成することができます。`);\n          setShowCreateOption(true);\n        } else {\n          throw error; // その他のエラーは再スロー\n        }\n      }\n      \n      setLoading(false);\n    } catch (err) {\n      setLoading(false);\n      setError(err instanceof Error ? err.message : '納付金レポートデータの取得に失敗しました');\n      console.error('納付金レポートデータの取得エラー:', err);\n    }\n  };\n\n  // APIレスポンスからフォームデータを更新する関数\n  const updateFormDataFromApiResponse = (apiData: any) => {\n    // 会社情報を取得\n    interface CompanyData {\n      companyName?: string;\n      companyNameKana?: string;\n      representativeTitle?: string;\n      representativeName?: string;\n      corporateNumber?: string;\n      postalCode?: string;\n      address?: string;\n      industryClassification?: string;\n      industryClassificationCode?: string;\n      prefectureCode?: string;\n      employmentOfficeCode?: string;\n      [key: string]: any;\n    }\n    \n    let companyData: CompanyData = {};\n    if (apiData.company_data) {\n      try {\n        // APIレスポンスのcompany_dataがある場合\n        companyData = typeof apiData.company_data === 'string'\n          ? JSON.parse(apiData.company_data)\n          : apiData.company_data;\n      } catch (error) {\n        console.error('会社データのパースエラー:', error);\n      }\n    } else {\n      // APIレスポンスにcompany_dataがない場合、フラットな構造から情報を取得\n      companyData = {\n        companyName: apiData.company_name || '',\n        address: apiData.company_address || '',\n        representativeName: apiData.representative_name || '',\n        // 他のフィールドも同様に\n      };\n    }\n    \n    // 月次データを取得\n    interface MonthlyData {\n      totalRegularEmployees?: { [key: string]: number };\n      workerBaseCount?: { [key: string]: number };\n      disabledEmployees?: { [key: string]: number };\n      shortTimeDisabledEmployees?: { [key: string]: number };\n      [key: string]: any;\n    }\n    \n    let monthlyData: MonthlyData = {\n      totalRegularEmployees: formData.totalRegularEmployees,\n      workerBaseCount: formData.workerBaseCount,\n      disabledEmployees: formData.disabledEmployees,\n      shortTimeDisabledEmployees: formData.shortTimeDisabledEmployees\n    };\n    \n    if (apiData.monthly_data) {\n      try {\n        // APIレスポンスのmonthly_dataがある場合\n        const parsedData = typeof apiData.monthly_data === 'string'\n          ? JSON.parse(apiData.monthly_data)\n          : apiData.monthly_data;\n          \n        monthlyData = {\n          ...monthlyData,\n          ...parsedData\n        };\n      } catch (error) {\n        console.error('月次データのパースエラー:', error);\n      }\n    } else if (apiData.average_employee_count && apiData.actual_employment_count) {\n      // APIレスポンスにmonthly_dataがない場合、平均値から推定データを生成\n      const avgEmployees = apiData.average_employee_count;\n      const avgDisabled = apiData.actual_employment_count;\n      \n      // すべての月で同じ値を使用\n      const months = ['april', 'may', 'june', 'july', 'august', 'september', \n                      'october', 'november', 'december', 'january', 'february', 'march'];\n      \n      const newTotalEmployees: { [key: string]: number } = {};\n      const newDisabledEmployees: { [key: string]: number } = {};\n      \n      months.forEach(month => {\n        newTotalEmployees[month] = avgEmployees;\n        newDisabledEmployees[month] = avgDisabled;\n      });\n      \n      monthlyData = {\n        ...monthlyData,\n        totalRegularEmployees: newTotalEmployees,\n        disabledEmployees: newDisabledEmployees\n      };\n    }\n    \n    // 銀行情報を取得\n    interface BankInfo {\n      bankName?: string;\n      branchName?: string;\n      accountType?: string;\n      accountNumber?: string;\n      accountHolder?: string;\n      bankCode?: string;\n      branchCode?: string;\n      [key: string]: any;\n    }\n    \n    let bankInfo: BankInfo = {};\n    if (apiData.bank_info) {\n      try {\n        bankInfo = typeof apiData.bank_info === 'string'\n          ? JSON.parse(apiData.bank_info)\n          : apiData.bank_info;\n      } catch (error) {\n        console.error('銀行情報のパースエラー:', error);\n      }\n    }\n    \n    // フォームデータを更新\n    setFormData(prevData => ({\n      ...prevData,\n      year: fiscalYear,\n      // 会社情報\n      companyName: (companyData as CompanyData).companyName || apiData.company_name || prevData.companyName,\n      companyNameKana: (companyData as CompanyData).companyNameKana || prevData.companyNameKana,\n      representativeTitle: (companyData as CompanyData).representativeTitle || prevData.representativeTitle,\n      representativeName: (companyData as CompanyData).representativeName || apiData.representative_name || prevData.representativeName,\n      corporateNumber: (companyData as CompanyData).corporateNumber || prevData.corporateNumber,\n      postalCode: (companyData as CompanyData).postalCode || prevData.postalCode,\n      address: (companyData as CompanyData).address || apiData.company_address || prevData.address,\n      industryClassification: (companyData as CompanyData).industryClassification || prevData.industryClassification,\n      industryClassificationCode: (companyData as CompanyData).industryClassificationCode || prevData.industryClassificationCode,\n      prefectureCode: (companyData as CompanyData).prefectureCode || prevData.prefectureCode,\n      employmentOfficeCode: (companyData as CompanyData).employmentOfficeCode || prevData.employmentOfficeCode,\n      \n      // 月次データ\n      totalRegularEmployees: (monthlyData as MonthlyData).totalRegularEmployees || prevData.totalRegularEmployees,\n      workerBaseCount: (monthlyData as MonthlyData).workerBaseCount || prevData.workerBaseCount,\n      disabledEmployees: (monthlyData as MonthlyData).disabledEmployees || prevData.disabledEmployees,\n      shortTimeDisabledEmployees: (monthlyData as MonthlyData).shortTimeDisabledEmployees || prevData.shortTimeDisabledEmployees,\n      \n      // 銀行情報\n      bankName: (bankInfo as BankInfo).bankName || prevData.bankName,\n      branchName: (bankInfo as BankInfo).branchName || prevData.branchName,\n      accountType: (bankInfo as BankInfo).accountType || prevData.accountType,\n      accountNumber: (bankInfo as BankInfo).accountNumber || prevData.accountNumber,\n      accountHolder: (bankInfo as BankInfo).accountHolder || prevData.accountHolder,\n      bankCode: (bankInfo as BankInfo).bankCode || prevData.bankCode,\n      branchCode: (bankInfo as BankInfo).branchCode || prevData.branchCode,\n    }));\n  };\n\n  // 新規作成ハンドラー\n  const handleCreateNewReport = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const year = getYearValue();\n      \n      // 新規レポートの基本データ\n      const initialData = {\n        year,\n        total_employees: 520,\n        disabled_employees: 15,\n        employment_rate: 2.8,\n        legal_employment_rate: 2.3,\n        shortage_count: 0,\n        payment_amount: 0,\n        notes: `${year}年度の納付金レポート（新規作成）`,\n        company_data: JSON.stringify({\n          companyName: '株式会社サンプル',\n          companyNameKana: 'カブシキガイシャサンプル',\n          representativeTitle: '代表取締役',\n          representativeName: '山田太郎',\n          corporateNumber: '1234567890123',\n          postalCode: '100-0001',\n          address: '東京都千代田区千代田1-1-1',\n          industryClassification: '製造業',\n          industryClassificationCode: '26',\n          prefectureCode: '13',\n          employmentOfficeCode: '101',\n        }),\n        monthly_data: JSON.stringify({\n          totalRegularEmployees: {\n            april: 510, may: 515, june: 520, july: 523, august: 525,\n            september: 530, october: 528, november: 527, december: 520,\n            january: 515, february: 510, march: 505\n          },\n          disabledEmployees: {\n            april: 13, may: 13, june: 14, july: 15, august: 15,\n            september: 15, october: 14, november: 14, december: 13,\n            january: 13, february: 12, march: 12\n          }\n        })\n      };\n      \n      // 新規レポートを保存\n      const result = await paymentReportApi.savePaymentReport(year, initialData);\n      \n      setLoading(false);\n      alert(`${year}年度の納付金レポートを新規作成しました`);\n      \n      // 画面をリロードする\n      window.location.reload();\n      \n    } catch (err) {\n      setLoading(false);\n      setError(err instanceof Error ? err.message : '納付金レポートの作成に失敗しました');\n      console.error('納付金レポートの作成エラー:', err);\n    }\n  };\n\n  // データベース修復処理\n  const repairDatabase = async () => {\n    const confirmRepair = window.confirm(\n      'データベースの修復を行います。これにより年度データの不整合が修正される可能性がありますが、一部のデータが初期化される場合もあります。続行しますか？'\n    );\n    \n    if (!confirmRepair) return;\n    \n    try {\n      setLoading(true);\n      setError(null);\n      \n      // 現在のデータを取得\n      const allReports = await paymentReportApi.getAllPaymentReports();\n      console.log('現在のレポート一覧:', allReports);\n      \n      const years = [2023, 2024, 2025];\n      const repairResults: string[] = [];\n      \n      // 各年度のデータをチェックして修復\n      for (const year of years) {\n        try {\n          // その年度のデータを取得\n          const reportData = await paymentReportApi.getPaymentReport(year);\n          console.log(`${year}年度のデータ:`, reportData);\n          \n          // データが存在するが壊れている場合は修復\n          if (reportData) {\n            const fixedData = {\n              ...reportData,\n              year: year,\n              fiscal_year: year\n            };\n            \n            // monthly_data が文字列でもオブジェクトでもない場合、初期データを設定\n            if (!reportData.monthly_data || (typeof reportData.monthly_data !== 'string' && typeof reportData.monthly_data !== 'object')) {\n              const defaultMonthlyData = {\n                totalRegularEmployees: {\n                  april: 510, may: 515, june: 520, july: 523, august: 525,\n                  september: 530, october: 528, november: 527, december: 520,\n                  january: 515, february: 510, march: 505\n                },\n                disabledEmployees: {\n                  april: 13, may: 13, june: 14, july: 15, august: 15,\n                  september: 15, october: 14, november: 14, december: 13,\n                  january: 13, february: 12, march: 12\n                }\n              };\n              \n              fixedData.monthly_data = defaultMonthlyData;\n            }\n            \n            // ID削除（新規作成にする）\n            if (fixedData.id) {\n              delete fixedData.id;\n            }\n            \n            // データを保存\n            await paymentReportApi.savePaymentReport(year, fixedData);\n            repairResults.push(`${year}年度のデータを修復しました`);\n            console.log(`${year}年度のデータを修復しました`);\n          }\n        } catch (error) {\n          // データが存在しない場合は新規作成\n          console.log(`${year}年度のデータが見つかりません。新規作成します。`);\n          \n          const newData = {\n            year: year,\n            fiscal_year: year,\n            total_employees: 510,\n            disabled_employees: 15,\n            employment_rate: 2.8,\n            legal_employment_rate: 2.3,\n            status: '作成中',\n            monthly_data: {\n              totalRegularEmployees: {\n                april: 510, may: 515, june: 520, july: 523, august: 525,\n                september: 530, october: 528, november: 527, december: 520,\n                january: 515, february: 510, march: 505\n              },\n              disabledEmployees: {\n                april: 13, may: 13, june: 14, july: 15, august: 15,\n                september: 15, october: 14, november: 14, december: 13,\n                january: 13, february: 12, march: 12\n              }\n            }\n          };\n          \n          try {\n            // ここで、yearはnumber型であることを確認してからAPIを呼び出す\n            await paymentReportApi.savePaymentReport(year, newData);\n            repairResults.push(`${year}年度のデータを新規作成しました`);\n            console.log(`${year}年度のデータを新規作成しました`);\n          } catch (saveError) {\n            repairResults.push(`${year}年度のデータ作成に失敗しました`);\n            console.error(`${year}年度のデータ作成に失敗しました:`, saveError);\n          }\n        }\n      }\n      \n      setLoading(false);\n      alert(`データベース修復結果:\\n${repairResults.join('\\n')}\\n\\nページをリロードします。`);\n      window.location.reload();\n      \n    } catch (error) {\n      setLoading(false);\n      setError('データベースの修復中にエラーが発生しました');\n      console.error('データベース修復エラー:', error);\n      alert('データベースの修復中にエラーが発生しました。');\n    }\n  };\n  \n  // すべての年度データを修復する処理\n  const repairAllYearData = async () => {\n    try {\n      setLoading(true);\n      \n      // すべての年度のデータを取得\n      const allReports = await paymentReportApi.getAllPaymentReports();\n      \n      for (const report of allReports) {\n        // 年度を取得\n        const year = report.fiscal_year || report.year;\n        \n        if (typeof year !== 'number') {\n          console.error('無効な年度形式:', year);\n          continue; // 無効な年度の場合はスキップ\n        }\n        \n        // 月次データの有無をチェック\n        const hasMonthlyData = \n          report.monthly_data && \n          (typeof report.monthly_data === 'string' || typeof report.monthly_data === 'object');\n        \n        // 月次データがない場合はデフォルト値を設定\n        if (!hasMonthlyData) {\n          const defaultMonthlyData = {\n            totalRegularEmployees: {\n              april: 510, may: 515, june: 520, july: 523, august: 525,\n              september: 530, october: 528, november: 527, december: 520,\n              january: 515, february: 510, march: 505\n            },\n            disabledEmployees: {\n              april: 13, may: 13, june: 14, july: 15, august: 15,\n              september: 15, october: 14, november: 14, december: 13,\n              january: 13, february: 12, march: 12\n            }\n          };\n          \n          // データを更新\n          const updatedData = {\n            ...report,\n            monthly_data: defaultMonthlyData,\n            total_employees: report.total_employees || 520,\n            disabled_employees: report.disabled_employees || 15\n          };\n          \n          // IDを削除して新規に作成する形で保存\n          if (updatedData.id) {\n            delete updatedData.id;\n          }\n          \n          await paymentReportApi.savePaymentReport(year, updatedData);\n          console.log(`${year}年度のデータを修復しました`);\n        }\n      }\n      \n      setLoading(false);\n      alert(\"すべての年度データを修復しました。画面をリロードします。\");\n      window.location.reload();\n      \n    } catch (error) {\n      setLoading(false);\n      setError(\"データ修復中にエラーが発生しました\");\n      console.error(\"データ修復エラー:\", error);\n    }\n  };\n\n  // 簡素化されたサンプルデータ作成関数\n  const createSampleData = async () => {\n    try {\n      setLoading(true);\n      \n      // 簡素化された2024年度のデータ\n      const data2024 = {\n        year: 2024,\n        fiscal_year: 2024, // yearとfiscal_yearの両方を試す\n        total_employees: 520,\n        disabled_employees: 15,\n        employment_rate: 2.8,\n        legal_employment_rate: 2.3,\n        shortage_count: 0,\n        payment_amount: 0,\n        status: \"作成中\",\n        notes: \"2024年度の納付金レポート（サンプル）\"\n      };\n      \n      // 最小限のフィールドだけでまず試す\n      await paymentReportApi.savePaymentReport(2024, data2024);\n      \n      setLoading(false);\n      setShowSampleDataModal(false);\n      alert('サンプルデータを作成しました');\n      \n      // 画面をリロードする\n      window.location.reload();\n    } catch (err) {\n      setLoading(false);\n      console.error('サンプルデータ作成エラー:', err);\n      alert('サンプルデータの作成に失敗しました');\n    }\n  };\n\n  // データを保存する関数\n  const handleSave = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      setSaveSuccess(false);\n      \n      const year = getYearValue();\n      \n      // APIに送信するデータを整形\n      const paymentReportData = {\n        year,\n        total_employees: Object.values(formData.totalRegularEmployees).reduce((a, b) => a + b, 0) / 12,\n        disabled_employees: Object.values(formData.disabledEmployees).reduce((a, b) => a + b, 0) / 12,\n        employment_rate: (Object.values(formData.disabledEmployees).reduce((a, b) => a + b, 0) / \n          Object.values(formData.totalRegularEmployees).reduce((a, b) => a + b, 0)) * 100,\n        legal_employment_rate: formData.legalEmploymentRate,\n        shortage_count: Math.max(0, \n          Math.floor((Object.values(formData.workerBaseCount).reduce((a, b) => a + b, 0) * formData.legalEmploymentRate / 100)) - \n          Object.values(formData.disabledEmployees).reduce((a, b) => a + b, 0)\n        ),\n        payment_amount: calculatePaymentAmount(),\n        notes: `${fiscalYear}の納付金レポート`,\n        company_data: JSON.stringify({\n          companyName: formData.companyName,\n          companyNameKana: formData.companyNameKana,\n          representativeTitle: formData.representativeTitle,\n          representativeName: formData.representativeName,\n          corporateNumber: formData.corporateNumber,\n          postalCode: formData.postalCode,\n          address: formData.address,\n          industryClassification: formData.industryClassification,\n          industryClassificationCode: formData.industryClassificationCode,\n          prefectureCode: formData.prefectureCode,\n          employmentOfficeCode: formData.employmentOfficeCode,\n        }),\n        monthly_data: JSON.stringify({\n          totalRegularEmployees: formData.totalRegularEmployees,\n          workerBaseCount: formData.workerBaseCount,\n          disabledEmployees: formData.disabledEmployees,\n          shortTimeDisabledEmployees: formData.shortTimeDisabledEmployees,\n        }),\n        bank_info: JSON.stringify({\n          bankName: formData.bankName,\n          branchName: formData.branchName,\n          accountType: formData.accountType,\n          accountNumber: formData.accountNumber,\n          accountHolder: formData.accountHolder,\n          bankCode: formData.bankCode,\n          branchCode: formData.branchCode,\n        })\n      };\n      \n      // 納付金レポートを保存\n      await paymentReportApi.savePaymentReport(year, paymentReportData);\n      \n      setLoading(false);\n      setSaveSuccess(true);\n      \n      // 3秒後に成功メッセージを消す\n      setTimeout(() => {\n        setSaveSuccess(false);\n      }, 3000);\n      \n    } catch (err) {\n      setLoading(false);\n      setError(err instanceof Error ? err.message : '納付金レポートの保存に失敗しました');\n      console.error('納付金レポートの保存エラー:', err);\n    }\n  };\n\n  // PDF 出力ボタンのハンドラー\n  const handlePdfExport = () => {\n    try {\n      setLoading(true);\n      const doc = new jsPDF();\n      \n      // ヘッダー情報を追加\n      doc.setFontSize(16);\n      doc.text('障害者雇用納付金申告書', 105, 15, { align: 'center' });\n      doc.setFontSize(12);\n      doc.text(`対象年度: ${fiscalYear}`, 105, 25, { align: 'center' });\n      \n      // 会社情報を追加\n      doc.setFontSize(10);\n      doc.text(`法人名: ${formData.companyName}`, 14, 35);\n      doc.text(`代表者: ${formData.representativeName}`, 14, 42);\n      doc.text(`住所: ${formData.address}`, 14, 49);\n      \n      // 月別データの表を追加\n      const monthJp = ['4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月', '1月', '2月', '3月'];\n      const monthEn = ['april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december', 'january', 'february', 'march'];\n      \n      const tableData = monthJp.map((month, idx) => {\n        const key = monthEn[idx];\n        const employees = formData.totalRegularEmployees[key] || 0;\n        const disabled = formData.disabledEmployees[key] || 0;\n        const rate = employees > 0 ? (disabled / employees * 100).toFixed(2) : '0.00';\n        \n        return [\n          month,\n          employees.toString(),\n          disabled.toString(),\n          `${rate}%`\n        ];\n      });\n      \n      // 月別データテーブル\n      doc.text('月別データ', 14, 60);\n      (doc as any).autoTable({\n        startY: 65,\n        head: [['月', '常用労働者数', '障がい者雇用者数', '実雇用率']],\n        body: tableData,\n        theme: 'grid',\n        headStyles: { fillColor: [66, 119, 229], textColor: 255 },\n        styles: { fontSize: 8 }\n      });\n      \n      // 納付金計算結果\n      const totalEmployees = Object.values(formData.totalRegularEmployees).reduce((a, b) => a + b, 0) / 12;\n      const totalDisabled = Object.values(formData.disabledEmployees).reduce((a, b) => a + b, 0) / 12;\n      const employmentRate = (totalDisabled / totalEmployees * 100).toFixed(2);\n      const paymentAmount = calculatePaymentAmount();\n      \n      const tableY = (doc as any).lastAutoTable.finalY + 10;\n      doc.text('納付金計算結果', 14, tableY);\n      \n      (doc as any).autoTable({\n        startY: tableY + 5,\n        body: [\n          ['平均常用労働者数', `${Math.round(totalEmployees)}人`],\n          ['平均障がい者雇用者数', `${Math.round(totalDisabled)}人`],\n          ['実雇用率', `${employmentRate}%`],\n          ['法定雇用率', `${formData.legalEmploymentRate}%`],\n          ['納付金額', `${paymentAmount.toLocaleString()}円`]\n        ],\n        theme: 'plain',\n        styles: { fontSize: 9 },\n        columnStyles: {\n          0: { cellWidth: 80 },\n          1: { cellWidth: 50 }\n        }\n      });\n      \n      // 銀行情報\n      const bankTableY = (doc as any).lastAutoTable.finalY + 10;\n      doc.text('振込先銀行口座情報', 14, bankTableY);\n      \n      (doc as any).autoTable({\n        startY: bankTableY + 5,\n        body: [\n          ['銀行名', formData.bankName],\n          ['支店名', formData.branchName],\n          ['口座種別', formData.accountType],\n          ['口座番号', formData.accountNumber],\n          ['口座名義', formData.accountHolder]\n        ],\n        theme: 'plain',\n        styles: { fontSize: 9 },\n        columnStyles: {\n          0: { cellWidth: 80 },\n          1: { cellWidth: 50 }\n        }\n      });\n      \n      // PDF をダウンロード\n      doc.save(`納付金申告書_${fiscalYear}.pdf`);\n      setLoading(false);\n    } catch (err) {\n      setLoading(false);\n      setError('PDF出力中にエラーが発生しました');\n      console.error('PDF出力エラー:', err);\n    }\n  };\n\n  // 納付金申告処理を実行する関数（ステータス関連の不要機能を削除）\n  const handleSubmit = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // まずは通常の保存処理を実行\n      await handleSave();\n      \n      // ここで申告処理の実行（PDFダウンロードやメール送信など）\n      alert('納付金申告処理が完了しました。納付金申告書がダウンロードされます。');\n      \n      // PDF出力処理を実行\n      handlePdfExport();\n      \n      setLoading(false);\n    } catch (err) {\n      setLoading(false);\n      setError(err instanceof Error ? err.message : '納付金の申告処理に失敗しました');\n      console.error('納付金申告処理エラー:', err);\n    }\n  };\n\n  // 納付金額を計算する関数\n  const calculatePaymentAmount = () => {\n    // 法定雇用障害者数の年間合計\n    const totalLegalEmployment = Math.floor(\n      Object.values(formData.workerBaseCount).reduce((a, b) => a + b, 0) * \n      formData.legalEmploymentRate / 100\n    );\n    \n    // 障害者雇用数の年間合計\n    const totalDisabledEmployees = Object.values(formData.disabledEmployees).reduce((a, b) => a + b, 0);\n    \n    // 不足している場合のみ納付金が発生\n    const shortage = Math.max(0, totalLegalEmployment - totalDisabledEmployees);\n    const paymentA = shortage * formData.paymentPerPerson;\n    \n    // 在宅就業障害者特例調整金の計算\n    const count = Math.floor(formData.homeWorkingPaymentTotal / formData.homeWorkingDivisor);\n    const paymentB = Math.min(\n      count * formData.homeWorkingAdjustmentRate,\n      totalDisabledEmployees * formData.homeWorkingAdjustmentRate\n    );\n    \n    // 納付金額 = A - B（ただし0未満にはならない）\n    return Math.max(0, paymentA - paymentB);\n  };\n\n  // サンプルデータ作成モーダルを開く\n  const openSampleDataModal = () => {\n    setShowSampleDataModal(true);\n  };\n\n  // サンプルデータ作成モーダルを閉じる\n  const closeSampleDataModal = () => {\n    setShowSampleDataModal(false);\n  };\n\n  return (\n    <div className=\"p-4\">\n      <h2 className=\"text-xl font-bold mb-4\">納付金情報 ({fiscalYear})</h2>\n      \n      {loading && <div className=\"text-center py-4\">データを読み込み中...</div>}\n      \n      {error && !showCreateOption && (\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4\">\n          <p>{error}</p>\n        </div>\n      )}\n      \n      {showCreateOption && (\n        <div className=\"bg-blue-100 border border-blue-400 text-blue-700 px-4 py-3 rounded mb-4 flex justify-between items-center\">\n          <p>このデータは存在しません。新規作成しますか？</p>\n          <button \n            className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded\"\n            onClick={handleCreateNewReport}\n          >\n            新規作成\n          </button>\n        </div>\n      )}\n      \n      {saveSuccess && (\n        <div className=\"bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4\">\n          <p>納付金レポートを保存しました。</p>\n        </div>\n      )}\n      \n      <div className=\"bg-white p-6 rounded shadow\">\n        {/* 事業主情報 */}\n        <PaymentInfoForm formData={formData} />\n        \n        {/* 月別データ */}\n        <PaymentMonthlyData formData={formData} />\n        \n        {/* 納付金計算 */}\n        <PaymentCalculation formData={formData} />\n        \n        {/* 操作ボタン類 */}\n        <div className=\"flex justify-end gap-4 mt-6\">\n          <button \n            className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded\"\n            onClick={handleCreateNewReport}\n          >\n            新規データ作成\n          </button>\n          <button \n            className=\"bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded\"\n            onClick={openSampleDataModal}\n            disabled={loading}\n          >\n            サンプルデータ作成\n          </button>\n          <button \n            className=\"bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded\"\n            onClick={repairDatabase}\n            disabled={loading}\n          >\n            データベース修復\n          </button>\n          <button \n            className=\"bg-orange-600 hover:bg-orange-700 text-white px-4 py-2 rounded\"\n            onClick={repairAllYearData}\n            disabled={loading}\n          >\n            全年度データ修復\n          </button>\n          <button \n            className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded\"\n            onClick={handleSave}\n            disabled={loading}\n          >\n            保存する\n          </button>\n          <button \n            className=\"bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded\"\n            onClick={handlePdfExport}\n            disabled={loading}\n          >\n            PDFで出力\n          </button>\n          <button \n            className=\"bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded\"\n            onClick={handleSubmit}\n            disabled={loading}\n          >\n            申告する\n          </button>\n        </div>\n      </div>\n      \n      {/* サンプルデータ作成確認ダイアログ */}\n      {showSampleDataModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white p-6 rounded-lg shadow-lg max-w-md w-full\">\n            <h3 className=\"text-lg font-bold mb-4\">サンプルデータの作成</h3>\n            <div className=\"mb-4\">\n              <p className=\"mb-2\">2024年度の簡素化されたサンプルデータを作成します。</p>\n              <p>既存のデータがある場合、上書きされます。よろしいですか？</p>\n            </div>\n            <div className=\"flex justify-end gap-2\">\n              <button\n                className=\"bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded\"\n                onClick={closeSampleDataModal}\n              >\n                キャンセル\n              </button>\n              <button\n                className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded\"\n                onClick={createSampleData}\n                disabled={loading}\n              >\n                {loading ? '処理中...' : '作成する'}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PaymentInfoTab;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}