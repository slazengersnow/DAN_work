{"ast":null,"code":"var _jsxFileName = \"/Users/gotouhiroaki/Programming/DAN_work/disability-employment-system/frontend/src/components/PaymentReport/MonthlyDataTab.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { paymentReportApi } from '../../api/paymentReportApi';\nimport { settingsApi } from '../../api/settingsApi'; // 設定APIをインポート\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// インポートモーダルコンポーネント\nconst MonthlyDataImport = ({\n  onImportComplete,\n  onClose,\n  currentYear\n}) => {\n  _s();\n  const [importing, setImporting] = useState(false);\n  const [importError, setImportError] = useState(null);\n\n  // テンプレートダウンロード処理\n  const handleDownloadTemplate = async () => {\n    try {\n      // CSVテンプレートの内容（BOM付きUTF-8でエンコード）\n      const BOM = new Uint8Array([0xEF, 0xBB, 0xBF]);\n\n      // より明確で堅牢なCSVテンプレート形式\n      const templateContent = `年度,${currentYear},,,,,,,,,,,,\n月,4月,5月,6月,7月,8月,9月,10月,11月,12月,1月,2月,3月,\n常用労働者数,510,515,520,523,525,530,528,527,520,515,510,505,\n障がい者雇用者数,13,13,14,15,15,15,14,14,13,13,12,12,`;\n\n      // CSVファイルを作成（BOMを追加してUTF-8エンコーディングを明示）\n      const blob = new Blob([BOM, templateContent], {\n        type: 'text/csv;charset=utf-8;'\n      });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.setAttribute('href', url);\n      link.setAttribute('download', `monthly_data_template_${currentYear}.csv`);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      console.log('月別データテンプレートをダウンロードしました');\n\n      // テンプレートの使い方を説明するアラート\n      alert('CSVテンプレートをダウンロードしました。\\n\\n' + '【使い方】\\n' + '1. ファイルをExcelなどで開く\\n' + '2. 年度の数字を必要に応じて変更（例: 2023, 2024, 2025など）\\n' + '3. 各月の常用労働者数と障がい者雇用者数を入力\\n' + '4. 【重要】CSVとして保存する（文字コードはUTF-8を選択）\\n' + '5. 「CSVファイルを選択」ボタンからインポート\\n\\n' + '※ファイル形式は変更しないでください。月や行の見出しは変更しないでください。');\n    } catch (error) {\n      console.error('テンプレートダウンロードエラー:', error);\n      alert('テンプレートのダウンロード中にエラーが発生しました');\n    }\n  };\n\n  // CSVファイル選択処理\n  const handleFileSelect = () => {\n    const fileInput = document.createElement('input');\n    fileInput.type = 'file';\n    fileInput.accept = '.csv';\n    fileInput.onchange = async e => {\n      var _files;\n      const file = (_files = e.target.files) === null || _files === void 0 ? void 0 : _files[0];\n      if (file) {\n        try {\n          setImporting(true);\n          setImportError(null);\n\n          // FileReader でファイルを読み込む\n          const reader = new FileReader();\n          reader.onload = async event => {\n            if (event.target && event.target.result) {\n              const csvContent = event.target.result;\n              try {\n                // CSVをパースしてデータに変換 - 年度取得関数として () => currentYear を渡す\n                const importedData = parseMonthlyCSV(csvContent, () => currentYear);\n                console.log('CSVから読み込んだデータ:', importedData);\n\n                // インポート完了通知\n                if (onImportComplete) {\n                  onImportComplete(importedData);\n                }\n\n                // モーダルを閉じる\n                if (onClose) {\n                  onClose();\n                }\n                setImporting(false);\n                alert('月別データのインポートが完了しました');\n              } catch (parseError) {\n                console.error('CSVパースエラー:', parseError);\n                setImportError('CSVデータの解析中にエラーが発生しました。正しいフォーマットか確認してください。');\n                setImporting(false);\n              }\n            }\n          };\n          reader.onerror = () => {\n            setImportError('ファイルの読み込み中にエラーが発生しました');\n            setImporting(false);\n          };\n          reader.readAsText(file, 'UTF-8');\n        } catch (error) {\n          console.error('CSVインポートエラー:', error);\n          setImportError('CSVインポート中にエラーが発生しました');\n          setImporting(false);\n        }\n      }\n    };\n    fileInput.click();\n  };\n\n  // CSVをパースする関数 - 修正版\n  const parseMonthlyCSV = (csvContent, yearGetter) => {\n    // BOMを除去する\n    const content = csvContent.replace(/^\\uFEFF/, '');\n\n    // 行に分割\n    const rows = content.split(/\\r?\\n/).filter(row => row.trim() !== '');\n    console.log('CSV行数:', rows.length);\n    console.log('CSV内容:', rows);\n\n    // 年度を取得\n    let year = yearGetter();\n    // 行から年度を探す\n    for (const row of rows) {\n      const cells = row.split(',');\n      if (cells[0] === '年度' && cells[1] && /^\\d{4}$/.test(cells[1].trim())) {\n        year = parseInt(cells[1].trim(), 10);\n        break;\n      }\n    }\n    console.log(\"CSV解析: 年度\", year);\n\n    // 月次データ用の初期構造\n    const totalRegularEmployees = {};\n    const disabledEmployees = {};\n\n    // 月の対応マップ\n    const monthMap = {\n      '4月': 'april',\n      '5月': 'may',\n      '6月': 'june',\n      '7月': 'july',\n      '8月': 'august',\n      '9月': 'september',\n      '10月': 'october',\n      '11月': 'november',\n      '12月': 'december',\n      '1月': 'january',\n      '2月': 'february',\n      '3月': 'march'\n    };\n\n    // 月ヘッダー行と各データ行を検出\n    let monthHeaderRow = [];\n    let regularEmployeesRow = [];\n    let disabledEmployeesRow = [];\n\n    // 行を解析してデータを抽出\n    for (let i = 0; i < rows.length; i++) {\n      const cells = rows[i].split(',');\n\n      // 月ヘッダー行を検出\n      if (cells[0] === '月' || cells[0] === '' && cells[1] === '4月') {\n        monthHeaderRow = cells;\n        continue;\n      }\n\n      // 常用労働者数の行を検出\n      if (cells[0] && (cells[0].includes('常用労働者数') || cells[0].includes('常勤雇用労働者数'))) {\n        regularEmployeesRow = cells;\n        continue;\n      }\n\n      // 障がい者雇用者数の行を検出\n      if (cells[0] && cells[0].includes('障がい者雇用者数')) {\n        disabledEmployeesRow = cells;\n        continue;\n      }\n    }\n    console.log(\"月ヘッダー行:\", monthHeaderRow);\n    console.log(\"常用労働者数行:\", regularEmployeesRow);\n    console.log(\"障がい者雇用者数行:\", disabledEmployeesRow);\n\n    // 月次データを取得 - 必ず数値型として処理\n    for (let i = 1; i < monthHeaderRow.length; i++) {\n      const monthCell = monthHeaderRow[i] ? monthHeaderRow[i].trim() : '';\n      if (monthCell && monthMap[monthCell]) {\n        const monthKey = monthMap[monthCell];\n\n        // 常用労働者数\n        if (regularEmployeesRow.length > i) {\n          const cellValue = regularEmployeesRow[i] ? regularEmployeesRow[i].trim() : '';\n          const value = cellValue ? parseFloat(cellValue) : 0;\n          totalRegularEmployees[monthKey] = isNaN(value) ? 0 : value;\n        }\n\n        // 障がい者雇用者数\n        if (disabledEmployeesRow.length > i) {\n          const cellValue = disabledEmployeesRow[i] ? disabledEmployeesRow[i].trim() : '';\n          const value = cellValue ? parseFloat(cellValue) : 0;\n          disabledEmployees[monthKey] = isNaN(value) ? 0 : value;\n        }\n      }\n    }\n\n    // 不足している月のデータを0で初期化\n    const monthKeys = ['april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december', 'january', 'february', 'march'];\n    monthKeys.forEach(month => {\n      if (totalRegularEmployees[month] === undefined) {\n        totalRegularEmployees[month] = 0;\n      }\n      if (disabledEmployees[month] === undefined) {\n        disabledEmployees[month] = 0;\n      }\n    });\n\n    // データのバリデーション\n    const hasData = Object.values(totalRegularEmployees).some(v => v > 0) || Object.values(disabledEmployees).some(v => v > 0);\n    if (!hasData) {\n      throw new Error(\"CSVからデータを抽出できませんでした。ファイル形式を確認してください。\");\n    }\n    return {\n      year,\n      totalRegularEmployees,\n      disabledEmployees\n    };\n  };\n\n  // スタイル設定\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'fixed',\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%)',\n      backgroundColor: 'white',\n      padding: '20px',\n      borderRadius: '4px',\n      boxShadow: '0 2px 10px rgba(0, 0, 0, 0.2)',\n      width: '80%',\n      maxWidth: '500px',\n      zIndex: 1000\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        fontSize: '18px',\n        marginBottom: '20px',\n        color: '#4361ee',\n        textAlign: 'center'\n      },\n      children: \"\\u6708\\u5225\\u30C7\\u30FC\\u30BF\\u306E\\u30A4\\u30F3\\u30DD\\u30FC\\u30C8\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this), importError && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: '#f8d7da',\n        color: '#721c24',\n        padding: '8px 12px',\n        borderRadius: '4px',\n        marginBottom: '1rem'\n      },\n      children: importError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        gap: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDownloadTemplate,\n        style: {\n          padding: '10px',\n          backgroundColor: '#4361ee',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px',\n          cursor: 'pointer',\n          fontSize: '14px'\n        },\n        disabled: importing,\n        children: \"\\u30A4\\u30F3\\u30DD\\u30FC\\u30C8\\u30C6\\u30F3\\u30D7\\u30EC\\u30FC\\u30C8\\u3092\\u30C0\\u30A6\\u30F3\\u30ED\\u30FC\\u30C9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFileSelect,\n        style: {\n          padding: '10px',\n          backgroundColor: '#f1f1f1',\n          border: '1px solid #ddd',\n          color: '#333333',\n          borderRadius: '4px',\n          cursor: 'pointer',\n          fontSize: '14px'\n        },\n        disabled: importing,\n        children: importing ? 'インポート中...' : 'CSVファイルを選択'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this), onClose && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClose,\n        style: {\n          padding: '8px 15px',\n          backgroundColor: '#6c757d',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px',\n          cursor: 'pointer',\n          marginTop: '10px',\n          alignSelf: 'flex-end'\n        },\n        disabled: importing,\n        children: \"\\u9589\\u3058\\u308B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 5\n  }, this);\n};\n_s(MonthlyDataImport, \"OrQIJ6YjqzSSonlKzZ+btqd6ROw=\");\n_c = MonthlyDataImport;\nconst MonthlyDataTab = ({\n  fiscalYear,\n  reportData\n}) => {\n  _s2();\n  // 設定値\n  const [subsidyAmount, setSubsidyAmount] = useState(27000); // 調整金額（デフォルト: 27,000円/人・月）\n  const [paymentAmount, setPaymentAmount] = useState(50000); // 納付金額（デフォルト: 50,000円/人・月）\n  const [legalRate, setLegalRate] = useState(2.3); // 法定雇用率\n\n  // 法定雇用率\n  const LEGAL_EMPLOYMENT_RATE = legalRate; // 2.3%\n\n  // コンポーネントの先頭で定数として定義\n  const defaultMonthlyData = [{\n    month: '4月',\n    employees: 0,\n    disabledEmployees: 0\n  }, {\n    month: '5月',\n    employees: 0,\n    disabledEmployees: 0\n  }, {\n    month: '6月',\n    employees: 0,\n    disabledEmployees: 0\n  }, {\n    month: '7月',\n    employees: 0,\n    disabledEmployees: 0\n  }, {\n    month: '8月',\n    employees: 0,\n    disabledEmployees: 0\n  }, {\n    month: '9月',\n    employees: 0,\n    disabledEmployees: 0\n  }, {\n    month: '10月',\n    employees: 0,\n    disabledEmployees: 0\n  }, {\n    month: '11月',\n    employees: 0,\n    disabledEmployees: 0\n  }, {\n    month: '12月',\n    employees: 0,\n    disabledEmployees: 0\n  }, {\n    month: '1月',\n    employees: 0,\n    disabledEmployees: 0\n  }, {\n    month: '2月',\n    employees: 0,\n    disabledEmployees: 0\n  }, {\n    month: '3月',\n    employees: 0,\n    disabledEmployees: 0\n  }];\n\n  // API連携用の状態\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // CSVインポート関連の状態\n  const [showImport, setShowImport] = useState(false);\n\n  // 月別データ\n  const [monthlyData, setMonthlyData] = useState([{\n    month: '4月',\n    employees: 510,\n    disabledEmployees: 13\n  }, {\n    month: '5月',\n    employees: 515,\n    disabledEmployees: 13\n  }, {\n    month: '6月',\n    employees: 520,\n    disabledEmployees: 14\n  }, {\n    month: '7月',\n    employees: 523,\n    disabledEmployees: 15\n  }, {\n    month: '8月',\n    employees: 525,\n    disabledEmployees: 15\n  }, {\n    month: '9月',\n    employees: 530,\n    disabledEmployees: 15\n  }, {\n    month: '10月',\n    employees: 528,\n    disabledEmployees: 14\n  }, {\n    month: '11月',\n    employees: 527,\n    disabledEmployees: 14\n  }, {\n    month: '12月',\n    employees: 520,\n    disabledEmployees: 13\n  }, {\n    month: '1月',\n    employees: 515,\n    disabledEmployees: 13\n  }, {\n    month: '2月',\n    employees: 510,\n    disabledEmployees: 12\n  }, {\n    month: '3月',\n    employees: 505,\n    disabledEmployees: 12\n  }]);\n\n  // 年度数値を取得する\n  const getYearValue = () => {\n    if (fiscalYear.includes('年度')) {\n      return parseInt(fiscalYear.replace('年度', ''));\n    }\n    return new Date().getFullYear();\n  };\n\n  // 設定を読み込む\n  const loadSettings = async () => {\n    try {\n      // 設定APIが実装されていない場合のフォールバック\n      try {\n        // 会社設定を取得\n        const settings = await settingsApi.getCompanySettings();\n        console.log('取得した設定:', settings);\n        if (settings) {\n          // 設定オブジェクトを型安全に扱うため、any型にキャスト\n          const anySettings = settings;\n\n          // 各設定値を取得（プロパティが存在しない場合はデフォルト値を使用）\n          const subsidyAmountValue = anySettings.subsidyAmount || anySettings.paymentReport && anySettings.paymentReport.subsidyAmount || 27000;\n          const paymentAmountValue = anySettings.paymentAmount || anySettings.paymentReport && anySettings.paymentReport.paymentAmount || 50000;\n          const legalRateValue = anySettings.legalRate || anySettings.paymentReport && anySettings.paymentReport.legalRate || 2.3;\n\n          // 状態を更新\n          setSubsidyAmount(subsidyAmountValue);\n          setPaymentAmount(paymentAmountValue);\n          setLegalRate(legalRateValue);\n          console.log('設定を適用しました:', {\n            subsidyAmount: subsidyAmountValue,\n            paymentAmount: paymentAmountValue,\n            legalRate: legalRateValue\n          });\n        }\n      } catch (settingsError) {\n        // 設定APIがない場合は静かに失敗させる\n        console.log('会社設定は利用できません。デフォルト値を使用します。');\n        // デフォルト設定を使用\n      }\n    } catch (error) {\n      // その他のエラーは記録するだけ\n      console.error('設定の読み込みに失敗しました:', error);\n    }\n  };\n\n  // 標準形式のデータを処理する関数\n  const processStandardFormat = monthlyData => {\n    const months = ['4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月', '1月', '2月', '3月'];\n    const monthKeys = ['april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december', 'january', 'february', 'march'];\n    console.log('標準形式のデータを処理します');\n    return months.map((month, index) => {\n      var _monthlyData$totalReg, _monthlyData$disabled;\n      const key = monthKeys[index];\n      // 数値型を確実に維持する\n      const employeeValue = (_monthlyData$totalReg = monthlyData.totalRegularEmployees) === null || _monthlyData$totalReg === void 0 ? void 0 : _monthlyData$totalReg[key];\n      const disabledValue = (_monthlyData$disabled = monthlyData.disabledEmployees) === null || _monthlyData$disabled === void 0 ? void 0 : _monthlyData$disabled[key];\n\n      // 数値に変換（文字列の場合も変換、NaNの場合は0に）\n      const employees = typeof employeeValue === 'number' ? employeeValue : employeeValue ? parseFloat(employeeValue) : 0;\n      const disabledEmployees = typeof disabledValue === 'number' ? disabledValue : disabledValue ? parseFloat(disabledValue) : 0;\n      return {\n        month: month,\n        employees: isNaN(employees) ? 0 : employees,\n        disabledEmployees: isNaN(disabledEmployees) ? 0 : disabledEmployees\n      };\n    });\n  };\n\n  // シンプル形式のデータを処理する関数（すべての月で同じ値）\n  const processSimpleFormat = (totalEmployees, disabledEmployees) => {\n    const months = ['4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月', '1月', '2月', '3月'];\n\n    // 数値型に正しく変換\n    const employeesValue = typeof totalEmployees === 'number' ? totalEmployees : totalEmployees ? parseFloat(String(totalEmployees)) : 0;\n    const disabledValue = typeof disabledEmployees === 'number' ? disabledEmployees : disabledEmployees ? parseFloat(String(disabledEmployees)) : 0;\n    console.log('シンプル形式のデータを処理します', {\n      totalEmployees: employeesValue,\n      disabledEmployees: disabledValue\n    });\n\n    // すべての月で同じ値を使用\n    return months.map(month => ({\n      month,\n      employees: isNaN(employeesValue) ? 0 : employeesValue,\n      disabledEmployees: isNaN(disabledValue) ? 0 : disabledValue\n    }));\n  };\n\n  // フィールド直接アクセスの形式を処理する関数\n  const processDirectFields = data => {\n    const months = ['4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月', '1月', '2月', '3月'];\n    const monthKeys = ['april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december', 'january', 'february', 'march'];\n    console.log('フィールド直接アクセス形式のデータを処理します');\n    return months.map((month, index) => {\n      const key = monthKeys[index];\n      // 数値型を確実に維持する\n      const employeeField = `employees_${key}`;\n      const disabledField = `disabled_${key}`;\n\n      // 数値に変換\n      const employees = data[employeeField] ? parseFloat(data[employeeField]) : 0;\n      const disabledEmployees = data[disabledField] ? parseFloat(data[disabledField]) : 0;\n      return {\n        month: month,\n        employees: isNaN(employees) ? 0 : employees,\n        disabledEmployees: isNaN(disabledEmployees) ? 0 : disabledEmployees\n      };\n    });\n  };\n\n  // 適応的なデータ処理関数を追加\n  const adaptiveProcessMonthlyData = data => {\n    console.log('適応的データ処理を開始:', data);\n\n    // データなしの場合\n    if (!data) {\n      console.warn('データがありません');\n      return defaultMonthlyData;\n    }\n    try {\n      // シンプル形式の確認（total_employeesとdisabled_employeesが存在する）\n      if (data.total_employees !== undefined && data.disabled_employees !== undefined) {\n        console.log('シンプル形式のデータを処理します', {\n          totalEmployees: data.total_employees,\n          disabledEmployees: data.disabled_employees\n        });\n\n        // すべての月で同じ値を使用\n        return processSimpleFormat(data.total_employees, data.disabled_employees);\n      }\n\n      // monthly_dataの確認（文字列かオブジェクト）\n      let monthlyDataObj = null;\n      if (data.monthly_data) {\n        if (typeof data.monthly_data === 'string') {\n          try {\n            monthlyDataObj = JSON.parse(data.monthly_data);\n            console.log('monthly_data (文字列)をパースしました:', monthlyDataObj);\n          } catch (e) {\n            console.error('monthly_dataのJSON解析エラー:', e);\n          }\n        } else if (typeof data.monthly_data === 'object') {\n          monthlyDataObj = data.monthly_data;\n          console.log('monthly_data (オブジェクト)を取得しました:', monthlyDataObj);\n        }\n\n        // 標準形式のチェック\n        if (monthlyDataObj && (monthlyDataObj.totalRegularEmployees || monthlyDataObj.disabledEmployees)) {\n          console.log('標準形式のデータを処理します');\n\n          // 月次データがある場合は標準形式処理\n          return processStandardFormat(monthlyDataObj);\n        }\n      }\n\n      // 上記のいずれにも該当しない場合はデフォルト値を返す\n      console.log('認識できるデータ構造ではありません。デフォルト値を使用します。');\n      console.log('データ構造:', {\n        hasMonthlyData: !!data.monthly_data,\n        monthlyDataType: typeof data.monthly_data,\n        hasTotal: !!data.total_employees,\n        hasDisabled: !!data.disabled_employees\n      });\n\n      // デフォルト値を返す\n      return defaultMonthlyData;\n    } catch (error) {\n      console.error('データ処理エラー:', error);\n      return defaultMonthlyData;\n    }\n  };\n\n  // データ処理関数を修正\n  const processReportData = data => {\n    if (!data) {\n      console.warn('データがありません');\n      setMonthlyData(defaultMonthlyData);\n      setLoading(false); // ローディング状態を解除\n      return;\n    }\n    try {\n      console.log('データ処理開始:', data);\n      let monthlyDataObj = null;\n\n      // 1. monthly_data がJSON文字列の場合\n      if (data.monthly_data && typeof data.monthly_data === 'string') {\n        try {\n          monthlyDataObj = JSON.parse(data.monthly_data);\n          console.log('monthly_data (文字列)をパースしました:', monthlyDataObj);\n        } catch (e) {\n          console.error('monthly_dataのJSON解析エラー:', e);\n        }\n      }\n      // 2. monthly_data がオブジェクトの場合\n      else if (data.monthly_data && typeof data.monthly_data === 'object') {\n        monthlyDataObj = data.monthly_data;\n        console.log('monthly_data (オブジェクト)を取得しました:', monthlyDataObj);\n      }\n\n      // 月次データが見つかった場合の処理\n      if (monthlyDataObj && (monthlyDataObj.totalRegularEmployees && Object.keys(monthlyDataObj.totalRegularEmployees).length > 0 || monthlyDataObj.disabledEmployees && Object.keys(monthlyDataObj.disabledEmployees).length > 0)) {\n        console.log('有効な月次データを検出しました');\n        const months = ['4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月', '1月', '2月', '3月'];\n        const monthKeys = ['april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december', 'january', 'february', 'march'];\n        const formattedData = months.map((month, index) => {\n          var _monthlyDataObj, _monthlyDataObj$total, _monthlyDataObj2, _monthlyDataObj2$disa;\n          const key = monthKeys[index];\n\n          // 数値型を確実に維持する\n          const employeeValue = (_monthlyDataObj = monthlyDataObj) === null || _monthlyDataObj === void 0 ? void 0 : (_monthlyDataObj$total = _monthlyDataObj.totalRegularEmployees) === null || _monthlyDataObj$total === void 0 ? void 0 : _monthlyDataObj$total[key];\n          const disabledValue = (_monthlyDataObj2 = monthlyDataObj) === null || _monthlyDataObj2 === void 0 ? void 0 : (_monthlyDataObj2$disa = _monthlyDataObj2.disabledEmployees) === null || _monthlyDataObj2$disa === void 0 ? void 0 : _monthlyDataObj2$disa[key];\n\n          // 数値に変換\n          const employees = typeof employeeValue === 'number' ? employeeValue : employeeValue ? parseFloat(String(employeeValue)) : 0;\n          const disabledEmployees = typeof disabledValue === 'number' ? disabledValue : disabledValue ? parseFloat(String(disabledValue)) : 0;\n          return {\n            month: month,\n            employees: isNaN(employees) ? 0 : employees,\n            disabledEmployees: isNaN(disabledEmployees) ? 0 : disabledEmployees\n          };\n        });\n        console.log('フォーマット済み月次データ:', formattedData);\n        setMonthlyData(formattedData);\n        setLoading(false); // ここでローディング状態を解除\n        return;\n      }\n\n      // 代替データ構造の確認\n      if (data.total_employees !== undefined && data.disabled_employees !== undefined) {\n        console.log('シンプル形式のデータを処理します', {\n          totalEmployees: data.total_employees,\n          disabledEmployees: data.disabled_employees\n        });\n\n        // 数値型を確実に維持する\n        const totalEmployees = typeof data.total_employees === 'number' ? data.total_employees : data.total_employees ? parseFloat(String(data.total_employees)) : 0;\n        const disabledEmployees = typeof data.disabled_employees === 'number' ? data.disabled_employees : data.disabled_employees ? parseFloat(String(data.disabled_employees)) : 0;\n\n        // すべての月で同じ値を使用\n        const formattedData = defaultMonthlyData.map(item => ({\n          ...item,\n          employees: isNaN(totalEmployees) ? 0 : totalEmployees,\n          disabledEmployees: isNaN(disabledEmployees) ? 0 : disabledEmployees\n        }));\n        setMonthlyData(formattedData);\n        setLoading(false); // ここでローディング状態を解除\n        return;\n      }\n\n      // 適応的な処理を試みる\n      const adaptiveData = adaptiveProcessMonthlyData(data);\n      setMonthlyData(adaptiveData);\n\n      // 処理の最後でローディング状態を解除\n      setLoading(false);\n    } catch (error) {\n      console.error('データ処理エラー:', error);\n      setMonthlyData(defaultMonthlyData);\n      setLoading(false); // エラー時もローディング状態を解除\n    }\n  };\n\n  // API からデータを取得する関数\n  const fetchPaymentReport = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const year = getYearValue();\n      const report = await paymentReportApi.getPaymentReport(year);\n\n      // データ処理関数を呼び出し\n      processReportData(report);\n    } catch (err) {\n      setLoading(false);\n      setError(err instanceof Error ? err.message : '月次データの取得に失敗しました');\n      console.error('月次データの取得エラー:', err);\n\n      // データがない場合はデフォルト値を使用\n      setMonthlyData(defaultMonthlyData);\n    }\n  };\n\n  // 初期処理\n  useEffect(() => {\n    // 設定を読み込む\n    loadSettings();\n\n    // データ読み込み\n    console.log('MonthlyDataTab: fiscalYear/reportData変更検知', fiscalYear, reportData);\n    if (reportData) {\n      console.log('親コンポーネントから受け取ったデータを処理します:', reportData);\n      setLoading(true); // 親コンポーネントからのデータ処理中もローディング状態に\n      processReportData(reportData);\n      return; // reportData が存在する場合は API 呼び出しをスキップ\n    }\n\n    // reportData がない場合のみ API 呼び出し\n    console.log('MonthlyDataTab: APIからデータを取得します', fiscalYear);\n    fetchPaymentReport();\n  }, [fiscalYear, reportData]);\n\n  // 月別のデータを計算\n  const calculatedData = useMemo(() => {\n    return monthlyData.map(item => {\n      // 数値型を確実に維持する\n      const employees = typeof item.employees === 'number' ? item.employees : item.employees ? parseFloat(String(item.employees)) : 0;\n      const disabledEmployees = typeof item.disabledEmployees === 'number' ? item.disabledEmployees : item.disabledEmployees ? parseFloat(String(item.disabledEmployees)) : 0;\n\n      // 実雇用率 = 障害者雇用数 / 常用労働者数 * 100\n      const employmentRate = employees > 0 ? disabledEmployees / employees * 100 : 0;\n\n      // 必要雇用数 = 常用労働者数 * 法定雇用率 / 100\n      const requiredEmployees = Math.floor(employees * LEGAL_EMPLOYMENT_RATE / 100);\n\n      // 超過・未達 = 障害者雇用数 - 必要雇用数\n      const difference = disabledEmployees - requiredEmployees;\n\n      // 調整金・納付金（設定値から計算）\n      const payment = difference >= 0 ? difference * subsidyAmount // 調整金（プラス）\n      : difference * paymentAmount; // 納付金（マイナス）\n\n      return {\n        ...item,\n        employees,\n        disabledEmployees,\n        employmentRate,\n        requiredEmployees,\n        difference,\n        payment\n      };\n    });\n  }, [monthlyData, LEGAL_EMPLOYMENT_RATE, subsidyAmount, paymentAmount]);\n\n  // 合計値を計算\n  const totals = useMemo(() => {\n    // 数値の合計を確実に計算するためのヘルパー関数\n    const sumNumericValues = values => {\n      return values.reduce((sum, value) => {\n        const numValue = typeof value === 'number' ? value : value ? parseFloat(String(value)) : 0;\n        return sum + (isNaN(numValue) ? 0 : numValue);\n      }, 0);\n    };\n    const employeesArray = monthlyData.map(item => item.employees);\n    const disabledArray = monthlyData.map(item => item.disabledEmployees);\n    const requiredArray = calculatedData.map(item => item.requiredEmployees);\n    const totalEmployees = sumNumericValues(employeesArray);\n    const totalDisabled = sumNumericValues(disabledArray);\n    const totalRequiredEmployees = sumNumericValues(requiredArray);\n    const totalDifference = totalDisabled - totalRequiredEmployees;\n\n    // 合計金額を計算（各月の調整金/納付金合計）\n    const totalPayment = calculatedData.reduce((sum, item) => sum + item.payment, 0);\n    return {\n      totalEmployees,\n      totalDisabled,\n      totalRequiredEmployees,\n      totalDifference,\n      totalPayment\n    };\n  }, [calculatedData, monthlyData]);\n\n  // 金額の表示フォーマット\n  const formatNumber = num => {\n    // NaNの場合は0として表示\n    if (isNaN(num)) return '0';\n    return num.toLocaleString();\n  };\n\n  // 平均従業員数を計算するヘルパー関数\n  const calculateAverageEmployees = monthlyData => {\n    const values = Object.values(monthlyData);\n    if (values.length === 0) return 0;\n\n    // NaNを除外した有効な値の平均を計算\n    const validValues = values.filter(v => !isNaN(v) && v !== null && v !== undefined);\n    if (validValues.length === 0) return 0;\n    const sum = validValues.reduce((a, b) => a + (isNaN(b) ? 0 : b), 0);\n    return sum / validValues.length;\n  };\n\n  // インポート完了ハンドラ\n  const handleImportComplete = importedData => {\n    console.log('インポート完了', importedData);\n\n    // データのバリデーション\n    if (!importedData) {\n      console.error('インポートデータが空です');\n      alert('インポートデータが無効です。CSVファイルの内容を確認してください。');\n      return;\n    }\n    if (!importedData.totalRegularEmployees || !importedData.disabledEmployees) {\n      console.error('インポートデータに必要なフィールドがありません:', importedData);\n      alert('インポートデータに常用労働者数または障がい者雇用者数がありません。CSVファイルの内容を確認してください。');\n      return;\n    }\n    if (Object.keys(importedData.totalRegularEmployees).length === 0 || Object.keys(importedData.disabledEmployees).length === 0) {\n      console.error('インポートデータのフィールドが空です:', importedData);\n      alert('インポートデータに月別の数値データがありません。CSVファイルの内容を確認してください。');\n      return;\n    }\n    console.log('インポートデータの検証に成功しました:', importedData);\n\n    // 月別データの変換\n    const months = ['4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月', '1月', '2月', '3月'];\n    const monthKeys = ['april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december', 'january', 'february', 'march'];\n    const formattedData = months.map((month, index) => {\n      const key = monthKeys[index];\n\n      // 数値型を確実に維持する\n      const employeeValue = importedData.totalRegularEmployees[key];\n      const disabledValue = importedData.disabledEmployees[key];\n\n      // 数値変換（NaNをチェック）\n      const employees = typeof employeeValue === 'number' ? employeeValue : employeeValue ? parseFloat(String(employeeValue)) : 0;\n      const disabledEmployees = typeof disabledValue === 'number' ? disabledValue : disabledValue ? parseFloat(String(disabledValue)) : 0;\n      return {\n        month: month,\n        employees: isNaN(employees) ? 0 : employees,\n        disabledEmployees: isNaN(disabledEmployees) ? 0 : disabledEmployees\n      };\n    });\n    console.log('CSVから生成した表示データ:', formattedData);\n\n    // 画面表示を更新\n    setMonthlyData(formattedData);\n\n    // データを保存\n    saveImportedData(importedData);\n  };\n\n  // 数値を安全に変換するヘルパー関数（NaNをチェック）\n  const safeParseFloat = value => {\n    if (value === null || value === undefined) return '0.0';\n\n    // 数値型の場合\n    if (typeof value === 'number') {\n      return isNaN(value) ? '0.0' : value.toFixed(1);\n    }\n\n    // 文字列や他の型の場合\n    const parsedValue = parseFloat(String(value));\n    if (isNaN(parsedValue)) {\n      return '0.0';\n    }\n    return parsedValue.toFixed(1); // 小数点1桁で表示\n  };\n\n  // インポートしたデータを保存する関数\n  const saveImportedData = async importedData => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // 年度を取得\n      const year = importedData.year;\n      console.log('保存するデータ準備:', importedData);\n\n      // 既存のレポートデータを取得\n      let existingData = null;\n      try {\n        existingData = await paymentReportApi.getPaymentReport(year);\n        console.log('既存データ:', existingData);\n      } catch (error) {\n        console.log('既存データなし、新規作成します');\n      }\n\n      // 月次データから平均値を計算\n      const avgTotalEmployees = calculateAverageEmployees(importedData.totalRegularEmployees);\n      const avgDisabledEmployees = calculateAverageEmployees(importedData.disabledEmployees);\n      console.log('計算した平均値:', {\n        avgTotalEmployees,\n        avgDisabledEmployees\n      });\n\n      // APIに送信するデータを構築\n      const paymentReportData = {\n        // 既存データの情報を引き継ぐ (ただし上書きしたいフィールドは除く)\n        ...(existingData || {}),\n        // 基本プロパティを更新\n        year,\n        fiscal_year: year,\n        // 計算した平均値で上書き（必ず数値型で保存）\n        total_employees: Number(avgTotalEmployees),\n        disabled_employees: Number(avgDisabledEmployees),\n        average_employee_count: Number(avgTotalEmployees),\n        actual_employment_count: Number(avgDisabledEmployees),\n        // 実雇用率を再計算\n        employment_rate: avgTotalEmployees > 0 ? avgDisabledEmployees / avgTotalEmployees * 100 : 0,\n        // 月次データを直接オブジェクトとして設定（文字列ではなく）\n        monthly_data: importedData\n      };\n\n      // IDフィールドを削除（新規作成対応）\n      if ('id' in paymentReportData) {\n        delete paymentReportData.id;\n      }\n\n      // 画面表示用に月次データを更新\n      const formattedData = processStandardFormat(importedData);\n      setMonthlyData(formattedData);\n      console.log('送信するデータ:', paymentReportData);\n\n      // APIでデータを保存\n      const savedData = await paymentReportApi.savePaymentReport(year, paymentReportData);\n      console.log('保存されたデータ:', savedData);\n      setLoading(false);\n      alert('月別データを保存しました。');\n    } catch (err) {\n      setLoading(false);\n      setError(err instanceof Error ? err.message : '月別データの保存に失敗しました');\n      console.error('月別データの保存エラー:', err);\n    }\n  };\n\n  // インポートモーダルを閉じる\n  const handleCloseImport = () => {\n    setShowImport(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '0',\n      marginTop: '1rem'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        marginBottom: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          margin: 0\n        },\n        children: [\"\\u6708\\u5225\\u30C7\\u30FC\\u30BF (\", fiscalYear, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1009,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowImport(true),\n        style: {\n          backgroundColor: '#4CAF50',\n          color: 'white',\n          padding: '8px 15px',\n          border: 'none',\n          borderRadius: '4px',\n          cursor: 'pointer',\n          fontSize: '14px'\n        },\n        children: \"CSV\\u30A4\\u30F3\\u30DD\\u30FC\\u30C8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1010,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1003,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '12px',\n        textAlign: 'center',\n        backgroundColor: '#f8f9fa',\n        borderRadius: '4px',\n        marginBottom: '1rem'\n      },\n      children: \"\\u30C7\\u30FC\\u30BF\\u3092\\u8AAD\\u307F\\u8FBC\\u307F\\u4E2D...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1027,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: '#f8d7da',\n        color: '#721c24',\n        padding: '8px 12px',\n        borderRadius: '4px',\n        marginBottom: '1rem'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1039,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        overflowX: 'auto'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        style: {\n          width: '100%',\n          borderCollapse: 'collapse',\n          fontSize: '12px',\n          tableLayout: 'fixed'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            style: {\n              borderBottom: '1px solid #dee2e6'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                padding: '6px 4px',\n                textAlign: 'left',\n                fontWeight: 'normal',\n                backgroundColor: '#f8f9fa',\n                borderBottom: '1px solid #dee2e6',\n                whiteSpace: 'nowrap',\n                width: '150px',\n                // 項目列の幅を固定\n                height: '36px' // 高さを固定\n              },\n              children: \"\\u9805\\u76EE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1054,\n              columnNumber: 15\n            }, this), monthlyData.map((item, idx) => /*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                padding: '6px 4px',\n                textAlign: 'center',\n                fontWeight: 'normal',\n                backgroundColor: '#f8f9fa',\n                borderBottom: '1px solid #dee2e6',\n                whiteSpace: 'nowrap',\n                width: '60px',\n                // 各月の列幅を固定\n                height: '36px' // 高さを固定\n              },\n              children: item.month\n            }, `month-header-${item.month}-${idx}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1065,\n              columnNumber: 17\n            }, this)), /*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                padding: '6px 4px',\n                textAlign: 'center',\n                fontWeight: 'normal',\n                backgroundColor: '#f8f9fa',\n                borderBottom: '1px solid #dee2e6',\n                whiteSpace: 'nowrap',\n                width: '80px',\n                // 合計列の幅を固定（少し広め）\n                height: '36px' // 高さを固定\n              },\n              children: \"\\u5408\\u8A08\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1078,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1053,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1052,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                padding: '6px 4px',\n                textAlign: 'left',\n                fontWeight: 'normal',\n                backgroundColor: '#f8f9fa',\n                borderBottom: '1px solid #dee2e6',\n                height: '36px' // 高さを固定\n              },\n              children: \"\\u5E38\\u7528\\u52B4\\u50CD\\u8005\\u6570(\\u4EBA)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1095,\n              columnNumber: 15\n            }, this), calculatedData.map((item, idx) => /*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                padding: '6px 4px',\n                textAlign: 'center',\n                borderBottom: '1px solid #dee2e6',\n                height: '36px' // 高さを固定\n              },\n              children: formatNumber(item.employees)\n            }, `employees-${item.month}-${idx}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1106,\n              columnNumber: 17\n            }, this)), /*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                padding: '6px 4px',\n                textAlign: 'center',\n                borderBottom: '1px solid #dee2e6',\n                fontWeight: 'bold',\n                height: '36px' // 高さを固定\n              },\n              children: formatNumber(totals.totalEmployees)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1115,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1094,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                padding: '6px 4px',\n                textAlign: 'left',\n                fontWeight: 'normal',\n                backgroundColor: '#f8f9fa',\n                borderBottom: '1px solid #dee2e6',\n                height: '36px' // 高さを固定\n              },\n              children: \"\\u969C\\u304C\\u3044\\u8005\\u96C7\\u7528\\u8005\\u6570(\\u4EBA)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1128,\n              columnNumber: 15\n            }, this), calculatedData.map((item, idx) => /*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                padding: '6px 4px',\n                textAlign: 'center',\n                borderBottom: '1px solid #dee2e6',\n                height: '36px' // 高さを固定\n              },\n              children: item.disabledEmployees % 1 === 0 ? Math.floor(item.disabledEmployees) : item.disabledEmployees.toFixed(1)\n            }, `disabled-${item.month}-${idx}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1139,\n              columnNumber: 17\n            }, this)), /*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                padding: '6px 4px',\n                textAlign: 'center',\n                borderBottom: '1px solid #dee2e6',\n                fontWeight: 'bold',\n                height: '36px' // 高さを固定\n              },\n              children: totals.totalDisabled % 1 === 0 ? Math.floor(totals.totalDisabled) : totals.totalDisabled.toFixed(1)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1151,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1127,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                padding: '6px 4px',\n                textAlign: 'left',\n                fontWeight: 'normal',\n                backgroundColor: '#f8f9fa',\n                borderBottom: '1px solid #dee2e6',\n                height: '36px' // 高さを固定\n              },\n              children: \"\\u8D85\\u904E\\u30FB\\u672A\\u9054(\\u4EBA)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1167,\n              columnNumber: 15\n            }, this), calculatedData.map((item, idx) => /*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                padding: '6px 4px',\n                textAlign: 'center',\n                borderBottom: '1px solid #dee2e6',\n                color: item.difference < 0 ? '#dc3545' : 'inherit',\n                height: '36px' // 高さを固定\n              },\n              children: item.difference > 0 ? '+' + (item.difference % 1 === 0 ? Math.floor(item.difference) : item.difference.toFixed(1)) : item.difference % 1 === 0 ? Math.floor(item.difference) : item.difference.toFixed(1)\n            }, `difference-${item.month}-${idx}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1178,\n              columnNumber: 17\n            }, this)), /*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                padding: '6px 4px',\n                textAlign: 'center',\n                borderBottom: '1px solid #dee2e6',\n                fontWeight: 'bold',\n                color: totals.totalDifference < 0 ? '#dc3545' : 'inherit',\n                height: '36px' // 高さを固定\n              },\n              children: totals.totalDifference > 0 ? '+' + (totals.totalDifference % 1 === 0 ? Math.floor(totals.totalDifference) : totals.totalDifference.toFixed(1)) : totals.totalDifference % 1 === 0 ? Math.floor(totals.totalDifference) : totals.totalDifference.toFixed(1)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1191,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1166,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                padding: '6px 4px',\n                textAlign: 'left',\n                fontWeight: 'normal',\n                backgroundColor: '#f8f9fa',\n                borderBottom: '1px solid #dee2e6',\n                height: '36px' // 高さを固定\n              },\n              children: \"\\u8ABF\\u6574\\u91D1\\u30FB\\u7D0D\\u4ED8\\u91D1(\\u5186)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1208,\n              columnNumber: 15\n            }, this), calculatedData.map((item, idx) => /*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                padding: '6px 4px',\n                textAlign: 'center',\n                borderBottom: '1px solid #dee2e6',\n                color: item.payment < 0 ? '#dc3545' : '#28a745',\n                height: '36px' // 高さを固定\n              },\n              children: formatNumber(item.payment)\n            }, `payment-${item.month}-${idx}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1219,\n              columnNumber: 17\n            }, this)), /*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                padding: '6px 4px',\n                textAlign: 'center',\n                borderBottom: '1px solid #dee2e6',\n                fontWeight: 'bold',\n                color: totals.totalPayment < 0 ? '#dc3545' : '#28a745',\n                height: '36px' // 高さを固定\n              },\n              children: formatNumber(totals.totalPayment)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1229,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1207,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1092,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1051,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1050,\n      columnNumber: 7\n    }, this), showImport && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        backgroundColor: 'rgba(0, 0, 0, 0.5)',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        zIndex: 50\n      },\n      children: /*#__PURE__*/_jsxDEV(MonthlyDataImport, {\n        onImportComplete: handleImportComplete,\n        onClose: handleCloseImport,\n        currentYear: getYearValue() // 年度を渡す\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1258,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1246,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1001,\n    columnNumber: 5\n  }, this);\n};\n_s2(MonthlyDataTab, \"vSkxufpBAJt5G5yMXQL0yrB6zRg=\");\n_c2 = MonthlyDataTab;\nexport default MonthlyDataTab;\nvar _c, _c2;\n$RefreshReg$(_c, \"MonthlyDataImport\");\n$RefreshReg$(_c2, \"MonthlyDataTab\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","paymentReportApi","settingsApi","jsxDEV","_jsxDEV","MonthlyDataImport","onImportComplete","onClose","currentYear","_s","importing","setImporting","importError","setImportError","handleDownloadTemplate","BOM","Uint8Array","templateContent","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","setAttribute","style","visibility","body","appendChild","click","removeChild","console","log","alert","error","handleFileSelect","fileInput","accept","onchange","e","_files","file","target","files","reader","FileReader","onload","event","result","csvContent","importedData","parseMonthlyCSV","parseError","onerror","readAsText","yearGetter","content","replace","rows","split","filter","row","trim","length","year","cells","test","parseInt","totalRegularEmployees","disabledEmployees","monthMap","monthHeaderRow","regularEmployeesRow","disabledEmployeesRow","i","includes","monthCell","monthKey","cellValue","value","parseFloat","isNaN","monthKeys","forEach","month","undefined","hasData","Object","values","some","v","Error","position","top","left","transform","backgroundColor","padding","borderRadius","boxShadow","width","maxWidth","zIndex","children","fontSize","marginBottom","color","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","display","flexDirection","gap","onClick","border","cursor","disabled","marginTop","alignSelf","_c","MonthlyDataTab","fiscalYear","reportData","_s2","subsidyAmount","setSubsidyAmount","paymentAmount","setPaymentAmount","legalRate","setLegalRate","LEGAL_EMPLOYMENT_RATE","defaultMonthlyData","employees","loading","setLoading","setError","showImport","setShowImport","monthlyData","setMonthlyData","getYearValue","Date","getFullYear","loadSettings","settings","getCompanySettings","anySettings","subsidyAmountValue","paymentReport","paymentAmountValue","legalRateValue","settingsError","processStandardFormat","months","map","index","_monthlyData$totalReg","_monthlyData$disabled","key","employeeValue","disabledValue","processSimpleFormat","totalEmployees","employeesValue","String","processDirectFields","data","employeeField","disabledField","adaptiveProcessMonthlyData","warn","total_employees","disabled_employees","monthlyDataObj","monthly_data","JSON","parse","hasMonthlyData","monthlyDataType","hasTotal","hasDisabled","processReportData","keys","formattedData","_monthlyDataObj","_monthlyDataObj$total","_monthlyDataObj2","_monthlyDataObj2$disa","item","adaptiveData","fetchPaymentReport","report","getPaymentReport","err","message","calculatedData","employmentRate","requiredEmployees","Math","floor","difference","payment","totals","sumNumericValues","reduce","sum","numValue","employeesArray","disabledArray","requiredArray","totalDisabled","totalRequiredEmployees","totalDifference","totalPayment","formatNumber","num","toLocaleString","calculateAverageEmployees","validValues","a","b","handleImportComplete","saveImportedData","safeParseFloat","toFixed","parsedValue","existingData","avgTotalEmployees","avgDisabledEmployees","paymentReportData","fiscal_year","Number","average_employee_count","actual_employment_count","employment_rate","id","savedData","savePaymentReport","handleCloseImport","justifyContent","alignItems","margin","overflowX","borderCollapse","tableLayout","borderBottom","fontWeight","whiteSpace","height","idx","_c2","$RefreshReg$"],"sources":["/Users/gotouhiroaki/Programming/DAN_work/disability-employment-system/frontend/src/components/PaymentReport/MonthlyDataTab.tsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { paymentReportApi } from '../../api/paymentReportApi';\nimport { settingsApi } from '../../api/settingsApi'; // 設定APIをインポート\n\ninterface MonthlyDataTabProps {\n  fiscalYear: string;\n  reportData?: any;\n}\n\n// インポートモーダルコンポーネント\nconst MonthlyDataImport: React.FC<{\n  onImportComplete?: (importedData: any) => void;\n  onClose?: () => void;\n  currentYear: number;\n}> = ({ onImportComplete, onClose, currentYear }) => {\n  const [importing, setImporting] = useState(false);\n  const [importError, setImportError] = useState<string | null>(null);\n\n  // テンプレートダウンロード処理\n  const handleDownloadTemplate = async () => {\n    try {\n      // CSVテンプレートの内容（BOM付きUTF-8でエンコード）\n      const BOM = new Uint8Array([0xEF, 0xBB, 0xBF]);\n      \n      // より明確で堅牢なCSVテンプレート形式\n      const templateContent = \n`年度,${currentYear},,,,,,,,,,,,\n月,4月,5月,6月,7月,8月,9月,10月,11月,12月,1月,2月,3月,\n常用労働者数,510,515,520,523,525,530,528,527,520,515,510,505,\n障がい者雇用者数,13,13,14,15,15,15,14,14,13,13,12,12,`;\n      \n      // CSVファイルを作成（BOMを追加してUTF-8エンコーディングを明示）\n      const blob = new Blob([BOM, templateContent], { type: 'text/csv;charset=utf-8;' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.setAttribute('href', url);\n      link.setAttribute('download', `monthly_data_template_${currentYear}.csv`);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      console.log('月別データテンプレートをダウンロードしました');\n      \n      // テンプレートの使い方を説明するアラート\n      alert(\n        'CSVテンプレートをダウンロードしました。\\n\\n' +\n        '【使い方】\\n' +\n        '1. ファイルをExcelなどで開く\\n' +\n        '2. 年度の数字を必要に応じて変更（例: 2023, 2024, 2025など）\\n' +\n        '3. 各月の常用労働者数と障がい者雇用者数を入力\\n' +\n        '4. 【重要】CSVとして保存する（文字コードはUTF-8を選択）\\n' +\n        '5. 「CSVファイルを選択」ボタンからインポート\\n\\n' +\n        '※ファイル形式は変更しないでください。月や行の見出しは変更しないでください。'\n      );\n    } catch (error) {\n      console.error('テンプレートダウンロードエラー:', error);\n      alert('テンプレートのダウンロード中にエラーが発生しました');\n    }\n  };\n\n  // CSVファイル選択処理\n  const handleFileSelect = () => {\n    const fileInput = document.createElement('input');\n    fileInput.type = 'file';\n    fileInput.accept = '.csv';\n    \n    fileInput.onchange = async (e) => {\n      const file = (e.target as HTMLInputElement).files?.[0];\n      if (file) {\n        try {\n          setImporting(true);\n          setImportError(null);\n          \n          // FileReader でファイルを読み込む\n          const reader = new FileReader();\n          \n          reader.onload = async (event) => {\n            if (event.target && event.target.result) {\n              const csvContent = event.target.result as string;\n              \n              try {\n                // CSVをパースしてデータに変換 - 年度取得関数として () => currentYear を渡す\n                const importedData = parseMonthlyCSV(csvContent, () => currentYear);\n                \n                console.log('CSVから読み込んだデータ:', importedData);\n                \n                // インポート完了通知\n                if (onImportComplete) {\n                  onImportComplete(importedData);\n                }\n                \n                // モーダルを閉じる\n                if (onClose) {\n                  onClose();\n                }\n                \n                setImporting(false);\n                alert('月別データのインポートが完了しました');\n              } catch (parseError) {\n                console.error('CSVパースエラー:', parseError);\n                setImportError('CSVデータの解析中にエラーが発生しました。正しいフォーマットか確認してください。');\n                setImporting(false);\n              }\n            }\n          };\n          \n          reader.onerror = () => {\n            setImportError('ファイルの読み込み中にエラーが発生しました');\n            setImporting(false);\n          };\n          \n          reader.readAsText(file, 'UTF-8');\n          \n        } catch (error) {\n          console.error('CSVインポートエラー:', error);\n          setImportError('CSVインポート中にエラーが発生しました');\n          setImporting(false);\n        }\n      }\n    };\n    \n    fileInput.click();\n  };\n\n  // CSVをパースする関数 - 修正版\n  const parseMonthlyCSV = (csvContent: string, yearGetter: () => number) => {\n    // BOMを除去する\n    const content = csvContent.replace(/^\\uFEFF/, '');\n    \n    // 行に分割\n    const rows = content.split(/\\r?\\n/).filter(row => row.trim() !== '');\n    console.log('CSV行数:', rows.length);\n    console.log('CSV内容:', rows);\n    \n    // 年度を取得\n    let year = yearGetter();\n    // 行から年度を探す\n    for (const row of rows) {\n      const cells = row.split(',');\n      if (cells[0] === '年度' && cells[1] && /^\\d{4}$/.test(cells[1].trim())) {\n        year = parseInt(cells[1].trim(), 10);\n        break;\n      }\n    }\n    \n    console.log(\"CSV解析: 年度\", year);\n    \n    // 月次データ用の初期構造\n    const totalRegularEmployees: { [key: string]: number } = {};\n    const disabledEmployees: { [key: string]: number } = {};\n    \n    // 月の対応マップ\n    const monthMap: { [key: string]: string } = {\n      '4月': 'april', '5月': 'may', '6月': 'june', '7月': 'july', \n      '8月': 'august', '9月': 'september', '10月': 'october', '11月': 'november', \n      '12月': 'december', '1月': 'january', '2月': 'february', '3月': 'march'\n    };\n    \n    // 月ヘッダー行と各データ行を検出\n    let monthHeaderRow: string[] = [];\n    let regularEmployeesRow: string[] = [];\n    let disabledEmployeesRow: string[] = [];\n    \n    // 行を解析してデータを抽出\n    for (let i = 0; i < rows.length; i++) {\n      const cells = rows[i].split(',');\n      \n      // 月ヘッダー行を検出\n      if (cells[0] === '月' || (cells[0] === '' && cells[1] === '4月')) {\n        monthHeaderRow = cells;\n        continue;\n      }\n      \n      // 常用労働者数の行を検出\n      if (cells[0] && (cells[0].includes('常用労働者数') || cells[0].includes('常勤雇用労働者数'))) {\n        regularEmployeesRow = cells;\n        continue;\n      }\n      \n      // 障がい者雇用者数の行を検出\n      if (cells[0] && cells[0].includes('障がい者雇用者数')) {\n        disabledEmployeesRow = cells;\n        continue;\n      }\n    }\n    \n    console.log(\"月ヘッダー行:\", monthHeaderRow);\n    console.log(\"常用労働者数行:\", regularEmployeesRow);\n    console.log(\"障がい者雇用者数行:\", disabledEmployeesRow);\n    \n    // 月次データを取得 - 必ず数値型として処理\n    for (let i = 1; i < monthHeaderRow.length; i++) {\n      const monthCell = monthHeaderRow[i] ? monthHeaderRow[i].trim() : '';\n      if (monthCell && monthMap[monthCell]) {\n        const monthKey = monthMap[monthCell];\n        \n        // 常用労働者数\n        if (regularEmployeesRow.length > i) {\n          const cellValue = regularEmployeesRow[i] ? regularEmployeesRow[i].trim() : '';\n          const value = cellValue ? parseFloat(cellValue) : 0;\n          totalRegularEmployees[monthKey] = isNaN(value) ? 0 : value;\n        }\n        \n        // 障がい者雇用者数\n        if (disabledEmployeesRow.length > i) {\n          const cellValue = disabledEmployeesRow[i] ? disabledEmployeesRow[i].trim() : '';\n          const value = cellValue ? parseFloat(cellValue) : 0;\n          disabledEmployees[monthKey] = isNaN(value) ? 0 : value;\n        }\n      }\n    }\n    \n    // 不足している月のデータを0で初期化\n    const monthKeys = [\n      'april', 'may', 'june', 'july', 'august', 'september',\n      'october', 'november', 'december', 'january', 'february', 'march'\n    ];\n    \n    monthKeys.forEach(month => {\n      if (totalRegularEmployees[month] === undefined) {\n        totalRegularEmployees[month] = 0;\n      }\n      if (disabledEmployees[month] === undefined) {\n        disabledEmployees[month] = 0;\n      }\n    });\n    \n    // データのバリデーション\n    const hasData = Object.values(totalRegularEmployees).some(v => v > 0) || \n                   Object.values(disabledEmployees).some(v => v > 0);\n                   \n    if (!hasData) {\n      throw new Error(\"CSVからデータを抽出できませんでした。ファイル形式を確認してください。\");\n    }\n    \n    return {\n      year,\n      totalRegularEmployees,\n      disabledEmployees\n    };\n  };\n\n  // スタイル設定\n  return (\n    <div style={{ \n      position: 'fixed',\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%)',\n      backgroundColor: 'white',\n      padding: '20px',\n      borderRadius: '4px',\n      boxShadow: '0 2px 10px rgba(0, 0, 0, 0.2)',\n      width: '80%',\n      maxWidth: '500px',\n      zIndex: 1000\n    }}>\n      <h3 style={{ \n        fontSize: '18px', \n        marginBottom: '20px',\n        color: '#4361ee',\n        textAlign: 'center'\n      }}>\n        月別データのインポート\n      </h3>\n      \n      {importError && (\n        <div style={{ \n          backgroundColor: '#f8d7da', \n          color: '#721c24', \n          padding: '8px 12px', \n          borderRadius: '4px', \n          marginBottom: '1rem' \n        }}>\n          {importError}\n        </div>\n      )}\n      \n      <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>\n        <button\n          onClick={handleDownloadTemplate}\n          style={{ \n            padding: '10px',\n            backgroundColor: '#4361ee',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer',\n            fontSize: '14px'\n          }}\n          disabled={importing}\n        >\n          インポートテンプレートをダウンロード\n        </button>\n        \n        <button\n          onClick={handleFileSelect}\n          style={{ \n            padding: '10px',\n            backgroundColor: '#f1f1f1',\n            border: '1px solid #ddd',\n            color: '#333333',\n            borderRadius: '4px',\n            cursor: 'pointer',\n            fontSize: '14px'\n          }}\n          disabled={importing}\n        >\n          {importing ? 'インポート中...' : 'CSVファイルを選択'}\n        </button>\n        \n        {onClose && (\n          <button\n            onClick={onClose}\n            style={{ \n              padding: '8px 15px',\n              backgroundColor: '#6c757d',\n              color: 'white',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: 'pointer',\n              marginTop: '10px',\n              alignSelf: 'flex-end'\n            }}\n            disabled={importing}\n          >\n            閉じる\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst MonthlyDataTab: React.FC<MonthlyDataTabProps> = ({ fiscalYear, reportData }) => {\n  // 設定値\n  const [subsidyAmount, setSubsidyAmount] = useState<number>(27000); // 調整金額（デフォルト: 27,000円/人・月）\n  const [paymentAmount, setPaymentAmount] = useState<number>(50000); // 納付金額（デフォルト: 50,000円/人・月）\n  const [legalRate, setLegalRate] = useState<number>(2.3); // 法定雇用率\n  \n  // 法定雇用率\n  const LEGAL_EMPLOYMENT_RATE = legalRate; // 2.3%\n  \n  // コンポーネントの先頭で定数として定義\n  const defaultMonthlyData = [\n    { month: '4月', employees: 0, disabledEmployees: 0 },\n    { month: '5月', employees: 0, disabledEmployees: 0 },\n    { month: '6月', employees: 0, disabledEmployees: 0 },\n    { month: '7月', employees: 0, disabledEmployees: 0 },\n    { month: '8月', employees: 0, disabledEmployees: 0 },\n    { month: '9月', employees: 0, disabledEmployees: 0 },\n    { month: '10月', employees: 0, disabledEmployees: 0 },\n    { month: '11月', employees: 0, disabledEmployees: 0 },\n    { month: '12月', employees: 0, disabledEmployees: 0 },\n    { month: '1月', employees: 0, disabledEmployees: 0 },\n    { month: '2月', employees: 0, disabledEmployees: 0 },\n    { month: '3月', employees: 0, disabledEmployees: 0 }\n  ];\n  \n  // API連携用の状態\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  \n  // CSVインポート関連の状態\n  const [showImport, setShowImport] = useState(false);\n  \n  // 月別データ\n  const [monthlyData, setMonthlyData] = useState([\n    { month: '4月', employees: 510, disabledEmployees: 13 },\n    { month: '5月', employees: 515, disabledEmployees: 13 },\n    { month: '6月', employees: 520, disabledEmployees: 14 },\n    { month: '7月', employees: 523, disabledEmployees: 15 },\n    { month: '8月', employees: 525, disabledEmployees: 15 },\n    { month: '9月', employees: 530, disabledEmployees: 15 },\n    { month: '10月', employees: 528, disabledEmployees: 14 },\n    { month: '11月', employees: 527, disabledEmployees: 14 },\n    { month: '12月', employees: 520, disabledEmployees: 13 },\n    { month: '1月', employees: 515, disabledEmployees: 13 },\n    { month: '2月', employees: 510, disabledEmployees: 12 },\n    { month: '3月', employees: 505, disabledEmployees: 12 }\n  ]);\n  \n  // 年度数値を取得する\n  const getYearValue = () => {\n    if (fiscalYear.includes('年度')) {\n      return parseInt(fiscalYear.replace('年度', ''));\n    }\n    return new Date().getFullYear();\n  };\n\n  // 設定を読み込む\n  const loadSettings = async () => {\n    try {\n      // 設定APIが実装されていない場合のフォールバック\n      try {\n        // 会社設定を取得\n        const settings = await settingsApi.getCompanySettings();\n        console.log('取得した設定:', settings);\n        \n        if (settings) {\n          // 設定オブジェクトを型安全に扱うため、any型にキャスト\n          const anySettings = settings as any;\n          \n          // 各設定値を取得（プロパティが存在しない場合はデフォルト値を使用）\n          const subsidyAmountValue = anySettings.subsidyAmount || \n                                    (anySettings.paymentReport && anySettings.paymentReport.subsidyAmount) || \n                                    27000;\n          \n          const paymentAmountValue = anySettings.paymentAmount || \n                                    (anySettings.paymentReport && anySettings.paymentReport.paymentAmount) || \n                                    50000;\n          \n          const legalRateValue = anySettings.legalRate || \n                                (anySettings.paymentReport && anySettings.paymentReport.legalRate) || \n                                2.3;\n          \n          // 状態を更新\n          setSubsidyAmount(subsidyAmountValue);\n          setPaymentAmount(paymentAmountValue);\n          setLegalRate(legalRateValue);\n          \n          console.log('設定を適用しました:', {\n            subsidyAmount: subsidyAmountValue,\n            paymentAmount: paymentAmountValue,\n            legalRate: legalRateValue\n          });\n        }\n      } catch (settingsError) {\n        // 設定APIがない場合は静かに失敗させる\n        console.log('会社設定は利用できません。デフォルト値を使用します。');\n        // デフォルト設定を使用\n      }\n    } catch (error) {\n      // その他のエラーは記録するだけ\n      console.error('設定の読み込みに失敗しました:', error);\n    }\n  };\n  \n  // 標準形式のデータを処理する関数\n  const processStandardFormat = (monthlyData: any) => {\n    const months = [\n      '4月', '5月', '6月', '7月', '8月', '9月', \n      '10月', '11月', '12月', '1月', '2月', '3月'\n    ];\n    const monthKeys = [\n      'april', 'may', 'june', 'july', 'august', 'september',\n      'october', 'november', 'december', 'january', 'february', 'march'\n    ];\n    \n    console.log('標準形式のデータを処理します');\n    \n    return months.map((month, index) => {\n      const key = monthKeys[index];\n      // 数値型を確実に維持する\n      const employeeValue = monthlyData.totalRegularEmployees?.[key];\n      const disabledValue = monthlyData.disabledEmployees?.[key];\n      \n      // 数値に変換（文字列の場合も変換、NaNの場合は0に）\n      const employees = typeof employeeValue === 'number' ? employeeValue : \n                        (employeeValue ? parseFloat(employeeValue) : 0);\n      const disabledEmployees = typeof disabledValue === 'number' ? disabledValue : \n                              (disabledValue ? parseFloat(disabledValue) : 0);\n                              \n      return {\n        month: month,\n        employees: isNaN(employees) ? 0 : employees,\n        disabledEmployees: isNaN(disabledEmployees) ? 0 : disabledEmployees\n      };\n    });\n  };\n  \n  // シンプル形式のデータを処理する関数（すべての月で同じ値）\n  const processSimpleFormat = (totalEmployees: any, disabledEmployees: any) => {\n    const months = [\n      '4月', '5月', '6月', '7月', '8月', '9月', \n      '10月', '11月', '12月', '1月', '2月', '3月'\n    ];\n    \n    // 数値型に正しく変換\n    const employeesValue = typeof totalEmployees === 'number' ? totalEmployees : \n                          (totalEmployees ? parseFloat(String(totalEmployees)) : 0);\n    \n    const disabledValue = typeof disabledEmployees === 'number' ? disabledEmployees : \n                         (disabledEmployees ? parseFloat(String(disabledEmployees)) : 0);\n    \n    console.log('シンプル形式のデータを処理します', { \n      totalEmployees: employeesValue, \n      disabledEmployees: disabledValue \n    });\n    \n    // すべての月で同じ値を使用\n    return months.map(month => ({\n      month,\n      employees: isNaN(employeesValue) ? 0 : employeesValue,\n      disabledEmployees: isNaN(disabledValue) ? 0 : disabledValue\n    }));\n  };\n  \n  // フィールド直接アクセスの形式を処理する関数\n  const processDirectFields = (data: any) => {\n    const months = [\n      '4月', '5月', '6月', '7月', '8月', '9月', \n      '10月', '11月', '12月', '1月', '2月', '3月'\n    ];\n    const monthKeys = [\n      'april', 'may', 'june', 'july', 'august', 'september',\n      'october', 'november', 'december', 'january', 'february', 'march'\n    ];\n    \n    console.log('フィールド直接アクセス形式のデータを処理します');\n    \n    return months.map((month, index) => {\n      const key = monthKeys[index];\n      // 数値型を確実に維持する\n      const employeeField = `employees_${key}`;\n      const disabledField = `disabled_${key}`;\n      \n      // 数値に変換\n      const employees = data[employeeField] ? parseFloat(data[employeeField]) : 0;\n      const disabledEmployees = data[disabledField] ? parseFloat(data[disabledField]) : 0;\n      \n      return {\n        month: month,\n        employees: isNaN(employees) ? 0 : employees,\n        disabledEmployees: isNaN(disabledEmployees) ? 0 : disabledEmployees\n      };\n    });\n  };\n  \n  // 適応的なデータ処理関数を追加\n  const adaptiveProcessMonthlyData = (data: any) => {\n    console.log('適応的データ処理を開始:', data);\n    \n    // データなしの場合\n    if (!data) {\n      console.warn('データがありません');\n      return defaultMonthlyData;\n    }\n    \n    try {\n      // シンプル形式の確認（total_employeesとdisabled_employeesが存在する）\n      if (data.total_employees !== undefined && data.disabled_employees !== undefined) {\n        console.log('シンプル形式のデータを処理します', {\n          totalEmployees: data.total_employees,\n          disabledEmployees: data.disabled_employees\n        });\n        \n        // すべての月で同じ値を使用\n        return processSimpleFormat(data.total_employees, data.disabled_employees);\n      }\n      \n      // monthly_dataの確認（文字列かオブジェクト）\n      let monthlyDataObj: any = null;\n      \n      if (data.monthly_data) {\n        if (typeof data.monthly_data === 'string') {\n          try {\n            monthlyDataObj = JSON.parse(data.monthly_data);\n            console.log('monthly_data (文字列)をパースしました:', monthlyDataObj);\n          } catch (e) {\n            console.error('monthly_dataのJSON解析エラー:', e);\n          }\n        } else if (typeof data.monthly_data === 'object') {\n          monthlyDataObj = data.monthly_data;\n          console.log('monthly_data (オブジェクト)を取得しました:', monthlyDataObj);\n        }\n        \n        // 標準形式のチェック\n        if (monthlyDataObj && \n            (monthlyDataObj.totalRegularEmployees || monthlyDataObj.disabledEmployees)) {\n          console.log('標準形式のデータを処理します');\n          \n          // 月次データがある場合は標準形式処理\n          return processStandardFormat(monthlyDataObj);\n        }\n      }\n      \n      // 上記のいずれにも該当しない場合はデフォルト値を返す\n      console.log('認識できるデータ構造ではありません。デフォルト値を使用します。');\n      console.log('データ構造:', {\n        hasMonthlyData: !!data.monthly_data,\n        monthlyDataType: typeof data.monthly_data,\n        hasTotal: !!data.total_employees,\n        hasDisabled: !!data.disabled_employees\n      });\n      \n      // デフォルト値を返す\n      return defaultMonthlyData;\n      \n    } catch (error) {\n      console.error('データ処理エラー:', error);\n      return defaultMonthlyData;\n    }\n  };\n  \n  // データ処理関数を修正\n  const processReportData = (data: any) => {\n    if (!data) {\n      console.warn('データがありません');\n      setMonthlyData(defaultMonthlyData);\n      setLoading(false); // ローディング状態を解除\n      return;\n    }\n    \n    try {\n      console.log('データ処理開始:', data);\n      \n      let monthlyDataObj: any = null;\n      \n      // 1. monthly_data がJSON文字列の場合\n      if (data.monthly_data && typeof data.monthly_data === 'string') {\n        try {\n          monthlyDataObj = JSON.parse(data.monthly_data);\n          console.log('monthly_data (文字列)をパースしました:', monthlyDataObj);\n        } catch (e) {\n          console.error('monthly_dataのJSON解析エラー:', e);\n        }\n      }\n      // 2. monthly_data がオブジェクトの場合\n      else if (data.monthly_data && typeof data.monthly_data === 'object') {\n        monthlyDataObj = data.monthly_data;\n        console.log('monthly_data (オブジェクト)を取得しました:', monthlyDataObj);\n      }\n      \n      // 月次データが見つかった場合の処理\n      if (monthlyDataObj && \n          ((monthlyDataObj.totalRegularEmployees && Object.keys(monthlyDataObj.totalRegularEmployees).length > 0) ||\n           (monthlyDataObj.disabledEmployees && Object.keys(monthlyDataObj.disabledEmployees).length > 0))) {\n        \n        console.log('有効な月次データを検出しました');\n        \n        const months = [\n          '4月', '5月', '6月', '7月', '8月', '9月', \n          '10月', '11月', '12月', '1月', '2月', '3月'\n        ];\n        const monthKeys = [\n          'april', 'may', 'june', 'july', 'august', 'september',\n          'october', 'november', 'december', 'january', 'february', 'march'\n        ];\n        \n        const formattedData = months.map((month, index) => {\n          const key = monthKeys[index];\n          \n          // 数値型を確実に維持する\n          const employeeValue = monthlyDataObj?.totalRegularEmployees?.[key];\n          const disabledValue = monthlyDataObj?.disabledEmployees?.[key];\n          \n          // 数値に変換\n          const employees = typeof employeeValue === 'number' ? employeeValue : \n                          (employeeValue ? parseFloat(String(employeeValue)) : 0);\n          const disabledEmployees = typeof disabledValue === 'number' ? disabledValue : \n                                 (disabledValue ? parseFloat(String(disabledValue)) : 0);\n          \n          return {\n            month: month,\n            employees: isNaN(employees) ? 0 : employees,\n            disabledEmployees: isNaN(disabledEmployees) ? 0 : disabledEmployees\n          };\n        });\n        \n        console.log('フォーマット済み月次データ:', formattedData);\n        setMonthlyData(formattedData);\n        setLoading(false); // ここでローディング状態を解除\n        return;\n      }\n      \n      // 代替データ構造の確認\n      if (data.total_employees !== undefined && data.disabled_employees !== undefined) {\n        console.log('シンプル形式のデータを処理します', {\n          totalEmployees: data.total_employees,\n          disabledEmployees: data.disabled_employees\n        });\n        \n        // 数値型を確実に維持する\n        const totalEmployees = typeof data.total_employees === 'number' ? data.total_employees : \n                             (data.total_employees ? parseFloat(String(data.total_employees)) : 0);\n        \n        const disabledEmployees = typeof data.disabled_employees === 'number' ? data.disabled_employees : \n                                (data.disabled_employees ? parseFloat(String(data.disabled_employees)) : 0);\n        \n        // すべての月で同じ値を使用\n        const formattedData = defaultMonthlyData.map(item => ({\n          ...item,\n          employees: isNaN(totalEmployees) ? 0 : totalEmployees,\n          disabledEmployees: isNaN(disabledEmployees) ? 0 : disabledEmployees\n        }));\n        \n        setMonthlyData(formattedData);\n        setLoading(false); // ここでローディング状態を解除\n        return;\n      }\n      \n      // 適応的な処理を試みる\n      const adaptiveData = adaptiveProcessMonthlyData(data);\n      setMonthlyData(adaptiveData);\n      \n      // 処理の最後でローディング状態を解除\n      setLoading(false);\n      \n    } catch (error) {\n      console.error('データ処理エラー:', error);\n      setMonthlyData(defaultMonthlyData);\n      setLoading(false); // エラー時もローディング状態を解除\n    }\n  };\n  \n  // API からデータを取得する関数\n  const fetchPaymentReport = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const year = getYearValue();\n      const report = await paymentReportApi.getPaymentReport(year);\n      \n      // データ処理関数を呼び出し\n      processReportData(report);\n    } catch (err) {\n      setLoading(false);\n      setError(err instanceof Error ? err.message : '月次データの取得に失敗しました');\n      console.error('月次データの取得エラー:', err);\n      \n      // データがない場合はデフォルト値を使用\n      setMonthlyData(defaultMonthlyData);\n    }\n  };\n  \n  // 初期処理\n  useEffect(() => {\n    // 設定を読み込む\n    loadSettings();\n    \n    // データ読み込み\n    console.log('MonthlyDataTab: fiscalYear/reportData変更検知', fiscalYear, reportData);\n    \n    if (reportData) {\n      console.log('親コンポーネントから受け取ったデータを処理します:', reportData);\n      setLoading(true); // 親コンポーネントからのデータ処理中もローディング状態に\n      processReportData(reportData);\n      return; // reportData が存在する場合は API 呼び出しをスキップ\n    }\n    \n    // reportData がない場合のみ API 呼び出し\n    console.log('MonthlyDataTab: APIからデータを取得します', fiscalYear);\n    fetchPaymentReport();\n  }, [fiscalYear, reportData]);\n  \n  // 月別のデータを計算\n  const calculatedData = useMemo(() => {\n    return monthlyData.map(item => {\n      // 数値型を確実に維持する\n      const employees = typeof item.employees === 'number' ? item.employees : \n                       (item.employees ? parseFloat(String(item.employees)) : 0);\n      \n      const disabledEmployees = typeof item.disabledEmployees === 'number' ? item.disabledEmployees : \n                               (item.disabledEmployees ? parseFloat(String(item.disabledEmployees)) : 0);\n      \n      // 実雇用率 = 障害者雇用数 / 常用労働者数 * 100\n      const employmentRate = employees > 0 \n        ? (disabledEmployees / employees) * 100\n        : 0;\n      \n      // 必要雇用数 = 常用労働者数 * 法定雇用率 / 100\n      const requiredEmployees = Math.floor(employees * LEGAL_EMPLOYMENT_RATE / 100);\n      \n      // 超過・未達 = 障害者雇用数 - 必要雇用数\n      const difference = disabledEmployees - requiredEmployees;\n      \n      // 調整金・納付金（設定値から計算）\n      const payment = difference >= 0 \n        ? difference * subsidyAmount  // 調整金（プラス）\n        : difference * paymentAmount; // 納付金（マイナス）\n      \n      return {\n        ...item,\n        employees,\n        disabledEmployees,\n        employmentRate,\n        requiredEmployees,\n        difference,\n        payment\n      };\n    });\n  }, [monthlyData, LEGAL_EMPLOYMENT_RATE, subsidyAmount, paymentAmount]);\n  \n  // 合計値を計算\n  const totals = useMemo(() => {\n    // 数値の合計を確実に計算するためのヘルパー関数\n    const sumNumericValues = (values: any[]) => {\n      return values.reduce((sum, value) => {\n        const numValue = typeof value === 'number' ? value : \n                        (value ? parseFloat(String(value)) : 0);\n        return sum + (isNaN(numValue) ? 0 : numValue);\n      }, 0);\n    };\n    \n    const employeesArray = monthlyData.map(item => item.employees);\n    const disabledArray = monthlyData.map(item => item.disabledEmployees);\n    const requiredArray = calculatedData.map(item => item.requiredEmployees);\n    \n    const totalEmployees = sumNumericValues(employeesArray);\n    const totalDisabled = sumNumericValues(disabledArray);\n    const totalRequiredEmployees = sumNumericValues(requiredArray);\n    \n    const totalDifference = totalDisabled - totalRequiredEmployees;\n    \n    // 合計金額を計算（各月の調整金/納付金合計）\n    const totalPayment = calculatedData.reduce((sum, item) => sum + item.payment, 0);\n    \n    return {\n      totalEmployees,\n      totalDisabled,\n      totalRequiredEmployees,\n      totalDifference,\n      totalPayment\n    };\n  }, [calculatedData, monthlyData]);\n  \n  // 金額の表示フォーマット\n  const formatNumber = (num: number) => {\n    // NaNの場合は0として表示\n    if (isNaN(num)) return '0';\n    return num.toLocaleString();\n  };\n\n  // 平均従業員数を計算するヘルパー関数\n  const calculateAverageEmployees = (monthlyData: {[key: string]: number}) => {\n    const values = Object.values(monthlyData);\n    if (values.length === 0) return 0;\n    \n    // NaNを除外した有効な値の平均を計算\n    const validValues = values.filter(v => !isNaN(v) && v !== null && v !== undefined);\n    if (validValues.length === 0) return 0;\n    \n    const sum = validValues.reduce((a, b) => a + (isNaN(b) ? 0 : b), 0);\n    return sum / validValues.length;\n  };\n\n  // インポート完了ハンドラ\n  const handleImportComplete = (importedData: any) => {\n    console.log('インポート完了', importedData);\n    \n    // データのバリデーション\n    if (!importedData) {\n      console.error('インポートデータが空です');\n      alert('インポートデータが無効です。CSVファイルの内容を確認してください。');\n      return;\n    }\n    \n    if (!importedData.totalRegularEmployees || !importedData.disabledEmployees) {\n      console.error('インポートデータに必要なフィールドがありません:', importedData);\n      alert('インポートデータに常用労働者数または障がい者雇用者数がありません。CSVファイルの内容を確認してください。');\n      return;\n    }\n    \n    if (Object.keys(importedData.totalRegularEmployees).length === 0 || \n        Object.keys(importedData.disabledEmployees).length === 0) {\n      console.error('インポートデータのフィールドが空です:', importedData);\n      alert('インポートデータに月別の数値データがありません。CSVファイルの内容を確認してください。');\n      return;\n    }\n    \n    console.log('インポートデータの検証に成功しました:', importedData);\n    \n    // 月別データの変換\n    const months = [\n      '4月', '5月', '6月', '7月', '8月', '9月', \n      '10月', '11月', '12月', '1月', '2月', '3月'\n    ];\n    const monthKeys = [\n      'april', 'may', 'june', 'july', 'august', 'september',\n      'october', 'november', 'december', 'january', 'february', 'march'\n    ];\n    \n    const formattedData = months.map((month, index) => {\n      const key = monthKeys[index];\n      \n      // 数値型を確実に維持する\n      const employeeValue = importedData.totalRegularEmployees[key];\n      const disabledValue = importedData.disabledEmployees[key];\n      \n      // 数値変換（NaNをチェック）\n      const employees = typeof employeeValue === 'number' ? employeeValue : \n                       (employeeValue ? parseFloat(String(employeeValue)) : 0);\n      const disabledEmployees = typeof disabledValue === 'number' ? disabledValue : \n                              (disabledValue ? parseFloat(String(disabledValue)) : 0);\n      \n      return {\n        month: month,\n        employees: isNaN(employees) ? 0 : employees,\n        disabledEmployees: isNaN(disabledEmployees) ? 0 : disabledEmployees\n      };\n    });\n    \n    console.log('CSVから生成した表示データ:', formattedData);\n    \n    // 画面表示を更新\n    setMonthlyData(formattedData);\n    \n    // データを保存\n    saveImportedData(importedData);\n  };\n  \n  // 数値を安全に変換するヘルパー関数（NaNをチェック）\n  const safeParseFloat = (value: any): string => {\n    if (value === null || value === undefined) return '0.0';\n    \n    // 数値型の場合\n    if (typeof value === 'number') {\n      return isNaN(value) ? '0.0' : value.toFixed(1);\n    }\n    \n    // 文字列や他の型の場合\n    const parsedValue = parseFloat(String(value));\n    if (isNaN(parsedValue)) {\n      return '0.0';\n    }\n    return parsedValue.toFixed(1); // 小数点1桁で表示\n  };\n  \n  // インポートしたデータを保存する関数\n  const saveImportedData = async (importedData: any) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // 年度を取得\n      const year = importedData.year;\n      console.log('保存するデータ準備:', importedData);\n      \n      // 既存のレポートデータを取得\n      let existingData: any = null;\n      try {\n        existingData = await paymentReportApi.getPaymentReport(year);\n        console.log('既存データ:', existingData);\n      } catch (error) {\n        console.log('既存データなし、新規作成します');\n      }\n      \n      // 月次データから平均値を計算\n      const avgTotalEmployees = calculateAverageEmployees(importedData.totalRegularEmployees);\n      const avgDisabledEmployees = calculateAverageEmployees(importedData.disabledEmployees);\n      \n      console.log('計算した平均値:', {\n        avgTotalEmployees,\n        avgDisabledEmployees\n      });\n      \n      // APIに送信するデータを構築\n      const paymentReportData = {\n        // 既存データの情報を引き継ぐ (ただし上書きしたいフィールドは除く)\n        ...(existingData || {}),\n        \n        // 基本プロパティを更新\n        year,\n        fiscal_year: year,\n        \n        // 計算した平均値で上書き（必ず数値型で保存）\n        total_employees: Number(avgTotalEmployees),\n        disabled_employees: Number(avgDisabledEmployees),\n        average_employee_count: Number(avgTotalEmployees),\n        actual_employment_count: Number(avgDisabledEmployees),\n        \n        // 実雇用率を再計算\n        employment_rate: avgTotalEmployees > 0 ? (avgDisabledEmployees / avgTotalEmployees * 100) : 0,\n        \n        // 月次データを直接オブジェクトとして設定（文字列ではなく）\n        monthly_data: importedData\n      };\n      \n      // IDフィールドを削除（新規作成対応）\n      if ('id' in paymentReportData) {\n        delete paymentReportData.id;\n      }\n      \n      // 画面表示用に月次データを更新\n      const formattedData = processStandardFormat(importedData);\n      setMonthlyData(formattedData);\n      \n      console.log('送信するデータ:', paymentReportData);\n      \n      // APIでデータを保存\n      const savedData = await paymentReportApi.savePaymentReport(year, paymentReportData);\n      console.log('保存されたデータ:', savedData);\n      \n      setLoading(false);\n      alert('月別データを保存しました。');\n    } catch (err) {\n      setLoading(false);\n      setError(err instanceof Error ? err.message : '月別データの保存に失敗しました');\n      console.error('月別データの保存エラー:', err);\n    }\n  };\n  \n  // インポートモーダルを閉じる\n  const handleCloseImport = () => {\n    setShowImport(false);\n  };\n\n  return (\n    <div style={{ padding: '0', marginTop: '1rem' }}>\n      {/* ヘッダー部分にCSVインポートボタンを追加 */}\n      <div style={{ \n        display: 'flex', \n        justifyContent: 'space-between', \n        alignItems: 'center',\n        marginBottom: '1rem'\n      }}>\n        <h3 style={{ margin: 0 }}>月別データ ({fiscalYear})</h3>\n        <button \n          onClick={() => setShowImport(true)}\n          style={{ \n            backgroundColor: '#4CAF50',\n            color: 'white',\n            padding: '8px 15px',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer',\n            fontSize: '14px'\n          }}\n        >\n          CSVインポート\n        </button>\n      </div>\n      \n      {loading && (\n        <div style={{ \n          padding: '12px', \n          textAlign: 'center', \n          backgroundColor: '#f8f9fa', \n          borderRadius: '4px', \n          marginBottom: '1rem' \n        }}>\n          データを読み込み中...\n        </div>\n      )}\n      \n      {error && (\n        <div style={{ \n          backgroundColor: '#f8d7da', \n          color: '#721c24', \n          padding: '8px 12px', \n          borderRadius: '4px', \n          marginBottom: '1rem' \n        }}>\n          {error}\n        </div>\n      )}\n\n      <div style={{ overflowX: 'auto' }}>\n        <table style={{ width: '100%', borderCollapse: 'collapse', fontSize: '12px', tableLayout: 'fixed' }}>\n          <thead>\n            <tr style={{ borderBottom: '1px solid #dee2e6' }}>\n              <th style={{ \n                padding: '6px 4px', \n                textAlign: 'left', \n                fontWeight: 'normal', \n                backgroundColor: '#f8f9fa', \n                borderBottom: '1px solid #dee2e6', \n                whiteSpace: 'nowrap',\n                width: '150px', // 項目列の幅を固定\n                height: '36px' // 高さを固定\n              }}>項目</th>\n              {monthlyData.map((item, idx) => (\n                <th key={`month-header-${item.month}-${idx}`} style={{ \n                  padding: '6px 4px', \n                  textAlign: 'center', \n                  fontWeight: 'normal', \n                  backgroundColor: '#f8f9fa', \n                  borderBottom: '1px solid #dee2e6', \n                  whiteSpace: 'nowrap',\n                  width: '60px', // 各月の列幅を固定\n                  height: '36px' // 高さを固定\n                }}>\n                  {item.month}\n                </th>\n              ))}\n              <th style={{ \n                padding: '6px 4px', \n                textAlign: 'center', \n                fontWeight: 'normal', \n                backgroundColor: '#f8f9fa', \n                borderBottom: '1px solid #dee2e6', \n                whiteSpace: 'nowrap',\n                width: '80px', // 合計列の幅を固定（少し広め）\n                height: '36px' // 高さを固定\n              }}>\n                合計\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {/* 常用労働者数の行 */}\n            <tr>\n              <td style={{ \n                padding: '6px 4px', \n                textAlign: 'left', \n                fontWeight: 'normal', \n                backgroundColor: '#f8f9fa', \n                borderBottom: '1px solid #dee2e6',\n                height: '36px' // 高さを固定\n              }}>\n                常用労働者数(人)\n              </td>\n              {calculatedData.map((item, idx) => (\n                <td key={`employees-${item.month}-${idx}`} style={{ \n                  padding: '6px 4px', \n                  textAlign: 'center', \n                  borderBottom: '1px solid #dee2e6',\n                  height: '36px' // 高さを固定\n                }}>\n                  {formatNumber(item.employees)}\n                </td>\n              ))}\n              <td style={{ \n                padding: '6px 4px', \n                textAlign: 'center', \n                borderBottom: '1px solid #dee2e6', \n                fontWeight: 'bold',\n                height: '36px' // 高さを固定\n              }}>\n                {formatNumber(totals.totalEmployees)}\n              </td>\n            </tr>\n            \n            {/* 障がい者雇用者数の行 */}\n            <tr>\n              <td style={{ \n                padding: '6px 4px', \n                textAlign: 'left', \n                fontWeight: 'normal', \n                backgroundColor: '#f8f9fa', \n                borderBottom: '1px solid #dee2e6',\n                height: '36px' // 高さを固定\n              }}>\n                障がい者雇用者数(人)\n              </td>\n              {calculatedData.map((item, idx) => (\n                <td key={`disabled-${item.month}-${idx}`} style={{ \n                  padding: '6px 4px', \n                  textAlign: 'center', \n                  borderBottom: '1px solid #dee2e6',\n                  height: '36px' // 高さを固定\n                }}>\n                  {/* 小数点以下を表示するが、0なら小数点以下を表示しない */}\n                  {item.disabledEmployees % 1 === 0 \n                    ? Math.floor(item.disabledEmployees) \n                    : item.disabledEmployees.toFixed(1)}\n                </td>\n              ))}\n              <td style={{ \n                padding: '6px 4px', \n                textAlign: 'center', \n                borderBottom: '1px solid #dee2e6', \n                fontWeight: 'bold',\n                height: '36px' // 高さを固定\n              }}>\n                {/* 小数点以下を表示するが、0なら小数点以下を表示しない */}\n                {totals.totalDisabled % 1 === 0 \n                  ? Math.floor(totals.totalDisabled) \n                  : totals.totalDisabled.toFixed(1)}\n              </td>\n            </tr>\n            \n            {/* 超過・未達の行 */}\n            <tr>\n              <td style={{ \n                padding: '6px 4px', \n                textAlign: 'left', \n                fontWeight: 'normal', \n                backgroundColor: '#f8f9fa', \n                borderBottom: '1px solid #dee2e6',\n                height: '36px' // 高さを固定\n              }}>\n                超過・未達(人)\n              </td>\n              {calculatedData.map((item, idx) => (\n                <td key={`difference-${item.month}-${idx}`} style={{ \n                  padding: '6px 4px', \n                  textAlign: 'center', \n                  borderBottom: '1px solid #dee2e6',\n                  color: item.difference < 0 ? '#dc3545' : 'inherit',\n                  height: '36px' // 高さを固定\n                }}>\n                  {/* 小数点以下を表示するが、0なら小数点以下を表示しない */}\n                  {item.difference > 0 \n                    ? '+' + (item.difference % 1 === 0 ? Math.floor(item.difference) : item.difference.toFixed(1))\n                    : (item.difference % 1 === 0 ? Math.floor(item.difference) : item.difference.toFixed(1))}\n                </td>\n              ))}\n              <td style={{ \n                padding: '6px 4px', \n                textAlign: 'center', \n                borderBottom: '1px solid #dee2e6', \n                fontWeight: 'bold',\n                color: totals.totalDifference < 0 ? '#dc3545' : 'inherit',\n                height: '36px' // 高さを固定\n              }}>\n                {/* 小数点以下を表示するが、0なら小数点以下を表示しない */}\n                {totals.totalDifference > 0 \n                  ? '+' + (totals.totalDifference % 1 === 0 ? Math.floor(totals.totalDifference) : totals.totalDifference.toFixed(1))\n                  : (totals.totalDifference % 1 === 0 ? Math.floor(totals.totalDifference) : totals.totalDifference.toFixed(1))}\n              </td>\n            </tr>\n            \n            {/* 調整金・納付金の行 */}\n            <tr>\n              <td style={{ \n                padding: '6px 4px', \n                textAlign: 'left', \n                fontWeight: 'normal', \n                backgroundColor: '#f8f9fa', \n                borderBottom: '1px solid #dee2e6',\n                height: '36px' // 高さを固定\n              }}>\n                調整金・納付金(円)\n              </td>\n              {calculatedData.map((item, idx) => (\n                <td key={`payment-${item.month}-${idx}`} style={{ \n                  padding: '6px 4px', \n                  textAlign: 'center', \n                  borderBottom: '1px solid #dee2e6',\n                  color: item.payment < 0 ? '#dc3545' : '#28a745',\n                  height: '36px' // 高さを固定\n                }}>\n                  {formatNumber(item.payment)}\n                </td>\n              ))}\n              <td style={{ \n                padding: '6px 4px', \n                textAlign: 'center', \n                borderBottom: '1px solid #dee2e6', \n                fontWeight: 'bold',\n                color: totals.totalPayment < 0 ? '#dc3545' : '#28a745',\n                height: '36px' // 高さを固定\n              }}>\n                {formatNumber(totals.totalPayment)}\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n      \n      {/* インポートモーダルのオーバーレイ */}\n      {showImport && (\n        <div style={{ \n          position: 'fixed',\n          top: 0,\n          left: 0,\n          width: '100%',\n          height: '100%',\n          backgroundColor: 'rgba(0, 0, 0, 0.5)',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          zIndex: 50\n        }}>\n          <MonthlyDataImport \n            onImportComplete={handleImportComplete}\n            onClose={handleCloseImport}\n            currentYear={getYearValue()} // 年度を渡す\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MonthlyDataTab;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}