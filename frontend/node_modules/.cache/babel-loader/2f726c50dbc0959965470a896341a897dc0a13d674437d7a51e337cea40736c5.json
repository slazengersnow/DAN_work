{"ast":null,"code":"/**\n * デバッグログユーティリティ - CSVインポート機能向け\n * localStorage.debug_mode = 'true' が設定されている場合のみログを出力\n */\n\n// デバッグモードの状態をチェック\nconst isDebugMode = () => {\n  try {\n    return localStorage.getItem('debug_mode') === 'true';\n  } catch (error) {\n    return false;\n  }\n};\n\n// デバッグモードの設定\nexport const setDebugMode = enabled => {\n  try {\n    localStorage.setItem('debug_mode', enabled ? 'true' : 'false');\n  } catch (error) {\n    console.warn('デバッグモードの設定に失敗しました', error);\n  }\n};\n\n// デバッグモードの取得\nexport const getDebugMode = () => {\n  return isDebugMode();\n};\n\n// デバッグモードの切り替え\nexport const toggleDebugMode = () => {\n  const current = isDebugMode();\n  setDebugMode(!current);\n  return !current;\n};\n\n// インフォメーションログ\nexport const logInfo = (message, ...args) => {\n  if (isDebugMode()) {\n    console.info(`[CSV INFO] ${message}`, ...args);\n  }\n};\n\n// デバッグログ\nexport const logDebug = (message, ...args) => {\n  if (isDebugMode()) {\n    console.log(`[CSV DEBUG] ${message}`, ...args);\n  }\n};\n\n// 警告ログ\nexport const logWarning = (message, ...args) => {\n  if (isDebugMode()) {\n    console.warn(`[CSV WARNING] ${message}`, ...args);\n  }\n};\n\n// エラーログ\nexport const logError = (message, ...args) => {\n  if (isDebugMode()) {\n    console.error(`[CSV ERROR] ${message}`, ...args);\n  }\n};\n\n// パフォーマンス計測開始\nexport const startPerformanceTimer = label => {\n  if (isDebugMode()) {\n    console.time(`[CSV PERF] ${label}`);\n  }\n};\n\n// パフォーマンス計測終了\nexport const endPerformanceTimer = label => {\n  if (isDebugMode()) {\n    console.timeEnd(`[CSV PERF] ${label}`);\n  }\n};\n\n// オブジェクトの内容をログ出力\nexport const logObject = (label, obj) => {\n  if (isDebugMode()) {\n    console.groupCollapsed(`[CSV OBJECT] ${label}`);\n    console.dir(obj);\n    console.groupEnd();\n  }\n};\nexport default {\n  logInfo,\n  logDebug,\n  logWarning,\n  logError,\n  startPerformanceTimer,\n  endPerformanceTimer,\n  logObject,\n  getDebugMode,\n  setDebugMode,\n  toggleDebugMode\n};","map":{"version":3,"names":["isDebugMode","localStorage","getItem","error","setDebugMode","enabled","setItem","console","warn","getDebugMode","toggleDebugMode","current","logInfo","message","args","info","logDebug","log","logWarning","logError","startPerformanceTimer","label","time","endPerformanceTimer","timeEnd","logObject","obj","groupCollapsed","dir","groupEnd"],"sources":["/Users/gotouhiroaki/Programming/DAN_work/disability-employment-system/frontend/src/pages/MonthlyReport/DebugLogger.ts"],"sourcesContent":["/**\n * デバッグログユーティリティ - CSVインポート機能向け\n * localStorage.debug_mode = 'true' が設定されている場合のみログを出力\n */\n\n// デバッグモードの状態をチェック\nconst isDebugMode = (): boolean => {\n  try {\n    return localStorage.getItem('debug_mode') === 'true';\n  } catch (error) {\n    return false;\n  }\n};\n\n// デバッグモードの設定\nexport const setDebugMode = (enabled: boolean): void => {\n  try {\n    localStorage.setItem('debug_mode', enabled ? 'true' : 'false');\n  } catch (error) {\n    console.warn('デバッグモードの設定に失敗しました', error);\n  }\n};\n\n// デバッグモードの取得\nexport const getDebugMode = (): boolean => {\n  return isDebugMode();\n};\n\n// デバッグモードの切り替え\nexport const toggleDebugMode = (): boolean => {\n  const current = isDebugMode();\n  setDebugMode(!current);\n  return !current;\n};\n\n// インフォメーションログ\nexport const logInfo = (message: string, ...args: any[]): void => {\n  if (isDebugMode()) {\n    console.info(`[CSV INFO] ${message}`, ...args);\n  }\n};\n\n// デバッグログ\nexport const logDebug = (message: string, ...args: any[]): void => {\n  if (isDebugMode()) {\n    console.log(`[CSV DEBUG] ${message}`, ...args);\n  }\n};\n\n// 警告ログ\nexport const logWarning = (message: string, ...args: any[]): void => {\n  if (isDebugMode()) {\n    console.warn(`[CSV WARNING] ${message}`, ...args);\n  }\n};\n\n// エラーログ\nexport const logError = (message: string, ...args: any[]): void => {\n  if (isDebugMode()) {\n    console.error(`[CSV ERROR] ${message}`, ...args);\n  }\n};\n\n// パフォーマンス計測開始\nexport const startPerformanceTimer = (label: string): void => {\n  if (isDebugMode()) {\n    console.time(`[CSV PERF] ${label}`);\n  }\n};\n\n// パフォーマンス計測終了\nexport const endPerformanceTimer = (label: string): void => {\n  if (isDebugMode()) {\n    console.timeEnd(`[CSV PERF] ${label}`);\n  }\n};\n\n// オブジェクトの内容をログ出力\nexport const logObject = (label: string, obj: any): void => {\n  if (isDebugMode()) {\n    console.groupCollapsed(`[CSV OBJECT] ${label}`);\n    console.dir(obj);\n    console.groupEnd();\n  }\n};\n\nexport default {\n  logInfo,\n  logDebug,\n  logWarning,\n  logError,\n  startPerformanceTimer,\n  endPerformanceTimer,\n  logObject,\n  getDebugMode,\n  setDebugMode,\n  toggleDebugMode\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}