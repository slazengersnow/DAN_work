{"ast":null,"code":"import axios from 'axios';\n// API base URL\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n// エラーハンドリング関数 - ブラウザストレージエラー対応を追加\nexport const handleApiError = error => {\n  // ブラウザストレージアクセスエラーの特別処理\n  if (error instanceof Error && (error.message.includes('Access to storage is not allowed') || error.message.includes('Could not find identifiable element'))) {\n    console.log('ブラウザの設定による制限エラーです:', error.message);\n    return 'ブラウザの設定により一部機能が制限されていますが、処理は続行されます。';\n  }\n  if (axios.isAxiosError(error)) {\n    var _error$response, _error$response2, _error$response2$data;\n    // 特定のエラーパターンに対する処理\n    if (error.response && error.response.status === 500) {\n      if (error.response.data && error.response.data.error && error.response.data.error.includes('column \"notes\" of relation \"monthly_reports\" does not exist')) {\n        return '現在のデータベーススキーマでは \"notes\" フィールドがサポートされていません。データを保存できません。';\n      }\n      return 'サーバーエラーが発生しました。しばらく経ってから再試行してください。';\n    } else if (error.code === 'ECONNABORTED') {\n      return 'リクエストがタイムアウトしました。ネットワーク接続を確認してください。';\n    } else if (!error.response) {\n      return 'サーバーに接続できませんでした。ネットワーク接続を確認してください。';\n    }\n\n    // 404エラーの特別処理\n    if (error.response.status === 404) {\n      return error.response.data.message || '指定されたデータが見つかりません。';\n    }\n    return `エラー (${((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) || 'unknown'}): ${((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message}`;\n  }\n  return `予期せぬエラーが発生しました: ${error.message || error}`;\n};\n\n// 月次報告一覧を取得\nexport const getMonthlyReports = async () => {\n  try {\n    console.log(`月次レポート一覧取得: ${API_BASE_URL}/monthly-reports`);\n    const response = await axios.get(`${API_BASE_URL}/monthly-reports`, {\n      timeout: 10000\n    });\n    console.log('月次レポート一覧取得結果:', response.data);\n    return response.data.data || [];\n  } catch (error) {\n    console.error('月次レポート一覧取得エラー:', error);\n    throw error;\n  }\n};\n\n// 特定の年月の月次報告を取得\nexport const getMonthlyReport = async (year, month) => {\n  try {\n    // 年度または月が未定義の場合のデフォルト値を設定\n    const validYear = year || new Date().getFullYear();\n    const validMonth = month || new Date().getMonth() + 1;\n    console.log(`月次レポート取得: ${API_BASE_URL}/monthly-reports/${validYear}/${validMonth}`);\n    const response = await axios.get(`${API_BASE_URL}/monthly-reports/${validYear}/${validMonth}`, {\n      timeout: 10000\n    });\n    console.log('月次レポート取得結果:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error(`${year}年${month}月のレポート取得エラー:`, error);\n    throw error;\n  }\n};\n\n// 月次レポートを作成\nexport const createMonthlyReport = async (year, month, data) => {\n  try {\n    // データチェック\n    if (!data.fiscal_year) {\n      data.fiscal_year = year;\n    }\n    if (!data.month) {\n      data.month = month;\n    }\n\n    // 小数点表示の修正\n    if (data.legal_employment_rate !== undefined && typeof data.legal_employment_rate === 'number') {\n      // 小数点以下が0なら追加\n      if (data.legal_employment_rate === Math.floor(data.legal_employment_rate)) {\n        data.legal_employment_rate = parseFloat(data.legal_employment_rate.toFixed(1));\n      }\n    }\n    console.log(`月次レポート作成: ${API_BASE_URL}/monthly-reports`);\n    console.log('作成データ:', JSON.stringify(data, null, 2));\n    const response = await axios.post(`${API_BASE_URL}/monthly-reports`, data, {\n      timeout: 10000,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log('月次レポート作成結果:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error(`${year}年${month}月のレポート作成エラー:`, error);\n    throw error;\n  }\n};\n\n// 月次レポートを更新\nexport const updateMonthlyReport = async (year, month, data) => {\n  try {\n    // 小数点表示の修正\n    if (data.legal_employment_rate !== undefined && typeof data.legal_employment_rate === 'number') {\n      // 小数点以下が0なら追加\n      if (data.legal_employment_rate === Math.floor(data.legal_employment_rate)) {\n        data.legal_employment_rate = parseFloat(data.legal_employment_rate.toFixed(1));\n      }\n    }\n    console.log(`月次レポート更新: ${API_BASE_URL}/monthly-reports/${year}/${month}`);\n    console.log('更新データ:', JSON.stringify(data, null, 2));\n    const response = await axios.put(`${API_BASE_URL}/monthly-reports/${year}/${month}`, data, {\n      timeout: 10000,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log('月次レポート更新結果:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error(`${year}年${month}月のレポート更新エラー:`, error);\n    throw error;\n  }\n};\n\n// 月次レポートのステータス更新（確定/未確定）\nexport const updateReportStatus = async (year, month, status) => {\n  try {\n    console.log(`レポートステータス更新: ${API_BASE_URL}/monthly-reports/${year}/${month}/confirm`);\n    console.log('ステータス:', status);\n    const response = await axios.put(`${API_BASE_URL}/monthly-reports/${year}/${month}/confirm`, {\n      status\n    }, {\n      timeout: 5000,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log('レポートステータス更新結果:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error(`${year}年${month}月のレポートステータス更新エラー:`, error);\n    throw error;\n  }\n};\n\n// 従業員データの更新 - 改善版\nexport const updateEmployeeData = async (year, employeeId, data) => {\n  try {\n    var _response$data;\n    console.log(`従業員更新API呼び出し: ${API_BASE_URL}/employees/${employeeId}`);\n    console.log('更新データ:', JSON.stringify(data, null, 2));\n\n    // 月次ステータスの特別処理\n    if (data.monthlyStatus) {\n      try {\n        // 文字列からJSONパースを試みる\n        const monthlyStatus = JSON.parse(data.monthlyStatus);\n\n        // 配列であることを確認\n        if (!Array.isArray(monthlyStatus)) {\n          throw new Error('月次ステータスが配列ではありません');\n        }\n\n        // 12ヶ月分のデータであることを確認\n        if (monthlyStatus.length !== 12) {\n          // 長さが足りない場合は足りない分を補完\n          while (monthlyStatus.length < 12) {\n            monthlyStatus.push(1);\n          }\n          // 長すぎる場合は切り詰め\n          if (monthlyStatus.length > 12) {\n            monthlyStatus.length = 12;\n          }\n\n          // 修正したデータを再度文字列化\n          data.monthlyStatus = JSON.stringify(monthlyStatus);\n        }\n      } catch (parseError) {\n        console.error('月次ステータス解析エラー:', parseError);\n        // エラーが発生した場合はデフォルト値に設定\n        data.monthlyStatus = JSON.stringify(Array(12).fill(1));\n      }\n    }\n\n    // API呼び出し - 月パラメータを削除し、年度情報を追加\n    const response = await axios.patch(`${API_BASE_URL}/employees/${employeeId}`, {\n      ...data,\n      fiscal_year: year // 年度情報を追加\n    }, {\n      timeout: 10000,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log('従業員更新API応答:', response.data);\n    if (response.data && response.data.success) {\n      return response.data.data || null;\n    }\n    throw new Error(((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.message) || 'データの更新に失敗しました。');\n  } catch (error) {\n    console.error(`従業員ID ${employeeId} の更新エラー:`, error);\n\n    // エラー処理\n    if (axios.isAxiosError(error)) {\n      if (error.response) {\n        var _error$response$data;\n        console.error('サーバーエラー:', error.response.status, error.response.data);\n        throw new Error(((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'データの更新に失敗しました。');\n      } else if (error.request) {\n        throw new Error('サーバーからの応答がありません。ネットワーク接続を確認してください。');\n      } else {\n        throw new Error(`リクエスト設定エラー: ${error.message}`);\n      }\n    }\n    throw error;\n  }\n};\n\n// 従業員データの作成 - 改善版\nexport const createEmployeeDetail = async (year, employeeData) => {\n  try {\n    var _response$data2;\n    console.log(`従業員作成API呼び出し: ${API_BASE_URL}/employees`);\n    console.log('Request Body:', JSON.stringify(employeeData, null, 2));\n\n    // 従業員データの前処理\n    const processedData = {\n      ...employeeData,\n      fiscal_year: year,\n      // 年度情報を追加\n      // 月次ステータスが配列でない場合は配列に変換（デフォルトは空文字列）\n      monthlyStatus: Array.isArray(employeeData.monthlyStatus) ? employeeData.monthlyStatus : Array(12).fill('')\n    };\n\n    // API呼び出し - 月パラメータを削除\n    const response = await axios.post(`${API_BASE_URL}/employees`, processedData, {\n      // タイムアウト設定を長めに\n      timeout: 10000,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log('従業員作成API応答:', response.data);\n\n    // 応答データの検証\n    if (response.data && response.data.success) {\n      // データを返す前に整形\n      const responseData = response.data.data || null;\n      if (responseData) {\n        // IDが含まれているか確認\n        if (!responseData.id) {\n          console.warn('警告: API応答に従業員IDが含まれていません。仮IDを設定します。');\n          responseData.id = Date.now(); // 仮IDを設定\n        }\n\n        // 月次ステータスが配列でない場合は配列に変換\n        if (!Array.isArray(responseData.monthlyStatus)) {\n          responseData.monthlyStatus = Array(12).fill(1);\n        }\n        return responseData;\n      }\n\n      // データがない場合は送信データにIDを付与して返す\n      return {\n        ...processedData,\n        id: Date.now() // 仮IDを設定\n      };\n    }\n    throw new Error(((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.message) || 'データの作成に失敗しました。');\n  } catch (error) {\n    console.error('従業員作成エラー詳細:', error);\n\n    // エラーの種類に応じた処理\n    if (axios.isAxiosError(error)) {\n      if (error.response) {\n        var _error$response$data3;\n        // サーバーからのエラーレスポンス\n        console.error('サーバーエラー:', error.response.status, error.response.data);\n        if (error.response.status === 404) {\n          throw new Error('APIエンドポイントが見つかりません。バックエンドサービスを確認してください。');\n        }\n        if (error.response.status === 400) {\n          var _error$response$data2;\n          throw new Error(`入力データエラー: ${((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.message) || 'リクエストの形式が正しくありません'}`);\n        }\n        throw new Error(((_error$response$data3 = error.response.data) === null || _error$response$data3 === void 0 ? void 0 : _error$response$data3.message) || '従業員データの作成に失敗しました。');\n      } else if (error.request) {\n        // リクエストは送信されたがレスポンスがない\n        console.error('レスポンスなしエラー:', error.request);\n        throw new Error('サーバーからの応答がありません。ネットワーク接続を確認してください。');\n      } else {\n        // リクエスト設定中のエラー\n        console.error('リクエスト設定エラー:', error.message);\n        throw new Error(`リクエスト設定エラー: ${error.message}`);\n      }\n    }\n\n    // その他のエラー\n    throw error;\n  }\n};\n\n// データ存在チェック - 改善版\nexport const checkReportExists = async (year, month) => {\n  try {\n    var _response$data3;\n    console.log(`データ存在チェック: ${API_BASE_URL}/monthly-reports/${year}/${month}`);\n    const response = await axios.get(`${API_BASE_URL}/monthly-reports/${year}/${month}`, {\n      timeout: 5000,\n      validateStatus: status => {\n        // 200番台は成功、404はデータ無しとして扱う\n        return status >= 200 && status < 300 || status === 404;\n      }\n    });\n    console.log('データ存在チェック結果:', response.status, (_response$data3 = response.data) === null || _response$data3 === void 0 ? void 0 : _response$data3.success);\n\n    // ステータスコードとレスポンスの中身で存在確認\n    return response.status === 200 && !!response.data && !!response.data.success;\n  } catch (error) {\n    console.error('データ存在チェックエラー:', error);\n\n    // エラーが発生した場合は存在しないと判断\n    return false;\n  }\n};\n\n// 従業員データの削除\nexport const deleteEmployeeData = async (year, employeeId) => {\n  try {\n    var _response$data4;\n    console.log(`従業員削除: ${API_BASE_URL}/employees/${employeeId}`);\n\n    // 年度パラメータをクエリとして追加\n    const response = await axios.delete(`${API_BASE_URL}/employees/${employeeId}?fiscal_year=${year}`, {\n      timeout: 5000\n    });\n    console.log('従業員削除結果:', response.data);\n    if (response.data && response.data.success) {\n      return true;\n    }\n    throw new Error(((_response$data4 = response.data) === null || _response$data4 === void 0 ? void 0 : _response$data4.message) || 'データの削除に失敗しました。');\n  } catch (error) {\n    console.error(`従業員ID ${employeeId} の削除エラー:`, error);\n    throw error;\n  }\n};\n\n// CSVインポート\nexport const importEmployeesFromCSV = async (year, fileData) => {\n  try {\n    var _response$data5;\n    // 年度情報をフォームデータに追加\n    fileData.append('fiscal_year', year.toString());\n    console.log(`CSVインポート: ${API_BASE_URL}/employees/import`);\n    const response = await axios.post(`${API_BASE_URL}/employees/import`, fileData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      },\n      timeout: 30000 // CSVインポートは時間がかかる可能性があるため長めに設定\n    });\n    console.log('CSVインポート結果:', response.data);\n    if (response.data && response.data.success) {\n      return response.data.data || null;\n    }\n    throw new Error(((_response$data5 = response.data) === null || _response$data5 === void 0 ? void 0 : _response$data5.message) || 'CSVインポートに失敗しました。');\n  } catch (error) {\n    console.error('CSVインポートエラー:', error);\n    throw error;\n  }\n};\n\n// 月次サマリーを更新\nexport const updateMonthlySummary = async (year, month, data) => {\n  try {\n    // notesフィールドを除去（型を拡張してnotesを許可）\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {\n      notes,\n      ...cleanedData\n    } = data;\n    console.log(`月次サマリー更新: ${year}年${month}月`);\n    console.log('更新データ:', cleanedData);\n\n    // 現在のデータを取得（データが存在するかチェック）\n    let existingData;\n    try {\n      existingData = await getMonthlyReport(year, month);\n    } catch (error) {\n      console.log('既存データなし、新規作成モードで続行します');\n      existingData = null;\n    }\n\n    // データの存在によってエンドポイントを切り替え\n    let endpoint;\n    let method;\n    let requestData = {\n      ...cleanedData\n    };\n    if (existingData && existingData.summary) {\n      // データが存在する場合は更新\n      endpoint = `${API_BASE_URL}/monthly-reports/${year}/${month}/summary`;\n      method = 'PUT';\n    } else {\n      // データが存在しない場合は作成\n      endpoint = `${API_BASE_URL}/monthly-reports`;\n      method = 'POST';\n\n      // 新規作成の場合はfiscal_yearとmonthを追加\n      requestData = {\n        ...cleanedData,\n        fiscal_year: year,\n        month: month\n      };\n    }\n    console.log(`APIリクエスト: ${method} ${endpoint}`);\n    console.log('リクエストデータ:', requestData);\n\n    // APIリクエスト\n    const response = await axios({\n      method: method,\n      url: endpoint,\n      data: requestData,\n      timeout: 10000,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log('API応答:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('API エラー:', error);\n    throw new Error(handleApiError(error));\n  }\n};\n\n// 詳細セルを更新\nexport const updateDetailCell = async (year, month, detailId, field, value) => {\n  try {\n    console.log(`詳細セル更新: ${API_BASE_URL}/monthly-reports/${year}/${month}/details/${detailId}`);\n    console.log('更新フィールド:', field, '値:', value);\n    const response = await axios.put(`${API_BASE_URL}/monthly-reports/${year}/${month}/details/${detailId}`, {\n      [field]: value\n    }, {\n      timeout: 5000,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log('詳細セル更新結果:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error(`詳細セル更新エラー:`, error);\n    throw new Error(handleApiError(error));\n  }\n};\n\n// 月次レポートを確認（確定）\nexport const confirmMonthlyReport = async (year, month) => {\n  try {\n    console.log(`レポート確定: ${API_BASE_URL}/monthly-reports/${year}/${month}/confirm`);\n    const response = await axios.post(`${API_BASE_URL}/monthly-reports/${year}/${month}/confirm`, {}, {\n      timeout: 5000,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log('レポート確定結果:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error(`レポート確定エラー:`, error);\n    throw new Error(handleApiError(error));\n  }\n};\n\n// 特定年度の従業員一覧を取得\nexport const getEmployeesByYear = async year => {\n  try {\n    console.log(`年度別従業員一覧取得: ${API_BASE_URL}/employees?fiscal_year=${year}`);\n    const response = await axios.get(`${API_BASE_URL}/employees?fiscal_year=${year}`, {\n      timeout: 10000\n    });\n    console.log(`${year}年度の従業員一覧取得結果:`, response.data);\n    return response.data.data || [];\n  } catch (error) {\n    console.error(`${year}年度の従業員一覧取得エラー:`, error);\n    throw error;\n  }\n};\n\n// システム設定を取得する関数\nexport const getSettings = async () => {\n  try {\n    console.log(`設定取得: ${API_BASE_URL}/settings`);\n    const response = await axios.get(`${API_BASE_URL}/settings`, {\n      timeout: 5000\n    });\n    console.log('設定取得結果:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('設定の取得中にエラーが発生しました:', error);\n    throw new Error(handleApiError(error));\n  }\n};\n\n// API関数をまとめたオブジェクト\nexport const reportApi = {\n  getMonthlyReports,\n  getMonthlyReport,\n  updateEmployeeData,\n  updateReportStatus,\n  updateMonthlySummary,\n  createMonthlyReport,\n  updateMonthlyReport,\n  createEmployeeDetail,\n  checkReportExists,\n  deleteEmployeeData,\n  importEmployeesFromCSV,\n  handleApiError,\n  updateDetailCell,\n  confirmMonthlyReport,\n  getSettings,\n  getEmployeesByYear\n};\nexport default reportApi;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","handleApiError","error","Error","message","includes","console","log","isAxiosError","_error$response","_error$response2","_error$response2$data","response","status","data","code","getMonthlyReports","get","timeout","getMonthlyReport","year","month","validYear","Date","getFullYear","validMonth","getMonth","createMonthlyReport","fiscal_year","legal_employment_rate","undefined","Math","floor","parseFloat","toFixed","JSON","stringify","post","headers","updateMonthlyReport","put","updateReportStatus","updateEmployeeData","employeeId","_response$data","monthlyStatus","parse","Array","isArray","length","push","parseError","fill","patch","success","_error$response$data","request","createEmployeeDetail","employeeData","_response$data2","processedData","responseData","id","warn","now","_error$response$data3","_error$response$data2","checkReportExists","_response$data3","validateStatus","deleteEmployeeData","_response$data4","delete","importEmployeesFromCSV","fileData","_response$data5","append","toString","updateMonthlySummary","notes","cleanedData","existingData","endpoint","method","requestData","summary","url","updateDetailCell","detailId","field","value","confirmMonthlyReport","getEmployeesByYear","getSettings","reportApi"],"sources":["/Users/gotouhiroaki/Programming/DAN_work/disability-employment-system/frontend/src/api/reportApi.ts"],"sourcesContent":["import axios, { AxiosError } from 'axios';\nimport { MonthlyTotal, Employee } from '../pages/MonthlyReport/types';\n\n// API base URL\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n// エラーハンドリング関数 - ブラウザストレージエラー対応を追加\nexport const handleApiError = (error: any): string => {\n  // ブラウザストレージアクセスエラーの特別処理\n  if (error instanceof Error && \n    (error.message.includes('Access to storage is not allowed') || \n     error.message.includes('Could not find identifiable element'))) {\n    console.log('ブラウザの設定による制限エラーです:', error.message);\n    return 'ブラウザの設定により一部機能が制限されていますが、処理は続行されます。';\n  }\n\n  if (axios.isAxiosError(error)) {\n    // 特定のエラーパターンに対する処理\n    if (error.response && error.response.status === 500) {\n      if (error.response.data && error.response.data.error &&\n          error.response.data.error.includes('column \"notes\" of relation \"monthly_reports\" does not exist')) {\n        return '現在のデータベーススキーマでは \"notes\" フィールドがサポートされていません。データを保存できません。';\n      }\n      return 'サーバーエラーが発生しました。しばらく経ってから再試行してください。';\n    } else if (error.code === 'ECONNABORTED') {\n      return 'リクエストがタイムアウトしました。ネットワーク接続を確認してください。';\n    } else if (!error.response) {\n      return 'サーバーに接続できませんでした。ネットワーク接続を確認してください。';\n    }\n    \n    // 404エラーの特別処理\n    if (error.response.status === 404) {\n      return error.response.data.message || '指定されたデータが見つかりません。';\n    }\n    \n    return `エラー (${error.response?.status || 'unknown'}): ${error.response?.data?.message || error.message}`;\n  }\n  \n  return `予期せぬエラーが発生しました: ${error.message || error}`;\n};\n\n// 月次報告一覧を取得\nexport const getMonthlyReports = async () => {\n  try {\n    console.log(`月次レポート一覧取得: ${API_BASE_URL}/monthly-reports`);\n    const response = await axios.get(\n      `${API_BASE_URL}/monthly-reports`,\n      {\n        timeout: 10000\n      }\n    );\n    console.log('月次レポート一覧取得結果:', response.data);\n    return response.data.data || [];\n  } catch (error) {\n    console.error('月次レポート一覧取得エラー:', error);\n    throw error;\n  }\n};\n\n// 特定の年月の月次報告を取得\nexport const getMonthlyReport = async (year?: number, month?: number) => {\n  try {\n    // 年度または月が未定義の場合のデフォルト値を設定\n    const validYear = year || new Date().getFullYear();\n    const validMonth = month || new Date().getMonth() + 1;\n    \n    console.log(`月次レポート取得: ${API_BASE_URL}/monthly-reports/${validYear}/${validMonth}`);\n    const response = await axios.get(\n      `${API_BASE_URL}/monthly-reports/${validYear}/${validMonth}`,\n      {\n        timeout: 10000\n      }\n    );\n    \n    console.log('月次レポート取得結果:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error(`${year}年${month}月のレポート取得エラー:`, error);\n    throw error;\n  }\n};\n\n// 月次レポートを作成\nexport const createMonthlyReport = async (year: number, month: number, data: any) => {\n  try {\n    // データチェック\n    if (!data.fiscal_year) {\n      data.fiscal_year = year;\n    }\n    if (!data.month) {\n      data.month = month;\n    }\n    \n    // 小数点表示の修正\n    if (data.legal_employment_rate !== undefined && typeof data.legal_employment_rate === 'number') {\n      // 小数点以下が0なら追加\n      if (data.legal_employment_rate === Math.floor(data.legal_employment_rate)) {\n        data.legal_employment_rate = parseFloat(data.legal_employment_rate.toFixed(1));\n      }\n    }\n    \n    console.log(`月次レポート作成: ${API_BASE_URL}/monthly-reports`);\n    console.log('作成データ:', JSON.stringify(data, null, 2));\n    \n    const response = await axios.post(\n      `${API_BASE_URL}/monthly-reports`,\n      data,\n      {\n        timeout: 10000,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }\n    );\n    \n    console.log('月次レポート作成結果:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error(`${year}年${month}月のレポート作成エラー:`, error);\n    throw error;\n  }\n};\n\n// 月次レポートを更新\nexport const updateMonthlyReport = async (year: number, month: number, data: any) => {\n  try {\n    // 小数点表示の修正\n    if (data.legal_employment_rate !== undefined && typeof data.legal_employment_rate === 'number') {\n      // 小数点以下が0なら追加\n      if (data.legal_employment_rate === Math.floor(data.legal_employment_rate)) {\n        data.legal_employment_rate = parseFloat(data.legal_employment_rate.toFixed(1));\n      }\n    }\n    \n    console.log(`月次レポート更新: ${API_BASE_URL}/monthly-reports/${year}/${month}`);\n    console.log('更新データ:', JSON.stringify(data, null, 2));\n    \n    const response = await axios.put(\n      `${API_BASE_URL}/monthly-reports/${year}/${month}`,\n      data,\n      {\n        timeout: 10000,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }\n    );\n    \n    console.log('月次レポート更新結果:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error(`${year}年${month}月のレポート更新エラー:`, error);\n    throw error;\n  }\n};\n\n// 月次レポートのステータス更新（確定/未確定）\nexport const updateReportStatus = async (year: number, month: number, status: string) => {\n  try {\n    console.log(`レポートステータス更新: ${API_BASE_URL}/monthly-reports/${year}/${month}/confirm`);\n    console.log('ステータス:', status);\n    \n    const response = await axios.put(\n      `${API_BASE_URL}/monthly-reports/${year}/${month}/confirm`,\n      { status },\n      {\n        timeout: 5000,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }\n    );\n    \n    console.log('レポートステータス更新結果:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error(`${year}年${month}月のレポートステータス更新エラー:`, error);\n    throw error;\n  }\n};\n\n// 従業員データの更新 - 改善版\nexport const updateEmployeeData = async (year: number, employeeId: number, data: Record<string, string>) => {\n  try {\n    console.log(`従業員更新API呼び出し: ${API_BASE_URL}/employees/${employeeId}`);\n    console.log('更新データ:', JSON.stringify(data, null, 2));\n    \n    // 月次ステータスの特別処理\n    if (data.monthlyStatus) {\n      try {\n        // 文字列からJSONパースを試みる\n        const monthlyStatus = JSON.parse(data.monthlyStatus);\n        \n        // 配列であることを確認\n        if (!Array.isArray(monthlyStatus)) {\n          throw new Error('月次ステータスが配列ではありません');\n        }\n        \n        // 12ヶ月分のデータであることを確認\n        if (monthlyStatus.length !== 12) {\n          // 長さが足りない場合は足りない分を補完\n          while (monthlyStatus.length < 12) {\n            monthlyStatus.push(1);\n          }\n          // 長すぎる場合は切り詰め\n          if (monthlyStatus.length > 12) {\n            monthlyStatus.length = 12;\n          }\n          \n          // 修正したデータを再度文字列化\n          data.monthlyStatus = JSON.stringify(monthlyStatus);\n        }\n      } catch (parseError) {\n        console.error('月次ステータス解析エラー:', parseError);\n        // エラーが発生した場合はデフォルト値に設定\n        data.monthlyStatus = JSON.stringify(Array(12).fill(1));\n      }\n    }\n    \n    // API呼び出し - 月パラメータを削除し、年度情報を追加\n    const response = await axios.patch(\n      `${API_BASE_URL}/employees/${employeeId}`, \n      {\n        ...data,\n        fiscal_year: year // 年度情報を追加\n      },\n      {\n        timeout: 10000,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }\n    );\n    \n    console.log('従業員更新API応答:', response.data);\n    \n    if (response.data && response.data.success) {\n      return response.data.data || null;\n    }\n    \n    throw new Error(response.data?.message || 'データの更新に失敗しました。');\n  } catch (error) {\n    console.error(`従業員ID ${employeeId} の更新エラー:`, error);\n    \n    // エラー処理\n    if (axios.isAxiosError(error)) {\n      if (error.response) {\n        console.error('サーバーエラー:', error.response.status, error.response.data);\n        throw new Error(error.response.data?.message || 'データの更新に失敗しました。');\n      } else if (error.request) {\n        throw new Error('サーバーからの応答がありません。ネットワーク接続を確認してください。');\n      } else {\n        throw new Error(`リクエスト設定エラー: ${error.message}`);\n      }\n    }\n    \n    throw error;\n  }\n};\n\n// 従業員データの作成 - 改善版\nexport const createEmployeeDetail = async (year: number, employeeData: Omit<Employee, 'id'>) => {\n  try {\n    console.log(`従業員作成API呼び出し: ${API_BASE_URL}/employees`);\n    console.log('Request Body:', JSON.stringify(employeeData, null, 2));\n    \n    // 従業員データの前処理\n    const processedData = {\n      ...employeeData,\n      fiscal_year: year, // 年度情報を追加\n      // 月次ステータスが配列でない場合は配列に変換（デフォルトは空文字列）\n      monthlyStatus: Array.isArray(employeeData.monthlyStatus) \n        ? employeeData.monthlyStatus \n        : Array(12).fill('')\n    };\n    \n    // API呼び出し - 月パラメータを削除\n    const response = await axios.post(\n      `${API_BASE_URL}/employees`, \n      processedData,\n      {\n        // タイムアウト設定を長めに\n        timeout: 10000,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }\n    );\n    \n    console.log('従業員作成API応答:', response.data);\n    \n    // 応答データの検証\n    if (response.data && response.data.success) {\n      // データを返す前に整形\n      const responseData = response.data.data || null;\n      \n      if (responseData) {\n        // IDが含まれているか確認\n        if (!responseData.id) {\n          console.warn('警告: API応答に従業員IDが含まれていません。仮IDを設定します。');\n          responseData.id = Date.now(); // 仮IDを設定\n        }\n        \n        // 月次ステータスが配列でない場合は配列に変換\n        if (!Array.isArray(responseData.monthlyStatus)) {\n          responseData.monthlyStatus = Array(12).fill(1);\n        }\n        \n        return responseData;\n      }\n      \n      // データがない場合は送信データにIDを付与して返す\n      return {\n        ...processedData,\n        id: Date.now() // 仮IDを設定\n      };\n    }\n    \n    throw new Error(response.data?.message || 'データの作成に失敗しました。');\n  } catch (error) {\n    console.error('従業員作成エラー詳細:', error);\n    \n    // エラーの種類に応じた処理\n    if (axios.isAxiosError(error)) {\n      if (error.response) {\n        // サーバーからのエラーレスポンス\n        console.error('サーバーエラー:', error.response.status, error.response.data);\n        \n        if (error.response.status === 404) {\n          throw new Error('APIエンドポイントが見つかりません。バックエンドサービスを確認してください。');\n        }\n        \n        if (error.response.status === 400) {\n          throw new Error(`入力データエラー: ${error.response.data?.message || 'リクエストの形式が正しくありません'}`);\n        }\n        \n        throw new Error(error.response.data?.message || '従業員データの作成に失敗しました。');\n      } else if (error.request) {\n        // リクエストは送信されたがレスポンスがない\n        console.error('レスポンスなしエラー:', error.request);\n        throw new Error('サーバーからの応答がありません。ネットワーク接続を確認してください。');\n      } else {\n        // リクエスト設定中のエラー\n        console.error('リクエスト設定エラー:', error.message);\n        throw new Error(`リクエスト設定エラー: ${error.message}`);\n      }\n    }\n    \n    // その他のエラー\n    throw error;\n  }\n};\n\n// データ存在チェック - 改善版\nexport const checkReportExists = async (year: number, month: number): Promise<boolean> => {\n  try {\n    console.log(`データ存在チェック: ${API_BASE_URL}/monthly-reports/${year}/${month}`);\n    \n    const response = await axios.get(\n      `${API_BASE_URL}/monthly-reports/${year}/${month}`,\n      {\n        timeout: 5000,\n        validateStatus: (status) => {\n          // 200番台は成功、404はデータ無しとして扱う\n          return (status >= 200 && status < 300) || status === 404;\n        }\n      }\n    );\n    \n    console.log('データ存在チェック結果:', response.status, response.data?.success);\n    \n    // ステータスコードとレスポンスの中身で存在確認\n    return response.status === 200 && !!response.data && !!response.data.success;\n  } catch (error) {\n    console.error('データ存在チェックエラー:', error);\n    \n    // エラーが発生した場合は存在しないと判断\n    return false;\n  }\n};\n\n// 従業員データの削除\nexport const deleteEmployeeData = async (year: number, employeeId: number) => {\n  try {\n    console.log(`従業員削除: ${API_BASE_URL}/employees/${employeeId}`);\n    \n    // 年度パラメータをクエリとして追加\n    const response = await axios.delete(\n      `${API_BASE_URL}/employees/${employeeId}?fiscal_year=${year}`,\n      {\n        timeout: 5000\n      }\n    );\n    \n    console.log('従業員削除結果:', response.data);\n    \n    if (response.data && response.data.success) {\n      return true;\n    }\n    \n    throw new Error(response.data?.message || 'データの削除に失敗しました。');\n  } catch (error) {\n    console.error(`従業員ID ${employeeId} の削除エラー:`, error);\n    throw error;\n  }\n};\n\n// CSVインポート\nexport const importEmployeesFromCSV = async (year: number, fileData: FormData) => {\n  try {\n    // 年度情報をフォームデータに追加\n    fileData.append('fiscal_year', year.toString());\n    \n    console.log(`CSVインポート: ${API_BASE_URL}/employees/import`);\n    \n    const response = await axios.post(\n      `${API_BASE_URL}/employees/import`, \n      fileData,\n      {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n        timeout: 30000 // CSVインポートは時間がかかる可能性があるため長めに設定\n      }\n    );\n    \n    console.log('CSVインポート結果:', response.data);\n    \n    if (response.data && response.data.success) {\n      return response.data.data || null;\n    }\n    \n    throw new Error(response.data?.message || 'CSVインポートに失敗しました。');\n  } catch (error) {\n    console.error('CSVインポートエラー:', error);\n    throw error;\n  }\n};\n\n// 月次サマリーを更新\nexport const updateMonthlySummary = async (\n  year: number,\n  month: number,\n  data: Partial<MonthlyTotal> & { notes?: string }\n) => {\n  try {\n    // notesフィールドを除去（型を拡張してnotesを許可）\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { notes, ...cleanedData } = data as any;\n    \n    console.log(`月次サマリー更新: ${year}年${month}月`);\n    console.log('更新データ:', cleanedData);\n    \n    // 現在のデータを取得（データが存在するかチェック）\n    let existingData;\n    try {\n      existingData = await getMonthlyReport(year, month);\n    } catch (error) {\n      console.log('既存データなし、新規作成モードで続行します');\n      existingData = null;\n    }\n    \n    // データの存在によってエンドポイントを切り替え\n    let endpoint;\n    let method;\n    let requestData = { ...cleanedData };\n    \n    if (existingData && existingData.summary) {\n      // データが存在する場合は更新\n      endpoint = `${API_BASE_URL}/monthly-reports/${year}/${month}/summary`;\n      method = 'PUT';\n    } else {\n      // データが存在しない場合は作成\n      endpoint = `${API_BASE_URL}/monthly-reports`;\n      method = 'POST';\n      \n      // 新規作成の場合はfiscal_yearとmonthを追加\n      requestData = {\n        ...cleanedData,\n        fiscal_year: year,\n        month: month\n      };\n    }\n    \n    console.log(`APIリクエスト: ${method} ${endpoint}`);\n    console.log('リクエストデータ:', requestData);\n    \n    // APIリクエスト\n    const response = await axios({\n      method: method,\n      url: endpoint,\n      data: requestData,\n      timeout: 10000,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    \n    console.log('API応答:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('API エラー:', error);\n    throw new Error(handleApiError(error));\n  }\n};\n\n// 詳細セルを更新\nexport const updateDetailCell = async (\n  year: number,\n  month: number,\n  detailId: number,\n  field: string,\n  value: any\n) => {\n  try {\n    console.log(`詳細セル更新: ${API_BASE_URL}/monthly-reports/${year}/${month}/details/${detailId}`);\n    console.log('更新フィールド:', field, '値:', value);\n    \n    const response = await axios.put(\n      `${API_BASE_URL}/monthly-reports/${year}/${month}/details/${detailId}`,\n      { [field]: value },\n      {\n        timeout: 5000,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }\n    );\n    \n    console.log('詳細セル更新結果:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error(`詳細セル更新エラー:`, error);\n    throw new Error(handleApiError(error));\n  }\n};\n\n// 月次レポートを確認（確定）\nexport const confirmMonthlyReport = async (year: number, month: number) => {\n  try {\n    console.log(`レポート確定: ${API_BASE_URL}/monthly-reports/${year}/${month}/confirm`);\n    \n    const response = await axios.post(\n      `${API_BASE_URL}/monthly-reports/${year}/${month}/confirm`,\n      {},\n      {\n        timeout: 5000,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }\n    );\n    \n    console.log('レポート確定結果:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error(`レポート確定エラー:`, error);\n    throw new Error(handleApiError(error));\n  }\n};\n\n// 特定年度の従業員一覧を取得\nexport const getEmployeesByYear = async (year: number) => {\n  try {\n    console.log(`年度別従業員一覧取得: ${API_BASE_URL}/employees?fiscal_year=${year}`);\n    \n    const response = await axios.get(\n      `${API_BASE_URL}/employees?fiscal_year=${year}`,\n      {\n        timeout: 10000\n      }\n    );\n    \n    console.log(`${year}年度の従業員一覧取得結果:`, response.data);\n    return response.data.data || [];\n  } catch (error) {\n    console.error(`${year}年度の従業員一覧取得エラー:`, error);\n    throw error;\n  }\n};\n\n// システム設定を取得する関数\nexport const getSettings = async (): Promise<any> => {\n  try {\n    console.log(`設定取得: ${API_BASE_URL}/settings`);\n    \n    const response = await axios.get(\n      `${API_BASE_URL}/settings`,\n      {\n        timeout: 5000\n      }\n    );\n    \n    console.log('設定取得結果:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('設定の取得中にエラーが発生しました:', error);\n    throw new Error(handleApiError(error));\n  }\n};\n\n// API関数をまとめたオブジェクト\nexport const reportApi = {\n  getMonthlyReports,\n  getMonthlyReport,\n  updateEmployeeData,\n  updateReportStatus,\n  updateMonthlySummary,\n  createMonthlyReport,\n  updateMonthlyReport,\n  createEmployeeDetail,\n  checkReportExists,\n  deleteEmployeeData,\n  importEmployeesFromCSV,\n  handleApiError,\n  updateDetailCell,\n  confirmMonthlyReport,\n  getSettings,\n  getEmployeesByYear\n};\n\nexport default reportApi;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}