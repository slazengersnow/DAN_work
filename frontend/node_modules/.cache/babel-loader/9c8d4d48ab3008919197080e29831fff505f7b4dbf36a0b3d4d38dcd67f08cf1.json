{"ast":null,"code":"/**\n * DetailViewEnhancer.js の無限ループを修正するスクリプト\n * パフォーマンス改善と安定性向上のための最適化を実装\n */\n\n(function () {\n  'use strict';\n\n  console.log('[BugFix] DetailViewEnhancer.jsの無限ループを修正します');\n\n  // 既存のMutationObserverインスタンスを全て切断\n  if (window._existingObservers) {\n    window._existingObservers.forEach(observer => {\n      if (observer && typeof observer.disconnect === 'function') {\n        observer.disconnect();\n        console.log('[BugFix] 既存のMutationObserverを切断しました');\n      }\n    });\n  }\n\n  // setIntervalによる定期実行をクリア\n  if (window._enhancerIntervals) {\n    window._enhancerIntervals.forEach(intervalId => {\n      clearInterval(intervalId);\n      console.log('[BugFix] 既存のインターバルをクリアしました: ' + intervalId);\n    });\n  }\n\n  // DOM変更を最小限にするための処理済みフラグ\n  let processedMonthlyReport = false;\n  let processedEmployeeDetail = false;\n\n  // 修正版の処理関数 - 一度だけ実行\n  function fixDetailView() {\n    // 月次報告の年度セレクタを非表示に（一度だけ）\n    if (!processedMonthlyReport) {\n      const monthlyReportContainer = document.querySelector('.monthly-report-container');\n      if (monthlyReportContainer) {\n        // 月次レポート上部のパネル全体を非表示\n        const topPanel = document.querySelector('.monthly-report-container > div > div:nth-child(3)');\n        if (topPanel) {\n          topPanel.style.display = 'none';\n          topPanel.style.visibility = 'hidden';\n          console.log('[BugFix] 月次報告の上部パネルを非表示にしました');\n          processedMonthlyReport = true;\n        }\n\n        // 年度ラベルを含む親要素を非表示（バックアップ対策）\n        const yearLabels = Array.from(document.querySelectorAll('label')).filter(label => label.textContent && label.textContent.includes('年度'));\n        yearLabels.forEach(label => {\n          const parent = label.parentElement;\n          if (parent && parent.querySelector('select') && !parent.closest('.monthly-report-detail')) {\n            parent.style.display = 'none';\n            parent.style.visibility = 'hidden';\n            console.log('[BugFix] 月次報告の年度セレクタラベルを非表示にしました');\n            processedMonthlyReport = true;\n          }\n        });\n\n        // 月次詳細タブの年度セレクタは表示する\n        const detailSelectors = document.querySelectorAll('.monthly-report-detail select#fiscal-year-select');\n        detailSelectors.forEach(selector => {\n          selector.style.display = 'inline-block';\n          selector.style.visibility = 'visible';\n          console.log('[BugFix] 月次詳細タブの年度セレクタを表示しました');\n        });\n      }\n    }\n\n    // 従業員詳細の年度セレクタを追加（一度だけ）\n    if (!processedEmployeeDetail) {\n      // 従業員詳細タブが表示されているか確認\n      const isEmployeeDetailView = document.querySelector('.tab-pane.active .employee-detail-header') || Array.from(document.querySelectorAll('h2, h3, h4')).some(el => el.textContent && el.textContent.includes('従業員詳細'));\n      if (isEmployeeDetailView) {\n        var _document$querySelect;\n        // ツールバー領域を特定\n        const toolbar = document.querySelector('.btn-group') || ((_document$querySelect = document.querySelector('button[class*=\"btn\"]')) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.parentElement);\n        if (toolbar && !document.querySelector('.year-selector-fixed')) {\n          const yearSelector = document.createElement('div');\n          yearSelector.className = 'year-selector-fixed';\n          yearSelector.style.display = 'inline-block';\n          yearSelector.style.marginRight = '15px';\n          const currentYear = new Date().getFullYear();\n          yearSelector.innerHTML = `\n            <label style=\"margin-right: 5px; font-weight: normal;\">対象年度:</label>\n            <select class=\"form-control form-control-sm\" style=\"display: inline-block; width: auto;\">\n              <option value=\"${currentYear - 1}\">${currentYear - 1}年度</option>\n              <option value=\"${currentYear}\" selected>${currentYear}年度</option>\n              <option value=\"${currentYear + 1}\">${currentYear + 1}年度</option>\n            </select>\n          `;\n\n          // イベントリスナーを設定\n          yearSelector.querySelector('select').addEventListener('change', function (e) {\n            console.log('[BugFix] 選択された年度: ' + e.target.value);\n\n            // 年度変更イベントを発行\n            const yearChangeEvent = new CustomEvent('yearChanged', {\n              detail: {\n                year: parseInt(e.target.value, 10)\n              }\n            });\n            document.dispatchEvent(yearChangeEvent);\n          });\n          toolbar.insertBefore(yearSelector, toolbar.firstChild);\n          console.log('[BugFix] 従業員詳細の年度セレクタを追加しました');\n          processedEmployeeDetail = true;\n        }\n      }\n    }\n  }\n\n  // 最適化されたMutationObserver\n  let debounceTimer = null;\n  const observer = new MutationObserver(function (mutations) {\n    // 処理を間引いて実行（デバウンス処理）\n    if (debounceTimer) {\n      clearTimeout(debounceTimer);\n    }\n    debounceTimer = setTimeout(() => {\n      // 特定の変更のみに反応させる\n      let shouldUpdate = false;\n      for (const mutation of mutations) {\n        if (mutation.type === 'childList' && mutation.addedNodes.length) {\n          for (const node of mutation.addedNodes) {\n            if (node.nodeType === Node.ELEMENT_NODE) {\n              var _node$classList, _node$querySelector, _node$classList2, _node$classList3;\n              // タブペインや特定のコンテナが追加された場合のみ処理\n              if ((_node$classList = node.classList) !== null && _node$classList !== void 0 && _node$classList.contains('tab-pane') || (_node$querySelector = node.querySelector) !== null && _node$querySelector !== void 0 && _node$querySelector.call(node, '.tab-pane') || (_node$classList2 = node.classList) !== null && _node$classList2 !== void 0 && _node$classList2.contains('monthly-report-detail') || (_node$classList3 = node.classList) !== null && _node$classList3 !== void 0 && _node$classList3.contains('employee-detail')) {\n                shouldUpdate = true;\n                break;\n              }\n            }\n          }\n        }\n        if (shouldUpdate) break;\n      }\n      if (shouldUpdate) {\n        console.log('[BugFix] 重要なDOM変更を検出しました（デバウンス処理後）');\n        // フラグをリセットして再処理を許可\n        processedMonthlyReport = false;\n        processedEmployeeDetail = false;\n        fixDetailView();\n      }\n    }, 500); // 500ms間、変更がなければ実行\n  });\n\n  // 状態の初期化とMutationObserverの設定\n  window._existingObservers = window._existingObservers || [];\n  window._existingObservers.push(observer);\n  window._enhancerIntervals = window._enhancerIntervals || [];\n\n  // 初期実行\n  fixDetailView();\n\n  // 監視設定（より限定的に）\n  observer.observe(document.body, {\n    childList: true,\n    subtree: true,\n    attributes: false,\n    // 属性変更は監視しない\n    characterData: false // テキスト変更は監視しない\n  });\n\n  // タブ切り替えイベントでの一度だけの処理\n  document.addEventListener('click', function (e) {\n    const isTabLink = e.target.classList.contains('nav-link') || e.target.closest('.nav-link');\n    if (isTabLink) {\n      // タブ切り替え時にはフラグをリセットして再処理を許可\n      setTimeout(() => {\n        console.log('[BugFix] タブ切り替えを検出しました');\n        processedMonthlyReport = false;\n        processedEmployeeDetail = false;\n        fixDetailView();\n      }, 300);\n    }\n  });\n\n  // ページ切り替えを検出して処理\n  window.addEventListener('popstate', function () {\n    setTimeout(() => {\n      console.log('[BugFix] ページ遷移を検出しました');\n      processedMonthlyReport = false;\n      processedEmployeeDetail = false;\n      fixDetailView();\n    }, 300);\n  });\n  console.log('[BugFix] 修正スクリプトの適用が完了しました');\n})();","map":{"version":3,"names":["console","log","window","_existingObservers","forEach","observer","disconnect","_enhancerIntervals","intervalId","clearInterval","processedMonthlyReport","processedEmployeeDetail","fixDetailView","monthlyReportContainer","document","querySelector","topPanel","style","display","visibility","yearLabels","Array","from","querySelectorAll","filter","label","textContent","includes","parent","parentElement","closest","detailSelectors","selector","isEmployeeDetailView","some","el","_document$querySelect","toolbar","yearSelector","createElement","className","marginRight","currentYear","Date","getFullYear","innerHTML","addEventListener","e","target","value","yearChangeEvent","CustomEvent","detail","year","parseInt","dispatchEvent","insertBefore","firstChild","debounceTimer","MutationObserver","mutations","clearTimeout","setTimeout","shouldUpdate","mutation","type","addedNodes","length","node","nodeType","Node","ELEMENT_NODE","_node$classList","_node$querySelector","_node$classList2","_node$classList3","classList","contains","call","push","observe","body","childList","subtree","attributes","characterData","isTabLink"],"sources":["/Users/gotouhiroaki/Programming/DAN_work/disability-employment-system/frontend/src/pages/MonthlyReport/DetailViewEnhancerFix.js"],"sourcesContent":["/**\n * DetailViewEnhancer.js の無限ループを修正するスクリプト\n * パフォーマンス改善と安定性向上のための最適化を実装\n */\n\n(function() {\n  'use strict';\n  \n  console.log('[BugFix] DetailViewEnhancer.jsの無限ループを修正します');\n  \n  // 既存のMutationObserverインスタンスを全て切断\n  if (window._existingObservers) {\n    window._existingObservers.forEach(observer => {\n      if (observer && typeof observer.disconnect === 'function') {\n        observer.disconnect();\n        console.log('[BugFix] 既存のMutationObserverを切断しました');\n      }\n    });\n  }\n  \n  // setIntervalによる定期実行をクリア\n  if (window._enhancerIntervals) {\n    window._enhancerIntervals.forEach(intervalId => {\n      clearInterval(intervalId);\n      console.log('[BugFix] 既存のインターバルをクリアしました: ' + intervalId);\n    });\n  }\n  \n  // DOM変更を最小限にするための処理済みフラグ\n  let processedMonthlyReport = false;\n  let processedEmployeeDetail = false;\n  \n  // 修正版の処理関数 - 一度だけ実行\n  function fixDetailView() {\n    // 月次報告の年度セレクタを非表示に（一度だけ）\n    if (!processedMonthlyReport) {\n      const monthlyReportContainer = document.querySelector('.monthly-report-container');\n      if (monthlyReportContainer) {\n        // 月次レポート上部のパネル全体を非表示\n        const topPanel = document.querySelector('.monthly-report-container > div > div:nth-child(3)');\n        if (topPanel) {\n          topPanel.style.display = 'none';\n          topPanel.style.visibility = 'hidden';\n          console.log('[BugFix] 月次報告の上部パネルを非表示にしました');\n          processedMonthlyReport = true;\n        }\n        \n        // 年度ラベルを含む親要素を非表示（バックアップ対策）\n        const yearLabels = Array.from(document.querySelectorAll('label')).filter(\n          label => label.textContent && label.textContent.includes('年度')\n        );\n        \n        yearLabels.forEach(label => {\n          const parent = label.parentElement;\n          if (parent && parent.querySelector('select') && !parent.closest('.monthly-report-detail')) {\n            parent.style.display = 'none';\n            parent.style.visibility = 'hidden';\n            console.log('[BugFix] 月次報告の年度セレクタラベルを非表示にしました');\n            processedMonthlyReport = true;\n          }\n        });\n        \n        // 月次詳細タブの年度セレクタは表示する\n        const detailSelectors = document.querySelectorAll('.monthly-report-detail select#fiscal-year-select');\n        detailSelectors.forEach(selector => {\n          selector.style.display = 'inline-block';\n          selector.style.visibility = 'visible';\n          console.log('[BugFix] 月次詳細タブの年度セレクタを表示しました');\n        });\n      }\n    }\n    \n    // 従業員詳細の年度セレクタを追加（一度だけ）\n    if (!processedEmployeeDetail) {\n      // 従業員詳細タブが表示されているか確認\n      const isEmployeeDetailView = document.querySelector('.tab-pane.active .employee-detail-header') || \n                                  Array.from(document.querySelectorAll('h2, h3, h4')).some(el => \n                                    el.textContent && el.textContent.includes('従業員詳細'));\n      \n      if (isEmployeeDetailView) {\n        // ツールバー領域を特定\n        const toolbar = document.querySelector('.btn-group') || \n                        document.querySelector('button[class*=\"btn\"]')?.parentElement;\n        \n        if (toolbar && !document.querySelector('.year-selector-fixed')) {\n          const yearSelector = document.createElement('div');\n          yearSelector.className = 'year-selector-fixed';\n          yearSelector.style.display = 'inline-block';\n          yearSelector.style.marginRight = '15px';\n          \n          const currentYear = new Date().getFullYear();\n          yearSelector.innerHTML = `\n            <label style=\"margin-right: 5px; font-weight: normal;\">対象年度:</label>\n            <select class=\"form-control form-control-sm\" style=\"display: inline-block; width: auto;\">\n              <option value=\"${currentYear-1}\">${currentYear-1}年度</option>\n              <option value=\"${currentYear}\" selected>${currentYear}年度</option>\n              <option value=\"${currentYear+1}\">${currentYear+1}年度</option>\n            </select>\n          `;\n          \n          // イベントリスナーを設定\n          yearSelector.querySelector('select').addEventListener('change', function(e) {\n            console.log('[BugFix] 選択された年度: ' + e.target.value);\n            \n            // 年度変更イベントを発行\n            const yearChangeEvent = new CustomEvent('yearChanged', {\n              detail: { year: parseInt(e.target.value, 10) }\n            });\n            document.dispatchEvent(yearChangeEvent);\n          });\n          \n          toolbar.insertBefore(yearSelector, toolbar.firstChild);\n          console.log('[BugFix] 従業員詳細の年度セレクタを追加しました');\n          processedEmployeeDetail = true;\n        }\n      }\n    }\n  }\n  \n  // 最適化されたMutationObserver\n  let debounceTimer = null;\n  const observer = new MutationObserver(function(mutations) {\n    // 処理を間引いて実行（デバウンス処理）\n    if (debounceTimer) {\n      clearTimeout(debounceTimer);\n    }\n    \n    debounceTimer = setTimeout(() => {\n      // 特定の変更のみに反応させる\n      let shouldUpdate = false;\n      \n      for (const mutation of mutations) {\n        if (mutation.type === 'childList' && mutation.addedNodes.length) {\n          for (const node of mutation.addedNodes) {\n            if (node.nodeType === Node.ELEMENT_NODE) {\n              // タブペインや特定のコンテナが追加された場合のみ処理\n              if (\n                node.classList?.contains('tab-pane') || \n                node.querySelector?.('.tab-pane') ||\n                node.classList?.contains('monthly-report-detail') ||\n                node.classList?.contains('employee-detail')\n              ) {\n                shouldUpdate = true;\n                break;\n              }\n            }\n          }\n        }\n        \n        if (shouldUpdate) break;\n      }\n      \n      if (shouldUpdate) {\n        console.log('[BugFix] 重要なDOM変更を検出しました（デバウンス処理後）');\n        // フラグをリセットして再処理を許可\n        processedMonthlyReport = false;\n        processedEmployeeDetail = false;\n        fixDetailView();\n      }\n    }, 500); // 500ms間、変更がなければ実行\n  });\n  \n  // 状態の初期化とMutationObserverの設定\n  window._existingObservers = window._existingObservers || [];\n  window._existingObservers.push(observer);\n  window._enhancerIntervals = window._enhancerIntervals || [];\n\n  // 初期実行\n  fixDetailView();\n  \n  // 監視設定（より限定的に）\n  observer.observe(document.body, {\n    childList: true,\n    subtree: true,\n    attributes: false, // 属性変更は監視しない\n    characterData: false // テキスト変更は監視しない\n  });\n  \n  // タブ切り替えイベントでの一度だけの処理\n  document.addEventListener('click', function(e) {\n    const isTabLink = e.target.classList.contains('nav-link') || \n                      e.target.closest('.nav-link');\n                      \n    if (isTabLink) {\n      // タブ切り替え時にはフラグをリセットして再処理を許可\n      setTimeout(() => {\n        console.log('[BugFix] タブ切り替えを検出しました');\n        processedMonthlyReport = false;\n        processedEmployeeDetail = false;\n        fixDetailView();\n      }, 300);\n    }\n  });\n  \n  // ページ切り替えを検出して処理\n  window.addEventListener('popstate', function() {\n    setTimeout(() => {\n      console.log('[BugFix] ページ遷移を検出しました');\n      processedMonthlyReport = false;\n      processedEmployeeDetail = false;\n      fixDetailView();\n    }, 300);\n  });\n  \n  console.log('[BugFix] 修正スクリプトの適用が完了しました');\n})();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}