{"ast":null,"code":"/**\n * 画面表示を復元するスクリプト\n * - 以前のスクリプトによる過剰なDOM操作を修復\n * - 非表示になった要素を復元\n * - 無限ループを修正\n */\n(function () {\n  'use strict';\n\n  // デバッグ情報を出力する関数\n  function log(message) {\n    console.log('[ScreenRestorer] ' + message);\n  }\n  log('画面復元スクリプトを開始します');\n\n  // ステップ1: すべての既存のMutationObserverを停止\n  if (window._existingYearObserver) {\n    try {\n      window._existingYearObserver.disconnect();\n      log('既存のYearObserverを停止しました');\n    } catch (e) {\n      log('YearObserver停止中にエラー: ' + e.message);\n    }\n  }\n  if (window._existingObservers) {\n    try {\n      window._existingObservers.forEach(observer => {\n        if (observer && typeof observer.disconnect === 'function') {\n          observer.disconnect();\n        }\n      });\n      log('すべての既存Observerを停止しました');\n    } catch (e) {\n      log('Observer停止中にエラー: ' + e.message);\n    }\n  }\n  if (window._uiFixObserver) {\n    try {\n      window._uiFixObserver.disconnect();\n      log('UI修正Observerを停止しました');\n    } catch (e) {\n      log('UI修正Observer停止中にエラー: ' + e.message);\n    }\n  }\n  if (window._employeeYearFixObserver) {\n    try {\n      window._employeeYearFixObserver.disconnect();\n      log('従業員年度修正Observerを停止しました');\n    } catch (e) {\n      log('従業員年度修正Observer停止中にエラー: ' + e.message);\n    }\n  }\n\n  // ステップ2: すべてのインターバルを停止\n  if (window._enhancerIntervals) {\n    try {\n      window._enhancerIntervals.forEach(intervalId => {\n        clearInterval(intervalId);\n      });\n      log('すべてのインターバルを停止しました');\n    } catch (e) {\n      log('インターバル停止中にエラー: ' + e.message);\n    }\n  }\n\n  // ステップ3: 非表示にされた要素を復元\n  try {\n    // display: none が設定された要素を探して復元\n    const hiddenElements = document.querySelectorAll('[style*=\"display: none\"]');\n    log(`非表示要素が ${hiddenElements.length} 個見つかりました`);\n    hiddenElements.forEach(element => {\n      // 月次報告の年度選択以外の要素を復元\n      if (!element.textContent || !element.textContent.includes('年度') || !element.closest('.monthly-report-container, .page-header, .header-container')) {\n        // インラインスタイルを削除\n        element.style.display = '';\n        element.style.visibility = '';\n        log('要素を復元しました: ' + element.tagName);\n      }\n    });\n\n    // visibility: hidden が設定された要素も復元\n    const invisibleElements = document.querySelectorAll('[style*=\"visibility: hidden\"]');\n    log(`不可視要素が ${invisibleElements.length} 個見つかりました`);\n    invisibleElements.forEach(element => {\n      // 月次報告の年度選択以外の要素を復元\n      if (!element.textContent || !element.textContent.includes('年度') || !element.closest('.monthly-report-container, .page-header, .header-container')) {\n        element.style.visibility = '';\n        log('不可視要素を復元しました: ' + element.tagName);\n      }\n    });\n  } catch (e) {\n    log('要素復元中にエラー: ' + e.message);\n  }\n\n  // ステップ4: bodyやhtml要素のスタイルをリセット\n  try {\n    document.body.style.display = '';\n    document.body.style.visibility = '';\n    document.documentElement.style.display = '';\n    document.documentElement.style.visibility = '';\n    log('body/html要素のスタイルをリセットしました');\n  } catch (e) {\n    log('スタイルリセット中にエラー: ' + e.message);\n  }\n\n  // ステップ5: スタイルシートをクリーンアップ\n  try {\n    // year-selector-hider-styles や monthly-view-enhancer-style などの特定のスタイル要素を削除\n    const styleElements = ['year-selector-hider-styles', 'monthly-view-enhancer-style'];\n    styleElements.forEach(id => {\n      const styleElement = document.getElementById(id);\n      if (styleElement) {\n        styleElement.parentNode.removeChild(styleElement);\n        log(`スタイル要素 ${id} を削除しました`);\n      }\n    });\n  } catch (e) {\n    log('スタイルシート削除中にエラー: ' + e.message);\n  }\n\n  // ステップ6: 月次報告の年度選択のみを非表示にする安全な関数\n  function safelyHideYearSelector() {\n    try {\n      // 月次報告タイトルの確認\n      const headers = document.querySelectorAll('h1, h2, h3, h4');\n      let monthlyReportHeader = null;\n      for (const header of headers) {\n        if (header.textContent && header.textContent.includes('月次報告')) {\n          monthlyReportHeader = header;\n          break;\n        }\n      }\n      if (!monthlyReportHeader) {\n        log('月次報告のヘッダーが見つかりません');\n        return;\n      }\n\n      // ヘッダーから最も近い親コンテナを取得\n      const reportContainer = monthlyReportHeader.closest('.container, .content, .page, .monthly-report-container');\n      if (!reportContainer) {\n        log('月次報告のコンテナが見つかりません');\n        return;\n      }\n\n      // このコンテナ内の年度セレクタを探す\n      const yearSelectors = reportContainer.querySelectorAll('.form-group, .row, .col');\n      for (const selector of yearSelectors) {\n        if (selector.textContent && selector.textContent.includes('年度')) {\n          // 実際に年度選択を含むか確認\n          const hasSelect = selector.querySelector('select');\n          const hasYearLabel = Array.from(selector.querySelectorAll('label')).some(label => label.textContent && label.textContent.includes('年度'));\n          if (hasSelect || hasYearLabel) {\n            // 対象年度の選択要素だけを非表示\n            selector.style.cssText = 'display: none !important;';\n            log('月次報告の年度セレクタを安全に非表示にしました');\n          }\n        }\n      }\n\n      // 月次報告コンテナの上部パネルを非表示\n      const topPanel = document.querySelector('.monthly-report-container > div > div:nth-child(3)');\n      if (topPanel) {\n        topPanel.style.cssText = 'display: none !important;';\n        log('月次報告の上部パネルを非表示にしました');\n      }\n\n      // 月次詳細タブの年度セレクタは表示\n      document.querySelectorAll('.monthly-report-detail select#fiscal-year-select').forEach(el => {\n        el.style.cssText = 'display: inline-block !important; visibility: visible !important;';\n        log('月次詳細タブの年度セレクタを表示状態に復元しました');\n      });\n    } catch (e) {\n      log('安全な非表示処理中にエラー: ' + e.message);\n    }\n  }\n\n  // ステップ7: 従業員詳細の年度表示を確認\n  function checkEmployeeYearDisplay() {\n    try {\n      // 従業員詳細のヘッダーを探す\n      const employeeHeaders = Array.from(document.querySelectorAll('h1, h2, h3, h4')).filter(header => header.textContent && header.textContent.includes('従業員詳細'));\n      if (employeeHeaders.length === 0) {\n        log('従業員詳細のヘッダーが見つかりません');\n        return;\n      }\n\n      // 既存の年度表示を確認\n      const existingYearDisplay = document.querySelector('.employee-year-right, .employee-year-fixed, .employee-year-selector-fixed');\n      if (existingYearDisplay) {\n        log('従業員詳細の年度表示が既に存在します');\n        return;\n      }\n      log('従業員詳細画面を検出しましたが、年度表示が見つかりません');\n    } catch (e) {\n      log('従業員年度表示確認中にエラー: ' + e.message);\n    }\n  }\n\n  // 安全なMutationObserverの設定\n  let isProcessing = false;\n  const safeObserver = new MutationObserver(function (mutations) {\n    // 実行中なら重複実行しない\n    if (isProcessing) return;\n    isProcessing = true;\n    setTimeout(() => {\n      try {\n        // 現在表示中のページを判断して処理実行\n        const monthlyHeader = Array.from(document.querySelectorAll('h1, h2, h3, h4')).some(header => header.textContent && header.textContent.includes('月次報告'));\n        const employeeHeader = Array.from(document.querySelectorAll('h1, h2, h3, h4')).some(header => header.textContent && header.textContent.includes('従業員詳細'));\n        if (monthlyHeader) {\n          safelyHideYearSelector();\n        }\n        if (employeeHeader) {\n          checkEmployeeYearDisplay();\n        }\n      } finally {\n        isProcessing = false;\n      }\n    }, 100);\n  });\n\n  // 安全な設定で監視を開始（クラス変更、タブや画面切り替えの検出に必要最小限）\n  safeObserver.observe(document.body, {\n    childList: true,\n    subtree: true,\n    attributeFilter: ['class'],\n    // クラスの変更のみ監視\n    attributes: true\n  });\n\n  // 実行順序を制御するために遅延実行\n  setTimeout(function () {\n    safelyHideYearSelector();\n    checkEmployeeYearDisplay();\n    log('画面復元処理が完了しました');\n  }, 500);\n\n  // 現在のURLパスに基づいた処理の実行\n  const currentPath = window.location.pathname;\n  if (currentPath.includes('monthly') || currentPath.includes('report')) {\n    log('月次報告のURLを検出しました');\n    setTimeout(safelyHideYearSelector, 800);\n  } else if (currentPath.includes('employee') || currentPath.includes('staff')) {\n    log('従業員詳細のURLを検出しました');\n    setTimeout(checkEmployeeYearDisplay, 800);\n  }\n\n  // グローバル変数にオブザーバーを保存\n  window._screenRestorerObserver = safeObserver;\n  log('画面復元スクリプトが設定されました');\n})();","map":{"version":3,"names":["log","message","console","window","_existingYearObserver","disconnect","e","_existingObservers","forEach","observer","_uiFixObserver","_employeeYearFixObserver","_enhancerIntervals","intervalId","clearInterval","hiddenElements","document","querySelectorAll","length","element","textContent","includes","closest","style","display","visibility","tagName","invisibleElements","body","documentElement","styleElements","id","styleElement","getElementById","parentNode","removeChild","safelyHideYearSelector","headers","monthlyReportHeader","header","reportContainer","yearSelectors","selector","hasSelect","querySelector","hasYearLabel","Array","from","some","label","cssText","topPanel","el","checkEmployeeYearDisplay","employeeHeaders","filter","existingYearDisplay","isProcessing","safeObserver","MutationObserver","mutations","setTimeout","monthlyHeader","employeeHeader","observe","childList","subtree","attributeFilter","attributes","currentPath","location","pathname","_screenRestorerObserver"],"sources":["/Users/gotouhiroaki/Programming/DAN_work/disability-employment-system/frontend/src/pages/ScreenRestorer.js"],"sourcesContent":["/**\n * 画面表示を復元するスクリプト\n * - 以前のスクリプトによる過剰なDOM操作を修復\n * - 非表示になった要素を復元\n * - 無限ループを修正\n */\n(function() {\n  'use strict';\n  \n  // デバッグ情報を出力する関数\n  function log(message) {\n    console.log('[ScreenRestorer] ' + message);\n  }\n\n  log('画面復元スクリプトを開始します');\n\n  // ステップ1: すべての既存のMutationObserverを停止\n  if (window._existingYearObserver) {\n    try {\n      window._existingYearObserver.disconnect();\n      log('既存のYearObserverを停止しました');\n    } catch (e) {\n      log('YearObserver停止中にエラー: ' + e.message);\n    }\n  }\n  \n  if (window._existingObservers) {\n    try {\n      window._existingObservers.forEach(observer => {\n        if (observer && typeof observer.disconnect === 'function') {\n          observer.disconnect();\n        }\n      });\n      log('すべての既存Observerを停止しました');\n    } catch (e) {\n      log('Observer停止中にエラー: ' + e.message);\n    }\n  }\n  \n  if (window._uiFixObserver) {\n    try {\n      window._uiFixObserver.disconnect();\n      log('UI修正Observerを停止しました');\n    } catch (e) {\n      log('UI修正Observer停止中にエラー: ' + e.message);\n    }\n  }\n  \n  if (window._employeeYearFixObserver) {\n    try {\n      window._employeeYearFixObserver.disconnect();\n      log('従業員年度修正Observerを停止しました');\n    } catch (e) {\n      log('従業員年度修正Observer停止中にエラー: ' + e.message);\n    }\n  }\n\n  // ステップ2: すべてのインターバルを停止\n  if (window._enhancerIntervals) {\n    try {\n      window._enhancerIntervals.forEach(intervalId => {\n        clearInterval(intervalId);\n      });\n      log('すべてのインターバルを停止しました');\n    } catch (e) {\n      log('インターバル停止中にエラー: ' + e.message);\n    }\n  }\n\n  // ステップ3: 非表示にされた要素を復元\n  try {\n    // display: none が設定された要素を探して復元\n    const hiddenElements = document.querySelectorAll('[style*=\"display: none\"]');\n    log(`非表示要素が ${hiddenElements.length} 個見つかりました`);\n    \n    hiddenElements.forEach(element => {\n      // 月次報告の年度選択以外の要素を復元\n      if (!element.textContent || \n          !element.textContent.includes('年度') || \n          !element.closest('.monthly-report-container, .page-header, .header-container')) {\n        // インラインスタイルを削除\n        element.style.display = '';\n        element.style.visibility = '';\n        log('要素を復元しました: ' + element.tagName);\n      }\n    });\n    \n    // visibility: hidden が設定された要素も復元\n    const invisibleElements = document.querySelectorAll('[style*=\"visibility: hidden\"]');\n    log(`不可視要素が ${invisibleElements.length} 個見つかりました`);\n    \n    invisibleElements.forEach(element => {\n      // 月次報告の年度選択以外の要素を復元\n      if (!element.textContent || \n          !element.textContent.includes('年度') || \n          !element.closest('.monthly-report-container, .page-header, .header-container')) {\n        element.style.visibility = '';\n        log('不可視要素を復元しました: ' + element.tagName);\n      }\n    });\n  } catch (e) {\n    log('要素復元中にエラー: ' + e.message);\n  }\n\n  // ステップ4: bodyやhtml要素のスタイルをリセット\n  try {\n    document.body.style.display = '';\n    document.body.style.visibility = '';\n    document.documentElement.style.display = '';\n    document.documentElement.style.visibility = '';\n    log('body/html要素のスタイルをリセットしました');\n  } catch (e) {\n    log('スタイルリセット中にエラー: ' + e.message);\n  }\n  \n  // ステップ5: スタイルシートをクリーンアップ\n  try {\n    // year-selector-hider-styles や monthly-view-enhancer-style などの特定のスタイル要素を削除\n    const styleElements = ['year-selector-hider-styles', 'monthly-view-enhancer-style'];\n    styleElements.forEach(id => {\n      const styleElement = document.getElementById(id);\n      if (styleElement) {\n        styleElement.parentNode.removeChild(styleElement);\n        log(`スタイル要素 ${id} を削除しました`);\n      }\n    });\n  } catch (e) {\n    log('スタイルシート削除中にエラー: ' + e.message);\n  }\n\n  // ステップ6: 月次報告の年度選択のみを非表示にする安全な関数\n  function safelyHideYearSelector() {\n    try {\n      // 月次報告タイトルの確認\n      const headers = document.querySelectorAll('h1, h2, h3, h4');\n      let monthlyReportHeader = null;\n      \n      for (const header of headers) {\n        if (header.textContent && header.textContent.includes('月次報告')) {\n          monthlyReportHeader = header;\n          break;\n        }\n      }\n\n      if (!monthlyReportHeader) {\n        log('月次報告のヘッダーが見つかりません');\n        return;\n      }\n\n      // ヘッダーから最も近い親コンテナを取得\n      const reportContainer = monthlyReportHeader.closest('.container, .content, .page, .monthly-report-container');\n      \n      if (!reportContainer) {\n        log('月次報告のコンテナが見つかりません');\n        return;\n      }\n\n      // このコンテナ内の年度セレクタを探す\n      const yearSelectors = reportContainer.querySelectorAll('.form-group, .row, .col');\n      \n      for (const selector of yearSelectors) {\n        if (selector.textContent && selector.textContent.includes('年度')) {\n          // 実際に年度選択を含むか確認\n          const hasSelect = selector.querySelector('select');\n          const hasYearLabel = Array.from(selector.querySelectorAll('label')).some(\n            label => label.textContent && label.textContent.includes('年度')\n          );\n          \n          if (hasSelect || hasYearLabel) {\n            // 対象年度の選択要素だけを非表示\n            selector.style.cssText = 'display: none !important;';\n            log('月次報告の年度セレクタを安全に非表示にしました');\n          }\n        }\n      }\n      \n      // 月次報告コンテナの上部パネルを非表示\n      const topPanel = document.querySelector('.monthly-report-container > div > div:nth-child(3)');\n      if (topPanel) {\n        topPanel.style.cssText = 'display: none !important;';\n        log('月次報告の上部パネルを非表示にしました');\n      }\n      \n      // 月次詳細タブの年度セレクタは表示\n      document.querySelectorAll('.monthly-report-detail select#fiscal-year-select').forEach(el => {\n        el.style.cssText = 'display: inline-block !important; visibility: visible !important;';\n        log('月次詳細タブの年度セレクタを表示状態に復元しました');\n      });\n    } catch (e) {\n      log('安全な非表示処理中にエラー: ' + e.message);\n    }\n  }\n  \n  // ステップ7: 従業員詳細の年度表示を確認\n  function checkEmployeeYearDisplay() {\n    try {\n      // 従業員詳細のヘッダーを探す\n      const employeeHeaders = Array.from(document.querySelectorAll('h1, h2, h3, h4')).filter(\n        header => header.textContent && header.textContent.includes('従業員詳細')\n      );\n      \n      if (employeeHeaders.length === 0) {\n        log('従業員詳細のヘッダーが見つかりません');\n        return;\n      }\n      \n      // 既存の年度表示を確認\n      const existingYearDisplay = document.querySelector('.employee-year-right, .employee-year-fixed, .employee-year-selector-fixed');\n      \n      if (existingYearDisplay) {\n        log('従業員詳細の年度表示が既に存在します');\n        return;\n      }\n      \n      log('従業員詳細画面を検出しましたが、年度表示が見つかりません');\n    } catch (e) {\n      log('従業員年度表示確認中にエラー: ' + e.message);\n    }\n  }\n\n  // 安全なMutationObserverの設定\n  let isProcessing = false;\n  const safeObserver = new MutationObserver(function(mutations) {\n    // 実行中なら重複実行しない\n    if (isProcessing) return;\n    \n    isProcessing = true;\n    setTimeout(() => {\n      try {\n        // 現在表示中のページを判断して処理実行\n        const monthlyHeader = Array.from(document.querySelectorAll('h1, h2, h3, h4')).some(\n          header => header.textContent && header.textContent.includes('月次報告')\n        );\n        \n        const employeeHeader = Array.from(document.querySelectorAll('h1, h2, h3, h4')).some(\n          header => header.textContent && header.textContent.includes('従業員詳細')\n        );\n        \n        if (monthlyHeader) {\n          safelyHideYearSelector();\n        }\n        \n        if (employeeHeader) {\n          checkEmployeeYearDisplay();\n        }\n      } finally {\n        isProcessing = false;\n      }\n    }, 100);\n  });\n\n  // 安全な設定で監視を開始（クラス変更、タブや画面切り替えの検出に必要最小限）\n  safeObserver.observe(document.body, {\n    childList: true,\n    subtree: true,\n    attributeFilter: ['class'], // クラスの変更のみ監視\n    attributes: true\n  });\n\n  // 実行順序を制御するために遅延実行\n  setTimeout(function() {\n    safelyHideYearSelector();\n    checkEmployeeYearDisplay();\n    log('画面復元処理が完了しました');\n  }, 500);\n\n  // 現在のURLパスに基づいた処理の実行\n  const currentPath = window.location.pathname;\n  if (currentPath.includes('monthly') || currentPath.includes('report')) {\n    log('月次報告のURLを検出しました');\n    setTimeout(safelyHideYearSelector, 800);\n  } else if (currentPath.includes('employee') || currentPath.includes('staff')) {\n    log('従業員詳細のURLを検出しました');\n    setTimeout(checkEmployeeYearDisplay, 800);\n  }\n\n  // グローバル変数にオブザーバーを保存\n  window._screenRestorerObserver = safeObserver;\n  \n  log('画面復元スクリプトが設定されました');\n})();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}