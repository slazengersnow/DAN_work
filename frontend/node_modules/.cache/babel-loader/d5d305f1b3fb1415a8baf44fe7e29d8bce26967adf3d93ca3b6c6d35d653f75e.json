{"ast":null,"code":"import client from './client';\n\n// 納付金レポートの型定義\n\n// Axiosエラーの型定義\n\n// 全ての納付金レポートを取得\nexport const getAllPaymentReports = async () => {\n  try {\n    const response = await client.get('/payment-reports'); // 修正済みパス\n    return response.data;\n  } catch (error) {\n    console.error('納付金レポート取得エラー:', error);\n    throw error;\n  }\n};\n\n// 特定年度の納付金レポートを取得\nexport const getPaymentReport = async year => {\n  try {\n    // 実際のAPIパスをコンソールに出力して確認\n    console.log(`APIパス: /payment-reports/${year}`);\n    const response = await client.get(`/payment-reports/${year}`);\n    return response.data;\n  } catch (error) {\n    console.error(`${year}年度の納付金レポート取得エラー:`, error);\n\n    // APIパスのデバッグ\n    if (error && typeof error === 'object' && 'config' in error) {\n      var _axiosError$config, _axiosError$config2;\n      const axiosError = error;\n      console.log('リクエストURL:', (_axiosError$config = axiosError.config) === null || _axiosError$config === void 0 ? void 0 : _axiosError$config.url);\n      console.log('リクエストベースURL:', (_axiosError$config2 = axiosError.config) === null || _axiosError$config2 === void 0 ? void 0 : _axiosError$config2.baseURL);\n    }\n    throw error;\n  }\n};\n\n// 納付金レポートを保存\nexport const savePaymentReport = async (year, data) => {\n  try {\n    console.log(`${year}年度のデータを保存します:`, data);\n\n    // データの前処理\n    const processedData = {\n      ...data\n    };\n\n    // 数値型の変換 - 小数点を保持するように数値フィールドを確実に数値型に\n    if (processedData.total_employees !== undefined) {\n      processedData.total_employees = Number(processedData.total_employees);\n    }\n    if (processedData.disabled_employees !== undefined) {\n      processedData.disabled_employees = Number(processedData.disabled_employees);\n    }\n    if (processedData.average_employee_count !== undefined) {\n      processedData.average_employee_count = Number(processedData.average_employee_count);\n    }\n    if (processedData.actual_employment_count !== undefined) {\n      processedData.actual_employment_count = Number(processedData.actual_employment_count);\n    }\n    if (processedData.employment_rate !== undefined) {\n      processedData.employment_rate = Number(processedData.employment_rate);\n    }\n\n    // monthly_dataがオブジェクト形式であることを確認\n    if (processedData.monthly_data) {\n      // 文字列の場合はすでにパースされているかもしれないので、チェックする\n      if (typeof processedData.monthly_data === 'string') {\n        try {\n          processedData.monthly_data = JSON.parse(processedData.monthly_data);\n        } catch (error) {\n          console.error('monthly_dataのパースエラー:', error);\n        }\n      }\n    }\n\n    // company_dataの処理\n    if (processedData.company_data && typeof processedData.company_data === 'string') {\n      try {\n        processedData.company_data = JSON.parse(processedData.company_data);\n      } catch (error) {\n        console.error('company_dataのパースエラー:', error);\n      }\n    }\n\n    // bank_infoの処理\n    if (processedData.bank_info && typeof processedData.bank_info === 'string') {\n      try {\n        processedData.bank_info = JSON.parse(processedData.bank_info);\n      } catch (error) {\n        console.error('bank_infoのパースエラー:', error);\n      }\n    }\n\n    // JSON形式を維持するために一部のフィールドを削除\n    // id などバックエンドで自動生成されるフィールドは削除\n    if (processedData.id) {\n      delete processedData.id;\n    }\n    console.log('整形後のデータ:', processedData);\n    console.log('APIパス:', `/payment-reports/${year}`);\n\n    // 既存データの取得を試みる\n    try {\n      const checkData = await client.get(`/payment-reports/${year}`);\n      if (checkData.data) {\n        // 既存データが存在する場合は更新（PUT）\n        console.log(`${year}年度のデータを更新します`);\n        const response = await client.put(`/payment-reports/${year}`, processedData);\n        return response.data;\n      }\n    } catch (error) {\n      // データが存在しない場合は作成（POST）\n      console.log(`${year}年度のデータを新規作成します`);\n      const response = await client.post(`/payment-reports/${year}`, processedData);\n      return response.data;\n    }\n  } catch (error) {\n    console.error('保存エラー詳細:', error);\n    if (error.response) {\n      console.error('エラーレスポンス:', error.response.status, error.response.data);\n    }\n    throw new Error('サーバーでエラーが発生しました。しばらく経ってから再度お試しください。');\n  }\n};\n\n// 納付金レポートの状態を「確定済み」に更新\nexport const finalizePaymentReport = async year => {\n  try {\n    console.log(`APIパス: /payment-reports/${year}/finalize`);\n    const response = await client.put(`/payment-reports/${year}/finalize`);\n    return response.data;\n  } catch (error) {\n    console.error(`${year}年度の納付金レポート確定処理エラー:`, error);\n\n    // APIパスのデバッグ\n    if (error && typeof error === 'object' && 'config' in error) {\n      var _axiosError$config3, _axiosError$config4;\n      const axiosError = error;\n      console.log('リクエストURL:', (_axiosError$config3 = axiosError.config) === null || _axiosError$config3 === void 0 ? void 0 : _axiosError$config3.url);\n      console.log('リクエストベースURL:', (_axiosError$config4 = axiosError.config) === null || _axiosError$config4 === void 0 ? void 0 : _axiosError$config4.baseURL);\n    }\n    throw error;\n  }\n};\n\n// 納付金レポートのCSVインポート\nexport const importPaymentReports = async csvData => {\n  try {\n    console.log(`APIパス: /payment-reports/import`);\n    await client.post('/payment-reports/import', {\n      data: csvData\n    });\n  } catch (error) {\n    console.error('納付金レポートCSVインポートエラー:', error);\n\n    // APIパスのデバッグ\n    if (error && typeof error === 'object' && 'config' in error) {\n      var _axiosError$config5, _axiosError$config6;\n      const axiosError = error;\n      console.log('リクエストURL:', (_axiosError$config5 = axiosError.config) === null || _axiosError$config5 === void 0 ? void 0 : _axiosError$config5.url);\n      console.log('リクエストベースURL:', (_axiosError$config6 = axiosError.config) === null || _axiosError$config6 === void 0 ? void 0 : _axiosError$config6.baseURL);\n    }\n    throw error;\n  }\n};\n\n// paymentReportApiオブジェクトの作成\nexport const paymentReportApi = {\n  getAllPaymentReports,\n  getPaymentReport,\n  savePaymentReport,\n  finalizePaymentReport,\n  importPaymentReports\n};\nexport default paymentReportApi;","map":{"version":3,"names":["client","getAllPaymentReports","response","get","data","error","console","getPaymentReport","year","log","_axiosError$config","_axiosError$config2","axiosError","config","url","baseURL","savePaymentReport","processedData","total_employees","undefined","Number","disabled_employees","average_employee_count","actual_employment_count","employment_rate","monthly_data","JSON","parse","company_data","bank_info","id","checkData","put","post","status","Error","finalizePaymentReport","_axiosError$config3","_axiosError$config4","importPaymentReports","csvData","_axiosError$config5","_axiosError$config6","paymentReportApi"],"sources":["/Users/gotouhiroaki/Programming/DAN_work/disability-employment-system/frontend/src/api/paymentReportApi.ts"],"sourcesContent":["import client from './client';\n\n// 納付金レポートの型定義\nexport interface PaymentReport {\n  id?: number;\n  year?: number;\n  fiscal_year?: number;\n  company_name?: string;\n  company_address?: string;\n  representative_name?: string;\n  total_employees?: number;\n  disabled_employees?: number;\n  employment_rate?: number;\n  legal_employment_rate?: number;\n  shortage_count?: number;\n  payment_amount?: number;\n  status?: string;\n  notes?: string;\n  company_data?: any;\n  monthly_data?: any;\n  bank_info?: any;\n  type?: string;\n  application_date?: string;\n  payment_date?: string;\n  created_at?: string;\n  updated_at?: string;\n  average_employee_count?: number;\n  actual_employment_count?: number;\n}\n\n// Axiosエラーの型定義\ninterface AxiosError {\n  response?: {\n    status?: number;\n    data?: {\n      message?: string;\n    };\n  };\n  message?: string;\n  config?: {\n    url?: string;\n    baseURL?: string;\n  };\n  isAxiosError?: boolean;\n}\n\n// 全ての納付金レポートを取得\nexport const getAllPaymentReports = async (): Promise<PaymentReport[]> => {\n  try {\n    const response = await client.get('/payment-reports'); // 修正済みパス\n    return response.data;\n  } catch (error) {\n    console.error('納付金レポート取得エラー:', error);\n    throw error;\n  }\n};\n\n// 特定年度の納付金レポートを取得\nexport const getPaymentReport = async (year: number): Promise<PaymentReport> => {\n  try {\n    // 実際のAPIパスをコンソールに出力して確認\n    console.log(`APIパス: /payment-reports/${year}`);\n    const response = await client.get(`/payment-reports/${year}`);\n    return response.data;\n  } catch (error) {\n    console.error(`${year}年度の納付金レポート取得エラー:`, error);\n    \n    // APIパスのデバッグ\n    if (error && typeof error === 'object' && 'config' in error) {\n      const axiosError = error as AxiosError;\n      console.log('リクエストURL:', axiosError.config?.url);\n      console.log('リクエストベースURL:', axiosError.config?.baseURL);\n    }\n    \n    throw error;\n  }\n};\n\n// 納付金レポートを保存\nexport const savePaymentReport = async (year: number, data: any): Promise<any> => {\n  try {\n    console.log(`${year}年度のデータを保存します:`, data);\n    \n    // データの前処理\n    const processedData = { ...data };\n    \n    // 数値型の変換 - 小数点を保持するように数値フィールドを確実に数値型に\n    if (processedData.total_employees !== undefined) {\n      processedData.total_employees = Number(processedData.total_employees);\n    }\n    \n    if (processedData.disabled_employees !== undefined) {\n      processedData.disabled_employees = Number(processedData.disabled_employees);\n    }\n    \n    if (processedData.average_employee_count !== undefined) {\n      processedData.average_employee_count = Number(processedData.average_employee_count);\n    }\n    \n    if (processedData.actual_employment_count !== undefined) {\n      processedData.actual_employment_count = Number(processedData.actual_employment_count);\n    }\n    \n    if (processedData.employment_rate !== undefined) {\n      processedData.employment_rate = Number(processedData.employment_rate);\n    }\n    \n    // monthly_dataがオブジェクト形式であることを確認\n    if (processedData.monthly_data) {\n      // 文字列の場合はすでにパースされているかもしれないので、チェックする\n      if (typeof processedData.monthly_data === 'string') {\n        try {\n          processedData.monthly_data = JSON.parse(processedData.monthly_data);\n        } catch (error) {\n          console.error('monthly_dataのパースエラー:', error);\n        }\n      }\n    }\n    \n    // company_dataの処理\n    if (processedData.company_data && typeof processedData.company_data === 'string') {\n      try {\n        processedData.company_data = JSON.parse(processedData.company_data);\n      } catch (error) {\n        console.error('company_dataのパースエラー:', error);\n      }\n    }\n    \n    // bank_infoの処理\n    if (processedData.bank_info && typeof processedData.bank_info === 'string') {\n      try {\n        processedData.bank_info = JSON.parse(processedData.bank_info);\n      } catch (error) {\n        console.error('bank_infoのパースエラー:', error);\n      }\n    }\n    \n    // JSON形式を維持するために一部のフィールドを削除\n    // id などバックエンドで自動生成されるフィールドは削除\n    if (processedData.id) {\n      delete processedData.id;\n    }\n    \n    console.log('整形後のデータ:', processedData);\n    console.log('APIパス:', `/payment-reports/${year}`);\n    \n    // 既存データの取得を試みる\n    try {\n      const checkData = await client.get(`/payment-reports/${year}`);\n      \n      if (checkData.data) {\n        // 既存データが存在する場合は更新（PUT）\n        console.log(`${year}年度のデータを更新します`);\n        const response = await client.put(`/payment-reports/${year}`, processedData);\n        return response.data;\n      }\n    } catch (error) {\n      // データが存在しない場合は作成（POST）\n      console.log(`${year}年度のデータを新規作成します`);\n      const response = await client.post(`/payment-reports/${year}`, processedData);\n      return response.data;\n    }\n  } catch (error: any) {\n    console.error('保存エラー詳細:', error);\n    \n    if (error.response) {\n      console.error('エラーレスポンス:', error.response.status, error.response.data);\n    }\n    \n    throw new Error('サーバーでエラーが発生しました。しばらく経ってから再度お試しください。');\n  }\n};\n\n// 納付金レポートの状態を「確定済み」に更新\nexport const finalizePaymentReport = async (year: number): Promise<PaymentReport> => {\n  try {\n    console.log(`APIパス: /payment-reports/${year}/finalize`);\n    const response = await client.put(`/payment-reports/${year}/finalize`);\n    return response.data;\n  } catch (error) {\n    console.error(`${year}年度の納付金レポート確定処理エラー:`, error);\n    \n    // APIパスのデバッグ\n    if (error && typeof error === 'object' && 'config' in error) {\n      const axiosError = error as AxiosError;\n      console.log('リクエストURL:', axiosError.config?.url);\n      console.log('リクエストベースURL:', axiosError.config?.baseURL);\n    }\n    \n    throw error;\n  }\n};\n\n// 納付金レポートのCSVインポート\nexport const importPaymentReports = async (csvData: any[]): Promise<void> => {\n  try {\n    console.log(`APIパス: /payment-reports/import`);\n    await client.post('/payment-reports/import', { data: csvData });\n  } catch (error) {\n    console.error('納付金レポートCSVインポートエラー:', error);\n    \n    // APIパスのデバッグ\n    if (error && typeof error === 'object' && 'config' in error) {\n      const axiosError = error as AxiosError;\n      console.log('リクエストURL:', axiosError.config?.url);\n      console.log('リクエストベースURL:', axiosError.config?.baseURL);\n    }\n    \n    throw error;\n  }\n};\n\n// paymentReportApiオブジェクトの作成\nexport const paymentReportApi = {\n  getAllPaymentReports,\n  getPaymentReport,\n  savePaymentReport,\n  finalizePaymentReport,\n  importPaymentReports\n};\n\nexport default paymentReportApi;"],"mappings":"AAAA,OAAOA,MAAM,MAAM,UAAU;;AAE7B;;AA4BA;;AAgBA;AACA,OAAO,MAAMC,oBAAoB,GAAG,MAAAA,CAAA,KAAsC;EACxE,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMF,MAAM,CAACG,GAAG,CAAC,kBAAkB,CAAC,CAAC,CAAC;IACvD,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACrC,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,gBAAgB,GAAG,MAAOC,IAAY,IAA6B;EAC9E,IAAI;IACF;IACAF,OAAO,CAACG,GAAG,CAAC,2BAA2BD,IAAI,EAAE,CAAC;IAC9C,MAAMN,QAAQ,GAAG,MAAMF,MAAM,CAACG,GAAG,CAAC,oBAAoBK,IAAI,EAAE,CAAC;IAC7D,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,GAAGG,IAAI,kBAAkB,EAAEH,KAAK,CAAC;;IAE/C;IACA,IAAIA,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAI,QAAQ,IAAIA,KAAK,EAAE;MAAA,IAAAK,kBAAA,EAAAC,mBAAA;MAC3D,MAAMC,UAAU,GAAGP,KAAmB;MACtCC,OAAO,CAACG,GAAG,CAAC,WAAW,GAAAC,kBAAA,GAAEE,UAAU,CAACC,MAAM,cAAAH,kBAAA,uBAAjBA,kBAAA,CAAmBI,GAAG,CAAC;MAChDR,OAAO,CAACG,GAAG,CAAC,cAAc,GAAAE,mBAAA,GAAEC,UAAU,CAACC,MAAM,cAAAF,mBAAA,uBAAjBA,mBAAA,CAAmBI,OAAO,CAAC;IACzD;IAEA,MAAMV,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMW,iBAAiB,GAAG,MAAAA,CAAOR,IAAY,EAAEJ,IAAS,KAAmB;EAChF,IAAI;IACFE,OAAO,CAACG,GAAG,CAAC,GAAGD,IAAI,eAAe,EAAEJ,IAAI,CAAC;;IAEzC;IACA,MAAMa,aAAa,GAAG;MAAE,GAAGb;IAAK,CAAC;;IAEjC;IACA,IAAIa,aAAa,CAACC,eAAe,KAAKC,SAAS,EAAE;MAC/CF,aAAa,CAACC,eAAe,GAAGE,MAAM,CAACH,aAAa,CAACC,eAAe,CAAC;IACvE;IAEA,IAAID,aAAa,CAACI,kBAAkB,KAAKF,SAAS,EAAE;MAClDF,aAAa,CAACI,kBAAkB,GAAGD,MAAM,CAACH,aAAa,CAACI,kBAAkB,CAAC;IAC7E;IAEA,IAAIJ,aAAa,CAACK,sBAAsB,KAAKH,SAAS,EAAE;MACtDF,aAAa,CAACK,sBAAsB,GAAGF,MAAM,CAACH,aAAa,CAACK,sBAAsB,CAAC;IACrF;IAEA,IAAIL,aAAa,CAACM,uBAAuB,KAAKJ,SAAS,EAAE;MACvDF,aAAa,CAACM,uBAAuB,GAAGH,MAAM,CAACH,aAAa,CAACM,uBAAuB,CAAC;IACvF;IAEA,IAAIN,aAAa,CAACO,eAAe,KAAKL,SAAS,EAAE;MAC/CF,aAAa,CAACO,eAAe,GAAGJ,MAAM,CAACH,aAAa,CAACO,eAAe,CAAC;IACvE;;IAEA;IACA,IAAIP,aAAa,CAACQ,YAAY,EAAE;MAC9B;MACA,IAAI,OAAOR,aAAa,CAACQ,YAAY,KAAK,QAAQ,EAAE;QAClD,IAAI;UACFR,aAAa,CAACQ,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACV,aAAa,CAACQ,YAAY,CAAC;QACrE,CAAC,CAAC,OAAOpB,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC9C;MACF;IACF;;IAEA;IACA,IAAIY,aAAa,CAACW,YAAY,IAAI,OAAOX,aAAa,CAACW,YAAY,KAAK,QAAQ,EAAE;MAChF,IAAI;QACFX,aAAa,CAACW,YAAY,GAAGF,IAAI,CAACC,KAAK,CAACV,aAAa,CAACW,YAAY,CAAC;MACrE,CAAC,CAAC,OAAOvB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF;;IAEA;IACA,IAAIY,aAAa,CAACY,SAAS,IAAI,OAAOZ,aAAa,CAACY,SAAS,KAAK,QAAQ,EAAE;MAC1E,IAAI;QACFZ,aAAa,CAACY,SAAS,GAAGH,IAAI,CAACC,KAAK,CAACV,aAAa,CAACY,SAAS,CAAC;MAC/D,CAAC,CAAC,OAAOxB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MAC3C;IACF;;IAEA;IACA;IACA,IAAIY,aAAa,CAACa,EAAE,EAAE;MACpB,OAAOb,aAAa,CAACa,EAAE;IACzB;IAEAxB,OAAO,CAACG,GAAG,CAAC,UAAU,EAAEQ,aAAa,CAAC;IACtCX,OAAO,CAACG,GAAG,CAAC,QAAQ,EAAE,oBAAoBD,IAAI,EAAE,CAAC;;IAEjD;IACA,IAAI;MACF,MAAMuB,SAAS,GAAG,MAAM/B,MAAM,CAACG,GAAG,CAAC,oBAAoBK,IAAI,EAAE,CAAC;MAE9D,IAAIuB,SAAS,CAAC3B,IAAI,EAAE;QAClB;QACAE,OAAO,CAACG,GAAG,CAAC,GAAGD,IAAI,cAAc,CAAC;QAClC,MAAMN,QAAQ,GAAG,MAAMF,MAAM,CAACgC,GAAG,CAAC,oBAAoBxB,IAAI,EAAE,EAAES,aAAa,CAAC;QAC5E,OAAOf,QAAQ,CAACE,IAAI;MACtB;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd;MACAC,OAAO,CAACG,GAAG,CAAC,GAAGD,IAAI,gBAAgB,CAAC;MACpC,MAAMN,QAAQ,GAAG,MAAMF,MAAM,CAACiC,IAAI,CAAC,oBAAoBzB,IAAI,EAAE,EAAES,aAAa,CAAC;MAC7E,OAAOf,QAAQ,CAACE,IAAI;IACtB;EACF,CAAC,CAAC,OAAOC,KAAU,EAAE;IACnBC,OAAO,CAACD,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;IAEhC,IAAIA,KAAK,CAACH,QAAQ,EAAE;MAClBI,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAACH,QAAQ,CAACgC,MAAM,EAAE7B,KAAK,CAACH,QAAQ,CAACE,IAAI,CAAC;IACxE;IAEA,MAAM,IAAI+B,KAAK,CAAC,qCAAqC,CAAC;EACxD;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,qBAAqB,GAAG,MAAO5B,IAAY,IAA6B;EACnF,IAAI;IACFF,OAAO,CAACG,GAAG,CAAC,2BAA2BD,IAAI,WAAW,CAAC;IACvD,MAAMN,QAAQ,GAAG,MAAMF,MAAM,CAACgC,GAAG,CAAC,oBAAoBxB,IAAI,WAAW,CAAC;IACtE,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,GAAGG,IAAI,oBAAoB,EAAEH,KAAK,CAAC;;IAEjD;IACA,IAAIA,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAI,QAAQ,IAAIA,KAAK,EAAE;MAAA,IAAAgC,mBAAA,EAAAC,mBAAA;MAC3D,MAAM1B,UAAU,GAAGP,KAAmB;MACtCC,OAAO,CAACG,GAAG,CAAC,WAAW,GAAA4B,mBAAA,GAAEzB,UAAU,CAACC,MAAM,cAAAwB,mBAAA,uBAAjBA,mBAAA,CAAmBvB,GAAG,CAAC;MAChDR,OAAO,CAACG,GAAG,CAAC,cAAc,GAAA6B,mBAAA,GAAE1B,UAAU,CAACC,MAAM,cAAAyB,mBAAA,uBAAjBA,mBAAA,CAAmBvB,OAAO,CAAC;IACzD;IAEA,MAAMV,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMkC,oBAAoB,GAAG,MAAOC,OAAc,IAAoB;EAC3E,IAAI;IACFlC,OAAO,CAACG,GAAG,CAAC,gCAAgC,CAAC;IAC7C,MAAMT,MAAM,CAACiC,IAAI,CAAC,yBAAyB,EAAE;MAAE7B,IAAI,EAAEoC;IAAQ,CAAC,CAAC;EACjE,CAAC,CAAC,OAAOnC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;;IAE3C;IACA,IAAIA,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAI,QAAQ,IAAIA,KAAK,EAAE;MAAA,IAAAoC,mBAAA,EAAAC,mBAAA;MAC3D,MAAM9B,UAAU,GAAGP,KAAmB;MACtCC,OAAO,CAACG,GAAG,CAAC,WAAW,GAAAgC,mBAAA,GAAE7B,UAAU,CAACC,MAAM,cAAA4B,mBAAA,uBAAjBA,mBAAA,CAAmB3B,GAAG,CAAC;MAChDR,OAAO,CAACG,GAAG,CAAC,cAAc,GAAAiC,mBAAA,GAAE9B,UAAU,CAACC,MAAM,cAAA6B,mBAAA,uBAAjBA,mBAAA,CAAmB3B,OAAO,CAAC;IACzD;IAEA,MAAMV,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMsC,gBAAgB,GAAG;EAC9B1C,oBAAoB;EACpBM,gBAAgB;EAChBS,iBAAiB;EACjBoB,qBAAqB;EACrBG;AACF,CAAC;AAED,eAAeI,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}