{"ast":null,"code":"var _jsxFileName = \"/Users/gotouhiroaki/Programming/DAN_work/disability-employment-system/frontend/src/pages/MonthlyReport/YearMonthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { shouldShowYearMonthControls } from '../../api/yearMonthControlsHandler.ts';\n\n// コンテキストの型定義\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// 現在の年月を取得する関数\nconst getCurrentYearMonth = () => {\n  const currentDate = new Date();\n  return {\n    year: currentDate.getFullYear(),\n    month: currentDate.getMonth() + 1\n  };\n};\n\n// デフォルト値（現在の年と月）を設定\nconst {\n  year: defaultYear,\n  month: defaultMonth\n} = getCurrentYearMonth();\nconst defaultValues = {\n  fiscalYear: defaultYear,\n  month: defaultMonth,\n  setFiscalYear: () => {},\n  setMonth: () => {},\n  dispatchYearMonthChange: () => {},\n  canShowYearMonthControls: false\n};\n\n// localStorage操作をsafely処理する関数\nconst safelyGetItem = (key, defaultValue) => {\n  try {\n    const storedValue = localStorage.getItem(key);\n    return storedValue ? JSON.parse(storedValue) : defaultValue;\n  } catch (error) {\n    console.warn(`ストレージからの読み込みエラー (${key}):`, error);\n    return defaultValue;\n  }\n};\nconst safelySetItem = (key, value) => {\n  try {\n    localStorage.setItem(key, JSON.stringify(value));\n  } catch (error) {\n    console.warn(`ストレージへの書き込みエラー (${key}):`, error);\n  }\n};\n\n// コンテキスト作成\nconst YearMonthContext = /*#__PURE__*/createContext(defaultValues);\n\n// プロバイダープロパティの型定義\n\n// プロバイダーコンポーネント\nexport const YearMonthProvider = ({\n  children,\n  initialYear,\n  initialMonth\n}) => {\n  _s();\n  // ストレージから値を取得、または初期値を使用\n  const [fiscalYear, setFiscalYearState] = useState(initialYear || safelyGetItem('fiscalYear', defaultValues.fiscalYear));\n  const [month, setMonthState] = useState(initialMonth || safelyGetItem('month', defaultValues.month));\n\n  // 年度と月を同時に変更する関数\n  const dispatchYearMonthChange = (year, month) => {\n    console.log(`年度と月を変更: ${year}年${month}月`);\n    setFiscalYearState(year);\n    setMonthState(month);\n    safelySetItem('fiscalYear', year);\n    safelySetItem('month', month);\n\n    // カスタムイベントを発火して他のコンポーネントに通知\n    const yearMonthChangeEvent = new CustomEvent('yearMonthChanged', {\n      detail: {\n        year,\n        month\n      }\n    });\n    window.dispatchEvent(yearMonthChangeEvent);\n  };\n\n  // ラッパー関数を作成して、状態更新とストレージ保存を行う\n  const setFiscalYear = year => {\n    console.log(`年度を${year}に変更しました`);\n    setFiscalYearState(year);\n    safelySetItem('fiscalYear', year);\n\n    // カスタムイベントを発火して他のコンポーネントに通知\n    const yearChangeEvent = new CustomEvent('fiscalYearChanged', {\n      detail: {\n        year,\n        month\n      }\n    });\n    window.dispatchEvent(yearChangeEvent);\n  };\n  const setMonth = newMonth => {\n    console.log(`月を${newMonth}に変更しました`);\n    setMonthState(newMonth);\n    safelySetItem('month', newMonth);\n\n    // カスタムイベントを発火して他のコンポーネントに通知\n    const monthChangeEvent = new CustomEvent('monthChanged', {\n      detail: {\n        year: fiscalYear,\n        month: newMonth\n      }\n    });\n    window.dispatchEvent(monthChangeEvent);\n  };\n\n  // 初期値が変わったときにコンテキストの値を更新\n  useEffect(() => {\n    if (initialYear !== undefined && initialYear !== fiscalYear) {\n      setFiscalYearState(initialYear);\n      safelySetItem('fiscalYear', initialYear);\n    }\n    if (initialMonth !== undefined && initialMonth !== month) {\n      setMonthState(initialMonth);\n      safelySetItem('month', initialMonth);\n    }\n  }, [initialYear, initialMonth]);\n\n  // コンポーネントマウント時にコンソールに情報を出力\n  useEffect(() => {\n    console.log('YearMonthContext初期化:', {\n      fiscalYear,\n      month\n    });\n  }, []);\n\n  // 表示設定の取得\n  const canShowYearMonthControls = shouldShowYearMonthControls();\n  return /*#__PURE__*/_jsxDEV(YearMonthContext.Provider, {\n    value: {\n      fiscalYear,\n      month,\n      setFiscalYear,\n      setMonth,\n      dispatchYearMonthChange,\n      canShowYearMonthControls\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n\n// カスタムフック\n_s(YearMonthProvider, \"OHjzMeCosBtmvWpRV2IPE6641tA=\");\n_c = YearMonthProvider;\nexport const useYearMonth = () => {\n  _s2();\n  const context = useContext(YearMonthContext);\n  if (context === undefined) {\n    throw new Error('useYearMonth must be used within a YearMonthProvider');\n  }\n  return context;\n};\n_s2(useYearMonth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default YearMonthContext;\nvar _c;\n$RefreshReg$(_c, \"YearMonthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","shouldShowYearMonthControls","jsxDEV","_jsxDEV","getCurrentYearMonth","currentDate","Date","year","getFullYear","month","getMonth","defaultYear","defaultMonth","defaultValues","fiscalYear","setFiscalYear","setMonth","dispatchYearMonthChange","canShowYearMonthControls","safelyGetItem","key","defaultValue","storedValue","localStorage","getItem","JSON","parse","error","console","warn","safelySetItem","value","setItem","stringify","YearMonthContext","YearMonthProvider","children","initialYear","initialMonth","_s","setFiscalYearState","setMonthState","log","yearMonthChangeEvent","CustomEvent","detail","window","dispatchEvent","yearChangeEvent","newMonth","monthChangeEvent","undefined","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useYearMonth","_s2","context","Error","$RefreshReg$"],"sources":["/Users/gotouhiroaki/Programming/DAN_work/disability-employment-system/frontend/src/pages/MonthlyReport/YearMonthContext.tsx"],"sourcesContent":["import React, { createContext, useState, useContext, ReactNode, useEffect } from 'react';\nimport { shouldShowYearMonthControls } from '../../api/yearMonthControlsHandler.ts';\n\n// コンテキストの型定義\ninterface YearMonthContextType {\n  fiscalYear: number;\n  month: number;\n  setFiscalYear: (year: number) => void;\n  setMonth: (month: number) => void;\n  dispatchYearMonthChange: (year: number, month: number) => void;\n  canShowYearMonthControls: boolean;\n}\n\n// 現在の年月を取得する関数\nconst getCurrentYearMonth = () => {\n  const currentDate = new Date();\n  return {\n    year: currentDate.getFullYear(),\n    month: currentDate.getMonth() + 1\n  };\n};\n\n// デフォルト値（現在の年と月）を設定\nconst { year: defaultYear, month: defaultMonth } = getCurrentYearMonth();\nconst defaultValues: YearMonthContextType = {\n  fiscalYear: defaultYear,\n  month: defaultMonth,\n  setFiscalYear: () => {},\n  setMonth: () => {},\n  dispatchYearMonthChange: () => {},\n  canShowYearMonthControls: false\n};\n\n// localStorage操作をsafely処理する関数\nconst safelyGetItem = (key: string, defaultValue: any): any => {\n  try {\n    const storedValue = localStorage.getItem(key);\n    return storedValue ? JSON.parse(storedValue) : defaultValue;\n  } catch (error) {\n    console.warn(`ストレージからの読み込みエラー (${key}):`, error);\n    return defaultValue;\n  }\n};\n\nconst safelySetItem = (key: string, value: any): void => {\n  try {\n    localStorage.setItem(key, JSON.stringify(value));\n  } catch (error) {\n    console.warn(`ストレージへの書き込みエラー (${key}):`, error);\n  }\n};\n\n// コンテキスト作成\nconst YearMonthContext = createContext<YearMonthContextType>(defaultValues);\n\n// プロバイダープロパティの型定義\ninterface YearMonthProviderProps {\n  children: ReactNode;\n  initialYear?: number;\n  initialMonth?: number;\n}\n\n// プロバイダーコンポーネント\nexport const YearMonthProvider: React.FC<YearMonthProviderProps> = ({ \n  children, \n  initialYear,\n  initialMonth \n}) => {\n  // ストレージから値を取得、または初期値を使用\n  const [fiscalYear, setFiscalYearState] = useState<number>(\n    initialYear || safelyGetItem('fiscalYear', defaultValues.fiscalYear)\n  );\n  \n  const [month, setMonthState] = useState<number>(\n    initialMonth || safelyGetItem('month', defaultValues.month)\n  );\n\n  // 年度と月を同時に変更する関数\n  const dispatchYearMonthChange = (year: number, month: number) => {\n    console.log(`年度と月を変更: ${year}年${month}月`);\n    setFiscalYearState(year);\n    setMonthState(month);\n    safelySetItem('fiscalYear', year);\n    safelySetItem('month', month);\n    \n    // カスタムイベントを発火して他のコンポーネントに通知\n    const yearMonthChangeEvent = new CustomEvent('yearMonthChanged', { \n      detail: { year, month } \n    });\n    window.dispatchEvent(yearMonthChangeEvent);\n  };\n\n  // ラッパー関数を作成して、状態更新とストレージ保存を行う\n  const setFiscalYear = (year: number) => {\n    console.log(`年度を${year}に変更しました`);\n    setFiscalYearState(year);\n    safelySetItem('fiscalYear', year);\n    \n    // カスタムイベントを発火して他のコンポーネントに通知\n    const yearChangeEvent = new CustomEvent('fiscalYearChanged', { \n      detail: { year, month } \n    });\n    window.dispatchEvent(yearChangeEvent);\n  };\n\n  const setMonth = (newMonth: number) => {\n    console.log(`月を${newMonth}に変更しました`);\n    setMonthState(newMonth);\n    safelySetItem('month', newMonth);\n    \n    // カスタムイベントを発火して他のコンポーネントに通知\n    const monthChangeEvent = new CustomEvent('monthChanged', { \n      detail: { year: fiscalYear, month: newMonth } \n    });\n    window.dispatchEvent(monthChangeEvent);\n  };\n\n  // 初期値が変わったときにコンテキストの値を更新\n  useEffect(() => {\n    if (initialYear !== undefined && initialYear !== fiscalYear) {\n      setFiscalYearState(initialYear);\n      safelySetItem('fiscalYear', initialYear);\n    }\n    \n    if (initialMonth !== undefined && initialMonth !== month) {\n      setMonthState(initialMonth);\n      safelySetItem('month', initialMonth);\n    }\n  }, [initialYear, initialMonth]);\n\n  // コンポーネントマウント時にコンソールに情報を出力\n  useEffect(() => {\n    console.log('YearMonthContext初期化:', { fiscalYear, month });\n  }, []);\n\n  // 表示設定の取得\n  const canShowYearMonthControls = shouldShowYearMonthControls();\n\n  return (\n    <YearMonthContext.Provider value={{ \n      fiscalYear, \n      month, \n      setFiscalYear, \n      setMonth,\n      dispatchYearMonthChange,\n      canShowYearMonthControls\n    }}>\n      {children}\n    </YearMonthContext.Provider>\n  );\n};\n\n// カスタムフック\nexport const useYearMonth = (): YearMonthContextType => {\n  const context = useContext(YearMonthContext);\n  if (context === undefined) {\n    throw new Error('useYearMonth must be used within a YearMonthProvider');\n  }\n  return context;\n};\n\nexport default YearMonthContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}