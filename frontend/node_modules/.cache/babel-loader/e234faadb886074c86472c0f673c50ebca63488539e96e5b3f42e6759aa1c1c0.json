{"ast":null,"code":"var _jsxFileName = \"/Users/gotouhiroaki/Programming/DAN_work/disability-employment-system/frontend/src/pages/MonthlyReport/CSVImportModal.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useRef, useEffect, useMemo } from 'react';\nimport axios, { AxiosError } from 'axios';\nimport Papa from 'papaparse';\nimport './CSVImportModal.css';\nimport { generateCSVTemplate, downloadCSV, convertTemplateDataToApiFormat } from './utils';\nimport ImportNotification from './ImportNotification';\nimport logger from './DebugLogger';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n/**\n * 拡張されたCSVインポートモーダルコンポーネント - エラーハンドリング強化版\n */\nconst CSVImportModal = ({\n  isOpen,\n  onClose,\n  onImportSuccess,\n  fiscalYear\n}) => {\n  _s();\n  // 状態管理\n  const [file, setFile] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null);\n  const fileInputRef = useRef(null);\n\n  // 年度をステート管理（CSVからの読み込み用）\n  const [detectedFiscalYear, setDetectedFiscalYear] = useState(null);\n\n  // 現在のインポート進行状況\n  const [importProgress, setImportProgress] = useState(0);\n\n  // 処理段階の状態管理\n  const [processStage, setProcessStage] = useState('initial');\n\n  // パースされたデータのキャッシュ\n  const [parsedDataCache, setParsedDataCache] = useState(null);\n\n  // API処理結果の追跡\n  const [processedMonths, setProcessedMonths] = useState([]);\n  const [importSummary, setImportSummary] = useState('');\n\n  // 変換後のAPIデータキャッシュ\n  const [convertedApiData, setConvertedApiData] = useState(null);\n\n  // リトライ機能のためのカウンター\n  const [retryCount, setRetryCount] = useState(0);\n  const MAX_RETRIES = 3;\n\n  // ステータスメッセージ\n  const statusMessage = useMemo(() => {\n    switch (processStage) {\n      case 'parsing':\n        return 'ファイル解析中...';\n      case 'ready':\n        return `${detectedFiscalYear || fiscalYear}年度のデータ (${(parsedDataCache === null || parsedDataCache === void 0 ? void 0 : parsedDataCache.length) || 0}行) の準備完了`;\n      case 'importing':\n        return `インポート中... ${importProgress}%`;\n      case 'completed':\n        return 'インポート完了！';\n      case 'error':\n        return 'エラーが発生しました';\n      default:\n        return '';\n    }\n  }, [processStage, importProgress, detectedFiscalYear, fiscalYear, parsedDataCache]);\n\n  // 年度情報メッセージ - 検出された年度と選択されている年度が異なる場合に表示\n  const yearInfoMessage = useMemo(() => {\n    if (detectedFiscalYear && detectedFiscalYear !== fiscalYear) {\n      return `テンプレートから${detectedFiscalYear}年度が検出されました。このデータは${detectedFiscalYear}年度としてインポートされます。`;\n    } else if (detectedFiscalYear === null && parsedDataCache && parsedDataCache.length > 0) {\n      return `テンプレートに年度情報がないため、現在選択されている${fiscalYear}年度としてインポートされます。`;\n    }\n    return null;\n  }, [detectedFiscalYear, fiscalYear, parsedDataCache]);\n\n  // 通知用の状態管理\n  const [notification, setNotification] = useState({\n    isVisible: false,\n    message: '',\n    type: 'info'\n  });\n\n  // 通知を表示する関数\n  const showNotification = (message, type = 'info') => {\n    setNotification({\n      isVisible: true,\n      message,\n      type\n    });\n  };\n\n  // 通知を閉じる関数\n  const closeNotification = () => {\n    setNotification(prev => ({\n      ...prev,\n      isVisible: false\n    }));\n  };\n\n  // コンポーネントがマウントされた時、またはpropsが変更された時に年度を更新\n  useEffect(() => {\n    logger.logDebug(`年度プロパティが変更されました: ${fiscalYear}`);\n  }, [fiscalYear]);\n\n  // モーダルを開いた時にステートをリセット\n  useEffect(() => {\n    if (isOpen) {\n      setErrorMessage(null);\n      setSuccessMessage(null);\n      setImportProgress(0);\n      setDetectedFiscalYear(null);\n      setFile(null);\n      setProcessStage('initial');\n      setParsedDataCache(null);\n      setProcessedMonths([]);\n      setImportSummary('');\n      setConvertedApiData(null);\n      setRetryCount(0);\n    }\n  }, [isOpen]);\n\n  // バッチサイズを動的に計算（パフォーマンス最適化）\n  const calculateBatchSize = totalItems => {\n    // 項目数が少ない場合は全て同時処理\n    if (totalItems <= 3) return totalItems;\n    // 項目数が多い場合は最大5件ずつ\n    return Math.min(5, Math.ceil(totalItems / 3));\n  };\n\n  // CSVテンプレートのダウンロード\n  const handleDownloadTemplate = useCallback(() => {\n    logger.logInfo(`テンプレートをダウンロード: ${fiscalYear}年度`);\n    const csvContent = generateCSVTemplate(fiscalYear);\n    downloadCSV(csvContent, `月次データ_テンプレート_${fiscalYear}年度.csv`);\n\n    // テンプレートダウンロード通知\n    showNotification(`${fiscalYear}年度のテンプレートをダウンロードしました`, 'info');\n  }, [fiscalYear]);\n\n  // ファイル選択ハンドラ\n  const handleFileChange = e => {\n    var _e$target$files;\n    const selectedFile = (_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0];\n    if (selectedFile) {\n      logger.logInfo(`ファイルが選択されました: ${selectedFile.name} (${selectedFile.size} bytes)`);\n      setFile(selectedFile);\n      setErrorMessage(null);\n      setDetectedFiscalYear(null);\n      setParsedDataCache(null);\n      setProcessStage('parsing');\n      setConvertedApiData(null);\n\n      // ファイル解析を即時開始\n      parseCSVFile(selectedFile);\n    }\n  };\n\n  // ファイル選択ボタンクリックハンドラ\n  const handleSelectFile = () => {\n    var _fileInputRef$current;\n    logger.logDebug('ファイル選択ボタンがクリックされました');\n    (_fileInputRef$current = fileInputRef.current) === null || _fileInputRef$current === void 0 ? void 0 : _fileInputRef$current.click();\n  };\n\n  // CSVファイル解析 - エラーハンドリングとデバッグ機能強化版\n  const parseCSVFile = file => {\n    // パフォーマンス計測開始\n    logger.startPerformanceTimer('CSVファイル読み込み');\n\n    // FileReaderでファイルをテキストとして読み込む\n    const reader = new FileReader();\n    reader.onload = e => {\n      var _e$target;\n      logger.logDebug('ファイル読み込み完了');\n      const csvText = (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.result;\n      if (!csvText) {\n        setErrorMessage('ファイルの読み込みに失敗しました');\n        setProcessStage('error');\n        logger.logError('ファイル内容が空です');\n        return;\n      }\n\n      // 正常終了時のコールバック\n      const handleParseComplete = results => {\n        // パフォーマンス計測開始\n        logger.startPerformanceTimer('CSVパース処理');\n\n        // エラーチェック - メッセージベースで判断\n        if (results.errors && results.errors.length > 0) {\n          // 一般的なエラーパターン - 重大なエラーかどうかをメッセージで判断\n          const criticalErrors = results.errors.filter(e => {\n            const message = e.message.toLowerCase();\n            return !message.includes('duplicate') && !message.includes('quote');\n          });\n          if (criticalErrors.length > 0) {\n            logger.logError('CSVパースエラー:', criticalErrors);\n            setErrorMessage('CSVファイルの解析中にエラーが発生しました');\n            setProcessStage('error');\n            return;\n          }\n        }\n\n        // 有効なデータを抽出\n        const validData = results.data.filter(row => Object.keys(row).length > 0 && Object.values(row).some(v => v !== null && v !== undefined && v !== ''));\n        logger.logInfo('パース完了。データ行数:', validData.length);\n        try {\n          // 年度を検出（utils.ts内の関数で処理）\n          const convertedData = convertTemplateDataToApiFormat(validData, fiscalYear);\n\n          // データが変換できた場合\n          if (convertedData && convertedData.length > 0) {\n            // 検出された年度を設定\n            setDetectedFiscalYear(convertedData[0].fiscal_year);\n\n            // API形式のデータをキャッシュ\n            setConvertedApiData(convertedData);\n\n            // パース済みデータをキャッシュに保存\n            setParsedDataCache(validData);\n            setProcessStage('ready');\n\n            // パース成功通知\n            showNotification(`${convertedData.length}ヶ月分のデータを解析しました`, 'info');\n            logger.logObject('変換されたデータ（最初の項目）', convertedData[0]);\n          } else {\n            throw new Error('データの変換に失敗しました');\n          }\n        } catch (err) {\n          logger.logError('データ処理エラー:', err);\n          setErrorMessage('CSVデータの処理中にエラーが発生しました');\n          setProcessStage('error');\n        } finally {\n          // パフォーマンス計測終了\n          logger.endPerformanceTimer('CSVパース処理');\n        }\n      };\n      try {\n        // パフォーマンス計測開始\n        logger.startPerformanceTimer('Papaparse実行');\n\n        // パース実行 - 型定義に合わせて必要な設定のみ使用\n        Papa.parse(csvText, {\n          header: true,\n          skipEmptyLines: true,\n          dynamicTyping: true,\n          fastMode: true,\n          transformHeader: header => header.trim() || `_empty_${Math.random().toString(36).substring(2, 7)}`,\n          complete: results => {\n            logger.endPerformanceTimer('Papaparse実行');\n            handleParseComplete(results);\n          }\n        });\n      } catch (err) {\n        logger.logError('Papaparse実行エラー:', err);\n        setErrorMessage('CSVファイルの処理中にエラーが発生しました');\n        setProcessStage('error');\n      }\n    };\n    reader.onerror = error => {\n      logger.logError('ファイル読み込みエラー:', error);\n      setErrorMessage('ファイルの読み込み中にエラーが発生しました');\n      setProcessStage('error');\n    };\n\n    // ファイル読み込み開始\n    reader.readAsText(file);\n    logger.logDebug('ファイルの読み込みを開始しました');\n  };\n\n  // 休止する関数（リトライ時の待機用）\n  const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n  // APIリクエストを送信する関数（リトライ機能付き）\n  const sendApiRequest = async (method, url, data) => {\n    let lastError = null;\n    // リトライロジック\n    for (let attempt = 0; attempt <= MAX_RETRIES; attempt++) {\n      try {\n        // 初回以外は待機時間を設ける（指数バックオフ）\n        if (attempt > 0) {\n          const waitTime = Math.min(1000 * Math.pow(2, attempt), 10000);\n          await sleep(waitTime);\n          console.log(`リトライ #${attempt} (${url})...`);\n        }\n        let response;\n        if (method.toUpperCase() === 'GET') {\n          response = await axios.get(url, {\n            timeout: 5000\n          });\n        } else if (method.toUpperCase() === 'POST') {\n          response = await axios.post(url, data, {\n            timeout: 5000\n          });\n        } else if (method.toUpperCase() === 'PUT') {\n          response = await axios.put(url, data, {\n            timeout: 5000\n          });\n        } else {\n          throw new Error(`未対応のHTTPメソッド: ${method}`);\n        }\n        return response;\n      } catch (error) {\n        var _error$response;\n        lastError = error;\n\n        // APIエンドポイントが存在しない場合\n        if (error instanceof AxiosError && ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 404) {\n          // 404エラーの場合は、別のエンドポイントを試す\n          if (url.includes('/monthly-reports/')) {\n            // /monthly-reports/ から /monthly-report/ に変更してリトライ\n            url = url.replace('/monthly-reports/', '/monthly-report/');\n            console.log(`エンドポイント変更: ${url}`);\n\n            // リトライカウントをリセット（新しいURLなので）\n            attempt = -1; // 次のループで0になる\n            continue;\n          }\n        }\n\n        // 最大リトライ回数に達した場合、またはキャンセルされた場合は例外をスロー\n        if (attempt === MAX_RETRIES) {\n          console.error(`リクエスト失敗 (${MAX_RETRIES}回リトライ後): ${url}`, error);\n          throw error;\n        }\n      }\n    }\n\n    // 実行されることはないはずだが、TypeScriptのエラーを回避するために必要\n    throw lastError;\n  };\n\n  // 既存データチェック - 非同期関数として実装\n  const checkExistingData = async (fiscalYear, month) => {\n    try {\n      const response = await sendApiRequest('GET', `${API_BASE_URL}/monthly-reports/${fiscalYear}/${month}`);\n      return !!(response && response.data && response.data.success);\n    } catch (error) {\n      console.log(`${fiscalYear}年${month}月のデータは存在しません`);\n      return false;\n    }\n  };\n\n  // インポート結果サマリーの生成\n  const generateImportSummary = statusList => {\n    const counts = {\n      新規: 0,\n      更新: 0,\n      エラー: 0,\n      合計: statusList.length\n    };\n    statusList.forEach(item => {\n      if (item.status === '新規') counts.新規++;else if (item.status === '更新') counts.更新++;else if (item.status === 'エラー') counts.エラー++;\n    });\n    return `合計: ${counts.合計}件（新規: ${counts.新規}件、更新: ${counts.更新}件${counts.エラー > 0 ? `、エラー: ${counts.エラー}件` : ''}）`;\n  };\n\n  // CSVデータのAPIへのインポート - 完全に再設計\n  const importCSVData = async data => {\n    try {\n      // パフォーマンス計測開始\n      logger.startPerformanceTimer('インポート処理');\n      setIsLoading(true);\n      setProcessStage('importing');\n      setImportProgress(0);\n      setProcessedMonths([]);\n\n      // データが空の場合はエラー\n      if (data.length === 0) {\n        setErrorMessage('インポートするデータが見つかりませんでした。');\n        setIsLoading(false);\n        setProcessStage('error');\n        return;\n      }\n      console.log(`インポート処理開始: ${data.length}件のデータ`);\n\n      // 月の値が有効かチェック\n      const validData = data.filter(item => item.month !== null && !isNaN(item.month));\n      if (validData.length === 0) {\n        setErrorMessage('有効な月情報が見つかりませんでした。');\n        setIsLoading(false);\n        setProcessStage('error');\n        return;\n      }\n\n      // バッチサイズを動的に計算\n      const BATCH_SIZE = calculateBatchSize(validData.length);\n      const results = [];\n\n      // 完了したデータを追跡\n      const processedMonthsArray = [];\n\n      // ステータスリスト\n      const statusList = [];\n\n      // バッチ処理のヘルパー関数（順次処理に変更）\n      const processBatches = async () => {\n        for (let i = 0; i < validData.length; i += BATCH_SIZE) {\n          const startIndex = i;\n          const endIndex = Math.min(startIndex + BATCH_SIZE, validData.length);\n          const batch = validData.slice(startIndex, endIndex);\n\n          // バッチを順次処理\n          for (const monthData of batch) {\n            try {\n              // まず対象データの存在をチェック\n              const existingData = await checkExistingData(monthData.fiscal_year, monthData.month);\n              let response;\n              if (existingData) {\n                // 既存データの更新\n                console.log(`${monthData.fiscal_year}年度${monthData.month}月のデータを更新します`);\n                try {\n                  response = await sendApiRequest('PUT', `${API_BASE_URL}/monthly-reports/${monthData.fiscal_year}/${monthData.month}`, monthData);\n                  processedMonthsArray.push(`${monthData.month}月(更新)`);\n                  statusList.push({\n                    month: monthData.month,\n                    status: '更新'\n                  });\n                } catch (error) {\n                  // 更新に失敗した場合はPOSTを試みる\n                  console.log(`PUT要求失敗、POST要求を試みます`);\n                  response = await sendApiRequest('POST', `${API_BASE_URL}/monthly-reports/${monthData.fiscal_year}/${monthData.month}`, monthData);\n                  processedMonthsArray.push(`${monthData.month}月(POST更新)`);\n                  statusList.push({\n                    month: monthData.month,\n                    status: '更新'\n                  });\n                }\n              } else {\n                // 新規データの作成（2つのエンドポイントを試す）\n                console.log(`${monthData.fiscal_year}年度${monthData.month}月のデータを新規作成します`);\n                try {\n                  // エンドポイント1: /monthly-reports\n                  response = await sendApiRequest('POST', `${API_BASE_URL}/monthly-reports`, monthData);\n                } catch (error) {\n                  // エンドポイント1が失敗した場合、エンドポイント2を試す\n                  console.log(`エンドポイント1失敗、エンドポイント2を試みます`);\n                  try {\n                    // エンドポイント2: /monthly-reports/:year/:month\n                    response = await sendApiRequest('POST', `${API_BASE_URL}/monthly-reports/${monthData.fiscal_year}/${monthData.month}`, monthData);\n                  } catch (innerError) {\n                    // 両方のエンドポイントが失敗した場合\n                    console.error(`両方のエンドポイントが失敗しました: ${innerError}`);\n                    throw innerError; // 外側のcatchブロックに委譲\n                  }\n                }\n                processedMonthsArray.push(`${monthData.month}月(新規)`);\n                statusList.push({\n                  month: monthData.month,\n                  status: '新規'\n                });\n              }\n              if (response && response.data) {\n                results.push(response);\n              }\n            } catch (error) {\n              console.error(`${monthData.month}月データの処理中にエラー:`, error);\n              processedMonthsArray.push(`${monthData.month}月(エラー)`);\n              statusList.push({\n                month: monthData.month,\n                status: 'エラー'\n              });\n            }\n          }\n\n          // 進捗率を更新\n          const progressPercent = Math.round(endIndex / validData.length * 100);\n          setImportProgress(Math.min(progressPercent, 100));\n          setProcessedMonths([...processedMonthsArray]);\n        }\n        return results;\n      };\n\n      // 順次処理を開始\n      const batchResults = await processBatches();\n\n      // 結果の確認\n      const successResponses = batchResults.filter(res => res && res.data && res.data.success);\n      logger.logInfo(`成功したレスポンス: ${successResponses.length}/${batchResults.length}`);\n      logger.logInfo('処理した月:', processedMonthsArray.join(', '));\n\n      // ステータスから結果サマリーを作成\n      const summary = generateImportSummary(statusList);\n      setImportSummary(summary);\n      if (successResponses.length > 0) {\n        const yearUsed = validData[0].fiscal_year;\n        const successMessage = `${yearUsed}年度の月次データをインポートしました。(${successResponses.length}/${batchResults.length}件)`;\n        setSuccessMessage(successMessage);\n        setProcessStage('completed');\n\n        // 成功通知を表示\n        showNotification(`CSVインポート完了: ${yearUsed}年度の${successResponses.length}ヶ月分のデータを正常にインポートしました`, 'success');\n\n        // インポート成功コールバック処理を改善\n        if (onImportSuccess) {\n          logger.logInfo('インポート成功コールバックを実行');\n\n          // まず成功通知を確実に保存\n          onImportSuccess(summary, successResponses.length);\n\n          // 遅延してモーダルを閉じる\n          setTimeout(() => {\n            // モーダルを閉じる\n            onClose();\n\n            // 2度目の再読み込みを実行（モーダルが閉じた後に）\n            setTimeout(() => {\n              logger.logInfo('2回目のデータ再ロードを試みます');\n              try {\n                // 念のため2回目の呼び出しを行い、確実に反映させる\n                onImportSuccess(summary, successResponses.length);\n              } catch (e) {\n                logger.logError('2回目のリロード呼び出しでエラー:', e);\n              }\n            }, 500);\n          }, 800);\n        } else {\n          // onImportSuccessがない場合は単にモーダルを閉じる\n          setTimeout(() => {\n            onClose();\n          }, 800);\n        }\n      } else {\n        setErrorMessage('データのインポートに失敗しました。');\n        setProcessStage('error');\n        showNotification('インポートに失敗しました。再試行してください。', 'error');\n      }\n    } catch (error) {\n      logger.logError('インポートエラー:', error);\n      const errorMsg = error instanceof Error ? error.message : '不明なエラーが発生しました。';\n      setErrorMessage(errorMsg);\n      setProcessStage('error');\n      showNotification(`インポートエラー: ${errorMsg}`, 'error');\n    } finally {\n      setIsLoading(false);\n      logger.endPerformanceTimer('インポート処理');\n    }\n  };\n\n  // インポート実行\n  const handleImport = async () => {\n    // ファイルが選択されているか確認\n    if (!file) {\n      setErrorMessage('ファイルを選択してください。');\n      showNotification('CSVファイルを選択してください', 'error');\n      return;\n    }\n    try {\n      // パフォーマンス計測開始\n      logger.startPerformanceTimer('インポート前処理');\n\n      // パース済みデータがない場合はパースを実行\n      if (!parsedDataCache) {\n        setProcessStage('parsing');\n        parseCSVFile(file);\n        return;\n      }\n\n      // すでに変換済みのデータがある場合はそれを使用\n      if (convertedApiData && convertedApiData.length > 0) {\n        logger.logInfo('変換済みデータを使用してインポートします');\n      } else {\n        // 変換済みデータがない場合は再変換\n        logger.logInfo(`インポートに使用する年度: ${detectedFiscalYear || fiscalYear}`);\n        const apiFormatData = convertTemplateDataToApiFormat(parsedDataCache, detectedFiscalYear || fiscalYear);\n        setConvertedApiData(apiFormatData);\n        if (apiFormatData.length === 0) {\n          setErrorMessage('有効なインポートデータが見つかりませんでした。テンプレート形式を確認してください。');\n          setProcessStage('error');\n          showNotification('有効なインポートデータが見つかりませんでした', 'error');\n          return;\n        }\n      }\n\n      // デバッグ情報 - 障がい者データが正しく変換されているか確認\n      logger.logObject('変換されたAPIデータ', convertedApiData);\n      logger.endPerformanceTimer('インポート前処理');\n\n      // インポート確認\n      const detectedYear = convertedApiData[0].fiscal_year;\n      if (window.confirm(`${detectedYear}年度の${convertedApiData.length}件のデータをインポートします。よろしいですか？`)) {\n        showNotification(`${detectedYear}年度のデータをインポート中...`, 'info');\n        await importCSVData(convertedApiData);\n      }\n    } catch (error) {\n      logger.logError('インポートエラー:', error);\n      const errorMsg = error instanceof Error ? error.message : '不明なエラーが発生しました。';\n      setErrorMessage(errorMsg);\n      setProcessStage('error');\n      showNotification(`インポートエラー: ${errorMsg}`, 'error');\n    }\n  };\n\n  // モーダルが閉じている場合は何も表示しない\n  if (!isOpen) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"csv-import-modal-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"csv-import-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"csv-import-modal-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\u6708\\u5225\\u30C7\\u30FC\\u30BF\\u306E\\u30A4\\u30F3\\u30DD\\u30FC\\u30C8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 634,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 633,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"csv-import-modal-body\",\n        children: [errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 638,\n          columnNumber: 13\n        }, this), successMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"success-message\",\n          children: successMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ImportNotification, {\n          isVisible: notification.isVisible,\n          message: notification.message,\n          type: notification.type,\n          onClose: closeNotification,\n          autoHideDuration: 3000\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 650,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"import-info-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"CSV\\u30D5\\u30A1\\u30A4\\u30EB\\u304B\\u3089\\u6708\\u6B21\\u30C7\\u30FC\\u30BF\\u3092\\u30A4\\u30F3\\u30DD\\u30FC\\u30C8\\u3057\\u307E\\u3059\\u3002 \\u30C6\\u30F3\\u30D7\\u30EC\\u30FC\\u30C8\\u3092\\u30C0\\u30A6\\u30F3\\u30ED\\u30FC\\u30C9\\u3057\\u3066\\u5FC5\\u8981\\u306A\\u30C7\\u30FC\\u30BF\\u3092\\u5165\\u529B\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\\u3002\", /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"import-template-button\",\n              onClick: handleDownloadTemplate,\n              disabled: isLoading,\n              children: [fiscalYear, \"\\u5E74\\u5EA6\\u30C6\\u30F3\\u30D7\\u30EC\\u30FC\\u30C8\\u3092\\u30C0\\u30A6\\u30F3\\u30ED\\u30FC\\u30C9\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 663,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 660,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"note\",\n            children: \"\\u30C6\\u30F3\\u30D7\\u30EC\\u30FC\\u30C8\\u306B\\u306F\\u300C\\u5E74\\u5EA6\\u300D\\u884C\\u304C\\u3042\\u308A\\u307E\\u3059\\u304C\\u3001\\u7A7A\\u767D\\u306E\\u307E\\u307E\\u3067\\u3082\\u554F\\u984C\\u3042\\u308A\\u307E\\u305B\\u3093\\u3002 \\u305D\\u306E\\u5834\\u5408\\u306F\\u73FE\\u5728\\u9078\\u629E\\u3055\\u308C\\u3066\\u3044\\u308B\\u5E74\\u5EA6\\u304C\\u4F7F\\u7528\\u3055\\u308C\\u307E\\u3059\\u3002\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 671,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 659,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"file-select-area\",\n          onClick: handleSelectFile,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            ref: fileInputRef,\n            style: {\n              display: 'none'\n            },\n            accept: \".csv\",\n            onChange: handleFileChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 679,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"file-select-button\",\n            children: \"CSV\\u30D5\\u30A1\\u30A4\\u30EB\\u3092\\u9078\\u629E\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 686,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"file-name\",\n            children: file ? file.name : 'ファイルが選択されていません'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 689,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 678,\n          columnNumber: 11\n        }, this), processStage !== 'initial' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"import-progress-compact\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"status-row\",\n            children: [processStage === 'parsing' || processStage === 'importing' ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"spinner\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 700,\n              columnNumber: 19\n            }, this) : processStage === 'completed' ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"success-icon\",\n              children: \"\\u2713\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 702,\n              columnNumber: 19\n            }, this) : processStage === 'error' ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"error-icon\",\n              children: \"!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 704,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ready-icon\",\n              children: \"\\u27F3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 706,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"status-message\",\n              children: statusMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 708,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 698,\n            columnNumber: 15\n          }, this), (processStage === 'parsing' || processStage === 'importing') && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-bar-container\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress-bar\",\n              style: {\n                width: `${processStage === 'parsing' ? 50 : importProgress}%`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 714,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 713,\n            columnNumber: 17\n          }, this), yearInfoMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"detected-year-info\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: yearInfoMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 726,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 725,\n            columnNumber: 17\n          }, this), processStage === 'importing' && processedMonths.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"import-status-list\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"processed-months-label\",\n              children: \"\\u51E6\\u7406\\u4E2D:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 733,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"processed-months-items\",\n              children: processedMonths.map((item, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"processed-month-item\",\n                children: item\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 736,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 734,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 732,\n            columnNumber: 17\n          }, this), processStage === 'completed' && importSummary && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"import-summary\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: importSummary\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 747,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 746,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 696,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"csv-import-modal-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cancel-button\",\n          onClick: onClose,\n          disabled: isLoading,\n          children: \"\\u9589\\u3058\\u308B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 754,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"import-button\",\n          onClick: handleImport,\n          disabled: !file || isLoading || processStage === 'error' || processStage === 'importing' || processStage === 'parsing',\n          children: isLoading ? 'インポート中...' : processStage === 'ready' ? 'インポート開始' : 'インポート'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 761,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 753,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 632,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 631,\n    columnNumber: 5\n  }, this);\n};\n_s(CSVImportModal, \"Svme6g2cUj8cGHUhfa3DyHSbTC0=\");\n_c = CSVImportModal;\nexport default CSVImportModal;\nvar _c;\n$RefreshReg$(_c, \"CSVImportModal\");","map":{"version":3,"names":["React","useState","useCallback","useRef","useEffect","useMemo","axios","AxiosError","Papa","generateCSVTemplate","downloadCSV","convertTemplateDataToApiFormat","ImportNotification","logger","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_API_URL","CSVImportModal","isOpen","onClose","onImportSuccess","fiscalYear","_s","file","setFile","isLoading","setIsLoading","errorMessage","setErrorMessage","successMessage","setSuccessMessage","fileInputRef","detectedFiscalYear","setDetectedFiscalYear","importProgress","setImportProgress","processStage","setProcessStage","parsedDataCache","setParsedDataCache","processedMonths","setProcessedMonths","importSummary","setImportSummary","convertedApiData","setConvertedApiData","retryCount","setRetryCount","MAX_RETRIES","statusMessage","length","yearInfoMessage","notification","setNotification","isVisible","message","type","showNotification","closeNotification","prev","logDebug","calculateBatchSize","totalItems","Math","min","ceil","handleDownloadTemplate","logInfo","csvContent","handleFileChange","e","_e$target$files","selectedFile","target","files","name","size","parseCSVFile","handleSelectFile","_fileInputRef$current","current","click","startPerformanceTimer","reader","FileReader","onload","_e$target","csvText","result","logError","handleParseComplete","results","errors","criticalErrors","filter","toLowerCase","includes","validData","data","row","Object","keys","values","some","v","undefined","convertedData","fiscal_year","logObject","Error","err","endPerformanceTimer","parse","header","skipEmptyLines","dynamicTyping","fastMode","transformHeader","trim","random","toString","substring","complete","onerror","error","readAsText","sleep","ms","Promise","resolve","setTimeout","sendApiRequest","method","url","lastError","attempt","waitTime","pow","console","log","response","toUpperCase","get","timeout","post","put","_error$response","status","replace","checkExistingData","month","success","generateImportSummary","statusList","counts","新規","更新","エラー","合計","forEach","item","importCSVData","isNaN","BATCH_SIZE","processedMonthsArray","processBatches","i","startIndex","endIndex","batch","slice","monthData","existingData","push","innerError","progressPercent","round","batchResults","successResponses","res","join","summary","yearUsed","errorMsg","handleImport","apiFormatData","detectedYear","window","confirm","className","children","fileName","_jsxFileName","lineNumber","columnNumber","autoHideDuration","onClick","disabled","ref","style","display","accept","onChange","width","map","index","_c","$RefreshReg$"],"sources":["/Users/gotouhiroaki/Programming/DAN_work/disability-employment-system/frontend/src/pages/MonthlyReport/CSVImportModal.tsx"],"sourcesContent":["import React, { useState, useCallback, useRef, useEffect, useMemo } from 'react';\nimport axios, { AxiosResponse, AxiosError } from 'axios';\nimport Papa, { ParseResult } from 'papaparse';\nimport './CSVImportModal.css';\nimport { generateCSVTemplate, downloadCSV, convertTemplateDataToApiFormat, MonthlyCSVData } from './utils';\nimport ImportNotification from './ImportNotification';\nimport logger from './DebugLogger';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\ninterface CSVImportModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onImportSuccess: (summary?: string, dataCount?: number) => void;\n  fiscalYear: number;\n}\n\n/**\n * 拡張されたCSVインポートモーダルコンポーネント - エラーハンドリング強化版\n */\nconst CSVImportModal: React.FC<CSVImportModalProps> = ({ isOpen, onClose, onImportSuccess, fiscalYear }) => {\n  // 状態管理\n  const [file, setFile] = useState<File | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\n  const [successMessage, setSuccessMessage] = useState<string | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  \n  // 年度をステート管理（CSVからの読み込み用）\n  const [detectedFiscalYear, setDetectedFiscalYear] = useState<number | null>(null);\n  \n  // 現在のインポート進行状況\n  const [importProgress, setImportProgress] = useState<number>(0);\n  \n  // 処理段階の状態管理\n  const [processStage, setProcessStage] = useState<'initial' | 'parsing' | 'ready' | 'importing' | 'completed' | 'error'>('initial');\n  \n  // パースされたデータのキャッシュ\n  const [parsedDataCache, setParsedDataCache] = useState<any[] | null>(null);\n  \n  // API処理結果の追跡\n  const [processedMonths, setProcessedMonths] = useState<string[]>([]);\n  const [importSummary, setImportSummary] = useState<string>('');\n  \n  // 変換後のAPIデータキャッシュ\n  const [convertedApiData, setConvertedApiData] = useState<MonthlyCSVData[] | null>(null);\n\n  // リトライ機能のためのカウンター\n  const [retryCount, setRetryCount] = useState<number>(0);\n  const MAX_RETRIES = 3;\n  \n  // ステータスメッセージ\n  const statusMessage = useMemo(() => {\n    switch (processStage) {\n      case 'parsing':\n        return 'ファイル解析中...';\n      case 'ready':\n        return `${detectedFiscalYear || fiscalYear}年度のデータ (${parsedDataCache?.length || 0}行) の準備完了`;\n      case 'importing':\n        return `インポート中... ${importProgress}%`;\n      case 'completed':\n        return 'インポート完了！';\n      case 'error':\n        return 'エラーが発生しました';\n      default:\n        return '';\n    }\n  }, [processStage, importProgress, detectedFiscalYear, fiscalYear, parsedDataCache]);\n\n  // 年度情報メッセージ - 検出された年度と選択されている年度が異なる場合に表示\n  const yearInfoMessage = useMemo(() => {\n    if (detectedFiscalYear && detectedFiscalYear !== fiscalYear) {\n      return `テンプレートから${detectedFiscalYear}年度が検出されました。このデータは${detectedFiscalYear}年度としてインポートされます。`;\n    } else if (detectedFiscalYear === null && parsedDataCache && parsedDataCache.length > 0) {\n      return `テンプレートに年度情報がないため、現在選択されている${fiscalYear}年度としてインポートされます。`;\n    }\n    return null;\n  }, [detectedFiscalYear, fiscalYear, parsedDataCache]);\n\n  // 通知用の状態管理\n  const [notification, setNotification] = useState<{\n    isVisible: boolean;\n    message: string;\n    type: 'success' | 'error' | 'info';\n  }>({\n    isVisible: false,\n    message: '',\n    type: 'info'\n  });\n\n  // 通知を表示する関数\n  const showNotification = (message: string, type: 'success' | 'error' | 'info' = 'info') => {\n    setNotification({\n      isVisible: true,\n      message,\n      type\n    });\n  };\n\n  // 通知を閉じる関数\n  const closeNotification = () => {\n    setNotification(prev => ({\n      ...prev,\n      isVisible: false\n    }));\n  };\n\n  // コンポーネントがマウントされた時、またはpropsが変更された時に年度を更新\n  useEffect(() => {\n    logger.logDebug(`年度プロパティが変更されました: ${fiscalYear}`);\n  }, [fiscalYear]);\n\n  // モーダルを開いた時にステートをリセット\n  useEffect(() => {\n    if (isOpen) {\n      setErrorMessage(null);\n      setSuccessMessage(null);\n      setImportProgress(0);\n      setDetectedFiscalYear(null);\n      setFile(null);\n      setProcessStage('initial');\n      setParsedDataCache(null);\n      setProcessedMonths([]);\n      setImportSummary('');\n      setConvertedApiData(null);\n      setRetryCount(0);\n    }\n  }, [isOpen]);\n\n  // バッチサイズを動的に計算（パフォーマンス最適化）\n  const calculateBatchSize = (totalItems: number): number => {\n    // 項目数が少ない場合は全て同時処理\n    if (totalItems <= 3) return totalItems;\n    // 項目数が多い場合は最大5件ずつ\n    return Math.min(5, Math.ceil(totalItems / 3));\n  };\n\n  // CSVテンプレートのダウンロード\n  const handleDownloadTemplate = useCallback(() => {\n    logger.logInfo(`テンプレートをダウンロード: ${fiscalYear}年度`);\n    const csvContent = generateCSVTemplate(fiscalYear);\n    downloadCSV(csvContent, `月次データ_テンプレート_${fiscalYear}年度.csv`);\n    \n    // テンプレートダウンロード通知\n    showNotification(`${fiscalYear}年度のテンプレートをダウンロードしました`, 'info');\n  }, [fiscalYear]);\n\n  // ファイル選択ハンドラ\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFile = e.target.files?.[0];\n    if (selectedFile) {\n      logger.logInfo(`ファイルが選択されました: ${selectedFile.name} (${selectedFile.size} bytes)`);\n      setFile(selectedFile);\n      setErrorMessage(null);\n      setDetectedFiscalYear(null);\n      setParsedDataCache(null);\n      setProcessStage('parsing');\n      setConvertedApiData(null);\n      \n      // ファイル解析を即時開始\n      parseCSVFile(selectedFile);\n    }\n  };\n\n  // ファイル選択ボタンクリックハンドラ\n  const handleSelectFile = () => {\n    logger.logDebug('ファイル選択ボタンがクリックされました');\n    fileInputRef.current?.click();\n  };\n\n  // CSVファイル解析 - エラーハンドリングとデバッグ機能強化版\n  const parseCSVFile = (file: File) => {\n    // パフォーマンス計測開始\n    logger.startPerformanceTimer('CSVファイル読み込み');\n    \n    // FileReaderでファイルをテキストとして読み込む\n    const reader = new FileReader();\n    \n    reader.onload = (e) => {\n      logger.logDebug('ファイル読み込み完了');\n      const csvText = e.target?.result as string;\n      if (!csvText) {\n        setErrorMessage('ファイルの読み込みに失敗しました');\n        setProcessStage('error');\n        logger.logError('ファイル内容が空です');\n        return;\n      }\n      \n      // 正常終了時のコールバック\n      const handleParseComplete = (results: ParseResult<any>) => {\n        // パフォーマンス計測開始\n        logger.startPerformanceTimer('CSVパース処理');\n        \n        // エラーチェック - メッセージベースで判断\n        if (results.errors && results.errors.length > 0) {\n          // 一般的なエラーパターン - 重大なエラーかどうかをメッセージで判断\n          const criticalErrors = results.errors.filter(e => {\n            const message = e.message.toLowerCase();\n            return !message.includes('duplicate') && !message.includes('quote');\n          });\n          \n          if (criticalErrors.length > 0) {\n            logger.logError('CSVパースエラー:', criticalErrors);\n            setErrorMessage('CSVファイルの解析中にエラーが発生しました');\n            setProcessStage('error');\n            return;\n          }\n        }\n        \n        // 有効なデータを抽出\n        const validData = results.data.filter((row: any) => \n          Object.keys(row).length > 0 && \n          Object.values(row).some(v => v !== null && v !== undefined && v !== '')\n        );\n        \n        logger.logInfo('パース完了。データ行数:', validData.length);\n        \n        try {\n          // 年度を検出（utils.ts内の関数で処理）\n          const convertedData = convertTemplateDataToApiFormat(validData, fiscalYear);\n          \n          // データが変換できた場合\n          if (convertedData && convertedData.length > 0) {\n            // 検出された年度を設定\n            setDetectedFiscalYear(convertedData[0].fiscal_year);\n            \n            // API形式のデータをキャッシュ\n            setConvertedApiData(convertedData);\n            \n            // パース済みデータをキャッシュに保存\n            setParsedDataCache(validData);\n            setProcessStage('ready');\n            \n            // パース成功通知\n            showNotification(`${convertedData.length}ヶ月分のデータを解析しました`, 'info');\n            \n            logger.logObject('変換されたデータ（最初の項目）', convertedData[0]);\n          } else {\n            throw new Error('データの変換に失敗しました');\n          }\n        } catch (err) {\n          logger.logError('データ処理エラー:', err);\n          setErrorMessage('CSVデータの処理中にエラーが発生しました');\n          setProcessStage('error');\n        } finally {\n          // パフォーマンス計測終了\n          logger.endPerformanceTimer('CSVパース処理');\n        }\n      };\n      \n      try {\n        // パフォーマンス計測開始\n        logger.startPerformanceTimer('Papaparse実行');\n        \n        // パース実行 - 型定義に合わせて必要な設定のみ使用\n        Papa.parse(csvText, {\n          header: true,\n          skipEmptyLines: true,\n          dynamicTyping: true,\n          fastMode: true,\n          transformHeader: (header) => \n            header.trim() || `_empty_${Math.random().toString(36).substring(2, 7)}`,\n          complete: (results) => {\n            logger.endPerformanceTimer('Papaparse実行');\n            handleParseComplete(results);\n          },\n        });\n      } catch (err) {\n        logger.logError('Papaparse実行エラー:', err);\n        setErrorMessage('CSVファイルの処理中にエラーが発生しました');\n        setProcessStage('error');\n      }\n    };\n    \n    reader.onerror = (error) => {\n      logger.logError('ファイル読み込みエラー:', error);\n      setErrorMessage('ファイルの読み込み中にエラーが発生しました');\n      setProcessStage('error');\n    };\n    \n    // ファイル読み込み開始\n    reader.readAsText(file);\n    logger.logDebug('ファイルの読み込みを開始しました');\n  };\n\n  // 休止する関数（リトライ時の待機用）\n  const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\n  // APIリクエストを送信する関数（リトライ機能付き）\n  const sendApiRequest = async (method: string, url: string, data?: any): Promise<AxiosResponse> => {\n    let lastError: Error | null = null;\n    // リトライロジック\n    for (let attempt = 0; attempt <= MAX_RETRIES; attempt++) {\n      try {\n        // 初回以外は待機時間を設ける（指数バックオフ）\n        if (attempt > 0) {\n          const waitTime = Math.min(1000 * Math.pow(2, attempt), 10000);\n          await sleep(waitTime);\n          console.log(`リトライ #${attempt} (${url})...`);\n        }\n        \n        let response;\n        if (method.toUpperCase() === 'GET') {\n          response = await axios.get(url, { timeout: 5000 });\n        } else if (method.toUpperCase() === 'POST') {\n          response = await axios.post(url, data, { timeout: 5000 });\n        } else if (method.toUpperCase() === 'PUT') {\n          response = await axios.put(url, data, { timeout: 5000 });\n        } else {\n          throw new Error(`未対応のHTTPメソッド: ${method}`);\n        }\n        \n        return response;\n      } catch (error) {\n        lastError = error as Error;\n        \n        // APIエンドポイントが存在しない場合\n        if (error instanceof AxiosError && error.response?.status === 404) {\n          // 404エラーの場合は、別のエンドポイントを試す\n          if (url.includes('/monthly-reports/')) {\n            // /monthly-reports/ から /monthly-report/ に変更してリトライ\n            url = url.replace('/monthly-reports/', '/monthly-report/');\n            console.log(`エンドポイント変更: ${url}`);\n            \n            // リトライカウントをリセット（新しいURLなので）\n            attempt = -1; // 次のループで0になる\n            continue;\n          }\n        }\n        \n        // 最大リトライ回数に達した場合、またはキャンセルされた場合は例外をスロー\n        if (attempt === MAX_RETRIES) {\n          console.error(`リクエスト失敗 (${MAX_RETRIES}回リトライ後): ${url}`, error);\n          throw error;\n        }\n      }\n    }\n    \n    // 実行されることはないはずだが、TypeScriptのエラーを回避するために必要\n    throw lastError;\n  };  \n\n  // 既存データチェック - 非同期関数として実装\n  const checkExistingData = async (fiscalYear: number, month: number): Promise<boolean> => {\n    try {\n      const response = await sendApiRequest(\n        'GET',\n        `${API_BASE_URL}/monthly-reports/${fiscalYear}/${month}`\n      );\n      return !!(response && response.data && response.data.success);\n    } catch (error) {\n      console.log(`${fiscalYear}年${month}月のデータは存在しません`);\n      return false;\n    }\n  };\n  \n  // インポート結果サマリーの生成\n  const generateImportSummary = (statusList: { month: number, status: string }[]): string => {\n    const counts = {\n      新規: 0,\n      更新: 0,\n      エラー: 0,\n      合計: statusList.length\n    };\n    \n    statusList.forEach(item => {\n      if (item.status === '新規') counts.新規++;\n      else if (item.status === '更新') counts.更新++;\n      else if (item.status === 'エラー') counts.エラー++;\n    });\n    \n    return `合計: ${counts.合計}件（新規: ${counts.新規}件、更新: ${counts.更新}件${counts.エラー > 0 ? `、エラー: ${counts.エラー}件` : ''}）`;\n  };\n\n  // CSVデータのAPIへのインポート - 完全に再設計\n  const importCSVData = async (data: MonthlyCSVData[]) => {\n    try {\n      // パフォーマンス計測開始\n      logger.startPerformanceTimer('インポート処理');\n      \n      setIsLoading(true);\n      setProcessStage('importing');\n      setImportProgress(0);\n      setProcessedMonths([]);\n      \n      // データが空の場合はエラー\n      if (data.length === 0) {\n        setErrorMessage('インポートするデータが見つかりませんでした。');\n        setIsLoading(false);\n        setProcessStage('error');\n        return;\n      }\n      \n      console.log(`インポート処理開始: ${data.length}件のデータ`);\n      \n      // 月の値が有効かチェック\n      const validData = data.filter(item => \n        item.month !== null && !isNaN(item.month)\n      );\n      \n      if (validData.length === 0) {\n        setErrorMessage('有効な月情報が見つかりませんでした。');\n        setIsLoading(false);\n        setProcessStage('error');\n        return;\n      }\n      \n      // バッチサイズを動的に計算\n      const BATCH_SIZE = calculateBatchSize(validData.length);\n      const results: AxiosResponse<any>[] = [];\n      \n      // 完了したデータを追跡\n      const processedMonthsArray: string[] = [];\n      \n      // ステータスリスト\n      const statusList: { month: number, status: string }[] = [];\n      \n      // バッチ処理のヘルパー関数（順次処理に変更）\n      const processBatches = async () => {\n        for (let i = 0; i < validData.length; i += BATCH_SIZE) {\n          const startIndex = i;\n          const endIndex = Math.min(startIndex + BATCH_SIZE, validData.length);\n          const batch = validData.slice(startIndex, endIndex);\n          \n          // バッチを順次処理\n          for (const monthData of batch) {\n            try {\n              // まず対象データの存在をチェック\n              const existingData = await checkExistingData(monthData.fiscal_year, monthData.month);\n              \n              let response;\n              if (existingData) {\n                // 既存データの更新\n                console.log(`${monthData.fiscal_year}年度${monthData.month}月のデータを更新します`);\n                try {\n                  response = await sendApiRequest(\n                    'PUT',\n                    `${API_BASE_URL}/monthly-reports/${monthData.fiscal_year}/${monthData.month}`,\n                    monthData\n                  );\n                  processedMonthsArray.push(`${monthData.month}月(更新)`);\n                  statusList.push({ month: monthData.month, status: '更新' });\n                } catch (error) {\n                  // 更新に失敗した場合はPOSTを試みる\n                  console.log(`PUT要求失敗、POST要求を試みます`);\n                  response = await sendApiRequest(\n                    'POST',\n                    `${API_BASE_URL}/monthly-reports/${monthData.fiscal_year}/${monthData.month}`,\n                    monthData\n                  );\n                  processedMonthsArray.push(`${monthData.month}月(POST更新)`);\n                  statusList.push({ month: monthData.month, status: '更新' });\n                }\n              } else {\n                // 新規データの作成（2つのエンドポイントを試す）\n                console.log(`${monthData.fiscal_year}年度${monthData.month}月のデータを新規作成します`);\n                try {\n                  // エンドポイント1: /monthly-reports\n                  response = await sendApiRequest(\n                    'POST',\n                    `${API_BASE_URL}/monthly-reports`,\n                    monthData\n                  );\n                } catch (error) {\n                  // エンドポイント1が失敗した場合、エンドポイント2を試す\n                  console.log(`エンドポイント1失敗、エンドポイント2を試みます`);\n                  try {\n                    // エンドポイント2: /monthly-reports/:year/:month\n                    response = await sendApiRequest(\n                      'POST',\n                      `${API_BASE_URL}/monthly-reports/${monthData.fiscal_year}/${monthData.month}`,\n                      monthData\n                    );\n                  } catch (innerError) {\n                    // 両方のエンドポイントが失敗した場合\n                    console.error(`両方のエンドポイントが失敗しました: ${innerError}`);\n                    throw innerError; // 外側のcatchブロックに委譲\n                  }\n                }\n                \n                processedMonthsArray.push(`${monthData.month}月(新規)`);\n                statusList.push({ month: monthData.month, status: '新規' });\n              }\n              \n              if (response && response.data) {\n                results.push(response);\n              }\n            } catch (error) {\n              console.error(`${monthData.month}月データの処理中にエラー:`, error);\n              processedMonthsArray.push(`${monthData.month}月(エラー)`);\n              statusList.push({ month: monthData.month, status: 'エラー' });\n            }\n          }\n          \n          // 進捗率を更新\n          const progressPercent = Math.round(((endIndex) / validData.length) * 100);\n          setImportProgress(Math.min(progressPercent, 100));\n          setProcessedMonths([...processedMonthsArray]);\n        }\n        \n        return results;\n      };\n      \n      // 順次処理を開始\n      const batchResults = await processBatches();\n      \n      // 結果の確認\n      const successResponses = batchResults.filter(res => res && res.data && res.data.success);\n      logger.logInfo(`成功したレスポンス: ${successResponses.length}/${batchResults.length}`);\n      logger.logInfo('処理した月:', processedMonthsArray.join(', '));\n      \n      // ステータスから結果サマリーを作成\n      const summary = generateImportSummary(statusList);\n      setImportSummary(summary);\n      \n      if (successResponses.length > 0) {\n        const yearUsed = validData[0].fiscal_year;\n        const successMessage = `${yearUsed}年度の月次データをインポートしました。(${successResponses.length}/${batchResults.length}件)`;\n        setSuccessMessage(successMessage);\n        setProcessStage('completed');\n        \n        // 成功通知を表示\n        showNotification(`CSVインポート完了: ${yearUsed}年度の${successResponses.length}ヶ月分のデータを正常にインポートしました`, 'success');\n        \n        // インポート成功コールバック処理を改善\n        if (onImportSuccess) {\n          logger.logInfo('インポート成功コールバックを実行');\n          \n          // まず成功通知を確実に保存\n          onImportSuccess(summary, successResponses.length);\n          \n          // 遅延してモーダルを閉じる\n          setTimeout(() => {\n            // モーダルを閉じる\n            onClose();\n            \n            // 2度目の再読み込みを実行（モーダルが閉じた後に）\n            setTimeout(() => {\n              logger.logInfo('2回目のデータ再ロードを試みます');\n              try {\n                // 念のため2回目の呼び出しを行い、確実に反映させる\n                onImportSuccess(summary, successResponses.length);\n              } catch (e) {\n                logger.logError('2回目のリロード呼び出しでエラー:', e);\n              }\n            }, 500);\n          }, 800);\n        } else {\n          // onImportSuccessがない場合は単にモーダルを閉じる\n          setTimeout(() => {\n            onClose();\n          }, 800);\n        }\n      } else {\n        setErrorMessage('データのインポートに失敗しました。');\n        setProcessStage('error');\n        showNotification('インポートに失敗しました。再試行してください。', 'error');\n      }\n    } catch (error) {\n      logger.logError('インポートエラー:', error);\n      const errorMsg = error instanceof Error ? error.message : '不明なエラーが発生しました。';\n      setErrorMessage(errorMsg);\n      setProcessStage('error');\n      showNotification(`インポートエラー: ${errorMsg}`, 'error');\n    } finally {\n      setIsLoading(false);\n      logger.endPerformanceTimer('インポート処理');\n    }\n  };\n\n  // インポート実行\n  const handleImport = async () => {\n    // ファイルが選択されているか確認\n    if (!file) {\n      setErrorMessage('ファイルを選択してください。');\n      showNotification('CSVファイルを選択してください', 'error');\n      return;\n    }\n    \n    try {\n      // パフォーマンス計測開始\n      logger.startPerformanceTimer('インポート前処理');\n      \n      // パース済みデータがない場合はパースを実行\n      if (!parsedDataCache) {\n        setProcessStage('parsing');\n        parseCSVFile(file);\n        return;\n      }\n      \n      // すでに変換済みのデータがある場合はそれを使用\n      if (convertedApiData && convertedApiData.length > 0) {\n        logger.logInfo('変換済みデータを使用してインポートします');\n      } else {\n        // 変換済みデータがない場合は再変換\n        logger.logInfo(`インポートに使用する年度: ${detectedFiscalYear || fiscalYear}`);\n        const apiFormatData = convertTemplateDataToApiFormat(parsedDataCache, detectedFiscalYear || fiscalYear);\n        setConvertedApiData(apiFormatData);\n        \n        if (apiFormatData.length === 0) {\n          setErrorMessage('有効なインポートデータが見つかりませんでした。テンプレート形式を確認してください。');\n          setProcessStage('error');\n          showNotification('有効なインポートデータが見つかりませんでした', 'error');\n          return;\n        }\n      }\n      \n      // デバッグ情報 - 障がい者データが正しく変換されているか確認\n      logger.logObject('変換されたAPIデータ', convertedApiData);\n      logger.endPerformanceTimer('インポート前処理');\n\n      // インポート確認\n      const detectedYear = convertedApiData![0].fiscal_year;\n      if (window.confirm(`${detectedYear}年度の${convertedApiData!.length}件のデータをインポートします。よろしいですか？`)) {\n        showNotification(`${detectedYear}年度のデータをインポート中...`, 'info');\n        await importCSVData(convertedApiData!);\n      }\n    } catch (error) {\n      logger.logError('インポートエラー:', error);\n      const errorMsg = error instanceof Error ? error.message : '不明なエラーが発生しました。';\n      setErrorMessage(errorMsg);\n      setProcessStage('error');\n      showNotification(`インポートエラー: ${errorMsg}`, 'error');\n    }\n  };\n\n  // モーダルが閉じている場合は何も表示しない\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"csv-import-modal-overlay\">\n      <div className=\"csv-import-modal\">\n        <div className=\"csv-import-modal-header\">\n          <h2>月別データのインポート</h2>\n        </div>\n        <div className=\"csv-import-modal-body\">\n          {errorMessage && (\n            <div className=\"error-message\">\n              {errorMessage}\n            </div>\n          )}\n          \n          {successMessage && (\n            <div className=\"success-message\">\n              {successMessage}\n            </div>\n          )}\n          \n          {/* 通知コンポーネント */}\n          <ImportNotification\n            isVisible={notification.isVisible}\n            message={notification.message}\n            type={notification.type}\n            onClose={closeNotification}\n            autoHideDuration={3000}\n          />\n          \n          {/* コンパクトな説明セクション */}\n          <div className=\"import-info-section\">\n            <p>\n              CSVファイルから月次データをインポートします。\n              テンプレートをダウンロードして必要なデータを入力してください。\n              <button \n                className=\"import-template-button\"\n                onClick={handleDownloadTemplate}\n                disabled={isLoading}\n              >\n                {fiscalYear}年度テンプレートをダウンロード\n              </button>\n            </p>\n            <p className=\"note\">\n              テンプレートには「年度」行がありますが、空白のままでも問題ありません。\n              その場合は現在選択されている年度が使用されます。\n            </p>\n          </div>\n          \n          {/* ファイル選択エリア */}\n          <div className=\"file-select-area\" onClick={handleSelectFile}>\n            <input\n              type=\"file\"\n              ref={fileInputRef}\n              style={{ display: 'none' }}\n              accept=\".csv\"\n              onChange={handleFileChange}\n            />\n            <div className=\"file-select-button\">\n              CSVファイルを選択\n            </div>\n            <div className=\"file-name\">\n              {file ? file.name : 'ファイルが選択されていません'}\n            </div>\n          </div>\n          \n          {/* コンパクトな進行状況表示 */}\n          {processStage !== 'initial' && (\n            <div className=\"import-progress-compact\">\n              {/* ステータスアイコンとメッセージ */}\n              <div className=\"status-row\">\n                {processStage === 'parsing' || processStage === 'importing' ? (\n                  <div className=\"spinner\"></div>\n                ) : processStage === 'completed' ? (\n                  <div className=\"success-icon\">✓</div>\n                ) : processStage === 'error' ? (\n                  <div className=\"error-icon\">!</div>\n                ) : (\n                  <div className=\"ready-icon\">⟳</div>\n                )}\n                <span className=\"status-message\">{statusMessage}</span>\n              </div>\n              \n              {/* プログレスバー */}\n              {(processStage === 'parsing' || processStage === 'importing') && (\n                <div className=\"progress-bar-container\">\n                  <div \n                    className=\"progress-bar\" \n                    style={{ \n                      width: `${processStage === 'parsing' ? 50 : importProgress}%` \n                    }}\n                  ></div>\n                </div>\n              )}\n              \n              {/* 検出された年度表示 */}\n              {yearInfoMessage && (\n                <div className=\"detected-year-info\">\n                  <span>{yearInfoMessage}</span>\n                </div>\n              )}\n              \n              {/* インポート進捗状況 */}\n              {processStage === 'importing' && processedMonths.length > 0 && (\n                <div className=\"import-status-list\">\n                  <div className=\"processed-months-label\">処理中:</div>\n                  <div className=\"processed-months-items\">\n                    {processedMonths.map((item, index) => (\n                      <span key={index} className=\"processed-month-item\">\n                        {item}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n              )}\n              \n              {/* インポート完了サマリー */}\n              {processStage === 'completed' && importSummary && (\n                <div className=\"import-summary\">\n                  <span>{importSummary}</span>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n        <div className=\"csv-import-modal-footer\">\n          <button \n            className=\"cancel-button\"\n            onClick={onClose}\n            disabled={isLoading}\n          >\n            閉じる\n          </button>\n          <button \n            className=\"import-button\"\n            onClick={handleImport}\n            disabled={!file || isLoading || processStage === 'error' || processStage === 'importing' || processStage === 'parsing'}\n          >\n            {isLoading \n              ? 'インポート中...' \n              : processStage === 'ready' \n                ? 'インポート開始' \n                : 'インポート'\n            }\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CSVImportModal;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}