{"ast":null,"code":"var _jsxFileName = \"/Users/gotouhiroaki/Programming/DAN_work/disability-employment-system/frontend/src/pages/MonthlyReport/EmployeeCSVImportModal.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useMemo } from 'react';\nimport Papa from 'papaparse';\nimport './CSVImportModal.css'; // 既存のCSSを再利用\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// 従業員データCSVインポートモーダル\nconst EmployeeCSVImportModal = ({\n  isOpen,\n  onClose,\n  onImportSuccess,\n  fiscalYear\n}) => {\n  _s();\n  // 状態管理\n  const [file, setFile] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null);\n  const fileInputRef = useRef(null);\n\n  // 年度をステート管理（CSVからの読み込み用）\n  const [detectedFiscalYear, setDetectedFiscalYear] = useState(null);\n  const [detectedYear, setDetectedYear] = useState(null);\n\n  // 処理段階の状態管理\n  const [processStage, setProcessStage] = useState('initial');\n\n  // パースされたデータのキャッシュ\n  const [parsedDataCache, setParsedDataCache] = useState(null);\n\n  // 変換後の従業員データキャッシュ\n  const [convertedEmployeeData, setConvertedEmployeeData] = useState(null);\n  const [importData, setImportData] = useState(null);\n\n  // エラー設定関数\n  const setError = message => {\n    setErrorMessage(message);\n    if (message) {\n      setProcessStage('error');\n    }\n  };\n\n  // ステータスメッセージ\n  const statusMessage = useMemo(() => {\n    switch (processStage) {\n      case 'parsing':\n        return 'ファイル解析中...';\n      case 'ready':\n        return `${detectedFiscalYear || fiscalYear}年度のデータ (${(parsedDataCache === null || parsedDataCache === void 0 ? void 0 : parsedDataCache.length) || 0}名の従業員) の準備完了`;\n      case 'completed':\n        return 'インポート完了！';\n      case 'error':\n        return 'エラーが発生しました';\n      default:\n        return '';\n    }\n  }, [processStage, detectedFiscalYear, fiscalYear, parsedDataCache]);\n\n  // 年度情報メッセージ - 検出された年度と選択されている年度が異なる場合に表示\n  const yearInfoMessage = useMemo(() => {\n    if (detectedFiscalYear && detectedFiscalYear !== fiscalYear) {\n      return `テンプレートから${detectedFiscalYear}年度が検出されました。このデータは${detectedFiscalYear}年度としてインポートされます。`;\n    } else if (detectedFiscalYear === null && parsedDataCache && parsedDataCache.length > 0) {\n      return `テンプレートに年度情報がないため、現在選択されている${fiscalYear}年度としてインポートされます。`;\n    }\n    return null;\n  }, [detectedFiscalYear, fiscalYear, parsedDataCache]);\n\n  // モーダルを開いた時にステートをリセット\n  useEffect(() => {\n    if (isOpen) {\n      setErrorMessage(null);\n      setSuccessMessage(null);\n      setDetectedFiscalYear(null);\n      setDetectedYear(null);\n      setFile(null);\n      setProcessStage('initial');\n      setParsedDataCache(null);\n      setConvertedEmployeeData(null);\n      setImportData(null);\n    }\n  }, [isOpen]);\n\n  // CSVテンプレートのダウンロード\n  const handleDownloadTemplate = () => {\n    try {\n      console.log(\"従業員データテンプレートをダウンロード:\", fiscalYear + \"年度\");\n\n      // テンプレートヘッダーを改善（年度行を含む）\n      const headers = [\"年度,\" + fiscalYear + \",,,,,,,,,,,,,,,,,,,\", \"社員ID,氏名,障害区分,障害,等級,採用日,状態,WH,HC,4月,5月,6月,7月,8月,9月,10月,11月,12月,1月,2月,3月\"];\n\n      // サンプルデータ\n      const sampleData = [\"1001,山田 太郎,身体障害,視覚,1級,2010/4/1,在籍,正社員,2,2,2,2,2,2,2,2,2,2,2,2,2\", \"2222,山田 花子,身体障害,聴覚,4級,2020/4/10,在籍,短時間労働者,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5\", \"3333,山田 一郎,知的障害,,B1,2020/10/1,在籍,正社員,1,1,1,1,1,1,1,1,1,1,1,1,1\"];\n\n      // 注釈行を追加\n      const notes = [\",,,,,,,,,,,,,,,,,,,,,\", \"注意事項:,,,,,,,,,,,,,,,,,,,,,\", \",障害区分:,身体障害、知的障害、精神障害、発達障害のいずれかをご入力ください,,,,,,,,,,,,,,,,,,,\", \",等級:,身体障害は1級～7級、知的障害はA・Bのいずれかをご入力ください,,,,,,,,,,,,,,,,,,,\", \",採用日:,YYYY/MM/DDの形式でご入力ください（例: 2000/04/01）,,,,,,,,,,,,,,,,,,,\", \",状態:,在籍、休職、退職のいずれかをご入力ください,,,,,,,,,,,,,,,,,,,\", \",WH:,正社員、短時間労働者、特定短時間労働者のいずれかをご入力ください,,,,,,,,,,,,,,,,,,,\", \",HC:,HC(障がい者のカウント)は2、1、0.5のいずれかをご入力ください,,,,,,,,,,,,,,,,,,,\"];\n\n      // CSVコンテンツの作成\n      let csvContent = '\\uFEFF'; // BOMを追加して文字化けを防止\n      csvContent += [...headers, ...sampleData, ...notes].join(\"\\n\");\n\n      // Blobの作成とダウンロード\n      const blob = new Blob([csvContent], {\n        type: \"text/csv;charset=utf-8;\"\n      });\n      const link = document.createElement(\"a\");\n      const url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `従業員データテンプレート_${fiscalYear}年度.csv`);\n      link.style.visibility = \"hidden\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    } catch (error) {\n      console.error(\"テンプレートのダウンロードに失敗しました:\", error);\n      setError(\"テンプレートのダウンロードに失敗しました\");\n    }\n  };\n\n  // ファイル選択ハンドラ\n  const handleFileChange = e => {\n    var _e$target$files;\n    const selectedFile = (_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0];\n    if (selectedFile) {\n      console.log(`ファイルが選択されました: ${selectedFile.name} (${selectedFile.size} bytes)`);\n      setFile(selectedFile);\n      setErrorMessage(null);\n      setDetectedFiscalYear(null);\n      setParsedDataCache(null);\n      setProcessStage('parsing');\n      setConvertedEmployeeData(null);\n\n      // ファイル解析を即時開始\n      parseCSVFile(selectedFile);\n    }\n  };\n\n  // ファイル選択ボタンクリックハンドラ\n  const handleSelectFile = () => {\n    var _fileInputRef$current;\n    console.log('ファイル選択ボタンがクリックされました');\n    (_fileInputRef$current = fileInputRef.current) === null || _fileInputRef$current === void 0 ? void 0 : _fileInputRef$current.click();\n  };\n\n  // 年度行を検出するための事前処理\n  const checkForYearRow = csvContent => {\n    try {\n      // 最初の数行だけを取得して年度行をチェック\n      const lines = csvContent.split('\\n').slice(0, 3);\n      const firstLine = lines[0].trim();\n\n      // 「年度,YYYY」パターンを検出\n      const yearRowMatch = firstLine.match(/^年度[,\\t]\\s*(\\d{4})\\s*$/);\n      if (yearRowMatch) {\n        const yearValue = parseInt(yearRowMatch[1], 10);\n        console.log(`年度行を検出しました: ${yearValue}`);\n\n        // 年度行を削除し、残りの内容を返す\n        const modifiedCsv = csvContent.substring(csvContent.indexOf('\\n') + 1);\n        return {\n          hasYearRow: true,\n          yearRowValue: yearValue,\n          modifiedCsv\n        };\n      }\n\n      // 複数列を持つ行で最初の列が「年度」の場合も検出\n      if (firstLine.startsWith('年度,') || firstLine.startsWith('年度\\t')) {\n        const parts = firstLine.split(/[,\\t]/);\n        if (parts.length > 1 && !isNaN(parseInt(parts[1], 10))) {\n          const yearValue = parseInt(parts[1], 10);\n          console.log(`複数列の年度行を検出しました: ${yearValue}`);\n\n          // 年度行を削除し、残りの内容を返す\n          const modifiedCsv = csvContent.substring(csvContent.indexOf('\\n') + 1);\n          return {\n            hasYearRow: true,\n            yearRowValue: yearValue,\n            modifiedCsv\n          };\n        }\n      }\n    } catch (error) {\n      console.error(\"年度行チェック中にエラーが発生しました:\", error);\n    }\n    console.log(\"年度行は検出されませんでした\");\n    return {\n      hasYearRow: false,\n      yearRowValue: undefined,\n      modifiedCsv: undefined\n    };\n  };\n\n  // 日付文字列を標準形式に変換する関数\n  const convertToDateString = dateValue => {\n    if (!dateValue) return null;\n\n    // 日付文字列の正規化\n    const normalizedDate = String(dateValue).replace(/[年月]/g, '/').replace(/日/g, '').replace(/\\s+/g, '').trim();\n\n    // 様々な日付形式を処理\n    try {\n      // YYYY/MM/DD または YYYY-MM-DD 形式\n      const dateRegex1 = /^(\\d{4})[\\/\\-](\\d{1,2})[\\/\\-](\\d{1,2})$/;\n      const match1 = normalizedDate.match(dateRegex1);\n      if (match1) {\n        const [_, year, month, day] = match1;\n        return `${year}/${month.padStart(2, '0')}/${day.padStart(2, '0')}`;\n      }\n\n      // DD/MM/YYYY 形式\n      const dateRegex2 = /^(\\d{1,2})[\\/\\-](\\d{1,2})[\\/\\-](\\d{4})$/;\n      const match2 = normalizedDate.match(dateRegex2);\n      if (match2) {\n        const [_, day, month, year] = match2;\n        return `${year}/${month.padStart(2, '0')}/${day.padStart(2, '0')}`;\n      }\n\n      // 解析失敗時\n      return normalizedDate;\n    } catch (e) {\n      console.warn('日付変換エラー:', normalizedDate, e);\n      return normalizedDate;\n    }\n  };\n\n  // 状態フィールドを標準化する関数\n  const convertStatus = statusValue => {\n    if (!statusValue) return '在籍'; // デフォルト値\n\n    const status = String(statusValue).trim().replace(/　/g, ' ');\n\n    // 状態値のマッピング\n    const statusMap = {\n      '在籍': '在籍',\n      '在職': '在籍',\n      'active': '在籍',\n      '休職': '休職',\n      'leave': '休職',\n      '退職': '退職',\n      'resigned': '退職'\n    };\n    return statusMap[status.toLowerCase()] || '在籍';\n  };\n\n  // 雇用タイプを標準化する関数\n  const convertEmploymentType = whValue => {\n    if (!whValue) return '正社員'; // デフォルト値\n\n    const wh = String(whValue).trim().replace(/　/g, ' ');\n\n    // 雇用タイプのマッピング\n    const whMap = {\n      '正社員': '正社員',\n      '正規': '正社員',\n      'full': '正社員',\n      'fulltime': '正社員',\n      '短時間': '短時間労働者',\n      '短時間労働者': '短時間労働者',\n      'part': '短時間労働者',\n      'parttime': '短時間労働者',\n      '特定短時間': '特定短時間労働者',\n      '特定短時間労働者': '特定短時間労働者',\n      'special': '特定短時間労働者'\n    };\n    return whMap[wh.toLowerCase()] || '正社員';\n  };\n\n  // 障害区分を標準化する関数\n  const convertDisabilityType = typeValue => {\n    if (!typeValue) return '';\n    const type = String(typeValue).trim().replace(/　/g, ' ');\n\n    // 障害区分のマッピング\n    const typeMap = {\n      '身体': '身体障害',\n      '身体障害': '身体障害',\n      '知的': '知的障害',\n      '知的障害': '知的障害',\n      '精神': '精神障害',\n      '精神障害': '精神障害',\n      '発達': '発達障害',\n      '発達障害': '発達障害'\n    };\n    return typeMap[type] || type;\n  };\n\n  // 月次データを変換する関数\n  const convertMonthlyData = (row, fieldOrder) => {\n    const monthlyData = {};\n    const months = ['4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月', '1月', '2月', '3月'];\n\n    // 各月のフィールドを処理\n    months.forEach(month => {\n      // フィールドの取得（通常か拡張マッピングを使用）\n      let monthValue = null;\n\n      // 直接のフィールド名でアクセス\n      if (row.hasOwnProperty(month)) {\n        monthValue = row[month];\n      } else {\n        // 位置ベースでの推測\n        const monthIndex = months.indexOf(month);\n        const startIndex = fieldOrder.indexOf('HC') + 1;\n        if (monthIndex >= 0 && startIndex >= 0) {\n          const fieldIndex = startIndex + monthIndex;\n          if (fieldIndex < fieldOrder.length) {\n            const fieldName = fieldOrder[fieldIndex];\n            if (row.hasOwnProperty(fieldName)) {\n              monthValue = row[fieldName];\n            }\n          }\n        }\n      }\n\n      // 値の変換\n      if (monthValue === null || monthValue === undefined || monthValue === '') {\n        monthlyData[month] = '';\n      } else {\n        // 数値に変換を試みる\n        const numValue = parseFloat(String(monthValue).replace(/,/g, '.'));\n        if (!isNaN(numValue)) {\n          monthlyData[month] = numValue;\n        } else {\n          // 数値変換に失敗した場合はHC値を使用\n          const hcValue = row.hasOwnProperty('HC') ? parseFloat(String(row['HC']).replace(/,/g, '.')) : 0;\n          monthlyData[month] = isNaN(hcValue) ? '' : hcValue;\n        }\n      }\n    });\n    return monthlyData;\n  };\n\n  // CSVファイル解析\n  const parseCSVFile = file => {\n    return new Promise((resolve, reject) => {\n      try {\n        const reader = new FileReader();\n        reader.onload = event => {\n          var _event$target;\n          const csvContent = (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.result;\n          console.log(`CSVの最初の部分: ${csvContent.substring(0, 200)}`);\n\n          // 年度行をチェック\n          const yearRowResult = checkForYearRow(csvContent);\n          console.log(\"年度行チェック結果:\", yearRowResult);\n\n          // 年度行が検出された場合、修正されたCSVを使用\n          const contentToProcess = yearRowResult.hasYearRow ? yearRowResult.modifiedCsv : csvContent;\n          if (yearRowResult.hasYearRow && yearRowResult.yearRowValue !== undefined) {\n            console.log(\"年度行を含むCSVを処理します（年度: \" + yearRowResult.yearRowValue + \"）\");\n            setDetectedYear(yearRowResult.yearRowValue);\n          } else {\n            console.log(\"通常のCSVパース処理を実行します（年度行なし）\");\n            setDetectedYear(null);\n          }\n          if (!contentToProcess) {\n            setError('CSVコンテンツの処理に失敗しました');\n            reject(new Error('CSVコンテンツの処理に失敗しました'));\n            return;\n          }\n\n          // PapaParse の設定を修正\n          const parseConfig = {\n            header: true,\n            skipEmptyLines: true,\n            transformHeader: header => {\n              // ヘッダー名の正規化（空白除去、全角→半角変換等）\n              return header.trim().replace(/　/g, ' ');\n            },\n            transform: (value, field) => {\n              // 空値の処理\n              if (value === undefined || value === null || value === '') {\n                return null;\n              }\n              // 全角スペースを半角に変換\n              return value.toString().replace(/　/g, ' ').trim();\n            },\n            complete: results => {\n              try {\n                var _results$meta$fields;\n                // デバッグ情報の追加\n                console.log(\"CSV解析結果の詳細:\", {\n                  dataRows: results.data.length,\n                  errors: results.errors,\n                  meta: results.meta,\n                  headers: results.meta.fields\n                });\n                if (results.data.length > 0) {\n                  console.log(\"最初の行のデータ:\", results.data[0]);\n                  console.log(\"利用可能なフィールド名:\", results.meta.fields);\n                }\n\n                // 自動生成フィールド名を検出\n                const autoGeneratedFields = ((_results$meta$fields = results.meta.fields) === null || _results$meta$fields === void 0 ? void 0 : _results$meta$fields.filter(field => field === null || field === void 0 ? void 0 : field.startsWith('_empty_'))) || [];\n                if (autoGeneratedFields.length > 0) {\n                  console.log(\"自動生成された空フィールド名:\", autoGeneratedFields);\n                }\n\n                // パース完了処理\n                handleParseComplete(results, yearRowResult.hasYearRow ? yearRowResult.yearRowValue : undefined);\n                resolve(results);\n              } catch (error) {\n                console.error(\"CSVパース完了処理中にエラーが発生しました:\", error);\n                setError(`CSVデータの処理中にエラーが発生しました: ${error instanceof Error ? error.message : '不明なエラー'}`);\n                reject(error);\n              }\n            },\n            error: error => {\n              console.error(\"CSV解析エラー:\", error);\n              setError(`CSVファイルの解析中にエラーが発生しました: ${error.message}`);\n              reject(error);\n            }\n          };\n          Papa.parse(contentToProcess, parseConfig);\n        };\n        reader.onerror = error => {\n          console.error(\"ファイル読み込み中にエラーが発生しました:\", error);\n          setError(\"ファイルの読み込みに失敗しました\");\n          reject(error);\n        };\n\n        // ファイル読み込み開始 - UTF-8エンコーディングを明示\n        try {\n          // まずはUTF-8で試す\n          reader.readAsText(file, 'UTF-8');\n        } catch (error) {\n          console.error('UTF-8でのファイル読み込みエラー:', error);\n          try {\n            // UTF-8で失敗したらShift-JISで試す\n            reader.readAsText(file, 'Shift_JIS');\n          } catch (error2) {\n            console.error('Shift_JISでのファイル読み込みエラー:', error2);\n            // 最後の手段としてエンコーディング指定なしで読み込み\n            reader.readAsText(file);\n          }\n        }\n      } catch (error) {\n        console.error(\"ファイル処理中に予期しないエラーが発生しました:\", error);\n        setError(`予期しないエラーが発生しました: ${error instanceof Error ? error.message : '不明なエラー'}`);\n        reject(error);\n      }\n    });\n  };\n\n  // CSVデータをAPI形式に変換する関数\n  const convertCSVData = (csvData, detectedFiscalYear) => {\n    console.log(\"CSVデータをAPI形式に変換開始\", csvData.length, csvData);\n\n    // 年度の検出\n    let fiscalYearToUse = fiscalYear; // デフォルト値として現在の年度を使用\n\n    // 検出された年度が指定されている場合はそれを使用\n    if (detectedFiscalYear !== null && detectedFiscalYear !== undefined) {\n      fiscalYearToUse = detectedFiscalYear;\n    } else {\n      // 年度列からの検出を試みる\n      try {\n        if (csvData && csvData.length > 0 && csvData[0].hasOwnProperty('年度')) {\n          const yearFromData = parseInt(csvData[0]['年度'], 10);\n          if (!isNaN(yearFromData) && yearFromData > 2000 && yearFromData < 2100) {\n            fiscalYearToUse = yearFromData;\n            console.log(\"検出された年度:\", fiscalYearToUse);\n          }\n        }\n      } catch (error) {\n        console.error(\"年度検出中にエラー:\", error);\n      }\n    }\n\n    // 使用する年度を決定\n    console.log(\"使用する年度:\", fiscalYearToUse);\n\n    // フィールドのマッピングを改善\n    const convertedData = [];\n\n    // CSVデータのフィールド名を取得\n    const availableFields = csvData.length > 0 ? Object.keys(csvData[0]) : [];\n    console.log(\"CSVデータの使用可能なフィールド名:\", availableFields);\n\n    // 自動生成フィールドと通常フィールドを分離\n    const autoGenFields = availableFields.filter(f => f.startsWith('_empty_'));\n    const regularFields = availableFields.filter(f => !f.startsWith('_empty_'));\n    console.log(\"自動生成フィールド:\", autoGenFields);\n    console.log(\"通常フィールド:\", regularFields);\n\n    // 自動生成フィールドがあれば位置ベースのマッピングを使用\n    const usePositionalMapping = autoGenFields.length > 0;\n    if (usePositionalMapping) {\n      console.log(\"自動生成フィールドがあります。データの位置から推測してマッピングを拡張します。\");\n    }\n\n    // 想定されるフィールド順序（ヘッダー行の典型的な順序）\n    const expectedFieldOrder = [\"社員ID\", \"氏名\", \"障害区分\", \"障害\", \"等級\", \"採用日\", \"状態\", \"WH\", \"HC\", \"4月\", \"5月\", \"6月\", \"7月\", \"8月\", \"9月\", \"10月\", \"11月\", \"12月\", \"1月\", \"2月\", \"3月\"];\n\n    // 位置ベースの拡張マッピング\n    const extendedMapping = {};\n    if (usePositionalMapping) {\n      autoGenFields.forEach((field, index) => {\n        if (index < expectedFieldOrder.length) {\n          extendedMapping[field] = expectedFieldOrder[index];\n          console.log(`自動生成フィールド ${field} は ${expectedFieldOrder[index]} に相当すると推測`);\n        }\n      });\n    }\n\n    // フィールド値を取得する関数\n    const getFieldValue = (row, fieldName) => {\n      // 直接のフィールド名でアクセス\n      if (row.hasOwnProperty(fieldName)) {\n        return row[fieldName];\n      }\n\n      // 拡張マッピングのチェック\n      for (const [autoField, mappedField] of Object.entries(extendedMapping)) {\n        if (mappedField === fieldName && row.hasOwnProperty(autoField)) {\n          return row[autoField];\n        }\n      }\n\n      // 代替フィールド名のチェック\n      const alternativeFields = {\n        '状態': ['状況', 'ステータス', 'status'],\n        '社員ID': ['従業員ID', 'ID', 'employee_id'],\n        '氏名': ['名前', 'name'],\n        '障害区分': ['障害種別', 'disability_type'],\n        '等級': ['障害等級', 'grade'],\n        '採用日': ['入社日', 'hire_date'],\n        'WH': ['雇用形態', 'employment_type'],\n        'HC': ['カウント', 'count']\n      };\n      if (alternativeFields[fieldName]) {\n        for (const altField of alternativeFields[fieldName]) {\n          if (row.hasOwnProperty(altField)) {\n            return row[altField];\n          }\n\n          // 拡張マッピングの代替フィールド\n          for (const [autoField, mappedField] of Object.entries(extendedMapping)) {\n            if (mappedField === altField && row.hasOwnProperty(autoField)) {\n              return row[autoField];\n            }\n          }\n        }\n      }\n      return null;\n    };\n\n    // 各行のデータを変換\n    csvData.forEach((row, rowIndex) => {\n      try {\n        console.log(`行 ${rowIndex + 1} の処理開始:`, row);\n\n        // 主要フィールドの取得\n        const employeeId = getFieldValue(row, '社員ID');\n        console.log(`行 ${rowIndex + 1} の社員ID: ${employeeId}`);\n        const name = getFieldValue(row, '氏名');\n        console.log(`行 ${rowIndex + 1} の氏名: ${name}`);\n\n        // 社員IDまたは氏名が空の場合はスキップ（ヘッダー行など）\n        if (!employeeId || !name) {\n          console.log(`行 ${rowIndex + 1} は社員IDまたは氏名がないためスキップします。`);\n          return;\n        }\n        console.log(`行 ${rowIndex + 1} は有効なデータ行です`);\n\n        // 採用日を解析\n        const hireDateStr = getFieldValue(row, '採用日');\n        const hireDate = convertToDateString(hireDateStr) || '';\n\n        // 障害区分を標準化\n        const disabilityType = convertDisabilityType(getFieldValue(row, '障害区分'));\n\n        // 状態を標準化\n        const status = convertStatus(getFieldValue(row, '状態'));\n\n        // 雇用タイプを標準化\n        const employmentType = convertEmploymentType(getFieldValue(row, 'WH'));\n\n        // HC値の処理（数値変換）\n        let hcValue = 0;\n        const hcRaw = getFieldValue(row, 'HC');\n        if (hcRaw !== null && hcRaw !== undefined) {\n          const hcFloat = parseFloat(String(hcRaw).replace(/,/g, '.'));\n          if (!isNaN(hcFloat)) {\n            hcValue = hcFloat;\n          }\n        }\n\n        // 月次データの処理\n        const monthlyData = convertMonthlyData(row, expectedFieldOrder);\n\n        // 変換後のデータを作成\n        const convertedRow = {\n          fiscal_year: fiscalYearToUse,\n          employee_id: employeeId,\n          name: name,\n          disability_type: disabilityType,\n          disability: getFieldValue(row, '障害') || '',\n          disability_grade: getFieldValue(row, '等級') || '',\n          hire_date: hireDate,\n          status: status,\n          employment_type: employmentType,\n          hc_value: hcValue,\n          monthly_status: monthlyData\n        };\n        console.log(`行 ${rowIndex + 1} の従業員データ変換完了:`, convertedRow);\n        convertedData.push(convertedRow);\n      } catch (error) {\n        console.error(`行 ${rowIndex + 1} の処理中にエラーが発生しました:`, error);\n      }\n    });\n    console.log(\"従業員データに変換:\", convertedData.length + \"名\", convertedData);\n    return convertedData;\n  };\n\n  // 変換データを検証する関数\n  const validateConvertedData = convertedData => {\n    if (!convertedData || convertedData.length === 0) {\n      return {\n        isValid: false,\n        message: \"変換データが空です\"\n      };\n    }\n    const invalidEntries = [];\n    convertedData.forEach((entry, index) => {\n      const validationErrors = [];\n\n      // 必須フィールドの検証\n      if (!entry.employee_id) validationErrors.push(\"社員ID\");\n      if (!entry.name) validationErrors.push(\"氏名\");\n\n      // 日付形式の検証\n      if (entry.hire_date && !/^\\d{4}\\/\\d{2}\\/\\d{2}$/.test(entry.hire_date)) {\n        validationErrors.push(\"採用日(形式: YYYY/MM/DD)\");\n      }\n\n      // HC値の検証\n      if (![0, 0.5, 1, 2].includes(entry.hc_value)) {\n        validationErrors.push(\"HC値(0, 0.5, 1, 2のいずれか)\");\n      }\n      if (validationErrors.length > 0) {\n        invalidEntries.push(`行 ${index + 1} (${entry.name}): ${validationErrors.join(', ')}`);\n      }\n    });\n    if (invalidEntries.length > 0) {\n      return {\n        isValid: false,\n        message: `データに問題があります:\\n${invalidEntries.slice(0, 5).join('\\n')}${invalidEntries.length > 5 ? `\\n...他 ${invalidEntries.length - 5} 件` : ''}`\n      };\n    }\n    return {\n      isValid: true,\n      message: null\n    };\n  };\n\n  // パース完了時のハンドラ\n  const handleParseComplete = (results, detectedYear) => {\n    try {\n      var _convertedData$;\n      console.log(\"パース完了。データ行数:\", results.data.length);\n\n      // エラーチェック\n      if (results.errors && results.errors.length > 0) {\n        console.error(\"CSVパースエラー:\", results.errors);\n        setError(`CSVパースエラー: ${results.errors[0].message || '不明なエラー'}`);\n        return;\n      }\n\n      // 空データチェック\n      if (!results.data || results.data.length === 0) {\n        setError(\"CSVデータが空です\");\n        return;\n      }\n\n      // 変換済みデータを使用してインポートします\n      let convertedData;\n      try {\n        convertedData = convertCSVData(results.data, detectedYear);\n        if (!convertedData || convertedData.length === 0) {\n          setError(\"有効なデータ行が見つかりませんでした。CSVファイルの形式を確認してください。\");\n          return;\n        }\n      } catch (error) {\n        console.error(\"データの変換に失敗しました:\", error);\n        setError(`データの変換に失敗しました: ${error instanceof Error ? error.message : '不明なエラー'}`);\n        return;\n      }\n\n      // データ検証\n      const validation = validateConvertedData(convertedData);\n      if (!validation.isValid) {\n        setError(validation.message);\n        return;\n      }\n\n      // 変換済みデータをキャッシュ\n      setConvertedEmployeeData(convertedData);\n\n      // デバッグ情報 - 障がい者データが正しく変換されているか確認\n      console.log('変換されたAPIデータ:', convertedData);\n\n      // 検出された年度を設定\n      if ((_convertedData$ = convertedData[0]) !== null && _convertedData$ !== void 0 && _convertedData$.fiscal_year) {\n        setDetectedFiscalYear(convertedData[0].fiscal_year);\n      }\n\n      // パース済みデータをキャッシュに保存\n      setParsedDataCache(results.data);\n      setProcessStage('ready');\n      setImportData(convertedData);\n    } catch (error) {\n      console.error(\"データ処理エラー:\", error);\n      setError(`データの変換に失敗しました: ${error instanceof Error ? error.message : '不明なエラー'}`);\n    }\n  };\n\n  // インポート実行\n  const handleImport = async () => {\n    if (!file) {\n      setErrorMessage('ファイルを選択してください。');\n      return;\n    }\n    try {\n      if (!parsedDataCache) {\n        setProcessStage('parsing');\n        parseCSVFile(file);\n        return;\n      }\n\n      // すでに変換済みのデータがある場合はそれを使用\n      if (convertedEmployeeData && convertedEmployeeData.length > 0) {\n        console.log('変換済みデータを使用してインポートします');\n      } else {\n        // 変換済みデータがない場合は再変換\n        console.log(`インポートに使用する年度: ${detectedFiscalYear || fiscalYear}`);\n        try {\n          await parseCSVFile(file);\n        } catch (error) {\n          console.error('パース処理に失敗しました:', error);\n          setError(`CSVの解析中にエラーが発生しました: ${error instanceof Error ? error.message : '不明なエラー'}`);\n          return;\n        }\n        if (importData && importData.length > 0) {\n          setConvertedEmployeeData(importData);\n        } else {\n          setError('有効なインポートデータが見つかりませんでした。テンプレート形式を確認してください。');\n          setProcessStage('error');\n          return;\n        }\n      }\n\n      // デバッグ情報\n      console.log('インポートする従業員データ:', convertedEmployeeData || importData);\n\n      // インポート確認\n      const dataToImport = convertedEmployeeData || importData;\n      if (!dataToImport || dataToImport.length === 0) {\n        setError('インポートするデータが見つかりませんでした');\n        return;\n      }\n      const numEmployees = dataToImport.length;\n      const detectedYear = detectedFiscalYear || fiscalYear;\n      if (window.confirm(`${detectedYear}年度の${numEmployees}名の従業員データをインポートします。よろしいですか？`)) {\n        setIsLoading(true);\n\n        // データをコンポーネントに渡す\n        onImportSuccess(dataToImport);\n        setSuccessMessage(`${detectedYear}年度の従業員データ (${numEmployees}名) をインポートしました。`);\n        setProcessStage('completed');\n\n        // 少し待ってからモーダルを閉じる\n        setTimeout(() => {\n          onClose();\n        }, 1500);\n      }\n    } catch (error) {\n      console.error('インポートエラー:', error);\n      setErrorMessage(error instanceof Error ? error.message : '不明なエラーが発生しました。');\n      setProcessStage('error');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // モーダルが閉じている場合は空のdivを返す（nullではなく）\n  if (!isOpen) return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"csv-import-modal-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"csv-import-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"csv-import-modal-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\u5F93\\u696D\\u54E1\\u30C7\\u30FC\\u30BF\\u306E\\u30A4\\u30F3\\u30DD\\u30FC\\u30C8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 833,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 832,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"csv-import-modal-body\",\n        children: [errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 837,\n          columnNumber: 13\n        }, this), successMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"success-message\",\n          children: successMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 843,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"import-info-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"CSV\\u30D5\\u30A1\\u30A4\\u30EB\\u304B\\u3089\\u5F93\\u696D\\u54E1\\u30C7\\u30FC\\u30BF\\u3092\\u30A4\\u30F3\\u30DD\\u30FC\\u30C8\\u3057\\u307E\\u3059\\u3002 \\u30C6\\u30F3\\u30D7\\u30EC\\u30FC\\u30C8\\u3092\\u30C0\\u30A6\\u30F3\\u30ED\\u30FC\\u30C9\\u3057\\u3066\\u5FC5\\u8981\\u306A\\u30C7\\u30FC\\u30BF\\u3092\\u5165\\u529B\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\\u3002\", /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"import-template-button\",\n              onClick: handleDownloadTemplate,\n              disabled: isLoading,\n              children: \"\\u30C6\\u30F3\\u30D7\\u30EC\\u30FC\\u30C8\\u3092\\u30C0\\u30A6\\u30F3\\u30ED\\u30FC\\u30C9\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 853,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 850,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"note\",\n            children: [\"\\u30C6\\u30F3\\u30D7\\u30EC\\u30FC\\u30C8\\u306F\\u5FC5\\u305A\\u4EE5\\u4E0B\\u306E\\u69CB\\u9020\\u3092\\u7DAD\\u6301\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\\uFF1A\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 863,\n              columnNumber: 15\n            }, this), \"\\u30FB1\\u884C\\u76EE\\uFF1A\", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"\\u300C\\u5E74\\u5EA6,XXXX\\u300D\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 863,\n              columnNumber: 25\n            }, this), \"\\uFF08\\u4F8B\\uFF1A\\u5E74\\u5EA6,2025\\uFF09\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 864,\n              columnNumber: 15\n            }, this), \"\\u30FB2\\u884C\\u76EE\\uFF1A\", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"\\u30D8\\u30C3\\u30C0\\u30FC\\u884C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 864,\n              columnNumber: 25\n            }, this), \"\\uFF08\\u793E\\u54E1ID,\\u6C0F\\u540D,\\u969C\\u5BB3\\u533A\\u5206,...\\uFF09\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 865,\n              columnNumber: 15\n            }, this), \"\\u30FB3\\u884C\\u76EE\\u4EE5\\u964D\\uFF1A\", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"\\u30C7\\u30FC\\u30BF\\u884C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 865,\n              columnNumber: 27\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 861,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"note\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"CSV\\u30D5\\u30A1\\u30A4\\u30EB\\u5F62\\u5F0F\\u306E\\u6CE8\\u610F\\u70B9:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 868,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 868,\n              columnNumber: 46\n            }, this), \"- \\u30AB\\u30F3\\u30DE\\u533A\\u5207\\u308A(,)\\u306ECSV\\u30D5\\u30A1\\u30A4\\u30EB\\u5F62\\u5F0F\\u3092\\u4F7F\\u7528\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 869,\n              columnNumber: 45\n            }, this), \"- UTF-8\\u30A8\\u30F3\\u30B3\\u30FC\\u30C9\\u3092\\u63A8\\u5968\\u3057\\u307E\\u3059\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 870,\n              columnNumber: 33\n            }, this), \"- 1\\u884C\\u76EE\\u306E\\u300C\\u5E74\\u5EA6,XXXX\\u300D\\u30682\\u884C\\u76EE\\u306E\\u30D8\\u30C3\\u30C0\\u30FC\\u884C\\u306F\\u5FC5\\u305A\\u6B8B\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 871,\n              columnNumber: 50\n            }, this), \"- \\u30D8\\u30C3\\u30C0\\u30FC\\u884C\\uFF08\\u5217\\u540D\\uFF09\\u306E\\u5909\\u66F4\\u306F\\u3057\\u306A\\u3044\\u3067\\u304F\\u3060\\u3055\\u3044\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 872,\n              columnNumber: 38\n            }, this), \"- \\u30A8\\u30AF\\u30BB\\u30EB\\u3067\\u7DE8\\u96C6\\u3057\\u305F\\u5834\\u5408\\u306F\\u300CCSV\\uFF08\\u30AB\\u30F3\\u30DE\\u533A\\u5207\\u308A\\uFF09\\u300D\\u5F62\\u5F0F\\u3067\\u4FDD\\u5B58\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 867,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 849,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"file-select-area\",\n          onClick: handleSelectFile,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            ref: fileInputRef,\n            style: {\n              display: 'none'\n            },\n            accept: \".csv\",\n            onChange: handleFileChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 879,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"file-select-button\",\n            children: \"CSV\\u30D5\\u30A1\\u30A4\\u30EB\\u3092\\u9078\\u629E\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 886,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"file-name\",\n            children: file ? file.name : 'ファイルが選択されていません'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 889,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 878,\n          columnNumber: 11\n        }, this), processStage !== 'initial' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"import-progress-compact\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"status-row\",\n            children: [processStage === 'parsing' ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"spinner\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 900,\n              columnNumber: 19\n            }, this) : processStage === 'completed' ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"success-icon\",\n              children: \"\\u2713\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 902,\n              columnNumber: 19\n            }, this) : processStage === 'error' ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"error-icon\",\n              children: \"!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 904,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ready-icon\",\n              children: \"\\u27F3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 906,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"status-message\",\n              children: statusMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 908,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 898,\n            columnNumber: 15\n          }, this), yearInfoMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"detected-year-info\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: yearInfoMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 914,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 913,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 896,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 835,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"csv-import-modal-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cancel-button\",\n          onClick: onClose,\n          disabled: isLoading,\n          children: \"\\u9589\\u3058\\u308B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 921,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"import-button\",\n          onClick: handleImport,\n          disabled: !file || isLoading || processStage === 'error' || processStage === 'parsing',\n          children: isLoading ? 'インポート中...' : processStage === 'ready' ? 'インポート開始' : 'インポート'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 928,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 920,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 831,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 830,\n    columnNumber: 5\n  }, this);\n};\n_s(EmployeeCSVImportModal, \"FZw1+XPvyS14G/JsVfin7J8l1G0=\");\n_c = EmployeeCSVImportModal;\nexport default EmployeeCSVImportModal;\nvar _c;\n$RefreshReg$(_c, \"EmployeeCSVImportModal\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useMemo","Papa","Fragment","_Fragment","jsxDEV","_jsxDEV","EmployeeCSVImportModal","isOpen","onClose","onImportSuccess","fiscalYear","_s","file","setFile","isLoading","setIsLoading","errorMessage","setErrorMessage","successMessage","setSuccessMessage","fileInputRef","detectedFiscalYear","setDetectedFiscalYear","detectedYear","setDetectedYear","processStage","setProcessStage","parsedDataCache","setParsedDataCache","convertedEmployeeData","setConvertedEmployeeData","importData","setImportData","setError","message","statusMessage","length","yearInfoMessage","handleDownloadTemplate","console","log","headers","sampleData","notes","csvContent","join","blob","Blob","type","link","document","createElement","url","URL","createObjectURL","setAttribute","style","visibility","body","appendChild","click","removeChild","error","handleFileChange","e","_e$target$files","selectedFile","target","files","name","size","parseCSVFile","handleSelectFile","_fileInputRef$current","current","checkForYearRow","lines","split","slice","firstLine","trim","yearRowMatch","match","yearValue","parseInt","modifiedCsv","substring","indexOf","hasYearRow","yearRowValue","startsWith","parts","isNaN","undefined","convertToDateString","dateValue","normalizedDate","String","replace","dateRegex1","match1","_","year","month","day","padStart","dateRegex2","match2","warn","convertStatus","statusValue","status","statusMap","toLowerCase","convertEmploymentType","whValue","wh","whMap","convertDisabilityType","typeValue","typeMap","convertMonthlyData","row","fieldOrder","monthlyData","months","forEach","monthValue","hasOwnProperty","monthIndex","startIndex","fieldIndex","fieldName","numValue","parseFloat","hcValue","Promise","resolve","reject","reader","FileReader","onload","event","_event$target","result","yearRowResult","contentToProcess","Error","parseConfig","header","skipEmptyLines","transformHeader","transform","value","field","toString","complete","results","_results$meta$fields","dataRows","data","errors","meta","fields","autoGeneratedFields","filter","handleParseComplete","parse","onerror","readAsText","error2","convertCSVData","csvData","fiscalYearToUse","yearFromData","convertedData","availableFields","Object","keys","autoGenFields","f","regularFields","usePositionalMapping","expectedFieldOrder","extendedMapping","index","getFieldValue","autoField","mappedField","entries","alternativeFields","altField","rowIndex","employeeId","hireDateStr","hireDate","disabilityType","employmentType","hcRaw","hcFloat","convertedRow","fiscal_year","employee_id","disability_type","disability","disability_grade","hire_date","employment_type","hc_value","monthly_status","push","validateConvertedData","isValid","invalidEntries","entry","validationErrors","test","includes","_convertedData$","validation","handleImport","dataToImport","numEmployees","window","confirm","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","ref","display","accept","onChange","_c","$RefreshReg$"],"sources":["/Users/gotouhiroaki/Programming/DAN_work/disability-employment-system/frontend/src/pages/MonthlyReport/EmployeeCSVImportModal.tsx"],"sourcesContent":["import React, { useState, useCallback, useRef, useEffect, useMemo } from 'react';\nimport Papa, { ParseResult } from 'papaparse';\nimport './CSVImportModal.css'; // 既存のCSSを再利用\n\ninterface EmployeeCSVImportModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onImportSuccess: (data: any[]) => void;\n  fiscalYear: number;\n}\n\n// 従業員データCSVインポートモーダル\nconst EmployeeCSVImportModal: React.FC<EmployeeCSVImportModalProps> = ({ \n  isOpen, \n  onClose, \n  onImportSuccess, \n  fiscalYear \n}) => {\n  // 状態管理\n  const [file, setFile] = useState<File | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\n  const [successMessage, setSuccessMessage] = useState<string | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  \n  // 年度をステート管理（CSVからの読み込み用）\n  const [detectedFiscalYear, setDetectedFiscalYear] = useState<number | null>(null);\n  const [detectedYear, setDetectedYear] = useState<number | null>(null);\n  \n  // 処理段階の状態管理\n  const [processStage, setProcessStage] = useState<'initial' | 'parsing' | 'ready' | 'completed' | 'error'>('initial');\n  \n  // パースされたデータのキャッシュ\n  const [parsedDataCache, setParsedDataCache] = useState<any[] | null>(null);\n  \n  // 変換後の従業員データキャッシュ\n  const [convertedEmployeeData, setConvertedEmployeeData] = useState<any[] | null>(null);\n  const [importData, setImportData] = useState<any[] | null>(null);\n  \n  // エラー設定関数\n  const setError = (message: string | null) => {\n    setErrorMessage(message);\n    if (message) {\n      setProcessStage('error');\n    }\n  };\n  \n  // ステータスメッセージ\n  const statusMessage = useMemo(() => {\n    switch (processStage) {\n      case 'parsing':\n        return 'ファイル解析中...';\n      case 'ready':\n        return `${detectedFiscalYear || fiscalYear}年度のデータ (${parsedDataCache?.length || 0}名の従業員) の準備完了`;\n      case 'completed':\n        return 'インポート完了！';\n      case 'error':\n        return 'エラーが発生しました';\n      default:\n        return '';\n    }\n  }, [processStage, detectedFiscalYear, fiscalYear, parsedDataCache]);\n\n  // 年度情報メッセージ - 検出された年度と選択されている年度が異なる場合に表示\n  const yearInfoMessage = useMemo(() => {\n    if (detectedFiscalYear && detectedFiscalYear !== fiscalYear) {\n      return `テンプレートから${detectedFiscalYear}年度が検出されました。このデータは${detectedFiscalYear}年度としてインポートされます。`;\n    } else if (detectedFiscalYear === null && parsedDataCache && parsedDataCache.length > 0) {\n      return `テンプレートに年度情報がないため、現在選択されている${fiscalYear}年度としてインポートされます。`;\n    }\n    return null;\n  }, [detectedFiscalYear, fiscalYear, parsedDataCache]);\n\n  // モーダルを開いた時にステートをリセット\n  useEffect(() => {\n    if (isOpen) {\n      setErrorMessage(null);\n      setSuccessMessage(null);\n      setDetectedFiscalYear(null);\n      setDetectedYear(null);\n      setFile(null);\n      setProcessStage('initial');\n      setParsedDataCache(null);\n      setConvertedEmployeeData(null);\n      setImportData(null);\n    }\n  }, [isOpen]);\n\n  // CSVテンプレートのダウンロード\n  const handleDownloadTemplate = () => {\n    try {\n      console.log(\"従業員データテンプレートをダウンロード:\", fiscalYear + \"年度\");\n      \n      // テンプレートヘッダーを改善（年度行を含む）\n      const headers = [\n        \"年度,\" + fiscalYear + \",,,,,,,,,,,,,,,,,,,\",\n        \"社員ID,氏名,障害区分,障害,等級,採用日,状態,WH,HC,4月,5月,6月,7月,8月,9月,10月,11月,12月,1月,2月,3月\"\n      ];\n      \n      // サンプルデータ\n      const sampleData = [\n        \"1001,山田 太郎,身体障害,視覚,1級,2010/4/1,在籍,正社員,2,2,2,2,2,2,2,2,2,2,2,2,2\",\n        \"2222,山田 花子,身体障害,聴覚,4級,2020/4/10,在籍,短時間労働者,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5\",\n        \"3333,山田 一郎,知的障害,,B1,2020/10/1,在籍,正社員,1,1,1,1,1,1,1,1,1,1,1,1,1\"\n      ];\n      \n      // 注釈行を追加\n      const notes = [\n        \",,,,,,,,,,,,,,,,,,,,,\",\n        \"注意事項:,,,,,,,,,,,,,,,,,,,,,\",\n        \",障害区分:,身体障害、知的障害、精神障害、発達障害のいずれかをご入力ください,,,,,,,,,,,,,,,,,,,\",\n        \",等級:,身体障害は1級～7級、知的障害はA・Bのいずれかをご入力ください,,,,,,,,,,,,,,,,,,,\",\n        \",採用日:,YYYY/MM/DDの形式でご入力ください（例: 2000/04/01）,,,,,,,,,,,,,,,,,,,\",\n        \",状態:,在籍、休職、退職のいずれかをご入力ください,,,,,,,,,,,,,,,,,,,\",\n        \",WH:,正社員、短時間労働者、特定短時間労働者のいずれかをご入力ください,,,,,,,,,,,,,,,,,,,\",\n        \",HC:,HC(障がい者のカウント)は2、1、0.5のいずれかをご入力ください,,,,,,,,,,,,,,,,,,,\",\n      ];\n      \n      // CSVコンテンツの作成\n      let csvContent = '\\uFEFF'; // BOMを追加して文字化けを防止\n      csvContent += [...headers, ...sampleData, ...notes].join(\"\\n\");\n      \n      // Blobの作成とダウンロード\n      const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\n      const link = document.createElement(\"a\");\n      const url = URL.createObjectURL(blob);\n      \n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", `従業員データテンプレート_${fiscalYear}年度.csv`);\n      link.style.visibility = \"hidden\";\n      \n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    } catch (error) {\n      console.error(\"テンプレートのダウンロードに失敗しました:\", error);\n      setError(\"テンプレートのダウンロードに失敗しました\");\n    }\n  };\n\n  // ファイル選択ハンドラ\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFile = e.target.files?.[0];\n    if (selectedFile) {\n      console.log(`ファイルが選択されました: ${selectedFile.name} (${selectedFile.size} bytes)`);\n      setFile(selectedFile);\n      setErrorMessage(null);\n      setDetectedFiscalYear(null);\n      setParsedDataCache(null);\n      setProcessStage('parsing');\n      setConvertedEmployeeData(null);\n      \n      // ファイル解析を即時開始\n      parseCSVFile(selectedFile);\n    }\n  };\n\n  // ファイル選択ボタンクリックハンドラ\n  const handleSelectFile = () => {\n    console.log('ファイル選択ボタンがクリックされました');\n    fileInputRef.current?.click();\n  };\n\n  // 年度行を検出するための事前処理\n  const checkForYearRow = (csvContent: string): { \n    hasYearRow: boolean, \n    yearRowValue: number | undefined, \n    modifiedCsv: string | undefined \n  } => {\n    try {\n      // 最初の数行だけを取得して年度行をチェック\n      const lines = csvContent.split('\\n').slice(0, 3);\n      const firstLine = lines[0].trim();\n      \n      // 「年度,YYYY」パターンを検出\n      const yearRowMatch = firstLine.match(/^年度[,\\t]\\s*(\\d{4})\\s*$/);\n      \n      if (yearRowMatch) {\n        const yearValue = parseInt(yearRowMatch[1], 10);\n        console.log(`年度行を検出しました: ${yearValue}`);\n        \n        // 年度行を削除し、残りの内容を返す\n        const modifiedCsv = csvContent.substring(csvContent.indexOf('\\n') + 1);\n        return { hasYearRow: true, yearRowValue: yearValue, modifiedCsv };\n      }\n      \n      // 複数列を持つ行で最初の列が「年度」の場合も検出\n      if (firstLine.startsWith('年度,') || firstLine.startsWith('年度\\t')) {\n        const parts = firstLine.split(/[,\\t]/);\n        if (parts.length > 1 && !isNaN(parseInt(parts[1], 10))) {\n          const yearValue = parseInt(parts[1], 10);\n          console.log(`複数列の年度行を検出しました: ${yearValue}`);\n          \n          // 年度行を削除し、残りの内容を返す\n          const modifiedCsv = csvContent.substring(csvContent.indexOf('\\n') + 1);\n          return { hasYearRow: true, yearRowValue: yearValue, modifiedCsv };\n        }\n      }\n    } catch (error) {\n      console.error(\"年度行チェック中にエラーが発生しました:\", error);\n    }\n    \n    console.log(\"年度行は検出されませんでした\");\n    return { hasYearRow: false, yearRowValue: undefined, modifiedCsv: undefined };\n  };\n\n  // 日付文字列を標準形式に変換する関数\n  const convertToDateString = (dateValue: any): string | null => {\n    if (!dateValue) return null;\n    \n    // 日付文字列の正規化\n    const normalizedDate = String(dateValue)\n      .replace(/[年月]/g, '/')\n      .replace(/日/g, '')\n      .replace(/\\s+/g, '')\n      .trim();\n    \n    // 様々な日付形式を処理\n    try {\n      // YYYY/MM/DD または YYYY-MM-DD 形式\n      const dateRegex1 = /^(\\d{4})[\\/\\-](\\d{1,2})[\\/\\-](\\d{1,2})$/;\n      const match1 = normalizedDate.match(dateRegex1);\n      if (match1) {\n        const [_, year, month, day] = match1;\n        return `${year}/${month.padStart(2, '0')}/${day.padStart(2, '0')}`;\n      }\n      \n      // DD/MM/YYYY 形式\n      const dateRegex2 = /^(\\d{1,2})[\\/\\-](\\d{1,2})[\\/\\-](\\d{4})$/;\n      const match2 = normalizedDate.match(dateRegex2);\n      if (match2) {\n        const [_, day, month, year] = match2;\n        return `${year}/${month.padStart(2, '0')}/${day.padStart(2, '0')}`;\n      }\n      \n      // 解析失敗時\n      return normalizedDate;\n    } catch (e) {\n      console.warn('日付変換エラー:', normalizedDate, e);\n      return normalizedDate;\n    }\n  };\n\n  // 状態フィールドを標準化する関数\n  const convertStatus = (statusValue: any): string => {\n    if (!statusValue) return '在籍'; // デフォルト値\n    \n    const status = String(statusValue).trim().replace(/　/g, ' ');\n    \n    // 状態値のマッピング\n    const statusMap: {[key: string]: string} = {\n      '在籍': '在籍',\n      '在職': '在籍',\n      'active': '在籍',\n      '休職': '休職',\n      'leave': '休職',\n      '退職': '退職',\n      'resigned': '退職',\n    };\n    \n    return statusMap[status.toLowerCase()] || '在籍';\n  };\n\n  // 雇用タイプを標準化する関数\n  const convertEmploymentType = (whValue: any): string => {\n    if (!whValue) return '正社員'; // デフォルト値\n    \n    const wh = String(whValue).trim().replace(/　/g, ' ');\n    \n    // 雇用タイプのマッピング\n    const whMap: {[key: string]: string} = {\n      '正社員': '正社員',\n      '正規': '正社員',\n      'full': '正社員',\n      'fulltime': '正社員',\n      '短時間': '短時間労働者',\n      '短時間労働者': '短時間労働者',\n      'part': '短時間労働者',\n      'parttime': '短時間労働者',\n      '特定短時間': '特定短時間労働者',\n      '特定短時間労働者': '特定短時間労働者',\n      'special': '特定短時間労働者',\n    };\n    \n    return whMap[wh.toLowerCase()] || '正社員';\n  };\n\n  // 障害区分を標準化する関数\n  const convertDisabilityType = (typeValue: any): string => {\n    if (!typeValue) return '';\n    \n    const type = String(typeValue).trim().replace(/　/g, ' ');\n    \n    // 障害区分のマッピング\n    const typeMap: {[key: string]: string} = {\n      '身体': '身体障害',\n      '身体障害': '身体障害',\n      '知的': '知的障害',\n      '知的障害': '知的障害',\n      '精神': '精神障害',\n      '精神障害': '精神障害',\n      '発達': '発達障害',\n      '発達障害': '発達障害',\n    };\n    \n    return typeMap[type] || type;\n  };\n\n  // 月次データを変換する関数\n  const convertMonthlyData = (row: any, fieldOrder: string[]): {[key: string]: number | string} => {\n    const monthlyData: {[key: string]: number | string} = {};\n    const months = ['4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月', '1月', '2月', '3月'];\n    \n    // 各月のフィールドを処理\n    months.forEach((month) => {\n      // フィールドの取得（通常か拡張マッピングを使用）\n      let monthValue = null;\n      \n      // 直接のフィールド名でアクセス\n      if (row.hasOwnProperty(month)) {\n        monthValue = row[month];\n      } else {\n        // 位置ベースでの推測\n        const monthIndex = months.indexOf(month);\n        const startIndex = fieldOrder.indexOf('HC') + 1;\n        if (monthIndex >= 0 && startIndex >= 0) {\n          const fieldIndex = startIndex + monthIndex;\n          if (fieldIndex < fieldOrder.length) {\n            const fieldName = fieldOrder[fieldIndex];\n            if (row.hasOwnProperty(fieldName)) {\n              monthValue = row[fieldName];\n            }\n          }\n        }\n      }\n      \n      // 値の変換\n      if (monthValue === null || monthValue === undefined || monthValue === '') {\n        monthlyData[month] = '';\n      } else {\n        // 数値に変換を試みる\n        const numValue = parseFloat(String(monthValue).replace(/,/g, '.'));\n        if (!isNaN(numValue)) {\n          monthlyData[month] = numValue;\n        } else {\n          // 数値変換に失敗した場合はHC値を使用\n          const hcValue = row.hasOwnProperty('HC') ? parseFloat(String(row['HC']).replace(/,/g, '.')) : 0;\n          monthlyData[month] = isNaN(hcValue) ? '' : hcValue;\n        }\n      }\n    });\n    \n    return monthlyData;\n  };\n\n  // CSVファイル解析\n  const parseCSVFile = (file: File) => {\n    return new Promise((resolve, reject) => {\n      try {\n        const reader = new FileReader();\n        \n        reader.onload = (event) => {\n          const csvContent = event.target?.result as string;\n          console.log(`CSVの最初の部分: ${csvContent.substring(0, 200)}`);\n          \n          // 年度行をチェック\n          const yearRowResult = checkForYearRow(csvContent);\n          console.log(\"年度行チェック結果:\", yearRowResult);\n          \n          // 年度行が検出された場合、修正されたCSVを使用\n          const contentToProcess = yearRowResult.hasYearRow ? yearRowResult.modifiedCsv : csvContent;\n          \n          if (yearRowResult.hasYearRow && yearRowResult.yearRowValue !== undefined) {\n            console.log(\"年度行を含むCSVを処理します（年度: \" + yearRowResult.yearRowValue + \"）\");\n            setDetectedYear(yearRowResult.yearRowValue);\n          } else {\n            console.log(\"通常のCSVパース処理を実行します（年度行なし）\");\n            setDetectedYear(null);\n          }\n          \n          if (!contentToProcess) {\n            setError('CSVコンテンツの処理に失敗しました');\n            reject(new Error('CSVコンテンツの処理に失敗しました'));\n            return;\n          }\n          \n          // PapaParse の設定を修正\n          const parseConfig = {\n            header: true,\n            skipEmptyLines: true,\n            transformHeader: (header: string) => {\n              // ヘッダー名の正規化（空白除去、全角→半角変換等）\n              return header.trim().replace(/　/g, ' ');\n            },\n            transform: (value: any, field: string) => {\n              // 空値の処理\n              if (value === undefined || value === null || value === '') {\n                return null;\n              }\n              // 全角スペースを半角に変換\n              return value.toString().replace(/　/g, ' ').trim();\n            },\n            complete: (results: ParseResult<any>) => {\n              try {\n                // デバッグ情報の追加\n                console.log(\"CSV解析結果の詳細:\", {\n                  dataRows: results.data.length,\n                  errors: results.errors,\n                  meta: results.meta,\n                  headers: results.meta.fields\n                });\n                \n                if (results.data.length > 0) {\n                  console.log(\"最初の行のデータ:\", results.data[0]);\n                  console.log(\"利用可能なフィールド名:\", results.meta.fields);\n                }\n                \n                // 自動生成フィールド名を検出\n                const autoGeneratedFields = results.meta.fields?.filter(field => field?.startsWith('_empty_')) || [];\n                if (autoGeneratedFields.length > 0) {\n                  console.log(\"自動生成された空フィールド名:\", autoGeneratedFields);\n                }\n                \n                // パース完了処理\n                handleParseComplete(results, yearRowResult.hasYearRow ? yearRowResult.yearRowValue : undefined);\n                resolve(results);\n              } catch (error) {\n                console.error(\"CSVパース完了処理中にエラーが発生しました:\", error);\n                setError(`CSVデータの処理中にエラーが発生しました: ${error instanceof Error ? error.message : '不明なエラー'}`);\n                reject(error);\n              }\n            },\n            error: (error: any) => {\n              console.error(\"CSV解析エラー:\", error);\n              setError(`CSVファイルの解析中にエラーが発生しました: ${error.message}`);\n              reject(error);\n            }\n          };\n          \n          Papa.parse(contentToProcess, parseConfig);\n        };\n        \n        reader.onerror = (error) => {\n          console.error(\"ファイル読み込み中にエラーが発生しました:\", error);\n          setError(\"ファイルの読み込みに失敗しました\");\n          reject(error);\n        };\n        \n        // ファイル読み込み開始 - UTF-8エンコーディングを明示\n        try {\n          // まずはUTF-8で試す\n          reader.readAsText(file, 'UTF-8');\n        } catch (error) {\n          console.error('UTF-8でのファイル読み込みエラー:', error);\n          try {\n            // UTF-8で失敗したらShift-JISで試す\n            reader.readAsText(file, 'Shift_JIS');\n          } catch (error2) {\n            console.error('Shift_JISでのファイル読み込みエラー:', error2);\n            // 最後の手段としてエンコーディング指定なしで読み込み\n            reader.readAsText(file);\n          }\n        }\n      } catch (error) {\n        console.error(\"ファイル処理中に予期しないエラーが発生しました:\", error);\n        setError(`予期しないエラーが発生しました: ${error instanceof Error ? error.message : '不明なエラー'}`);\n        reject(error);\n      }\n    });\n  };\n\n  // CSVデータをAPI形式に変換する関数\n  const convertCSVData = (csvData: any[], detectedFiscalYear?: number | null) => {\n    console.log(\"CSVデータをAPI形式に変換開始\", csvData.length, csvData);\n    \n    // 年度の検出\n    let fiscalYearToUse: number = fiscalYear; // デフォルト値として現在の年度を使用\n    \n    // 検出された年度が指定されている場合はそれを使用\n    if (detectedFiscalYear !== null && detectedFiscalYear !== undefined) {\n      fiscalYearToUse = detectedFiscalYear;\n    } else {\n      // 年度列からの検出を試みる\n      try {\n        if (csvData && csvData.length > 0 && csvData[0].hasOwnProperty('年度')) {\n          const yearFromData = parseInt(csvData[0]['年度'], 10);\n          if (!isNaN(yearFromData) && yearFromData > 2000 && yearFromData < 2100) {\n            fiscalYearToUse = yearFromData;\n            console.log(\"検出された年度:\", fiscalYearToUse);\n          }\n        }\n      } catch (error) {\n        console.error(\"年度検出中にエラー:\", error);\n      }\n    }\n    \n    // 使用する年度を決定\n    console.log(\"使用する年度:\", fiscalYearToUse);\n    \n    // フィールドのマッピングを改善\n    const convertedData: any[] = [];\n    \n    // CSVデータのフィールド名を取得\n    const availableFields = csvData.length > 0 ? Object.keys(csvData[0]) : [];\n    console.log(\"CSVデータの使用可能なフィールド名:\", availableFields);\n    \n    // 自動生成フィールドと通常フィールドを分離\n    const autoGenFields = availableFields.filter(f => f.startsWith('_empty_'));\n    const regularFields = availableFields.filter(f => !f.startsWith('_empty_'));\n    console.log(\"自動生成フィールド:\", autoGenFields);\n    console.log(\"通常フィールド:\", regularFields);\n    \n    // 自動生成フィールドがあれば位置ベースのマッピングを使用\n    const usePositionalMapping = autoGenFields.length > 0;\n    if (usePositionalMapping) {\n      console.log(\"自動生成フィールドがあります。データの位置から推測してマッピングを拡張します。\");\n    }\n    \n    // 想定されるフィールド順序（ヘッダー行の典型的な順序）\n    const expectedFieldOrder = [\n      \"社員ID\", \"氏名\", \"障害区分\", \"障害\", \"等級\", \"採用日\", \"状態\", \"WH\", \"HC\", \n      \"4月\", \"5月\", \"6月\", \"7月\", \"8月\", \"9月\", \"10月\", \"11月\", \"12月\", \"1月\", \"2月\", \"3月\"\n    ];\n    \n    // 位置ベースの拡張マッピング\n    const extendedMapping: {[key: string]: string} = {};\n    if (usePositionalMapping) {\n      autoGenFields.forEach((field, index) => {\n        if (index < expectedFieldOrder.length) {\n          extendedMapping[field] = expectedFieldOrder[index];\n          console.log(`自動生成フィールド ${field} は ${expectedFieldOrder[index]} に相当すると推測`);\n        }\n      });\n    }\n    \n    // フィールド値を取得する関数\n    const getFieldValue = (row: any, fieldName: string): any => {\n      // 直接のフィールド名でアクセス\n      if (row.hasOwnProperty(fieldName)) {\n        return row[fieldName];\n      }\n      \n      // 拡張マッピングのチェック\n      for (const [autoField, mappedField] of Object.entries(extendedMapping)) {\n        if (mappedField === fieldName && row.hasOwnProperty(autoField)) {\n          return row[autoField];\n        }\n      }\n      \n      // 代替フィールド名のチェック\n      const alternativeFields: {[key: string]: string[]} = {\n        '状態': ['状況', 'ステータス', 'status'],\n        '社員ID': ['従業員ID', 'ID', 'employee_id'],\n        '氏名': ['名前', 'name'],\n        '障害区分': ['障害種別', 'disability_type'],\n        '等級': ['障害等級', 'grade'],\n        '採用日': ['入社日', 'hire_date'],\n        'WH': ['雇用形態', 'employment_type'],\n        'HC': ['カウント', 'count']\n      };\n      \n      if (alternativeFields[fieldName]) {\n        for (const altField of alternativeFields[fieldName]) {\n          if (row.hasOwnProperty(altField)) {\n            return row[altField];\n          }\n          \n          // 拡張マッピングの代替フィールド\n          for (const [autoField, mappedField] of Object.entries(extendedMapping)) {\n            if (mappedField === altField && row.hasOwnProperty(autoField)) {\n              return row[autoField];\n            }\n          }\n        }\n      }\n      \n      return null;\n    };\n    \n    // 各行のデータを変換\n    csvData.forEach((row, rowIndex) => {\n      try {\n        console.log(`行 ${rowIndex + 1} の処理開始:`, row);\n        \n        // 主要フィールドの取得\n        const employeeId = getFieldValue(row, '社員ID');\n        console.log(`行 ${rowIndex + 1} の社員ID: ${employeeId}`);\n        \n        const name = getFieldValue(row, '氏名');\n        console.log(`行 ${rowIndex + 1} の氏名: ${name}`);\n        \n        // 社員IDまたは氏名が空の場合はスキップ（ヘッダー行など）\n        if (!employeeId || !name) {\n          console.log(`行 ${rowIndex + 1} は社員IDまたは氏名がないためスキップします。`);\n          return;\n        }\n        \n        console.log(`行 ${rowIndex + 1} は有効なデータ行です`);\n        \n        // 採用日を解析\n        const hireDateStr = getFieldValue(row, '採用日');\n        const hireDate = convertToDateString(hireDateStr) || '';\n        \n        // 障害区分を標準化\n        const disabilityType = convertDisabilityType(getFieldValue(row, '障害区分'));\n        \n        // 状態を標準化\n        const status = convertStatus(getFieldValue(row, '状態'));\n        \n        // 雇用タイプを標準化\n        const employmentType = convertEmploymentType(getFieldValue(row, 'WH'));\n        \n        // HC値の処理（数値変換）\n        let hcValue = 0;\n        const hcRaw = getFieldValue(row, 'HC');\n        if (hcRaw !== null && hcRaw !== undefined) {\n          const hcFloat = parseFloat(String(hcRaw).replace(/,/g, '.'));\n          if (!isNaN(hcFloat)) {\n            hcValue = hcFloat;\n          }\n        }\n        \n        // 月次データの処理\n        const monthlyData = convertMonthlyData(row, expectedFieldOrder);\n        \n        // 変換後のデータを作成\n        const convertedRow = {\n          fiscal_year: fiscalYearToUse,\n          employee_id: employeeId,\n          name: name,\n          disability_type: disabilityType,\n          disability: getFieldValue(row, '障害') || '',\n          disability_grade: getFieldValue(row, '等級') || '',\n          hire_date: hireDate,\n          status: status,\n          employment_type: employmentType,\n          hc_value: hcValue,\n          monthly_status: monthlyData\n        };\n        \n        console.log(`行 ${rowIndex + 1} の従業員データ変換完了:`, convertedRow);\n        convertedData.push(convertedRow);\n      } catch (error) {\n        console.error(`行 ${rowIndex + 1} の処理中にエラーが発生しました:`, error);\n      }\n    });\n    \n    console.log(\"従業員データに変換:\", convertedData.length + \"名\", convertedData);\n    return convertedData;\n  };\n  \n  // 変換データを検証する関数\n  const validateConvertedData = (convertedData: any[]): { isValid: boolean, message: string | null } => {\n    if (!convertedData || convertedData.length === 0) {\n      return { isValid: false, message: \"変換データが空です\" };\n    }\n    \n    const invalidEntries: string[] = [];\n    \n    convertedData.forEach((entry, index) => {\n      const validationErrors: string[] = [];\n      \n      // 必須フィールドの検証\n      if (!entry.employee_id) validationErrors.push(\"社員ID\");\n      if (!entry.name) validationErrors.push(\"氏名\");\n      \n      // 日付形式の検証\n      if (entry.hire_date && !/^\\d{4}\\/\\d{2}\\/\\d{2}$/.test(entry.hire_date)) {\n        validationErrors.push(\"採用日(形式: YYYY/MM/DD)\");\n      }\n      \n      // HC値の検証\n      if (![0, 0.5, 1, 2].includes(entry.hc_value)) {\n        validationErrors.push(\"HC値(0, 0.5, 1, 2のいずれか)\");\n      }\n      \n      if (validationErrors.length > 0) {\n        invalidEntries.push(`行 ${index + 1} (${entry.name}): ${validationErrors.join(', ')}`);\n      }\n    });\n    \n    if (invalidEntries.length > 0) {\n      return {\n        isValid: false,\n        message: `データに問題があります:\\n${invalidEntries.slice(0, 5).join('\\n')}${invalidEntries.length > 5 ? `\\n...他 ${invalidEntries.length - 5} 件` : ''}`\n      };\n    }\n    \n    return { isValid: true, message: null };\n  };\n  \n  // パース完了時のハンドラ\n  const handleParseComplete = (results: ParseResult<any>, detectedYear?: number) => {\n    try {\n      console.log(\"パース完了。データ行数:\", results.data.length);\n      \n      // エラーチェック\n      if (results.errors && results.errors.length > 0) {\n        console.error(\"CSVパースエラー:\", results.errors);\n        setError(`CSVパースエラー: ${results.errors[0].message || '不明なエラー'}`);\n        return;\n      }\n      \n      // 空データチェック\n      if (!results.data || results.data.length === 0) {\n        setError(\"CSVデータが空です\");\n        return;\n      }\n      \n      // 変換済みデータを使用してインポートします\n      let convertedData;\n      try {\n        convertedData = convertCSVData(results.data, detectedYear);\n        if (!convertedData || convertedData.length === 0) {\n          setError(\"有効なデータ行が見つかりませんでした。CSVファイルの形式を確認してください。\");\n          return;\n        }\n      } catch (error) {\n        console.error(\"データの変換に失敗しました:\", error);\n        setError(`データの変換に失敗しました: ${error instanceof Error ? error.message : '不明なエラー'}`);\n        return;\n      }\n      \n      // データ検証\n      const validation = validateConvertedData(convertedData);\n      if (!validation.isValid) {\n        setError(validation.message);\n        return;\n      }\n      \n      // 変換済みデータをキャッシュ\n      setConvertedEmployeeData(convertedData);\n      \n      // デバッグ情報 - 障がい者データが正しく変換されているか確認\n      console.log('変換されたAPIデータ:', convertedData);\n      \n      // 検出された年度を設定\n      if (convertedData[0]?.fiscal_year) {\n        setDetectedFiscalYear(convertedData[0].fiscal_year);\n      }\n      \n      // パース済みデータをキャッシュに保存\n      setParsedDataCache(results.data);\n      setProcessStage('ready');\n      \n      setImportData(convertedData);\n    } catch (error) {\n      console.error(\"データ処理エラー:\", error);\n      setError(`データの変換に失敗しました: ${error instanceof Error ? error.message : '不明なエラー'}`);\n    }\n  };\n\n  // インポート実行\n  const handleImport = async () => {\n    if (!file) {\n      setErrorMessage('ファイルを選択してください。');\n      return;\n    }\n    \n    try {\n      if (!parsedDataCache) {\n        setProcessStage('parsing');\n        parseCSVFile(file);\n        return;\n      }\n      \n      // すでに変換済みのデータがある場合はそれを使用\n      if (convertedEmployeeData && convertedEmployeeData.length > 0) {\n        console.log('変換済みデータを使用してインポートします');\n      } else {\n        // 変換済みデータがない場合は再変換\n        console.log(`インポートに使用する年度: ${detectedFiscalYear || fiscalYear}`);\n        try {\n          await parseCSVFile(file);\n        } catch (error) {\n          console.error('パース処理に失敗しました:', error);\n          setError(`CSVの解析中にエラーが発生しました: ${error instanceof Error ? error.message : '不明なエラー'}`);\n          return;\n        }\n        \n        if (importData && importData.length > 0) {\n          setConvertedEmployeeData(importData);\n        } else {\n          setError('有効なインポートデータが見つかりませんでした。テンプレート形式を確認してください。');\n          setProcessStage('error');\n          return;\n        }\n      }\n      \n      // デバッグ情報\n      console.log('インポートする従業員データ:', convertedEmployeeData || importData);\n\n      // インポート確認\n      const dataToImport = convertedEmployeeData || importData;\n      if (!dataToImport || dataToImport.length === 0) {\n        setError('インポートするデータが見つかりませんでした');\n        return;\n      }\n      \n      const numEmployees = dataToImport.length;\n      const detectedYear = detectedFiscalYear || fiscalYear;\n      \n      if (window.confirm(`${detectedYear}年度の${numEmployees}名の従業員データをインポートします。よろしいですか？`)) {\n        setIsLoading(true);\n        \n        // データをコンポーネントに渡す\n        onImportSuccess(dataToImport);\n        \n        setSuccessMessage(`${detectedYear}年度の従業員データ (${numEmployees}名) をインポートしました。`);\n        setProcessStage('completed');\n        \n        // 少し待ってからモーダルを閉じる\n        setTimeout(() => {\n          onClose();\n        }, 1500);\n      }\n    } catch (error) {\n      console.error('インポートエラー:', error);\n      setErrorMessage(error instanceof Error ? error.message : '不明なエラーが発生しました。');\n      setProcessStage('error');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // モーダルが閉じている場合は空のdivを返す（nullではなく）\n  if (!isOpen) return <></>;\n\n  return (\n    <div className=\"csv-import-modal-overlay\">\n      <div className=\"csv-import-modal\">\n        <div className=\"csv-import-modal-header\">\n          <h2>従業員データのインポート</h2>\n        </div>\n        <div className=\"csv-import-modal-body\">\n          {errorMessage && (\n            <div className=\"error-message\">\n              {errorMessage}\n            </div>\n          )}\n          \n          {successMessage && (\n            <div className=\"success-message\">\n              {successMessage}\n            </div>\n          )}\n          \n          {/* コンパクトな説明セクション */}\n          <div className=\"import-info-section\">\n            <p>\n              CSVファイルから従業員データをインポートします。\n              テンプレートをダウンロードして必要なデータを入力してください。\n              <button \n                className=\"import-template-button\"\n                onClick={handleDownloadTemplate}\n                disabled={isLoading}\n              >\n                テンプレートをダウンロード\n              </button>\n            </p>\n            <p className=\"note\">\n              テンプレートは必ず以下の構造を維持してください：\n              <br/>・1行目：<strong>「年度,XXXX」</strong>（例：年度,2025）\n              <br/>・2行目：<strong>ヘッダー行</strong>（社員ID,氏名,障害区分,...）\n              <br/>・3行目以降：<strong>データ行</strong>\n            </p>\n            <p className=\"note\">\n              <strong>CSVファイル形式の注意点:</strong><br/>\n              - カンマ区切り(,)のCSVファイル形式を使用してください<br/>\n              - UTF-8エンコードを推奨します<br/>\n              - 1行目の「年度,XXXX」と2行目のヘッダー行は必ず残してください<br/>\n              - ヘッダー行（列名）の変更はしないでください<br/>\n              - エクセルで編集した場合は「CSV（カンマ区切り）」形式で保存してください\n            </p>\n          </div>\n          \n          {/* ファイル選択エリア */}\n          <div className=\"file-select-area\" onClick={handleSelectFile}>\n            <input\n              type=\"file\"\n              ref={fileInputRef}\n              style={{ display: 'none' }}\n              accept=\".csv\"\n              onChange={handleFileChange}\n            />\n            <div className=\"file-select-button\">\n              CSVファイルを選択\n            </div>\n            <div className=\"file-name\">\n              {file ? file.name : 'ファイルが選択されていません'}\n            </div>\n          </div>\n          \n          {/* コンパクトな進行状況表示 */}\n          {processStage !== 'initial' && (\n            <div className=\"import-progress-compact\">\n              {/* ステータスアイコンとメッセージ */}\n              <div className=\"status-row\">\n                {processStage === 'parsing' ? (\n                  <div className=\"spinner\"></div>\n                ) : processStage === 'completed' ? (\n                  <div className=\"success-icon\">✓</div>\n                ) : processStage === 'error' ? (\n                  <div className=\"error-icon\">!</div>\n                ) : (\n                  <div className=\"ready-icon\">⟳</div>\n                )}\n                <span className=\"status-message\">{statusMessage}</span>\n              </div>\n              \n              {/* 検出された年度表示 */}\n              {yearInfoMessage && (\n                <div className=\"detected-year-info\">\n                  <span>{yearInfoMessage}</span>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n        <div className=\"csv-import-modal-footer\">\n          <button \n            className=\"cancel-button\"\n            onClick={onClose}\n            disabled={isLoading}\n          >\n            閉じる\n          </button>\n          <button \n            className=\"import-button\"\n            onClick={handleImport}\n            disabled={!file || isLoading || processStage === 'error' || processStage === 'parsing'}\n          >\n            {isLoading \n              ? 'インポート中...' \n              : processStage === 'ready' \n                ? 'インポート開始' \n                : 'インポート'\n            }\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default EmployeeCSVImportModal;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}