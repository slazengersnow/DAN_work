{"ast":null,"code":"var _jsxFileName = \"/Users/gotouhiroaki/Programming/DAN_work/disability-employment-system/frontend/src/pages/MonthlyReport/EmployeesTab.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { useYearMonth } from './YearMonthContext';\nimport EmployeeCSVImportModal from './EmployeeCSVImportModal';\n\n// WH（雇用形態）の選択肢定義\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst WH_OPTIONS = [{\n  value: '正社員',\n  label: '正社員'\n}, {\n  value: '短時間労働者',\n  label: '短時間労働者'\n}, {\n  value: '特定短時間労働者',\n  label: '特定短時間労働者'\n}];\n\n// 型定義\n\n// API関数の修正版（実際のバックエンドエンドポイントに合わせる）\nconst reportApi = {\n  // 安全なレスポンス解析処理 - 共通関数化\n  safeResponseParser: async response => {\n    if (response.ok) {\n      try {\n        return await response.json();\n      } catch (jsonError) {\n        console.error('JSONパースエラー:', jsonError);\n        throw new Error('不正な応答形式: JSONデータを解析できませんでした');\n      }\n    } else {\n      // エラー応答の処理\n      // 必ずレスポンスをクローンしてから本文を読み取る\n      const clonedResponse = response.clone();\n      let errorMessage = `API error: ${response.status}`;\n      try {\n        // JSONとしての解析を試みる\n        const errorData = await response.json();\n        errorMessage = errorData.message || errorMessage;\n      } catch (jsonError) {\n        try {\n          // テキストとしての読み取りを試みる（HTML応答などの検出）\n          const text = await clonedResponse.text();\n\n          // HTML応答のチェック\n          if (text.includes('<!DOCTYPE') || text.includes('<html')) {\n            console.error('HTML形式のレスポンスを検出:', {\n              status: response.status,\n              preview: text.substring(0, 100) + '...'\n            });\n            errorMessage = `APIがHTMLを返しました（ステータス: ${response.status}）`;\n          }\n        } catch (textError) {\n          // テキスト読み取りも失敗した場合\n          console.error('レスポンス本文読み取りエラー:', textError);\n        }\n      }\n      throw new Error(errorMessage);\n    }\n  },\n  // 年度で従業員データを取得（実装済みエンドポイントを使用）\n  getEmployeesByYear: async year => {\n    console.log(`${year}年の従業員データを取得しています...`);\n    try {\n      // 特定の年の処理 (2024年以降はモックデータまたはローカルストレージから取得)\n      if (year >= 2024) {\n        console.log(`${year}年以降のデータはローカルストレージとモックデータを併用します`);\n        try {\n          // ローカルストレージからデータを取得\n          const storageKey = `EMPLOYEE_DATA_${year}`;\n          console.log(`ストレージキー(読み込み時): ${storageKey}`);\n          const savedData = localStorage.getItem(storageKey);\n\n          // サンプルデータを準備（index.tsxと同じ内容）\n          const sampleEmployees = [{\n            id: 1,\n            no: 1,\n            employee_id: '1001',\n            name: '山田 太郎',\n            disability_type: '身体障害',\n            disability: '視覚',\n            grade: '1級',\n            hire_date: '2020/04/01',\n            status: '在籍',\n            hc: 1,\n            monthlyStatus: Array(12).fill(1),\n            // 在籍状態なので全て1に設定\n            memo: '',\n            count: 0,\n            fiscal_year: year\n          }, {\n            id: 2,\n            no: 2,\n            employee_id: '2222',\n            name: '鈴木 花子',\n            disability_type: '身体障害',\n            disability: '聴覚',\n            grade: '4級',\n            hire_date: '2020/04/01',\n            status: '在籍',\n            hc: 0.5,\n            monthlyStatus: Array(12).fill(0.5),\n            // 在籍状態なので全て0.5に設定\n            memo: '',\n            count: 0,\n            fiscal_year: year\n          }, {\n            id: 3,\n            no: 3,\n            employee_id: '3333',\n            name: '佐藤 一郎',\n            disability_type: '知的障害',\n            disability: '',\n            grade: 'B',\n            hire_date: '2020/04/01',\n            status: '在籍',\n            hc: 1,\n            monthlyStatus: Array(12).fill(1),\n            // 在籍状態なので全て1に設定\n            memo: '',\n            count: 0,\n            fiscal_year: year\n          }];\n          if (savedData) {\n            // ローカルストレージのデータが存在する場合\n            const savedEmployees = JSON.parse(savedData);\n            // オブジェクトから配列に変換\n            const employeesArray = Object.values(savedEmployees);\n            if (employeesArray.length > 0) {\n              console.log(`${year}年の従業員データをローカルストレージから取得しました:`, employeesArray);\n\n              // ローカルストレージのデータのみを使用する（サンプルデータは結合しない）\n              // 全データの詳細をログ出力（デバッグ用）\n              console.log(`${year}年のローカルストレージからのデータ(${employeesArray.length}件):`, employeesArray);\n              return {\n                data: {\n                  employees: employeesArray\n                }\n              };\n            }\n          }\n\n          // ローカルストレージにデータがない場合はサンプルデータを返す\n          console.log(`${year}年のローカルストレージデータが見つからないため、サンプルデータを返します`);\n          return {\n            data: {\n              employees: sampleEmployees\n            }\n          };\n        } catch (storageError) {\n          console.error('ローカルストレージ読み取りエラー:', storageError);\n          // エラー時はサンプルデータを返す\n          return {\n            data: {\n              employees: []\n            }\n          };\n        }\n      }\n\n      // axios スタイルのクライアントを使用（エンハンスドクライアントが理想的）\n      const response = await fetch(`/api/employees?year=${year}`, {\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n\n      // 共通の安全なレスポンス処理を使用\n      const data = await reportApi.safeResponseParser(response);\n      return {\n        data: {\n          employees: data\n        }\n      };\n    } catch (error) {\n      console.error(`従業員データ取得エラー: ${error}`);\n      // エラー発生時は空のデータを返す\n      return {\n        data: {\n          employees: []\n        }\n      };\n    }\n  },\n  // 従業員データを更新（実装済みエンドポイントを使用）\n  updateEmployeeData: async (year, employeeId, data) => {\n    console.log(`${year}年の従業員ID:${employeeId}を更新しています...`, data);\n    try {\n      // 共通の月次ステータス処理関数\n      const processMonthlyStatus = inputData => {\n        const processedData = {\n          ...inputData\n        };\n        if (inputData.monthlyStatus) {\n          try {\n            // 文字列の場合はJSONパースする\n            if (typeof inputData.monthlyStatus === 'string') {\n              processedData.monthlyStatus = JSON.parse(inputData.monthlyStatus);\n            }\n            // それ以外の場合はそのまま使用\n          } catch (e) {\n            processedData.monthlyStatus = inputData.monthlyStatus;\n          }\n        }\n        return processedData;\n      };\n\n      // 2024年以降のデータは特別処理 - 実際のAPIは呼び出さずにモック応答を返す\n      if (year >= 2024) {\n        console.log(`${year}年の従業員データはクライアント側で更新します（APIは呼び出しません）`);\n\n        // データの加工処理（月次ステータスのJSON化など）\n        const updateData = processMonthlyStatus(data);\n\n        // ローカルストレージにデータを保存\n        try {\n          // 現在の保存データを取得\n          const storageKey = `EMPLOYEE_DATA_${year}`;\n          let savedEmployees = {};\n          try {\n            const savedData = localStorage.getItem(storageKey);\n            if (savedData) {\n              savedEmployees = JSON.parse(savedData);\n            }\n          } catch (e) {\n            console.error('ローカルストレージの読み取りエラー:', e);\n          }\n\n          // 既存データがある場合は、元のデータと新しいデータをマージする\n          let existingEmployee = savedEmployees[employeeId] || {};\n\n          // 従業員データを更新（既存データとマージ）\n          savedEmployees = {\n            ...savedEmployees,\n            [employeeId]: {\n              ...existingEmployee,\n              // 既存のデータをベースにする\n              id: employeeId,\n              ...updateData,\n              // 新しいデータで上書き\n              fiscal_year: year,\n              updated_at: new Date().toISOString()\n            }\n          };\n          console.log(`更新するデータ:`, savedEmployees[employeeId]);\n\n          // ローカルストレージに保存\n          localStorage.setItem(storageKey, JSON.stringify(savedEmployees));\n          console.log(`従業員ID=${employeeId}のデータをローカルストレージに保存しました`);\n        } catch (storageError) {\n          console.error('ローカルストレージへの保存エラー:', storageError);\n        }\n\n        // モックレスポンスを返す\n        return {\n          success: true,\n          message: '従業員データをクライアント側で更新しました',\n          employee: {\n            id: employeeId,\n            ...updateData,\n            fiscal_year: year\n          }\n        };\n      }\n\n      // 実際のAPI呼び出し（2023年以前のデータ）\n      const updateData = processMonthlyStatus(data);\n      const response = await fetch(`/api/employees/${employeeId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify(updateData)\n      });\n\n      // 共通の安全なレスポンス処理を使用\n      const responseData = await reportApi.safeResponseParser(response);\n      return responseData;\n    } catch (error) {\n      console.error(`従業員更新エラー: ${error}`);\n\n      // 2024年以降のデータの場合は、エラーをスローする代わりにモックレスポンスを返す\n      if (year >= 2024) {\n        console.log(`エラーが発生しましたが、${year}年の従業員はクライアント側で更新します`);\n        return {\n          success: true,\n          message: 'データベース接続エラーが発生しましたが、クライアント側で更新しました',\n          employee: {\n            id: employeeId,\n            ...data,\n            fiscal_year: year\n          }\n        };\n      }\n      throw error;\n    }\n  },\n  // 従業員データを作成（実装済みエンドポイントを使用）\n  createEmployeeDetail: async (year, _month, data) => {\n    // 月パラメータは不要なので使用しない（APIとの整合性のために残す）\n    console.log(`${year}年に新規従業員を追加しています...`, data);\n    try {\n      // 入力データの検証\n      if (!data.name) {\n        throw new Error('社員名は必須項目です');\n      }\n      if (!data.employee_id) {\n        throw new Error('社員IDは必須項目です');\n      }\n\n      // 2024年以降のデータは特別処理 - 実際のAPIは呼び出さずにモック応答を返す\n      if (year >= 2024) {\n        console.log(`${year}年のデータは直接作成します（APIは呼び出しません）`);\n\n        // 一貫した仮ID生成 - タイムスタンプベースでより予測可能に\n        const timestamp = new Date().getTime();\n        const randomPart = Math.floor(Math.random() * 1000);\n        const tempId = parseInt(`${timestamp % 100000}${randomPart}`.substring(0, 6));\n\n        // 月次ステータスの初期化を確実に実施\n        const employeeData = {\n          ...data,\n          monthlyStatus: Array.isArray(data.monthlyStatus) ? data.monthlyStatus : Array(12).fill('')\n        };\n\n        // データの欠損フィールドを初期化\n        if (!employeeData.disability_type) employeeData.disability_type = '';\n        if (!employeeData.disability) employeeData.disability = '';\n        if (!employeeData.grade) employeeData.grade = '';\n        if (!employeeData.memo) employeeData.memo = '';\n\n        // 新規作成した従業員データをローカルストレージに保存\n        try {\n          // 現在の保存データを取得\n          const storageKey = `EMPLOYEE_DATA_${year}`;\n          let savedEmployees = {};\n          try {\n            const savedData = localStorage.getItem(storageKey);\n            if (savedData) {\n              savedEmployees = JSON.parse(savedData);\n            }\n          } catch (e) {\n            console.error('ローカルストレージの読み取りエラー:', e);\n          }\n\n          // ユニークなIDを生成 (既存IDの最大値 + 1 または 10000以上の値)\n          // 既存のIDをすべて取得\n          const existingIds = Object.keys(savedEmployees).map(id => parseInt(id, 10));\n          // 最低でも10000以上の値を使う（サンプルデータのIDとの衝突を避けるため）\n          const minId = Math.max(...existingIds, 10000);\n          // さらに大きい値を使うためにタイムスタンプと組み合わせる\n          const customId = Math.max(tempId, minId + 1);\n\n          // 既存の従業員からno値の最大値を見つける\n          // ローカルストレージ内の既存従業員からnoを取得\n          const existingNos = Object.values(savedEmployees).map(emp => emp.no || 0).filter(no => !isNaN(no));\n\n          // 最大のNo値を検索\n          const maxNo = existingNos.length > 0 ? Math.max(...existingNos) : 0;\n\n          // 次のno番号を生成 (最大値 + 1)\n          const nextNo = maxNo + 1;\n          console.log(`新規従業員のNo生成: 既存No=${existingNos.join(',')}, 最大No=${maxNo}, 次のNo=${nextNo}`);\n          const newEmployee = {\n            ...employeeData,\n            id: customId,\n            no: nextNo,\n            // 連番のNo値を設定\n            fiscal_year: year,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n            // サンプルと区別するためのフラグ\n            isCustom: true\n          };\n\n          // 新しい従業員データをログ出力（デバッグ用）\n          console.log(`新規作成する従業員データ:`, newEmployee);\n\n          // 既存のデータに新しい従業員を追加\n          savedEmployees = {\n            ...savedEmployees,\n            [customId]: newEmployee\n          };\n\n          // ローカルストレージに保存\n          localStorage.setItem(storageKey, JSON.stringify(savedEmployees));\n          console.log(`新規従業員ID=${customId}のデータをローカルストレージに保存しました`);\n\n          // モックレスポンスを返す - 実際のAPIレスポンス形式に合わせる\n          return {\n            success: true,\n            message: '従業員データをクライアント側で作成しました',\n            employee: newEmployee // 完全なオブジェクトを返す\n          };\n        } catch (storageError) {\n          console.error('ローカルストレージへの保存エラー:', storageError);\n          throw storageError; // エラーを再スローして上位でキャッチできるようにする\n        }\n      }\n\n      // 実際のAPI呼び出し（2023年以前のデータ）\n      try {\n        const response = await fetch(`/api/employees`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          },\n          body: JSON.stringify({\n            ...data,\n            fiscal_year: year,\n            // 月次ステータスが未定義の場合は空の配列を設定\n            monthlyStatus: data.monthlyStatus || Array(12).fill('')\n          })\n        });\n\n        // 共通の安全なレスポンス処理を使用\n        const responseData = await reportApi.safeResponseParser(response);\n        return responseData;\n      } catch (apiError) {\n        console.error(`API呼び出しエラー: ${apiError}`);\n\n        // 2023年以前のデータではAPIエラーを再スロー\n        if (year < 2024) {\n          throw apiError;\n        }\n\n        // 2024年以降のデータの場合は、APIエラーが発生してもクライアント側でデータを作成\n        console.warn(`APIエラーが発生しましたが、${year}年のデータはクライアント側で作成します`);\n        const timestamp = new Date().getTime();\n        const randomPart = Math.floor(Math.random() * 1000);\n        const tempId = parseInt(`${timestamp % 100000}${randomPart}`.substring(0, 6));\n        return {\n          success: true,\n          message: 'データベース接続エラーが発生しましたが、クライアント側でデータを作成しました',\n          employee: {\n            ...data,\n            id: tempId,\n            fiscal_year: year,\n            monthlyStatus: data.monthlyStatus || Array(12).fill('')\n          }\n        };\n      }\n    } catch (error) {\n      console.error(`従業員作成エラー: ${error}`);\n\n      // 2024年以降のデータの場合は、エラーをスローする代わりにモックレスポンスを返す\n      if (year >= 2024) {\n        const timestamp = new Date().getTime();\n        const randomPart = Math.floor(Math.random() * 1000);\n        const tempId = parseInt(`${timestamp % 100000}${randomPart}`.substring(0, 6));\n        console.log(`エラーが発生しましたが、${year}年のデータはクライアント側で作成します`);\n        return {\n          success: true,\n          message: 'データベース接続エラーが発生しましたが、クライアント側でデータを作成しました',\n          employee: {\n            ...data,\n            id: tempId,\n            fiscal_year: year,\n            monthlyStatus: data.monthlyStatus || Array(12).fill('')\n          }\n        };\n      }\n      throw error;\n    }\n  },\n  // 従業員データを削除（実装済みエンドポイントを使用）\n  deleteEmployeeData: async (year, employeeId) => {\n    console.log(`${year}年の従業員ID:${employeeId}を削除しています...`);\n    try {\n      // 2024年以降のデータは特別処理 - クライアント側での削除のみ\n      if (year >= 2024) {\n        console.log(`${year}年の従業員データはクライアント側で削除します（APIは呼び出しません）`);\n\n        // 将来的に、ローカルストレージから削除する機能を追加可能\n\n        return {\n          success: true,\n          message: '従業員データをクライアント側で削除しました'\n        };\n      }\n\n      // 実際のAPI呼び出し（2023年以前のデータ）\n      const response = await fetch(`/api/employees/${employeeId}?fiscal_year=${year}`, {\n        method: 'DELETE',\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n\n      // 共通の安全なレスポンス処理を使用\n      const responseData = await reportApi.safeResponseParser(response);\n      return responseData;\n    } catch (error) {\n      console.error(`従業員削除エラー: ${error}`);\n\n      // 2024年以降のデータの場合は、エラーをスローする代わりに成功レスポンスを返す\n      if (year >= 2024) {\n        console.log(`エラーが発生しましたが、${year}年の従業員はクライアント側で削除します`);\n        return {\n          success: true,\n          message: 'データベース接続エラーが発生しましたが、クライアント側で削除しました'\n        };\n      }\n      throw error;\n    }\n  },\n  handleApiError: error => {\n    // HTML応答のエラー（Expressサーバーのクラッシュやプロキシエラーなど）\n    if (error.message && error.message.includes('APIがHTMLを返しました')) {\n      return 'サーバーエラーが発生しました。管理者に連絡してください。';\n    }\n\n    // 500エラー（サーバー内部エラー）\n    if (error.message && error.message.includes('API error: 500')) {\n      return 'サーバー内部エラーが発生しました。しばらく待ってから再試行してください。';\n    }\n\n    // 404エラー（リソースが見つからない）\n    if (error.message && error.message.includes('API error: 404')) {\n      return '指定されたデータが見つかりません。データが削除されたか、権限がない可能性があります。';\n    }\n\n    // 401/403エラー（認証/認可エラー）\n    if (error.message && (error.message.includes('API error: 401') || error.message.includes('API error: 403'))) {\n      return '権限がないか、セッションが期限切れになっています。再ログインしてください。';\n    }\n\n    // 400エラー（不正なリクエスト）\n    if (error.message && error.message.includes('API error: 400')) {\n      return '入力データに問題があります。入力内容を確認してください。';\n    }\n\n    // ネットワーク関連エラー\n    if (error.message && error.message.includes('Network Error')) {\n      return 'ネットワーク接続エラーが発生しました。インターネット接続を確認してください。';\n    }\n\n    // タイムアウトエラー\n    if (error.message && error.message.includes('timeout')) {\n      return 'リクエストがタイムアウトしました。サーバーが混雑しているか、ネットワーク速度が遅い可能性があります。';\n    }\n\n    // 2024年以降特有のエラー\n    if (error.message && error.message.includes('2024年以降のデータ')) {\n      return '将来年度のデータのため、現在はローカルで処理されています。';\n    }\n\n    // JSON解析エラー\n    if (error.message && (error.message.includes('JSON') || error.message.includes('解析'))) {\n      return 'データ形式エラーが発生しました。管理者に連絡してください。';\n    }\n\n    // その他のエラー\n    return `エラーが発生しました: ${error.message || '不明なエラー'}`;\n  }\n};\n\n// 親コンポーネントから受け取る props の型定義\n\n// 従業員データのデフォルト値\nconst defaultEmployee = {\n  no: 0,\n  employee_id: '',\n  name: '',\n  disability_type: '',\n  disability: '',\n  grade: '',\n  hire_date: new Date().toISOString().split('T')[0].replace(/-/g, '/'),\n  status: '在籍',\n  hc: 1,\n  // デフォルトのHC値を1に設定\n  monthlyStatus: Array(12).fill(''),\n  memo: '',\n  count: 0\n};\n\n// EmployeesTabコンポーネント\nconst EmployeesTab = ({\n  employees = [],\n  onEmployeeChange = () => {},\n  summaryData = {},\n  onRefreshData,\n  isEditing = false,\n  onToggleEditMode,\n  onSaveSuccess = () => {},\n  editingStyles = {},\n  buttonStyles = {},\n  onYearChange,\n  onEmployeesUpdate\n}) => {\n  _s();\n  var _localEmployees$, _ref9, _inputValues11, _ref10, _inputValues12, _ref11, _inputValues13, _ref12, _inputValues14, _ref13, _inputValues15, _ref14, _inputValues16, _ref15, _inputValues17, _inputValues18, _ref16, _inputValues20;\n  console.log('EmployeesTab マウント - 受け取った従業員データ:', employees);\n\n  // 年月コンテキストから現在の年と月を取得\n  const {\n    fiscalYear,\n    month,\n    setFiscalYear\n  } = useYearMonth();\n\n  // 内部編集状態\n  const [internalIsEditing, setInternalIsEditing] = useState(false);\n\n  // 実際に使用する編集状態\n  const actualIsEditing = isEditing || internalIsEditing;\n\n  // ローカルの従業員データ\n  const [localEmployees, setLocalEmployees] = useState([]);\n\n  // 元の従業員データを保持するための状態（編集キャンセル用）\n  const [originalEmployees, setOriginalEmployees] = useState([]);\n\n  // 選択状態の管理\n  const [selectAll, setSelectAll] = useState(false);\n  const [selectedCount, setSelectedCount] = useState(0);\n\n  // 新規行追加モード用の状態\n  const [isAddingNewRow, setIsAddingNewRow] = useState(false);\n  const [newRowData, setNewRowData] = useState({\n    ...defaultEmployee\n  });\n\n  // エラーメッセージ状態\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  // 成功メッセージ状態\n  const [successMessage, setSuccessMessage] = useState(null);\n\n  // ローディング状態\n  const [isLoading, setIsLoading] = useState(false);\n\n  // CSVインポートモーダルの状態\n  const [isCSVImportModalOpen, setIsCSVImportModalOpen] = useState(false);\n\n  // 入力状態管理用のローカルstate\n  const [inputValues, setInputValues] = useState({});\n\n  // 月名の配列\n  const months = ['4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月', '1月', '2月', '3月'];\n\n  // 月番号の配列（会計年度順）\n  const monthNumbers = [4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3];\n\n  // 入力フィールドの参照を保持\n  const inputRefs = useRef({});\n\n  // キーボードナビゲーションハンドラー\n  const handleKeyDown = useCallback((event, currentId) => {\n    const {\n      key\n    } = event;\n\n    // 矢印キーが押された場合\n    if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Tab'].includes(key)) {\n      event.preventDefault(); // デフォルトのタブ移動を防止\n\n      // 現在の入力要素のIDから、行、列情報を解析\n      const [idPart, fieldPart] = currentId.split('-');\n\n      // 移動先の要素IDを決定\n      let nextId = '';\n\n      // 月次ステータスフィールドかどうかの判定\n      const isMonthlyField = fieldPart && fieldPart.startsWith('monthlyStatus');\n      const currentMonthIndex = isMonthlyField ? parseInt(fieldPart.split('-')[1]) : -1;\n      const employeeIds = localEmployees.map(emp => emp.id.toString());\n      const newRowIdPrefix = 'new';\n      const isNewRow = idPart === newRowIdPrefix;\n\n      // フィールド順序（月次ステータス以外）\n      const fieldsOrder = ['employee_id', 'name', 'disability_type', 'disability', 'grade', 'hire_date', 'status', 'memo'];\n      switch (key) {\n        case 'ArrowUp':\n          if (isMonthlyField) {\n            // 上の従業員の同じ月フィールドに移動\n            const currentIdIndex = isNewRow ? localEmployees.length : employeeIds.indexOf(idPart);\n            if (currentIdIndex > 0) {\n              // 上の行の同じ月フィールドに移動\n              nextId = `${employeeIds[currentIdIndex - 1]}-monthlyStatus-${currentMonthIndex}`;\n            }\n          } else {\n            // 上の従業員の同じフィールドに移動\n            const currentIdIndex = isNewRow ? localEmployees.length : employeeIds.indexOf(idPart);\n            if (currentIdIndex > 0) {\n              // 上の行の同じフィールドに移動\n              nextId = `${employeeIds[currentIdIndex - 1]}-${fieldPart}`;\n            }\n          }\n          break;\n        case 'ArrowDown':\n          if (isMonthlyField) {\n            // 下の従業員の同じ月フィールドに移動\n            const currentIdIndex = isNewRow ? localEmployees.length : employeeIds.indexOf(idPart);\n            if (currentIdIndex < localEmployees.length - 1) {\n              // 下の行の同じ月フィールドに移動\n              nextId = `${employeeIds[currentIdIndex + 1]}-monthlyStatus-${currentMonthIndex}`;\n            } else if (currentIdIndex === localEmployees.length - 1 && isAddingNewRow) {\n              // 新規行の同じ月フィールドに移動\n              nextId = `new-monthlyStatus-${currentMonthIndex}`;\n            }\n          } else {\n            // 下の従業員の同じフィールドに移動\n            const currentIdIndex = isNewRow ? localEmployees.length : employeeIds.indexOf(idPart);\n            if (currentIdIndex < localEmployees.length - 1) {\n              // 下の行の同じフィールドに移動\n              nextId = `${employeeIds[currentIdIndex + 1]}-${fieldPart}`;\n            } else if (currentIdIndex === localEmployees.length - 1 && isAddingNewRow) {\n              // 新規行の同じフィールドに移動\n              nextId = `new-${fieldPart}`;\n            }\n          }\n          break;\n        case 'ArrowLeft':\n          if (isMonthlyField) {\n            // 左の月フィールドに移動\n            if (currentMonthIndex > 0) {\n              nextId = `${idPart}-monthlyStatus-${currentMonthIndex - 1}`;\n            } else {\n              // 月次ステータスの最初の列から左に移動する場合は通常フィールドの最後へ\n              nextId = `${idPart}-status`;\n            }\n          } else {\n            // 通常フィールドの場合、左のフィールドに移動\n            const currentFieldIndex = fieldsOrder.indexOf(fieldPart);\n            if (currentFieldIndex > 0) {\n              nextId = `${idPart}-${fieldsOrder[currentFieldIndex - 1]}`;\n            }\n          }\n          break;\n        case 'ArrowRight':\n        case 'Tab':\n          if (isMonthlyField) {\n            // 右の月フィールドに移動\n            if (currentMonthIndex < 11) {\n              nextId = `${idPart}-monthlyStatus-${currentMonthIndex + 1}`;\n            } else {\n              // 月次ステータスの最後の列から右に移動する場合はメモフィールドへ\n              nextId = `${idPart}-memo`;\n            }\n          } else {\n            // 通常フィールドの場合、右のフィールドに移動\n            const currentFieldIndex = fieldsOrder.indexOf(fieldPart);\n            if (currentFieldIndex < fieldsOrder.length - 1) {\n              nextId = `${idPart}-${fieldsOrder[currentFieldIndex + 1]}`;\n            } else if (currentFieldIndex === fieldsOrder.length - 1) {\n              // メモフィールドの次は月次ステータスの最初へ\n              nextId = `${idPart}-monthlyStatus-0`;\n            }\n          }\n          break;\n      }\n\n      // 次の入力フィールドにフォーカスを移す\n      if (nextId && inputRefs.current[nextId]) {\n        var _inputRefs$current$ne;\n        (_inputRefs$current$ne = inputRefs.current[nextId]) === null || _inputRefs$current$ne === void 0 ? void 0 : _inputRefs$current$ne.focus();\n      }\n    }\n  }, [localEmployees, isAddingNewRow]);\n\n  // 前年度の在籍中の従業員データを現在の年度にコピーする関数\n  const copyActiveEmployeesFromPreviousYear = async currentYear => {\n    try {\n      // 前年度のStorageKeyを生成\n      const prevYear = currentYear - 1;\n      const prevYearStorageKey = `EMPLOYEE_DATA_${prevYear}`;\n\n      // 現在の年度のStorageKeyを生成\n      const currentYearStorageKey = `EMPLOYEE_DATA_${currentYear}`;\n\n      // 現在の年度のデータを取得\n      let currentYearData = {};\n      try {\n        const savedCurrentYearData = localStorage.getItem(currentYearStorageKey);\n        if (savedCurrentYearData) {\n          currentYearData = JSON.parse(savedCurrentYearData);\n        }\n      } catch (e) {\n        console.error('現在年度のデータ読み取りエラー:', e);\n      }\n\n      // 前年度のデータが存在するか確認\n      const savedPrevYearData = localStorage.getItem(prevYearStorageKey);\n      if (!savedPrevYearData) {\n        console.log(`${prevYear}年のデータが存在しないため、引き継ぐデータはありません`);\n        return 0;\n      }\n      try {\n        // 前年度のデータを解析\n        const prevYearEmployees = JSON.parse(savedPrevYearData);\n\n        // 在籍中または休職中の従業員のみをフィルタリング\n        const activeEmployees = Object.values(prevYearEmployees).filter(emp => emp.status === '在籍' || emp.status === '休職');\n        if (activeEmployees.length === 0) {\n          console.log(`${prevYear}年に在籍中または休職中の従業員がいないため、引き継ぐデータはありません`);\n          return 0;\n        }\n\n        // 在籍中の従業員を現在の年度にコピー\n        let newEmployeesCount = 0;\n\n        // 最初に、現在の年度のデータから最大IDを見つける\n        const existingIds = Object.keys(currentYearData).map(id => parseInt(id));\n        let nextId = existingIds.length > 0 ? Math.max(...existingIds) + 1 : 10000; // 新しいIDの開始点\n\n        // 在籍中の従業員を現在の年度にコピー\n        activeEmployees.forEach(emp => {\n          // IDの衝突を避けるための新しいID生成\n          const newId = nextId++;\n\n          // 従業員データを新しい年度用にコピー\n          const copiedEmployee = {\n            ...emp,\n            id: newId,\n            fiscal_year: currentYear,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n          };\n\n          // 現在の年度のデータに追加\n          currentYearData[newId] = copiedEmployee;\n          newEmployeesCount++;\n        });\n\n        // 更新されたデータをローカルストレージに保存\n        if (newEmployeesCount > 0) {\n          localStorage.setItem(currentYearStorageKey, JSON.stringify(currentYearData));\n          console.log(`${prevYear}年から${currentYear}年へ${newEmployeesCount}件の従業員データを引き継ぎました`);\n          return newEmployeesCount;\n        }\n      } catch (e) {\n        console.error('データの引き継ぎ中にエラーが発生しました:', e);\n      }\n    } catch (error) {\n      console.error('従業員データの引き継ぎ中にエラーが発生しました:', error);\n    }\n    return 0;\n  };\n\n  // 年度変更時に従業員データを取得する関数\n  const fetchEmployeesByYear = useCallback(async year => {\n    try {\n      var _response$data;\n      setIsLoading(true);\n      setErrorMessage(null);\n      console.log(`${year}年の従業員データを取得中...`);\n\n      // 2024年以降のデータで、ローカルストレージを先にチェック\n      if (year >= 2024) {\n        const storageKey = `EMPLOYEE_DATA_${year}`;\n        try {\n          const savedData = localStorage.getItem(storageKey);\n          if (savedData) {\n            // localStorage にデータが存在する場合は、それを優先して使用\n            const savedEmployees = JSON.parse(savedData);\n\n            // オブジェクトから配列に変換\n            const employeesArray = Object.values(savedEmployees);\n            if (employeesArray.length > 0) {\n              console.log(`${year}年の従業員データをローカルストレージから読み込みました:`, employeesArray.length, '件');\n              const processedEmployees = employeesArray.map(emp => ({\n                ...emp,\n                employee_id: typeof emp.employee_id === 'number' ? String(emp.employee_id) : emp.employee_id,\n                disability_type: emp.disability_type || '',\n                disability: emp.disability || '',\n                grade: emp.grade || '',\n                status: emp.status || '在籍',\n                hc: emp.hc !== undefined ? emp.hc : 1,\n                monthlyStatus: Array.isArray(emp.monthlyStatus) ? emp.monthlyStatus : Array(12).fill('')\n              }));\n              setLocalEmployees(processedEmployees);\n              setOriginalEmployees(JSON.parse(JSON.stringify(processedEmployees)));\n              setSuccessMessage(`${year}年のデータを読み込みました（${processedEmployees.length}件）`);\n              setTimeout(() => setSuccessMessage(null), 3000);\n              setIsLoading(false);\n              return;\n            }\n          }\n\n          // データが存在しない場合、前年度からデータを引き継ぐ\n          if (!savedData || savedData && Object.keys(JSON.parse(savedData) || {}).length === 0) {\n            console.log(`${year}年のデータが存在しないため、前年度からデータを引き継ぎを試みます`);\n\n            // 前年度からデータを引き継ぐ\n            const copiedCount = (await copyActiveEmployeesFromPreviousYear(year)) || 0;\n            if (copiedCount > 0) {\n              // 引き継ぎに成功した場合、改めてローカルストレージから読み込み直す\n              const updatedData = localStorage.getItem(storageKey);\n              if (updatedData) {\n                const updatedEmployees = JSON.parse(updatedData);\n                const updatedArray = Object.values(updatedEmployees);\n                if (updatedArray.length > 0) {\n                  const processedEmployees = updatedArray.map(emp => ({\n                    ...emp,\n                    employee_id: typeof emp.employee_id === 'number' ? String(emp.employee_id) : emp.employee_id,\n                    disability_type: emp.disability_type || '',\n                    disability: emp.disability || '',\n                    grade: emp.grade || '',\n                    status: emp.status || '在籍',\n                    hc: emp.hc !== undefined ? emp.hc : 1,\n                    monthlyStatus: Array.isArray(emp.monthlyStatus) ? emp.monthlyStatus : Array(12).fill('')\n                  }));\n                  setLocalEmployees(processedEmployees);\n                  setOriginalEmployees(JSON.parse(JSON.stringify(processedEmployees)));\n                  setSuccessMessage(`前年度から${copiedCount}件の従業員データを引き継ぎました`);\n                  setTimeout(() => setSuccessMessage(null), 3000);\n                  setIsLoading(false);\n                  return;\n                }\n              }\n            }\n          }\n        } catch (e) {\n          console.error('ローカルストレージ読み取りエラー:', e);\n        }\n      }\n\n      // ローカルストレージにデータがない場合のみAPIから取得（2024年以降は空データが返される可能性が高い）\n      const response = await reportApi.getEmployeesByYear(year);\n      if (response !== null && response !== void 0 && (_response$data = response.data) !== null && _response$data !== void 0 && _response$data.employees) {\n        console.log(`${year}年の従業員データを取得成功:`, response.data.employees);\n\n        // データの有無を確認\n        if (!Array.isArray(response.data.employees) || response.data.employees.length === 0) {\n          console.log(`${year}年のAPIデータは空です。空の配列を使用します。`);\n          setLocalEmployees([]);\n          setOriginalEmployees([]);\n          setSuccessMessage(`${year}年のデータがまだ作成されていません。新規追加ができます。`);\n          setTimeout(() => setSuccessMessage(null), 3000);\n          setIsLoading(false);\n          return;\n        }\n        const processedEmployees = response.data.employees.map(emp => ({\n          ...emp,\n          employee_id: typeof emp.employee_id === 'number' ? String(emp.employee_id) : emp.employee_id,\n          disability_type: emp.disability_type || '',\n          disability: emp.disability || '',\n          grade: emp.grade || '',\n          status: emp.status || '在籍',\n          hc: emp.hc !== undefined ? emp.hc : 1,\n          // HCが未定義の場合は1をデフォルト値に設定\n          monthlyStatus: (() => {\n            if (Array.isArray(emp.monthlyStatus)) {\n              return emp.monthlyStatus;\n            } else if (typeof emp.monthly_status === 'string') {\n              try {\n                return JSON.parse(emp.monthly_status);\n              } catch (e) {\n                return Array(12).fill('');\n              }\n            } else {\n              return Array(12).fill('');\n            }\n          })()\n        }));\n        setLocalEmployees(processedEmployees);\n        setOriginalEmployees(JSON.parse(JSON.stringify(processedEmployees)));\n        if (processedEmployees.length > 0) {\n          setSuccessMessage(`${year}年のデータを読み込みました（${processedEmployees.length}件）`);\n          setTimeout(() => setSuccessMessage(null), 3000);\n        }\n      } else {\n        console.log(`${year}年の従業員データは空です`);\n        setLocalEmployees([]);\n        setOriginalEmployees([]);\n        setSuccessMessage(`${year}年のデータがまだ作成されていません。新規追加ができます。`);\n        setTimeout(() => setSuccessMessage(null), 3000);\n      }\n    } catch (error) {\n      console.error(`${year}年の従業員データ取得エラー:`, error);\n      // このエラーは発生しないはず (getEmployeesByYearでキャッチされる)\n      setErrorMessage(`予期せぬエラーが発生しました。管理者に連絡してください。`);\n      setLocalEmployees([]);\n      setOriginalEmployees([]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // useRefを通常のコンポーネントスコープで宣言（Hookのルールに従う）\n  const isInitialRender = useRef(true);\n\n  // fiscalYear変更時のデータ読み込み処理\n  useEffect(() => {\n    // fiscalYearが変更されたときのみ実行するために、先にフラグをチェック\n    console.log(`fiscalYear変更を検知: ${fiscalYear}`);\n\n    // データロード処理\n    const loadDataForFiscalYear = async () => {\n      // 統一されたストレージキー\n      const storageKey = `EMPLOYEE_DATA_${fiscalYear}`;\n      console.log('=== データロード開始 ===');\n      console.log('ローカルストレージから読み込み試行 - キー:', storageKey);\n      try {\n        // 古いキーと新しいキーの両方をチェック\n        const allKeys = Object.keys(localStorage);\n        const legacyKey = `employee_data_${fiscalYear}`;\n        let savedData = localStorage.getItem(storageKey);\n\n        // 新しいキーで見つからなければ古いキーを確認\n        if (!savedData && allKeys.includes(legacyKey)) {\n          console.log(`古いフォーマットのキー ${legacyKey} からデータを読み込みます`);\n          savedData = localStorage.getItem(legacyKey);\n\n          // データが見つかれば新しいキーに移行\n          if (savedData) {\n            console.log('古いキーから新しいキーにデータを移行します');\n            localStorage.setItem(storageKey, savedData);\n            // 安全を確保するために今は古いキーは削除しない\n          }\n        }\n        console.log('取得されたデータ有無:', savedData ? 'あり' : 'なし');\n        if (savedData) {\n          const savedEmployees = JSON.parse(savedData);\n          // オブジェクトから配列に変換\n          const employeesArray = Object.values(savedEmployees);\n          if (employeesArray.length > 0) {\n            console.log(`${fiscalYear}年の${employeesArray.length}件のデータを読み込みました`);\n            const processedEmployees = employeesArray.map(emp => ({\n              ...emp,\n              employee_id: typeof emp.employee_id === 'number' ? String(emp.employee_id) : emp.employee_id,\n              disability_type: emp.disability_type || '',\n              disability: emp.disability || '',\n              grade: emp.grade || '',\n              status: emp.status || '在籍',\n              hc: emp.hc !== undefined ? emp.hc : 1,\n              monthlyStatus: Array.isArray(emp.monthlyStatus) ? emp.monthlyStatus : Array(12).fill('')\n            }));\n            setLocalEmployees(processedEmployees);\n            setOriginalEmployees(JSON.parse(JSON.stringify(processedEmployees)));\n\n            // 親コンポーネントにデータ変更を通知\n            if (onEmployeesUpdate) {\n              console.log('親コンポーネントに年度変更後のデータを通知:', processedEmployees.length, '件');\n              onEmployeesUpdate(processedEmployees);\n            }\n            setSuccessMessage(`${fiscalYear}年のデータを読み込みました（${processedEmployees.length}件）`);\n            setTimeout(() => setSuccessMessage(null), 3000);\n            return true; // データが見つかった場合はtrueを返す\n          }\n        }\n        return false; // データが見つからなかった場合はfalseを返す\n      } catch (e) {\n        console.error('fiscalYear変更時のデータ読み込みエラー:', e);\n        return false;\n      }\n    };\n\n    // 実際のデータロード処理の実行\n    loadDataForFiscalYear().then(foundInLocalStorage => {\n      if (!foundInLocalStorage) {\n        console.log('ローカルストレージにデータが見つからないため、別の取得方法を試みます');\n\n        // 2024年以降の場合は前年度からのデータ引き継ぎも試行\n        if (fiscalYear >= 2024) {\n          copyActiveEmployeesFromPreviousYear(fiscalYear).then(copiedCount => {\n            if (copiedCount > 0) {\n              console.log(`前年度から${copiedCount}件のデータを引き継ぎました`);\n              // 再度ローカルストレージから読み込む\n              loadDataForFiscalYear().then(success => {\n                if (!success) {\n                  // それでも読み込めない場合はAPIから取得\n                  fetchEmployeesByYear(fiscalYear);\n                }\n              });\n            } else {\n              // コピーできなかった場合はAPIから取得\n              fetchEmployeesByYear(fiscalYear);\n            }\n          });\n        } else {\n          // 2023年以前のデータはAPIから取得\n          fetchEmployeesByYear(fiscalYear);\n        }\n      }\n    });\n  }, [fiscalYear]); // fiscalYearが変わったときにのみ実行\n\n  // 従業員データ自動引き継ぎ関数\n  const inheritEmployeeData = (employee, fromYear, toYear) => {\n    console.log(`従業員 ID=${employee.id}, 名前=${employee.name} のデータ引き継ぎ処理を開始`);\n\n    // 状態チェック - 在籍状態でない場合は引き継がない\n    if (employee.status !== '在籍') {\n      console.log(`従業員 ID=${employee.id} の状態が「在籍」ではないため (${employee.status})、引き継ぎません`);\n      return null;\n    }\n\n    // 採用日のチェック\n    if (!employee.hire_date) {\n      console.log(`従業員 ID=${employee.id} の採用日が未設定のため、引き継ぎません`);\n      return null;\n    }\n    const hireDateParts = employee.hire_date.split('/');\n    if (hireDateParts.length !== 3) {\n      console.log(`従業員 ID=${employee.id} の採用日 ${employee.hire_date} のフォーマットが不正です`);\n      return null;\n    }\n    const hireYear = parseInt(hireDateParts[0]);\n    const hireMonth = parseInt(hireDateParts[1]);\n    const hireDay = parseInt(hireDateParts[2]);\n    console.log(`採用日: ${hireYear}/${hireMonth}/${hireDay}, 引継元年度: ${fromYear}, 引継先年度: ${toYear}`);\n\n    // 新しい年度のデータを作成\n    const newEmployee = {\n      ...employee,\n      fiscal_year: toYear,\n      // 年度を更新\n      inheritedFrom: fromYear,\n      // 引き継ぎ元情報を追加\n      _timestamp: new Date().toISOString() // タイムスタンプ更新\n    };\n    console.log(`${toYear}年度に従業員 ID=${employee.id} のデータを引き継ぎました`);\n    return newEmployee;\n  };\n\n  // 全従業員データの一括引き継ぎ処理\n  const bulkInheritEmployeeData = (employees, fromYear, toYear) => {\n    console.log(`\\n===== ${fromYear}年度から${toYear}年度への一括引き継ぎ処理 =====`);\n    const inheritedEmployees = [];\n    const skippedEmployees = [];\n    employees.forEach(employee => {\n      const inheritedEmployee = inheritEmployeeData(employee, fromYear, toYear);\n      if (inheritedEmployee) {\n        inheritedEmployees.push(inheritedEmployee);\n      } else {\n        skippedEmployees.push({\n          id: employee.id,\n          name: employee.name,\n          reason: \"状態が在籍でないか、採用日が無効\"\n        });\n      }\n    });\n    console.log(`引き継ぎ結果: 成功=${inheritedEmployees.length}件, スキップ=${skippedEmployees.length}件`);\n    return {\n      inheritedEmployees,\n      skippedEmployees\n    };\n  };\n\n  // 改良版データ引き継ぎ機能\n  const checkAndInheritEmployeeData = (fromYear, toYear) => {\n    console.log(`改良版従業員データの引き継ぎチェック開始: ${fromYear} → ${toYear}`);\n\n    // 前年度のデータを取得\n    const fromKey = `EMPLOYEE_DATA_${fromYear}`;\n    const fromData = localStorage.getItem(fromKey);\n    if (!fromData) {\n      console.log(`${fromYear}年度のデータが見つかりません`);\n      return {\n        success: false,\n        message: `${fromYear}年度のデータが見つかりません`\n      };\n    }\n\n    // 対象年度のデータを確認\n    const toKey = `EMPLOYEE_DATA_${toYear}`;\n    const toData = localStorage.getItem(toKey);\n\n    // データ形式を判定して処理\n    try {\n      // 前年度データを解析\n      const isFromObject = fromData.trim().startsWith('{');\n      let fromEmployees = [];\n      if (isFromObject) {\n        // オブジェクト形式の場合\n        const fromEmployeeObj = JSON.parse(fromData);\n        fromEmployees = Object.values(fromEmployeeObj);\n      } else {\n        // 配列形式の場合\n        fromEmployees = JSON.parse(fromData);\n      }\n      console.log(`${fromYear}年度の従業員数: ${fromEmployees.length}`);\n\n      // 対象年度データを解析\n      let toEmployees = [];\n      let toEmployeeObj = {};\n      if (toData) {\n        const isToObject = toData.trim().startsWith('{');\n        if (isToObject) {\n          toEmployeeObj = JSON.parse(toData);\n          toEmployees = Object.values(toEmployeeObj);\n        } else {\n          toEmployees = JSON.parse(toData);\n\n          // 配列からオブジェクトに変換\n          toEmployees.forEach(emp => {\n            if (emp && emp.id) {\n              toEmployeeObj[emp.id] = emp;\n            }\n          });\n        }\n        console.log(`${toYear}年度の従業員数: ${toEmployees.length}`);\n      } else {\n        console.log(`${toYear}年度のデータは存在しません。新規作成します。`);\n      }\n\n      // 前年度の在籍者をフィルタリング\n      const activeEmployees = fromEmployees.filter(emp => {\n        // 状態が「在籍」かを確認（複数の表記に対応）\n        return emp.status === '在籍' || emp.status === '雇用継続' || emp.employmentStatus === '在籍';\n      });\n      console.log(`引き継ぎ対象（在籍者）数: ${activeEmployees.length}`);\n\n      // 引き継ぎ処理\n      const inheritedEmployees = [];\n      const skippedEmployees = [];\n      activeEmployees.forEach(emp => {\n        // IDの重複チェック\n        const employeeId = emp.id;\n        const exists = toEmployeeObj[employeeId] !== undefined;\n        if (exists) {\n          console.log(`従業員ID=${employeeId}, 名前=${emp.name || '名前なし'} は既に${toYear}年度に存在するためスキップします`);\n          skippedEmployees.push({\n            id: employeeId,\n            name: emp.name || '名前なし',\n            reason: '既に存在'\n          });\n          return;\n        }\n\n        // 引き継ぎデータの作成\n        const inheritedEmployee = {\n          ...emp,\n          fiscal_year: toYear,\n          inheritedFrom: fromYear,\n          _timestamp: new Date().toISOString()\n        };\n\n        // 月次データをリセット\n        if (inheritedEmployee.monthlyStatus) {\n          inheritedEmployee.monthlyStatus = Array(12).fill('');\n        }\n        inheritedEmployees.push(inheritedEmployee);\n        toEmployeeObj[employeeId] = inheritedEmployee;\n      });\n\n      // 対象年度のデータを保存\n      if (inheritedEmployees.length > 0) {\n        localStorage.setItem(toKey, JSON.stringify(toEmployeeObj));\n        console.log(`${toYear}年度に${inheritedEmployees.length}件のデータを引き継ぎました`);\n      }\n      return {\n        success: true,\n        inheritedCount: inheritedEmployees.length,\n        skippedCount: skippedEmployees.length,\n        message: `${fromYear}年度から${toYear}年度へ${inheritedEmployees.length}件のデータを引き継ぎました（${skippedEmployees.length}件はスキップされました）`\n      };\n    } catch (error) {\n      console.error(`データ引き継ぎ処理でエラーが発生しました:`, error);\n      return {\n        success: false,\n        message: `データ引き継ぎ処理でエラーが発生しました: ${error instanceof Error ? error.message : String(error)}`\n      };\n    }\n  };\n\n  // 手動でデータ引き継ぎを実行する関数\n  const manualInheritData = (fromYear, toYear) => {\n    // バックアップの作成\n    try {\n      const fromKey = `EMPLOYEE_DATA_${fromYear}`;\n      const toKey = `EMPLOYEE_DATA_${toYear}`;\n      localStorage.setItem(`${fromKey}_BACKUP`, localStorage.getItem(fromKey) || '');\n      localStorage.setItem(`${toKey}_BACKUP`, localStorage.getItem(toKey) || '');\n      console.log(`バックアップを作成しました: ${fromKey}_BACKUP, ${toKey}_BACKUP`);\n    } catch (error) {\n      console.error(`バックアップ作成中にエラーが発生しました:`, error);\n    }\n\n    // データ引き継ぎの実行\n    const result = checkAndInheritEmployeeData(fromYear, toYear);\n    if (result.success) {\n      setSuccessMessage(result.message);\n      // データの再読み込み\n      fetchEmployeesByYear(fiscalYear);\n    } else {\n      setErrorMessage(result.message);\n    }\n    setTimeout(() => {\n      setSuccessMessage(null);\n      setErrorMessage(null);\n    }, 5000);\n    return result;\n  };\n\n  // 従業員データをDBから削除するスクリプト\n\n  // 1. 削除対象の従業員を確認する関数\n  const checkEmployeeToDelete = async employeeId => {\n    console.log(\"=== 削除対象の従業員確認 ===\");\n    try {\n      // 現在選択中の年度のデータを確認\n      const storageKey = `EMPLOYEE_DATA_${fiscalYear}`;\n      const allData = localStorage.getItem(storageKey);\n      if (!allData) {\n        console.log(`${fiscalYear}年度のデータが見つかりません`);\n        return null;\n      }\n\n      // データ形式に応じて処理\n      let employeeData = null;\n      const isObject = allData.trim().startsWith('{');\n      if (isObject) {\n        const data = JSON.parse(allData);\n        employeeData = data[employeeId];\n      } else {\n        const data = JSON.parse(allData);\n        employeeData = data.find(emp => emp.id === employeeId);\n      }\n      if (!employeeData) {\n        console.log(`従業員ID=${employeeId}が見つかりません`);\n        return null;\n      }\n\n      // 詳細ログ出力\n      console.log(\"=== 削除対象の従業員 ===\");\n      console.log({\n        ID: employeeData.id,\n        名前: employeeData.name,\n        社員ID: employeeData.employee_id,\n        障害区分: employeeData.disability_type,\n        状態: employeeData.status,\n        採用日: employeeData.hire_date\n      });\n      return employeeData;\n    } catch (error) {\n      console.error(\"従業員確認エラー:\", error);\n      return null;\n    }\n  };\n\n  // 2. 従業員データの削除を実行する関数\n  const deleteEmployeeFromDB = async employeeId => {\n    console.log(`\\n=== 従業員ID ${employeeId} の削除処理を開始 ===`);\n    try {\n      // まずはバックアップを作成\n      const backupResult = await createEmployeeBackup(employeeId);\n      if (!backupResult.success) {\n        return backupResult;\n      }\n\n      // トランザクション相当の処理 - まず関連データを確認\n\n      // 関連する月次データを確認\n      const hasRelatedMonthlyData = await checkRelatedMonthlyData(employeeId);\n      console.log(`関連する月次データ: ${hasRelatedMonthlyData ? 'あり' : 'なし'}`);\n\n      // 削除前にログを出力\n      const employeeToDelete = await checkEmployeeToDelete(employeeId);\n      if (!employeeToDelete) {\n        return {\n          success: false,\n          message: `従業員ID=${employeeId}が見つかりません`\n        };\n      }\n\n      // DBからデータを削除\n      const deleteResult = await reportApi.deleteEmployeeData(fiscalYear, employeeId);\n      console.log(\"API削除結果:\", deleteResult);\n      if (deleteResult && deleteResult.success) {\n        // LocalStorageからも削除\n        await deleteEmployeeFromLocalStorage(employeeId);\n\n        // UIの更新（既存の機能を使用）\n        setLocalEmployees(prev => prev.filter(emp => emp.id !== employeeId));\n        setOriginalEmployees(prev => prev.filter(emp => emp.id !== employeeId));\n        return {\n          success: true,\n          message: `従業員ID=${employeeId}を削除しました`,\n          backupPath: backupResult.backupPath\n        };\n      }\n      return {\n        success: false,\n        message: \"削除処理に失敗しました\"\n      };\n    } catch (error) {\n      console.error(\"削除エラー:\", error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : String(error)\n      };\n    }\n  };\n\n  // 3. LocalStorageから従業員データを削除する関数\n  const deleteEmployeeFromLocalStorage = async employeeId => {\n    try {\n      const storageKey = `EMPLOYEE_DATA_${fiscalYear}`;\n      const data = localStorage.getItem(storageKey);\n      if (!data) {\n        console.log(`${fiscalYear}年度のデータが見つかりません`);\n        return false;\n      }\n\n      // データ形式に応じて処理\n      const isObject = data.trim().startsWith('{');\n      if (isObject) {\n        // オブジェクト形式\n        const employeeData = JSON.parse(data);\n        if (employeeData[employeeId]) {\n          // 該当する従業員データを削除\n          delete employeeData[employeeId];\n          localStorage.setItem(storageKey, JSON.stringify(employeeData));\n          console.log(`LocalStorage(オブジェクト形式)から従業員ID=${employeeId}を削除しました`);\n          return true;\n        }\n      } else {\n        // 配列形式\n        const employeeData = JSON.parse(data);\n        const filteredData = employeeData.filter(emp => emp.id !== employeeId);\n        localStorage.setItem(storageKey, JSON.stringify(filteredData));\n        console.log(`LocalStorage(配列形式)から従業員ID=${employeeId}を削除しました`);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error(\"LocalStorage削除エラー:\", error);\n      return false;\n    }\n  };\n\n  // 4. 関連する月次データをチェックする関数\n  const checkRelatedMonthlyData = async employeeId => {\n    try {\n      // 仮の実装 - 実際にはMonthlyReportデータを確認する\n      console.log(`従業員ID=${employeeId}の関連月次データをチェック`);\n      const storageKeys = Object.keys(localStorage).filter(key => key.startsWith('MONTHLY_REPORT_') || key.startsWith('PAYMENT_REPORT_'));\n      for (const key of storageKeys) {\n        const data = localStorage.getItem(key);\n        if (data) {\n          if (data.includes(`\"employee_id\":${employeeId}`) || data.includes(`\"employeeId\":${employeeId}`) || data.includes(`\"id\":${employeeId}`)) {\n            console.log(`関連データが見つかりました: ${key}`);\n            return true;\n          }\n        }\n      }\n      return false;\n    } catch (error) {\n      console.error(\"関連データチェックエラー:\", error);\n      return false;\n    }\n  };\n\n  // 5. 従業員データのバックアップを作成する関数\n  const createEmployeeBackup = async employeeId => {\n    try {\n      const employeeData = await checkEmployeeToDelete(employeeId);\n      if (!employeeData) {\n        return {\n          success: false,\n          message: `従業員ID=${employeeId}が見つかりません`\n        };\n      }\n\n      // バックアップキーの生成\n      const timestamp = new Date().getTime();\n      const backupKey = `EMPLOYEE_BACKUP_${employeeId}_${fiscalYear}_${timestamp}`;\n\n      // バックアップの保存\n      localStorage.setItem(backupKey, JSON.stringify(employeeData));\n      console.log(`バックアップを作成しました: ${backupKey}`);\n      return {\n        success: true,\n        message: `従業員ID=${employeeId}のバックアップを作成しました`,\n        backupPath: backupKey\n      };\n    } catch (error) {\n      console.error(\"バックアップ作成エラー:\", error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : String(error)\n      };\n    }\n  };\n\n  // 6. 複数従業員の削除（必要な場合）\n  const deleteMultipleEmployees = async employeeIds => {\n    console.log(`\\n=== ${employeeIds.length}人の従業員削除処理 ===`);\n\n    // 結果を格納する配列に明示的な型を定義\n\n    const results = [];\n    for (const id of employeeIds) {\n      console.log(`\\n--- 従業員ID=${id}の削除処理 ---`);\n      const result = await deleteEmployeeFromDB(id);\n      results.push({\n        id,\n        ...result\n      });\n    }\n    console.log(\"\\n=== 全削除処理の結果 ===\");\n    console.table(results);\n    return results;\n  };\n\n  // 7. 安全な削除（バックアップ付き）- すでにdeleteEmployeeFromDBに実装済み\n\n  // 年度データを一括削除する関数\n  // 選択状態を切り替える関数\n  const toggleSelectAll = () => {\n    const newSelectAll = !selectAll;\n    setSelectAll(newSelectAll);\n\n    // すべての従業員の選択状態を更新\n    setLocalEmployees(prev => {\n      const updatedEmployees = prev.map(emp => ({\n        ...emp,\n        _selected: newSelectAll\n      }));\n\n      // 選択数を更新\n      setSelectedCount(newSelectAll ? updatedEmployees.length : 0);\n      return updatedEmployees;\n    });\n  };\n\n  // 個別の従業員の選択状態を切り替える関数\n  const toggleSelectEmployee = id => {\n    setLocalEmployees(prev => {\n      const updatedEmployees = prev.map(emp => {\n        if (emp.id === id) {\n          // 選択状態を反転\n          const newSelected = !emp._selected;\n          return {\n            ...emp,\n            _selected: newSelected\n          };\n        }\n        return emp;\n      });\n\n      // 選択数を再計算\n      const newSelectedCount = updatedEmployees.filter(emp => emp._selected).length;\n      setSelectedCount(newSelectedCount);\n\n      // 全選択状態を更新\n      setSelectAll(newSelectedCount === updatedEmployees.length && newSelectedCount > 0);\n      return updatedEmployees;\n    });\n  };\n\n  // 選択した従業員を一括削除する関数\n  const deleteSelectedEmployees = async () => {\n    // 選択された従業員を取得\n    const selectedEmployees = localEmployees.filter(emp => emp._selected);\n    if (selectedEmployees.length === 0) {\n      setErrorMessage('削除する従業員が選択されていません');\n      setTimeout(() => setErrorMessage(null), 3000);\n      return;\n    }\n\n    // 削除確認\n    if (!window.confirm(`選択した${selectedEmployees.length}人の従業員データを削除します。\\nこの操作は元に戻せません。\\n\\n実行してもよろしいですか？`)) {\n      console.log('一括削除操作がキャンセルされました');\n      return;\n    }\n\n    // 削除処理\n    console.log(`${selectedEmployees.length}人の従業員の一括削除を開始します`);\n    setIsLoading(true);\n    try {\n      // 削除するIDのリスト\n      const employeeIds = selectedEmployees.map(emp => emp.id);\n\n      // 一括削除実行\n      const result = await deleteMultipleEmployees(employeeIds);\n\n      // 結果集計\n      const successCount = result.filter(r => r.success).length;\n      const failCount = result.length - successCount;\n\n      // 成功メッセージ\n      setSuccessMessage(`${successCount}人の従業員データを削除しました${failCount > 0 ? `（${failCount}件の失敗）` : ''}`);\n      setTimeout(() => setSuccessMessage(null), 5000);\n\n      // 選択状態をリセット\n      setSelectAll(false);\n      setSelectedCount(0);\n\n      // データ更新通知\n      if (onRefreshData) {\n        onRefreshData();\n      }\n    } catch (error) {\n      console.error('一括削除エラー:', error);\n      setErrorMessage(`一括削除処理中にエラーが発生しました: ${error instanceof Error ? error.message : String(error)}`);\n      setTimeout(() => setErrorMessage(null), 5000);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // CSVからのインポート処理\n  // CSVファイルから検出された障害区分を正規化する関数\n  const normalizeDisabilityType = disabilityType => {\n    if (!disabilityType) return '';\n\n    // 小文字変換して空白を削除\n    const normalized = disabilityType.toLowerCase().trim();\n\n    // 障害区分の正規化マッピング\n    if (normalized.includes('身体') || normalized.includes('physical')) {\n      return '身体障害';\n    } else if (normalized.includes('知的') || normalized.includes('intellectual')) {\n      return '知的障害';\n    } else if (normalized.includes('精神') || normalized.includes('mental')) {\n      return '精神障害';\n    } else if (normalized.includes('発達') || normalized.includes('developmental')) {\n      return '発達障害';\n    }\n\n    // マッチしない場合は元の値を返す\n    return disabilityType;\n  };\n\n  // 月次データのデフォルト状態を生成\n  const generateDefaultMonthlyStatus = hcValue => {\n    const hc = typeof hcValue === 'string' ? parseFloat(hcValue) || 1 : hcValue || 1;\n\n    // 12ヶ月分の配列を生成\n    return Array(12).fill(hc);\n  };\n\n  // 月次データの処理 - 様々な形式に対応\n  const processMonthlyStatus = (monthlyData, defaultHcValue) => {\n    const hc = typeof defaultHcValue === 'string' ? parseFloat(defaultHcValue) || 1 : defaultHcValue || 1;\n\n    // データがない場合\n    if (!monthlyData) {\n      return generateDefaultMonthlyStatus(hc);\n    }\n\n    // すでに配列の場合\n    if (Array.isArray(monthlyData)) {\n      return monthlyData.map(val => {\n        if (typeof val === 'number') return val;\n        if (typeof val === 'string') {\n          const num = parseFloat(val);\n          return isNaN(num) ? hc : num;\n        }\n        return hc;\n      });\n    }\n\n    // オブジェクト形式の場合 (キーに月名が含まれている場合)\n    if (typeof monthlyData === 'object' && monthlyData !== null) {\n      const months = ['4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月', '1月', '2月', '3月'];\n      return months.map(month => {\n        if (month in monthlyData) {\n          const val = monthlyData[month];\n          if (typeof val === 'number') return val;\n          if (typeof val === 'string') {\n            const num = parseFloat(val);\n            return isNaN(num) ? hc : num;\n          }\n        }\n        return hc;\n      });\n    }\n\n    // その他の場合は全て同じ値で埋める\n    return generateDefaultMonthlyStatus(hc);\n  };\n\n  // 指定年度の従業員データをローカルストレージから取得\n  const getStoredEmployeeData = year => {\n    try {\n      // 年度に紐づいた従業員データのキー\n      const storageKey = `EMPLOYEE_DATA_${year}`;\n      const storedData = localStorage.getItem(storageKey);\n\n      // 保存データが存在する場合はJSONとしてパース\n      if (storedData) {\n        return JSON.parse(storedData);\n      }\n\n      // データがない場合は空のオブジェクトを返す\n      return {};\n    } catch (error) {\n      console.error(`${year}年度の従業員データ取得エラー:`, error);\n      return {};\n    }\n  };\n\n  // 従業員データをローカルストレージに保存\n  const saveEmployeeDataToLocalStorage = (data, year) => {\n    try {\n      // 年度に紐づいた従業員データのキー\n      const storageKey = `EMPLOYEE_DATA_${year}`;\n      localStorage.setItem(storageKey, JSON.stringify(data));\n      console.log(`${year}年度の従業員データを保存しました (${Object.keys(data).length}件)`);\n    } catch (error) {\n      console.error(`${year}年度の従業員データ保存エラー:`, error);\n      setErrorMessage('データの保存中にエラーが発生しました。ブラウザのストレージ容量を確認してください。');\n      setTimeout(() => setErrorMessage(null), 5000);\n    }\n  };\n\n  // データのバックアップを作成\n  const createBackup = year => {\n    try {\n      // 現在のデータを取得\n      const storageKey = `EMPLOYEE_DATA_${year}`;\n      const currentData = localStorage.getItem(storageKey);\n      if (!currentData) {\n        console.log(`${year}年度のデータが存在しないため、バックアップは作成しません`);\n        return;\n      }\n\n      // バックアップキーを生成（タイムスタンプ付き）\n      const timestamp = new Date().getTime();\n      const backupKey = `EMPLOYEE_DATA_${year}_BACKUP_${timestamp}`;\n\n      // バックアップを保存\n      localStorage.setItem(backupKey, currentData);\n      console.log(`${year}年度の従業員データのバックアップを作成しました: ${backupKey}`);\n\n      // 古いバックアップの削除（最新5件のみ保持）\n      cleanupOldBackups(year);\n    } catch (error) {\n      console.error(`${year}年度のバックアップ作成エラー:`, error);\n    }\n  };\n\n  // 古いバックアップの削除（最新5件のみ保持）\n  const cleanupOldBackups = year => {\n    try {\n      const backupPrefix = `EMPLOYEE_DATA_${year}_BACKUP_`;\n      const backupKeys = [];\n\n      // すべてのバックアップキーを収集\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key && key.startsWith(backupPrefix)) {\n          backupKeys.push(key);\n        }\n      }\n\n      // タイムスタンプの新しい順にソート\n      backupKeys.sort().reverse();\n\n      // 5件以上ある場合、古いものを削除\n      if (backupKeys.length > 5) {\n        const keysToRemove = backupKeys.slice(5);\n        keysToRemove.forEach(key => {\n          localStorage.removeItem(key);\n          console.log(`古いバックアップを削除しました: ${key}`);\n        });\n      }\n    } catch (error) {\n      console.error('バックアップクリーンアップエラー:', error);\n    }\n  };\n\n  // CSVインポート成功時のハンドラ - 改善版\n  const handleCSVImportSuccess = importedEmployees => {\n    // 年度の取得（CSVから検出された年度を優先）\n    const targetYear = importedEmployees.length > 0 && importedEmployees[0].fiscal_year ? importedEmployees[0].fiscal_year : fiscalYear;\n    console.log(`CSVから${importedEmployees.length}名の従業員データをインポートします (${targetYear}年度)`);\n    try {\n      // インポートするデータのバックアップを作成\n      createBackup(targetYear);\n\n      // 既存データの取得（対象年度のデータを取得）\n      const existingData = getStoredEmployeeData(targetYear);\n      const merged = {\n        ...existingData\n      };\n\n      // データの変換と統合\n      let changedCount = 0;\n      const changes = {};\n      importedEmployees.forEach(employee => {\n        var _merged$employeeId, _merged$employeeId2;\n        // employeeIdを確実に文字列として扱う\n        const employeeId = String(employee.employee_id);\n        // 障害区分の正規化\n        const disabilityType = normalizeDisabilityType(employee.disability_type);\n\n        // 新しい従業員データオブジェクトを作成\n        const newEmployeeData = {\n          id: ((_merged$employeeId = merged[employeeId]) === null || _merged$employeeId === void 0 ? void 0 : _merged$employeeId.id) || Math.max(0, ...Object.values(merged).map(e => e.id || 0)) + 1,\n          no: ((_merged$employeeId2 = merged[employeeId]) === null || _merged$employeeId2 === void 0 ? void 0 : _merged$employeeId2.no) || Object.keys(merged).length + 1,\n          employee_id: employeeId,\n          name: employee.name,\n          disability_type: disabilityType,\n          disability: employee.disability || '',\n          grade: employee.grade || '',\n          hire_date: employee.hire_date || '',\n          status: employee.status || '在籍',\n          wh: employee.employment_type || employee.wh || '正社員',\n          hc: parseFloat(String(employee.hc_value || employee.hc)) || 1,\n          retirement_date: employee.retirement_date || null,\n          monthlyStatus: processMonthlyStatus(employee.monthly_status, employee.hc_value || employee.hc || 1),\n          fiscal_year: targetYear\n        };\n\n        // 既存データとの差分チェック\n        if (!merged[employeeId] || JSON.stringify(merged[employeeId]) !== JSON.stringify(newEmployeeData)) {\n          merged[employeeId] = newEmployeeData;\n          changes[employeeId] = newEmployeeData;\n          changedCount++;\n        }\n      });\n      console.log(`検出された変更: ${changedCount}件`, changes);\n\n      // 変更が存在する場合\n      if (changedCount > 0) {\n        // データを保存\n        saveEmployeeDataToLocalStorage(merged, targetYear);\n\n        // UIに反映するためにローカル状態を更新\n        const updatedEmployees = Object.values(merged);\n        setLocalEmployees(updatedEmployees);\n\n        // 年度が現在表示中の年度と異なる場合は、年度を切り替える確認\n        if (targetYear !== fiscalYear) {\n          const message = `インポートされた年度(${targetYear})が現在の表示年度(${fiscalYear})と異なります。\\n年度を切り替えますか？`;\n          if (window.confirm(message)) {\n            console.log(`年度を切り替えます: ${fiscalYear} → ${targetYear}`);\n            setFiscalYear(targetYear);\n          }\n        }\n\n        // 成功メッセージ（変更内容の概要を含める）\n        setSuccessMessage(`CSVから${importedEmployees.length}名の従業員データをインポートしました。(新規/更新: ${changedCount}件)`);\n        setTimeout(() => setSuccessMessage(null), 5000);\n      } else {\n        setSuccessMessage('インポートされたデータに変更はありませんでした。');\n        setTimeout(() => setSuccessMessage(null), 5000);\n      }\n    } catch (error) {\n      console.error('CSVインポート処理エラー:', error);\n      setErrorMessage(`インポート処理中にエラーが発生しました: ${error instanceof Error ? error.message : String(error)}`);\n      setTimeout(() => setErrorMessage(null), 5000);\n    }\n  };\n  const clearCurrentYearData = async () => {\n    console.log(`${fiscalYear}年度のデータ一括削除処理を開始します`);\n    try {\n      // ステップ1: 現在の年度データをバックアップ\n      const storageKey = `EMPLOYEE_DATA_${fiscalYear}`;\n      const currentData = localStorage.getItem(storageKey);\n      if (!currentData) {\n        setErrorMessage(`${fiscalYear}年度のデータが見つかりません`);\n        setTimeout(() => setErrorMessage(null), 3000);\n        return;\n      }\n\n      // バックアップの作成\n      const timestamp = new Date().getTime();\n      const backupKey = `EMPLOYEE_DATA_${fiscalYear}_BACKUP_${timestamp}`;\n      localStorage.setItem(backupKey, currentData);\n      console.log(`${fiscalYear}年度のデータをバックアップしました: ${backupKey}`);\n\n      // ステップ2: データの解析\n      let employeeCount = 0;\n      try {\n        // データ形式に応じた処理\n        const isObject = currentData.trim().startsWith('{');\n        if (isObject) {\n          const data = JSON.parse(currentData);\n          employeeCount = Object.keys(data).length;\n        } else {\n          const data = JSON.parse(currentData);\n          employeeCount = data.length;\n        }\n      } catch (e) {\n        console.error('データ解析エラー:', e);\n      }\n\n      // ステップ3: 年度データの削除\n      localStorage.removeItem(storageKey);\n      console.log(`${fiscalYear}年度のデータを削除しました (${employeeCount}件)`);\n\n      // ステップ4: UIの更新\n      setLocalEmployees([]);\n      setOriginalEmployees([]);\n\n      // 成功メッセージの表示\n      setSuccessMessage(`${fiscalYear}年度のデータを削除しました (${employeeCount}件)。\\nバックアップ: ${backupKey}`);\n      setTimeout(() => setSuccessMessage(null), 5000);\n      return {\n        success: true,\n        message: `${fiscalYear}年度のデータを削除しました (${employeeCount}件)`,\n        backupKey\n      };\n    } catch (error) {\n      console.error(`${fiscalYear}年度のデータ削除中にエラーが発生しました:`, error);\n      setErrorMessage(`データ削除中にエラーが発生しました: ${error instanceof Error ? error.message : String(error)}`);\n      setTimeout(() => setErrorMessage(null), 5000);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : String(error)\n      };\n    }\n  };\n\n  // 8. フロントエンドでの削除処理デバッグ用\n  const debugDeleteFromUI = () => {\n    // 削除ボタンを探す\n    console.log(\"UIの削除機能をデバッグします...\");\n\n    // 現在表示されている従業員データを確認\n    console.log(`現在のページには${localEmployees.length}人の従業員データが表示されています`);\n    if (localEmployees.length > 0) {\n      const firstEmployee = localEmployees[0];\n      console.log(`最初の従業員: ID=${firstEmployee.id}, 名前=${firstEmployee.name}`);\n\n      // 削除ボタンをシミュレート\n      const willDelete = window.confirm(`テスト削除: 従業員「${firstEmployee.name}」(ID=${firstEmployee.id})を削除しますか？`);\n      if (willDelete) {\n        console.log(`従業員ID=${firstEmployee.id}の削除をシミュレートします...`);\n\n        // 通常の削除ルーチンを使用\n        deleteEmployeeFromDB(firstEmployee.id).then(result => {\n          console.log(\"削除結果:\", result);\n          if (result.success) {\n            setSuccessMessage(`テスト削除成功: ${result.message}`);\n          } else {\n            setErrorMessage(`テスト削除失敗: ${result.message}`);\n          }\n          setTimeout(() => {\n            setSuccessMessage(null);\n            setErrorMessage(null);\n          }, 3000);\n        });\n      }\n    }\n  };\n\n  // LocalStorageデータ構造分析関数\n  const analyzeLocalStorageData = () => {\n    console.log(\"=== LocalStorage データ構造分析 ===\");\n\n    // 全年度のデータキーを取得\n    const keys = Object.keys(localStorage).filter(key => key.startsWith('EMPLOYEE_DATA_'));\n    console.log(`従業員データキー: ${keys.join(', ')}`);\n\n    // 各年度のデータを分析\n    keys.forEach(key => {\n      try {\n        const yearMatch = key.match(/EMPLOYEE_DATA_(\\d+)/);\n        if (!yearMatch) return;\n        const year = yearMatch[1];\n        const rawData = localStorage.getItem(key);\n        if (!rawData) {\n          console.log(`${year}年度のデータは空です`);\n          return;\n        }\n\n        // データ形式を判定\n        const isObject = rawData.trim().startsWith('{');\n\n        // パースしてデータ構造を分析\n        let data;\n        if (isObject) {\n          // オブジェクト形式（従業員IDがキー）\n          data = JSON.parse(rawData);\n          const employeeIds = Object.keys(data);\n          console.log(`${year}年度: オブジェクト形式, ${employeeIds.length}件`);\n\n          // サンプルデータを表示\n          if (employeeIds.length > 0) {\n            const sampleId = employeeIds[0];\n            const sampleEmployee = data[sampleId];\n            console.log(`サンプル(ID=${sampleId}):`, {\n              id: sampleEmployee.id,\n              name: sampleEmployee.name,\n              status: sampleEmployee.status,\n              keys: Object.keys(sampleEmployee)\n            });\n          }\n        } else {\n          // 配列形式\n          data = JSON.parse(rawData);\n          console.log(`${year}年度: 配列形式, ${data.length}件`);\n\n          // サンプルデータを表示\n          if (data.length > 0) {\n            const sampleEmployee = data[0];\n            console.log(`サンプル(index=0):`, {\n              id: sampleEmployee.id,\n              name: sampleEmployee.name,\n              status: sampleEmployee.status,\n              keys: Object.keys(sampleEmployee)\n            });\n          }\n        }\n      } catch (error) {\n        console.error(`${key}の分析中にエラー:`, error);\n      }\n    });\n    console.log(\"=== 分析完了 ===\");\n  };\n\n  // 配列データをオブジェクト形式に変換する関数\n  const convertArrayToObjectFormat = (employees, year) => {\n    const storageKey = `EMPLOYEE_DATA_${year}`;\n    try {\n      // 現在のデータを確認\n      const currentData = localStorage.getItem(storageKey);\n      if (!currentData) {\n        console.log(`${year}年度のデータが存在しません`);\n        return false;\n      }\n\n      // データ形式を判定\n      const isObject = currentData.trim().startsWith('{');\n      if (isObject) {\n        console.log(`${year}年度のデータは既にオブジェクト形式です`);\n        return true;\n      }\n\n      // 配列からオブジェクトに変換\n      const dataArray = JSON.parse(currentData);\n      const dataObject = {};\n      dataArray.forEach(emp => {\n        if (emp && emp.id) {\n          dataObject[emp.id] = emp;\n        }\n      });\n\n      // 変換したデータを保存\n      localStorage.setItem(storageKey, JSON.stringify(dataObject));\n      console.log(`${year}年度のデータを配列からオブジェクト形式に変換しました (${Object.keys(dataObject).length}件)`);\n      return true;\n    } catch (error) {\n      console.error(`${year}年度のデータ変換中にエラー:`, error);\n      return false;\n    }\n  };\n\n  // 従業員データが変更された時、または年度が変更された時にHC計算を実行\n  useEffect(() => {\n    // 従業員データが存在する場合\n    if (localEmployees.length > 0) {\n      console.log(`[監視] 従業員データが変更されました。${localEmployees.length}人に対してHC計算を実行します。`);\n\n      // 各従業員に対してHC計算を実行\n      setTimeout(() => {\n        localEmployees.forEach(employee => {\n          if (employee.status && employee.hire_date && employee.hc !== undefined) {\n            console.log(`[監視] ID=${employee.id}のHC計算を実行`);\n            updateMonthlyStatusFromHc(employee);\n          }\n        });\n      }, 300);\n    }\n  }, [fiscalYear, month]); // fiscalYearまたはmonthが変更されたときに実行\n\n  // 初回マウント時のみ実行するuseEffect\n  useEffect(() => {\n    // 初回マウント時のみローカルストレージから読み込み（マウント時のみ実行されるようにする）\n    console.log('初回マウント時の従業員データ初期化処理');\n\n    // 従業員データが読み込まれた後、HC自動計算を実行\n    if (localEmployees.length > 0) {\n      console.log(`[初期化] ${localEmployees.length}人の従業員データが読み込まれました。HC計算を実行します。`);\n\n      // 各従業員に対してHC計算を実行\n      setTimeout(() => {\n        localEmployees.forEach(employee => {\n          if (employee.status && employee.hire_date && employee.hc !== undefined) {\n            console.log(`[初期化] ID=${employee.id}のHC計算を実行`);\n            updateMonthlyStatusFromHc(employee);\n          }\n        });\n      }, 500);\n    }\n\n    // ローカルストレージを最初に読み込み\n    const loadEmployeeData = async () => {\n      try {\n        // すでにローカルデータがロードされている場合は何もしない\n        if (localEmployees.length > 0) {\n          console.log('すでにローカルにデータがロードされているため初期化をスキップ', localEmployees.length, '件');\n          return;\n        }\n\n        // 統一したストレージキーを使用\n        const storageKey = `EMPLOYEE_DATA_${fiscalYear}`;\n        console.log(`ストレージキー: ${storageKey} からデータをロード`);\n\n        // 全てのキーを確認して古いフォーマットのキーも検索（データ移行処理）\n        const allKeys = Object.keys(localStorage);\n        const legacyKey = `employee_data_${fiscalYear}`;\n        let savedData = localStorage.getItem(storageKey);\n\n        // 新しいキーで見つからなければ古いキーを確認\n        if (!savedData && allKeys.includes(legacyKey)) {\n          console.log(`古いフォーマットのキー ${legacyKey} からデータを読み込みます`);\n          savedData = localStorage.getItem(legacyKey);\n\n          // データが見つかれば新しいキーに移行\n          if (savedData) {\n            console.log('古いキーから新しいキーにデータを移行します');\n            localStorage.setItem(storageKey, savedData);\n            // 安全を確保するために今は古いキーは削除しない\n          }\n        }\n\n        // ローカルストレージにデータがある場合はそれを使用\n        if (savedData) {\n          try {\n            const savedEmployees = JSON.parse(savedData);\n            if (Object.keys(savedEmployees).length > 0) {\n              console.log(`ローカルストレージにデータ(${Object.keys(savedEmployees).length}件)を読み込みました`);\n              const savedEmployeesArray = Object.values(savedEmployees);\n              const processedEmployees = savedEmployeesArray.map(emp => ({\n                ...emp,\n                employee_id: typeof emp.employee_id === 'number' ? String(emp.employee_id) : emp.employee_id,\n                disability_type: emp.disability_type || '',\n                disability: emp.disability || '',\n                grade: emp.grade || '',\n                status: emp.status || '在籍',\n                hc: emp.hc !== undefined ? emp.hc : 1,\n                monthlyStatus: Array.isArray(emp.monthlyStatus) ? emp.monthlyStatus : Array(12).fill('')\n              }));\n              const originalEmployeesCopy = JSON.parse(JSON.stringify(processedEmployees));\n              setLocalEmployees(processedEmployees);\n              setOriginalEmployees(originalEmployeesCopy);\n\n              // 親コンポーネントに初期データを通知\n              if (onEmployeesUpdate) {\n                console.log('親コンポーネントに初期データを通知');\n                onEmployeesUpdate(processedEmployees);\n              }\n              return true; // データがロードされたことを示す\n            }\n          } catch (error) {\n            console.error('ローカルストレージデータの解析エラー:', error);\n          }\n        }\n\n        // ローカルストレージになければプロパティから初期化\n        if (employees && employees.length > 0) {\n          console.log('propsからデータを初期化:', employees.length, '件');\n          const processedEmployees = employees.map(emp => ({\n            ...emp,\n            employee_id: typeof emp.employee_id === 'number' ? String(emp.employee_id) : emp.employee_id,\n            disability_type: emp.disability_type || '',\n            disability: emp.disability || '',\n            grade: emp.grade || '',\n            status: emp.status || '在籍',\n            hc: emp.hc !== undefined ? emp.hc : 1,\n            monthlyStatus: Array.isArray(emp.monthlyStatus) ? emp.monthlyStatus : Array(12).fill('')\n          }));\n          const originalEmployeesCopy = JSON.parse(JSON.stringify(processedEmployees));\n          setLocalEmployees(processedEmployees);\n          setOriginalEmployees(originalEmployeesCopy);\n          return true; // データがロードされたことを示す\n        }\n        return false; // データがロードされなかった\n      } catch (error) {\n        console.error('従業員データの初期化エラー:', error);\n        return false;\n      }\n    };\n\n    // データ読み込み実行\n    loadEmployeeData();\n\n    // クリーンアップ関数\n    return () => {\n      console.log('EmployeesTabコンポーネントがアンマウントされます');\n    };\n    // 依存配列を空に保ち、初回マウント時のみ実行。fiscalYearは不要（別のuseEffectが担当）\n  }, []);\n\n  // localEmployees変更時に自動計算を実行\n  useEffect(() => {\n    // データがロードされた場合に自動計算を実行\n    if (localEmployees.length > 0) {\n      console.log(`[HC] localEmployees変更を検知 (${localEmployees.length}件) - 自動計算を実行します`);\n\n      // 各従業員に対してHC自動計算を実行\n      localEmployees.forEach(employee => {\n        if (employee.hc !== undefined && employee.hire_date && employee.status) {\n          console.log(`[HC] 従業員ID=${employee.id}のHC自動計算を実行`);\n          // 少し遅延させて実行\n          setTimeout(() => {\n            updateMonthlyStatusFromHc(employee);\n          }, 100);\n        }\n      });\n    }\n  }, [localEmployees.length]); // localEmployees.lengthが変わった時に実行\n\n  // 編集モード切り替えハンドラー\n  const handleToggleEditMode = () => {\n    console.log('編集モード切替ボタンクリック:', !actualIsEditing);\n    setInternalIsEditing(!internalIsEditing);\n    if (onToggleEditMode) {\n      onToggleEditMode();\n    }\n    if (actualIsEditing) {\n      setErrorMessage(null);\n      setIsAddingNewRow(false);\n      setInputValues({});\n    }\n  };\n\n  // 編集キャンセルハンドラー\n  const handleCancelEdit = () => {\n    console.log('編集をキャンセルします');\n    setLocalEmployees([...JSON.parse(JSON.stringify(originalEmployees))]);\n    setInternalIsEditing(false);\n    if (onToggleEditMode) {\n      onToggleEditMode();\n    }\n    setErrorMessage(null);\n    setIsAddingNewRow(false);\n    setInputValues({});\n    setSuccessMessage('編集をキャンセルしました');\n    setTimeout(() => setSuccessMessage(null), 3000);\n  };\n\n  // HC値の変更ハンドラー\n  const handleHcChange = (id, value) => {\n    console.log(`[HC] handleHcChange呼び出し: ID=${id}, 値=${value}`);\n    console.log(`HC値変更: ID=${id}, 値=${value}`);\n\n    // 従業員データの確認\n    const currentEmployee = localEmployees.find(emp => emp.id === id);\n    console.log('[DEBUG] handleHcChange対象従業員:', {\n      従業員ID: id,\n      従業員データあり: !!currentEmployee,\n      従業員名: currentEmployee === null || currentEmployee === void 0 ? void 0 : currentEmployee.name,\n      状態: currentEmployee === null || currentEmployee === void 0 ? void 0 : currentEmployee.status,\n      採用日: currentEmployee === null || currentEmployee === void 0 ? void 0 : currentEmployee.hire_date,\n      雇用形態: currentEmployee === null || currentEmployee === void 0 ? void 0 : currentEmployee.wh,\n      HC値: currentEmployee === null || currentEmployee === void 0 ? void 0 : currentEmployee.hc,\n      新しい値: value,\n      退職日: currentEmployee === null || currentEmployee === void 0 ? void 0 : currentEmployee.retirement_date\n    });\n\n    // 数値入力チェック\n    if (value === '') {\n      // 空の場合は許可\n      setInputValues(prev => ({\n        ...prev,\n        [`${id}-hc`]: value\n      }));\n\n      // 空の場合はHC値をクリア\n      setLocalEmployees(prev => {\n        // 現在の従業員を取得して確実に処理する\n        const currentEmployee = prev.find(emp => emp.id === id);\n        if (!currentEmployee) {\n          console.error(`ID=${id}の従業員が見つかりません`);\n          return prev;\n        }\n        const updated = prev.map(emp => {\n          if (emp.id === id) {\n            const updatedEmp = {\n              ...emp,\n              hc: undefined\n            };\n            return updatedEmp;\n          }\n          return emp;\n        });\n\n        // 月次ステータス値をクリア（HC値がなくなるため）\n        setTimeout(() => {\n          const employeeToUpdate = updated.find(emp => emp.id === id);\n          if (employeeToUpdate) {\n            console.log(`HC値クリア時の月次ステータス更新 - ID=${id}`);\n\n            // HC値がundefinedなので、月次ステータスは全て空になる\n            setLocalEmployees(current => {\n              return current.map(emp => {\n                if (emp.id === id) {\n                  return {\n                    ...emp,\n                    monthlyStatus: Array(12).fill('')\n                  };\n                }\n                return emp;\n              });\n            });\n          }\n        }, 50);\n\n        // 親コンポーネントへの通知はバッチ処理のために遅延させる（非同期処理）\n        setTimeout(() => {\n          if (onEmployeesUpdate) {\n            console.log('HC値変更 (空): 親コンポーネントに通知', updated.length, '件');\n            onEmployeesUpdate(updated);\n          }\n        }, 100);\n        return updated;\n      });\n      setErrorMessage(null);\n      return;\n    }\n\n    // セレクトボックスからの値を数値に変換\n    const numValue = parseFloat(value);\n    // ドロップダウンメニューからの選択値なので入力チェックは不要（常に有効な値）\n\n    // 入力値の状態を更新\n    setInputValues(prev => ({\n      ...prev,\n      [`${id}-hc`]: value\n    }));\n\n    // ローカル従業員データの状態を更新\n    setLocalEmployees(prev => {\n      // 現在の従業員を取得して確実に処理する\n      const currentEmployee = prev.find(emp => emp.id === id);\n      if (!currentEmployee) {\n        console.error(`ID=${id}の従業員が見つかりません`);\n        return prev;\n      }\n      const updated = prev.map(emp => {\n        if (emp.id === id) {\n          const updatedEmp = {\n            ...emp,\n            hc: numValue\n          };\n          console.log(`HC値を更新: `, updatedEmp);\n          return updatedEmp;\n        }\n        return emp;\n      });\n\n      // 非同期で月次ステータス値を自動計算\n      setTimeout(() => {\n        const employeeToUpdate = updated.find(emp => emp.id === id);\n        if (employeeToUpdate) {\n          console.log(`[HC] HC値変更後の自動計算を実行します - ID=${id}, 値=${numValue}`);\n          console.log(`HC自動計算実行開始（HC値変更時） - ID=${id}, 値=${numValue}`);\n          // 必ず計算ロジックを呼び出す\n          updateMonthlyStatusFromHc(employeeToUpdate);\n          console.log(`HC自動計算実行完了（HC値変更時） - ID=${id}`);\n        }\n      }, 50);\n\n      // 親コンポーネントへの通知はバッチ処理のために遅延させる（非同期処理）\n      setTimeout(() => {\n        if (onEmployeesUpdate) {\n          console.log('HC値変更: 親コンポーネントに通知', updated.length, '件');\n          onEmployeesUpdate(updated);\n        }\n      }, 150); // 月次ステータス更新後に通知するために少し長めの遅延\n\n      return updated;\n    });\n    setErrorMessage(null);\n  };\n\n  // 採用日と状態に基づいて月次ステータスを更新する関数\n  const updateMonthlyStatusFromHc = employee => {\n    console.log('[HC] 計算処理開始');\n    console.log(`===== HC自動計算関数開始 - ID=${employee.id} =====`);\n\n    // 必要なデータがない場合は何もしない\n    if (!employee.hire_date || !employee.status || employee.hc === undefined) {\n      console.log('【エラー】自動計算に必要なデータがありません:', {\n        hire_date: employee.hire_date,\n        status: employee.status,\n        hc: employee.hc\n      });\n      return;\n    }\n    console.log(`【HC自動計算】入力データ:`, {\n      従業員ID: employee.id,\n      従業員名: employee.name,\n      採用日: employee.hire_date,\n      状態: employee.status,\n      雇用形態: employee.wh || '正社員',\n      HC値: employee.hc,\n      退職日: employee.retirement_date || '未設定'\n    });\n    try {\n      // 採用日をDateオブジェクトに変換\n      const hireDateParts = employee.hire_date.split('/');\n      if (hireDateParts.length !== 3) {\n        console.error('【エラー】採用日のフォーマットが不正です:', employee.hire_date);\n        return;\n      }\n      const hireYear = parseInt(hireDateParts[0]);\n      const hireMonth = parseInt(hireDateParts[1]);\n      const hireDay = parseInt(hireDateParts[2]);\n      if (isNaN(hireYear) || isNaN(hireMonth) || isNaN(hireDay)) {\n        console.error('【エラー】採用日のパースに失敗しました:', {\n          hireYear,\n          hireMonth,\n          hireDay\n        });\n        return;\n      }\n\n      // 現在の月次ステータスを取得または初期化\n      const newMonthlyStatus = [...(employee.monthlyStatus || Array(12).fill(''))];\n\n      // 表示年度と表示月を取得\n      const displayYear = fiscalYear;\n      const displayMonth = month;\n\n      // 2025年5月を固定値として使用（要件に合わせて）\n      const systemCurrentYear = 2025;\n      const systemCurrentMonth = 5;\n\n      // 退職日の取得（退職状態の場合）\n\n      let retirementMonth = null;\n      if (employee.status === '退職' && employee.retirement_date) {\n        // 退職日がある場合はパース\n        const retirementParts = employee.retirement_date.split('/');\n        if (retirementParts.length === 3) {\n          const retireYear = parseInt(retirementParts[0]);\n          const retireMonth = parseInt(retirementParts[1]);\n          retirementMonth = {\n            year: retireYear,\n            month: retireMonth\n          };\n          console.log(`【退職処理】退職日が設定されています: ${retireYear}年${retireMonth}月`);\n        }\n      }\n\n      // 年度表示関係の判定\n      const yearRelation = displayYear < systemCurrentYear ? \"過去\" : displayYear === systemCurrentYear ? \"現在\" : \"未来\";\n      console.log(`【HC自動計算】基本情報: 採用日=${hireYear}/${hireMonth}/${hireDay}, ` + `表示年度(${yearRelation}年度)=${displayYear}/${displayMonth}, ` + `現在日付(固定)=${systemCurrentYear}/${systemCurrentMonth}, ` + `退職日=${retirementMonth ? `${retirementMonth.year}/${retirementMonth.month}` : '未設定'}`);\n\n      // 各月について処理\n      monthNumbers.forEach((monthNum, index) => {\n        // 会計年度を考慮して年を調整（1-3月は次の年）\n        const calendarYear = monthNum >= 4 ? displayYear : displayYear + 1;\n\n        // 採用月以降かどうか\n        const isAfterHireDate = isDateAfterHireDate(calendarYear, monthNum, hireYear, hireMonth);\n\n        // 表示年度を考慮した現在月以前かどうか\n        const isBeforeCurrentRealMonth = isBeforeOrEqualCurrentMonth(calendarYear, monthNum, systemCurrentYear, systemCurrentMonth);\n\n        // 退職月以前かどうか（退職状態の場合のみ関連）\n        let isBeforeRetirementMonth = true;\n        if (employee.status === '退職' && retirementMonth) {\n          isBeforeRetirementMonth = calendarYear < retirementMonth.year || calendarYear === retirementMonth.year && monthNum <= retirementMonth.month;\n          console.log(`【退職月判定】${monthNumbers[index]}月: 退職月(${retirementMonth.year}/${retirementMonth.month})以前=${isBeforeRetirementMonth}`);\n        }\n\n        // 詳細なログ出力（デバッグ用）\n        console.log(`【月次処理】[${index + 1}]=${monthNumbers[index]}月: 暦年=${calendarYear}, ` + `採用日以降=${isAfterHireDate}, 表示対象=${isBeforeCurrentRealMonth}`);\n\n        // 状態に応じた処理\n        if (employee.status === '在籍') {\n          // 在籍の場合、採用日以降かつ表示対象かどうかで判定\n          if (isAfterHireDate && isBeforeCurrentRealMonth) {\n            newMonthlyStatus[index] = employee.hc;\n            console.log(`  → 在籍: ${monthNumbers[index]}月にHC値${employee.hc}を設定`);\n          } else if (!isAfterHireDate) {\n            newMonthlyStatus[index] = '';\n            console.log(`  → 在籍: ${monthNumbers[index]}月は採用日前のため空白`);\n          } else {\n            newMonthlyStatus[index] = '';\n            console.log(`  → 在籍: ${monthNumbers[index]}月は未来月のため空白`);\n          }\n        } else if (employee.status === '退職') {\n          // 退職の場合、採用日以降かつ退職月以前かつ現在月以前はHC値を設定\n          if (isAfterHireDate && isBeforeCurrentRealMonth) {\n            if (retirementMonth && !isBeforeRetirementMonth) {\n              // 退職月が設定されており、それより後の月は空白に\n              newMonthlyStatus[index] = '';\n              console.log(`  → 退職: ${monthNumbers[index]}月は退職月(${retirementMonth.year}/${retirementMonth.month})より後のため空白`);\n            } else {\n              // 退職月以前（または退職月未設定）なら表示\n              newMonthlyStatus[index] = employee.hc;\n              console.log(`  → 退職: ${monthNumbers[index]}月にHC値${employee.hc}を設定 (${calendarYear}年${monthNum}月)`);\n            }\n          } else if (!isAfterHireDate) {\n            newMonthlyStatus[index] = '';\n            console.log(`  → 退職: ${monthNumbers[index]}月は採用日前のため空白`);\n          } else {\n            newMonthlyStatus[index] = '';\n            console.log(`  → 退職: ${monthNumbers[index]}月は未来月のため空白`);\n          }\n        } else {\n          // その他の状態は変更なし\n          console.log(`  → その他の状態: ${employee.status} - 変更なし`);\n        }\n      });\n\n      // 月次ステータスを更新\n      setLocalEmployees(prev => {\n        return prev.map(emp => {\n          if (emp.id === employee.id) {\n            return {\n              ...emp,\n              monthlyStatus: newMonthlyStatus\n            };\n          }\n          return emp;\n        });\n      });\n      console.log(`ID=${employee.id}の月次ステータスを自動計算しました:`, newMonthlyStatus);\n      console.log(`===== HC自動計算関数終了 - ID=${employee.id} =====`);\n    } catch (error) {\n      console.error('月次ステータスの自動計算でエラーが発生しました:', error);\n      console.log(`===== HC自動計算関数エラー終了 - ID=${employee.id} =====`);\n    }\n  };\n\n  // 指定した年月が採用日以降かどうかをチェックする関数\n  const isDateAfterHireDate = (year, month, hireYear, hireMonth) => {\n    // 年が採用年より後の場合は true\n    if (year > hireYear) return true;\n    // 年が採用年と同じで、月が採用月以降の場合は true\n    if (year === hireYear && month >= hireMonth) return true;\n    // それ以外は false\n    return false;\n  };\n\n  // 指定した年月が現在表示中の年月以前かどうかをチェックする関数\n  const isBeforeCurrentDisplayMonth = (year, month, displayYear, displayMonth) => {\n    // 年が表示年より前の場合は true\n    if (year < displayYear) return true;\n    // 年が表示年と同じで、月が表示月以前の場合は true\n    if (year === displayYear && month <= displayMonth) return true;\n    // それ以外は false\n    return false;\n  };\n\n  // 指定した年月が表示中の年度を考慮して有効かどうかをチェックする関数\n  const isBeforeOrEqualCurrentMonth = (year, month, currentYear, currentMonth) => {\n    console.log(`【日付比較】検証: 暦年${year}月${month} vs 現在${currentYear}月${currentMonth}`);\n\n    // 表示中の年度（UIで選択された年度）\n    const displayFiscalYear = fiscalYear;\n\n    // 2025年5月を固定値として扱う（要件に合わせて）\n    // システム上の「現在」は常に2025年5月として扱う\n    const systemCurrentYear = 2025;\n    const systemCurrentMonth = 5;\n    console.log(`【日付比較】現在日付(固定値): ${systemCurrentYear}年${systemCurrentMonth}月 (※要件に合わせて2025/5を使用)`);\n    console.log(`【日付比較】表示中の年度: ${displayFiscalYear}年度`);\n\n    // 表示年度が過去の年度の場合（表示年度 < 現在システム年度）\n    // 2024年度やそれ以前の過去年度データは全て表示（HC計算）するため常にtrueを返す\n    if (displayFiscalYear < systemCurrentYear) {\n      console.log(`【判定】過去年度(${displayFiscalYear}年)の表示: ${year}/${month}月 → すべて表示する`);\n      return true;\n    }\n\n    // 表示年度が現在年度の場合（表示年度 = 現在システム年度 = 2025年度）\n    // 現在年度なら5月までの月を表示対象とする\n    if (displayFiscalYear === systemCurrentYear) {\n      // 4-12月は2025年、1-3月は2026年の暦月として処理\n      const result = year < systemCurrentYear || year === systemCurrentYear && month <= systemCurrentMonth;\n      console.log(`【判定】現在年度(${displayFiscalYear}年)の表示: ${year}/${month}月 vs 現在${systemCurrentYear}/${systemCurrentMonth}月 → ${result ? '表示する' : '表示しない'}`);\n      return result;\n    }\n\n    // 表示年度が未来年度の場合（表示年度 > 現在システム年度）\n    // 現在（システム）日付までのみ表示（※通常は発生しない条件だが念のため）\n    if (displayFiscalYear > systemCurrentYear) {\n      // 未来年度の場合は特別処理：現在月までのみ表示\n      const result = year < systemCurrentYear || year === systemCurrentYear && month <= systemCurrentMonth;\n      console.log(`【判定】未来年度(${displayFiscalYear}年)の表示: ${year}/${month}月 vs 現在${systemCurrentYear}/${systemCurrentMonth}月 → ${result ? '表示する' : '表示しない'}`);\n      return result;\n    }\n\n    // それ以外は表示しない（通常はここには来ない）\n    console.log(`【判定】不明な条件のため表示しない: ${year}/${month}月`);\n    return false;\n  };\n\n  // フィールド更新ハンドラー\n  const handleFieldChange = (id, field, value) => {\n    console.log(`【フィールド変更】ID=${id}, フィールド=${field}, 値=${value}, 型=${typeof value}`);\n\n    // 入力値の状態を更新\n    setInputValues(prev => ({\n      ...prev,\n      [`${id}-${field}`]: value\n    }));\n\n    // ローカル従業員データの状態を更新\n    setLocalEmployees(prev => {\n      // 変更前のデータを取得（退職処理のためのログとチェック）\n      const prevEmployee = prev.find(emp => emp.id === id);\n      if (prevEmployee) {\n        console.log(`【変更前】従業員データ:`, {\n          ID: prevEmployee.id,\n          名前: prevEmployee.name,\n          状態: prevEmployee.status,\n          採用日: prevEmployee.hire_date,\n          退職日: prevEmployee.retirement_date,\n          HC: prevEmployee.hc\n        });\n      }\n      return prev.map(emp => {\n        if (emp.id === id) {\n          // 値の適切な型変換を行う\n          let convertedValue = value;\n          if (field === 'status' && typeof value !== 'string') {\n            convertedValue = String(value);\n          }\n\n          // 状態が退職に変更された場合、将来年度のデータをクリーンアップする\n          if (field === 'status' && value === '退職' && emp.status !== '退職') {\n            console.log(`従業員ID=${id}の状態が退職に変更されました。将来年度のデータをクリーンアップします。`);\n\n            // 現在の年度を取得\n            const currentFiscalYear = fiscalYear;\n\n            // 未来の年度に対して処理を行う（現在の年度+1から2030年まで）\n            for (let year = currentFiscalYear + 1; year <= 2030; year++) {\n              const futureYearStorageKey = `EMPLOYEE_DATA_${year}`;\n              try {\n                // 該当年度のデータを取得\n                const futureYearData = localStorage.getItem(futureYearStorageKey);\n                if (futureYearData) {\n                  const parsedData = JSON.parse(futureYearData);\n\n                  // 退職従業員のデータがあるか確認\n                  if (parsedData[id]) {\n                    // 退職従業員のデータを削除\n                    delete parsedData[id];\n\n                    // 更新したデータを保存\n                    localStorage.setItem(futureYearStorageKey, JSON.stringify(parsedData));\n                    console.log(`従業員ID=${id}の${year}年度のデータを削除しました`);\n                  }\n                }\n              } catch (error) {\n                console.error(`${year}年度のデータクリーンアップでエラーが発生しました:`, error);\n              }\n            }\n          }\n\n          // フィールド更新と退職処理を一度に行う\n          let updatedFields = {\n            [field]: convertedValue\n          };\n\n          // 重要: 「退職」状態への変更を特別に処理\n          if (field === 'status' && convertedValue === '退職') {\n            console.log(`【退職処理】従業員が退職状態に変更されました - ID=${id}`);\n\n            // 退職日が未設定の場合は、現在の表示月を退職月として設定\n            if (!emp.retirement_date) {\n              // 現在の年月を退職日として設定（2025年5月を使用）\n              const retirementYear = 2025;\n              const retirementMonth = 5;\n              const retirementDay = 1; // 月初日を使用\n\n              const retirementDate = `${retirementYear}/${retirementMonth}/${retirementDay}`;\n              // フィールド更新に退職日も追加\n              updatedFields.retirement_date = retirementDate;\n              console.log(`【退職処理】退職日を自動設定しました: ${retirementDate}`);\n            }\n          }\n\n          // すべての更新フィールドを適用\n          const updatedEmp = {\n            ...emp,\n            ...updatedFields\n          };\n          console.log(`【更新後】フィールド \"${field}\" を更新:`, {\n            ID: updatedEmp.id,\n            名前: updatedEmp.name,\n            状態: updatedEmp.status,\n            採用日: updatedEmp.hire_date,\n            退職日: updatedEmp.retirement_date,\n            HC: updatedEmp.hc\n          });\n\n          // 採用日または状態が変更された場合は、HC値に基づいて月次ステータスを再計算\n          if (field === 'status' || field === 'hire_date') {\n            console.log(`[HC] ${field}が変更されたため自動計算を実行します`);\n            console.log(`【重要フィールド変更】\"${field}\" が変更されたため、HC自動計算を実行します`);\n\n            // 少し遅延して実行（状態が先に更新されるのを待つ）\n            setTimeout(() => {\n              console.log(`【HC自動計算】実行開始 - ID=${id}, フィールド=${field}, 値=${value}`);\n              updateMonthlyStatusFromHc(updatedEmp);\n              console.log(`【HC自動計算】実行完了 - ID=${id}`);\n            }, 50); // 確実に更新後に実行されるよう少し長めの遅延を設定\n          }\n          return updatedEmp;\n        }\n        return emp;\n      });\n    });\n  };\n\n  // 新規行データの更新ハンドラー\n  const handleNewRowFieldChange = (field, value) => {\n    console.log(`【新規行】フィールド変更: フィールド=${field}, 値=${value}, 型=${typeof value}`);\n    setInputValues(prev => ({\n      ...prev,\n      [`new-${field}`]: value\n    }));\n\n    // 重要: 「退職」状態への変更を特別に処理\n    if (field === 'status' && value === '退職') {\n      console.log(`【新規行】退職状態に変更されました`);\n\n      // 退職日が未設定の場合は、現在の表示月を退職月として設定\n      const hasRetirementDate = newRowData && typeof newRowData === 'object' && 'retirement_date' in newRowData && Boolean(newRowData.retirement_date);\n      if (!hasRetirementDate) {\n        // 現在の年月を退職日として設定（2025年5月を使用）\n        const retirementYear = 2025;\n        const retirementMonth = 5;\n        const retirementDay = 1; // 月初日を使用\n\n        const retirementDate = `${retirementYear}/${retirementMonth}/${retirementDay}`;\n        setNewRowData(prev => ({\n          ...prev,\n          [field]: value,\n          retirement_date: retirementDate\n        }));\n        console.log(`【新規行】退職日を自動設定しました: ${retirementDate}`);\n\n        // 採用日または状態が変更された場合は、HC値に基づいて月次ステータスを再計算\n        if (newRowData.hc !== undefined) {\n          console.log(`[HC] 新規行退職時: 自動計算を実行します`);\n          console.log(`【新規行】重要フィールド \"${field}\" が変更されたため、HC自動計算を実行します`);\n          setTimeout(() => {\n            // 非同期で月次ステータスを更新（状態変更が適用されるのを待つ）\n            const updatedNewRowData = {\n              ...newRowData,\n              [field]: value,\n              retirement_date: retirementDate\n            };\n            console.log(`【新規行】HC自動計算実行開始: `, updatedNewRowData);\n            // 型を明示的に指定してキャスト\n            updateMonthlyStatusForNewRow(updatedNewRowData);\n            console.log(`【新規行】HC自動計算実行完了`);\n          }, 100);\n        }\n        return; // 早期リターン\n      }\n    }\n\n    // 通常のフィールド更新\n    setNewRowData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n\n    // 採用日または状態が変更された場合は、HC値に基づいて月次ステータスを再計算\n    if ((field === 'status' || field === 'hire_date') && newRowData.hc !== undefined) {\n      console.log(`[HC] 新規行: ${field}が変更されたため自動計算を実行します`);\n      console.log(`【新規行】重要フィールド \"${field}\" が変更されたため、HC自動計算を実行します`);\n      setTimeout(() => {\n        // 非同期で月次ステータスを更新（状態変更が適用されるのを待つ）\n        const updatedNewRowData = {\n          ...newRowData,\n          [field]: field === 'status' ? String(value) : value // 状態は明示的に文字列に変換\n        };\n        console.log(`新規行 HC自動計算実行開始 - フィールド=${field}, 値=${value}`);\n        updateMonthlyStatusForNewRow(updatedNewRowData);\n        console.log(`新規行 HC自動計算実行完了`);\n      }, 50); // 確実に更新後に実行されるよう少し長めの遅延を設定\n    }\n  };\n\n  // 新規行のHC値変更ハンドラー\n  const handleNewRowHcChange = value => {\n    console.log(`[HC] handleNewRowHcChange呼び出し: 値=${value}`);\n    console.log(`新規行のHC値変更: 値=${value}`);\n\n    // 新規行データの確認\n    console.log('[DEBUG] handleNewRowHcChange対象データ:', {\n      新規行データあり: !!newRowData,\n      現在のHC値: newRowData === null || newRowData === void 0 ? void 0 : newRowData.hc,\n      新しい値: value,\n      状態: newRowData === null || newRowData === void 0 ? void 0 : newRowData.status,\n      採用日: newRowData === null || newRowData === void 0 ? void 0 : newRowData.hire_date\n    });\n\n    // 数値入力チェック\n    if (value === '') {\n      // 空の場合は許可\n      setInputValues(prev => ({\n        ...prev,\n        [`new-hc`]: value\n      }));\n\n      // 空の場合はHC値をクリア\n      setNewRowData(prev => {\n        const updated = {\n          ...prev,\n          hc: undefined\n        };\n\n        // HC値がクリアされた場合は月次ステータスも全てクリア\n        setTimeout(() => {\n          console.log(`新規行: HC値クリア時の月次ステータス更新`);\n          setNewRowData(current => ({\n            ...current,\n            monthlyStatus: Array(12).fill('')\n          }));\n        }, 50);\n        return updated;\n      });\n      setErrorMessage(null);\n      return;\n    }\n\n    // セレクトボックスからの値を数値に変換\n    const numValue = parseFloat(value);\n    // ドロップダウンメニューからの選択値なので入力チェックは不要（常に有効な値）\n\n    // 入力値の状態を更新\n    setInputValues(prev => ({\n      ...prev,\n      [`new-hc`]: value\n    }));\n\n    // 新規行データの状態を更新\n    const updatedNewRowData = {\n      ...newRowData,\n      hc: numValue,\n      // 明示的に型を確保\n      status: String(newRowData.status || ''),\n      employee_id: newRowData.employee_id || '',\n      name: newRowData.name || '',\n      disability_type: newRowData.disability_type || '',\n      disability: newRowData.disability || '',\n      grade: newRowData.grade || '',\n      hire_date: newRowData.hire_date || ''\n    };\n    setNewRowData(updatedNewRowData);\n\n    // 月次ステータス値を自動計算（採用日と状態がある場合のみ）\n    if (updatedNewRowData.status && updatedNewRowData.hire_date) {\n      console.log(`[HC] 新規行HC値変更後の自動計算を実行します - 値=${numValue}`);\n      console.log(`新規行 HC自動計算実行開始（HC値変更時） - 値=${numValue}`);\n      // 必ず計算ロジックを呼び出す\n      updateMonthlyStatusForNewRow(updatedNewRowData);\n      console.log(`新規行 HC自動計算実行完了（HC値変更時）`);\n    } else {\n      console.log(`新規行: HC値を${numValue}に設定しましたが、採用日または状態が設定されていないため自動計算を実行しません`, {\n        status: updatedNewRowData.status,\n        hire_date: updatedNewRowData.hire_date\n      });\n    }\n    setErrorMessage(null);\n  };\n\n  // 新規行の採用日と状態に基づいて月次ステータスを更新する関数\n\n  const updateMonthlyStatusForNewRow = rowData => {\n    console.log('[HC] 新規行計算処理開始');\n    console.log(`===== 【新規行】HC自動計算関数開始 =====`);\n\n    // 必要なデータがない場合は何もしない\n    if (!rowData.hire_date || !rowData.status || rowData.hc === undefined) {\n      console.log('【新規行】自動計算に必要なデータがありません:', {\n        hire_date: rowData.hire_date,\n        status: rowData.status,\n        hc: rowData.hc\n      });\n      return;\n    }\n\n    // 退職状態の場合に退職日の確認\n    if (rowData.status === '退職' && !rowData.retirement_date) {\n      console.log('【新規行】退職状態だが退職日が未設定のため、現在月を退職日として自動設定します');\n\n      // 現在の年月を退職日として設定（2025年5月を使用）\n      const retirementYear = 2025;\n      const retirementMonth = 5;\n      const retirementDay = 1; // 月初日を使用\n\n      rowData.retirement_date = `${retirementYear}/${retirementMonth}/${retirementDay}`;\n    }\n    console.log(`新規行 HC自動計算用データ:`, {\n      従業員名: rowData.name,\n      採用日: rowData.hire_date,\n      状態: rowData.status,\n      HC値: rowData.hc\n    });\n    try {\n      // 採用日をDateオブジェクトに変換\n      const hireDateParts = rowData.hire_date.split('/');\n      if (hireDateParts.length !== 3) {\n        console.error('採用日のフォーマットが不正です:', rowData.hire_date);\n        return;\n      }\n      const hireYear = parseInt(hireDateParts[0]);\n      const hireMonth = parseInt(hireDateParts[1]);\n      const hireDay = parseInt(hireDateParts[2]);\n      if (isNaN(hireYear) || isNaN(hireMonth) || isNaN(hireDay)) {\n        console.error('採用日のパースに失敗しました:', {\n          hireYear,\n          hireMonth,\n          hireDay\n        });\n        return;\n      }\n\n      // 現在の月次ステータスを取得または初期化\n      const newMonthlyStatus = [...(rowData.monthlyStatus || Array(12).fill(''))];\n\n      // 表示年度と表示月を取得\n      const displayYear = fiscalYear;\n      const displayMonth = month;\n\n      // 現在の実際の年月を取得（システム日付）\n      const currentDate = new Date();\n      const currentYear = currentDate.getFullYear();\n      const currentMonth = currentDate.getMonth() + 1; // JavaScriptの月は0始まり\n\n      // システム年度と表示年度の関係を分かりやすく表示\n      const yearRelation = displayYear < currentYear ? \"過去\" : displayYear === currentYear ? \"現在\" : \"未来\";\n      console.log(`新規行 HC自動計算 - 採用日: ${hireYear}/${hireMonth}/${hireDay}, ` + `表示年度(${yearRelation}年度): ${displayYear}/${displayMonth}, ` + `現在日付: ${currentYear}/${currentMonth}`);\n\n      // 各月について処理\n      monthNumbers.forEach((monthNum, index) => {\n        // 会計年度を考慮して年を調整（1-3月は次の年）\n        const calendarYear = monthNum >= 4 ? displayYear : displayYear + 1;\n\n        // 採用月以降かどうか\n        const isAfterHireDate = isDateAfterHireDate(calendarYear, monthNum, hireYear, hireMonth);\n\n        // 表示年度を考慮した現在月以前かどうか\n        const isBeforeCurrentRealMonth = isBeforeOrEqualCurrentMonth(calendarYear, monthNum, currentYear, currentMonth);\n\n        // 詳細なログ出力（デバッグ用）\n        console.log(`新規行 月[${index + 1}]=${monthNumbers[index]}月の処理: 暦年${calendarYear}, ` + `採用日以降=${isAfterHireDate}, 表示対象=${isBeforeCurrentRealMonth}`);\n\n        // 状態に応じた処理\n        if (rowData.status === '在籍') {\n          // 在籍の場合、採用日以降かつ表示対象かどうかで判定\n          if (isAfterHireDate && isBeforeCurrentRealMonth) {\n            newMonthlyStatus[index] = rowData.hc;\n            console.log(`  → 在籍: ${monthNumbers[index]}月にHC値${rowData.hc}を設定`);\n          } else if (!isAfterHireDate) {\n            newMonthlyStatus[index] = '';\n            console.log(`  → 在籍: ${monthNumbers[index]}月は採用日前のため空白`);\n          } else {\n            newMonthlyStatus[index] = '';\n            console.log(`  → 在籍: ${monthNumbers[index]}月は未来月のため空白`);\n          }\n        } else if (rowData.status === '退職') {\n          // 退職日の取得\n\n          let retirementMonth = null;\n          if (rowData.retirement_date) {\n            const retirementParts = rowData.retirement_date.split('/');\n            if (retirementParts.length === 3) {\n              const retireYear = parseInt(retirementParts[0]);\n              const retireMonth = parseInt(retirementParts[1]);\n              retirementMonth = {\n                year: retireYear,\n                month: retireMonth\n              };\n            }\n          }\n\n          // 退職月以前かどうか\n          let isBeforeRetirementMonth = true;\n          if (retirementMonth) {\n            isBeforeRetirementMonth = calendarYear < retirementMonth.year || calendarYear === retirementMonth.year && monthNum <= retirementMonth.month;\n            console.log(`【新規行】【退職月判定】${monthNumbers[index]}月: 退職月(${retirementMonth.year}/${retirementMonth.month})以前=${isBeforeRetirementMonth}`);\n          }\n\n          // 退職の場合、採用日以降かつ表示月以前かつ退職月以前はHC値を設定\n          if (isAfterHireDate && isBeforeCurrentRealMonth) {\n            if (retirementMonth && !isBeforeRetirementMonth) {\n              // 退職月が設定されており、それより後の月は空白に\n              newMonthlyStatus[index] = '';\n              console.log(`  → 退職: ${monthNumbers[index]}月は退職月(${retirementMonth.year}/${retirementMonth.month})より後のため空白`);\n            } else {\n              // 退職月以前（または退職月未設定）なら表示\n              newMonthlyStatus[index] = rowData.hc;\n              console.log(`  → 退職: ${monthNumbers[index]}月にHC値${rowData.hc}を設定`);\n            }\n          } else if (!isAfterHireDate) {\n            newMonthlyStatus[index] = '';\n            console.log(`  → 退職: ${monthNumbers[index]}月は採用日前のため空白`);\n          } else {\n            newMonthlyStatus[index] = '';\n            console.log(`  → 退職: ${monthNumbers[index]}月は未来月のため空白`);\n          }\n        } else {\n          // その他の状態は変更なし\n          console.log(`  → その他の状態: ${rowData.status} - 変更なし`);\n        }\n      });\n\n      // 新規行データの月次ステータスを更新\n      setNewRowData(prev => ({\n        ...prev,\n        monthlyStatus: newMonthlyStatus\n      }));\n      console.log('新規行の月次ステータスを自動計算しました:', newMonthlyStatus);\n      console.log(`===== 新規行 HC自動計算関数終了 =====`);\n    } catch (error) {\n      console.error('新規行の月次ステータスの自動計算でエラーが発生しました:', error);\n      console.log(`===== 新規行 HC自動計算関数エラー終了 =====`);\n    }\n  };\n\n  // 月次ステータス更新ハンドラー\n  const handleMonthlyStatusChange = (id, monthIndex, value) => {\n    console.log(`月次ステータス変更: ID=${id}, 月=${monthIndex}, 値=${value}`);\n\n    // 入力値を状態に保存\n    setInputValues(prev => ({\n      ...prev,\n      [`${id}-monthlyStatus-${monthIndex}`]: value\n    }));\n\n    // 空の場合は空文字列を設定\n    if (value === \"\") {\n      setLocalEmployees(prev => {\n        return prev.map(emp => {\n          if (emp.id === id) {\n            const newMonthlyStatus = [...(emp.monthlyStatus || Array(12).fill(''))];\n            newMonthlyStatus[monthIndex] = '';\n            return {\n              ...emp,\n              monthlyStatus: newMonthlyStatus\n            };\n          }\n          return emp;\n        });\n      });\n      setErrorMessage(null);\n      return;\n    }\n\n    // 数値変換\n    let convertedValue = value;\n    // 数値としてパース\n    if (value === \"1\" || value === \"2\" || value === \"0\" || value === \"0.5\") {\n      convertedValue = parseFloat(value);\n    }\n\n    // 有効な値かどうか確認\n    const validValues = [0, 0.5, 1, 2];\n    const numValue = parseFloat(value);\n    if (!isNaN(numValue) && validValues.includes(numValue)) {\n      console.log(`有効な月次ステータス値を設定: ID=${id}, 月=${monthIndex}, 値=${convertedValue}`);\n      setLocalEmployees(prev => {\n        return prev.map(emp => {\n          if (emp.id === id) {\n            const newMonthlyStatus = [...(emp.monthlyStatus || Array(12).fill(''))];\n            newMonthlyStatus[monthIndex] = convertedValue;\n\n            // 変更後の状態をログ出力\n            console.log(`ID=${id}の月次ステータス更新後:`, newMonthlyStatus);\n            return {\n              ...emp,\n              monthlyStatus: newMonthlyStatus\n            };\n          }\n          return emp;\n        });\n      });\n      setErrorMessage(null);\n    } else {\n      setErrorMessage(\"月次ステータスには 0, 0.5, 1, 2 のいずれかを入力してください\");\n    }\n  };\n\n  // 新規行の月次ステータス更新ハンドラー\n  const handleNewRowMonthlyStatusChange = (monthIndex, value) => {\n    console.log(`新規行月次ステータス変更: 月=${monthIndex}, 値=${value}`);\n    setInputValues(prev => ({\n      ...prev,\n      [`new-monthlyStatus-${monthIndex}`]: value\n    }));\n    if (value === \"\") {\n      setNewRowData(prev => {\n        const newMonthlyStatus = [...(prev.monthlyStatus || Array(12).fill(''))];\n        newMonthlyStatus[monthIndex] = '';\n        return {\n          ...prev,\n          monthlyStatus: newMonthlyStatus\n        };\n      });\n      setErrorMessage(null);\n      return;\n    }\n    const numValue = parseFloat(value);\n    const validValues = [0, 0.5, 1, 2];\n    if (isNaN(numValue) || !validValues.includes(numValue)) {\n      setErrorMessage(\"月次ステータスには 0, 0.5, 1, 2 のいずれかを入力してください\");\n      return;\n    }\n    setNewRowData(prev => {\n      const newMonthlyStatus = [...(prev.monthlyStatus || Array(12).fill(''))];\n      newMonthlyStatus[monthIndex] = numValue;\n      return {\n        ...prev,\n        monthlyStatus: newMonthlyStatus\n      };\n    });\n    setErrorMessage(null);\n  };\n\n  // 新規追加行を表示するハンドラー\n  const handleAddNewRow = () => {\n    console.log('新規行追加を開始');\n    if (!actualIsEditing) {\n      setInternalIsEditing(true);\n      if (onToggleEditMode) {\n        onToggleEditMode();\n      }\n    }\n    const nextNo = Math.max(...localEmployees.map(emp => emp.no || 0), 0) + 1;\n    setNewRowData({\n      ...defaultEmployee,\n      no: nextNo\n    });\n    setIsAddingNewRow(true);\n  };\n\n  // 新規行のキャンセルハンドラー\n  const handleCancelNewRow = () => {\n    console.log('新規行追加をキャンセル');\n    setIsAddingNewRow(false);\n    setErrorMessage(null);\n    setInputValues(prev => {\n      const filtered = Object.keys(prev).reduce((acc, key) => {\n        if (!key.startsWith('new-')) {\n          acc[key] = prev[key];\n        }\n        return acc;\n      }, {});\n      return filtered;\n    });\n  };\n\n  // 従業員データの削除ハンドラー\n  const handleDeleteEmployee = async id => {\n    console.log(`従業員削除ボタンがクリックされました: ID=${id}`);\n    if (!window.confirm('この従業員データを削除してもよろしいですか？\\n（バックアップが自動的に作成されます）')) {\n      console.log('削除操作がキャンセルされました');\n      return;\n    }\n    setIsLoading(true);\n    try {\n      console.log(`従業員削除開始: ID=${id}`);\n\n      // 新しい削除関数を使用\n      const result = await deleteEmployeeFromDB(id);\n      console.log('削除結果:', result);\n      if (result.success) {\n        // 削除成功時はUIを更新（すでにdeleteEmployeeFromDB内で実行されているが、念のため）\n        setLocalEmployees(prev => prev.filter(emp => emp.id !== id));\n        setOriginalEmployees(prev => prev.filter(emp => emp.id !== id));\n\n        // 成功メッセージ\n        setSuccessMessage(`従業員データを削除しました。バックアップ: ${result.backupPath}`);\n        setTimeout(() => setSuccessMessage(null), 5000);\n\n        // データ更新通知\n        if (onRefreshData) {\n          onRefreshData();\n        }\n      } else {\n        // 削除失敗\n        setErrorMessage(result.message || '削除処理に失敗しました');\n        setTimeout(() => setErrorMessage(null), 5000);\n      }\n    } catch (error) {\n      console.error('従業員削除エラー:', error);\n      setErrorMessage(error instanceof Error ? error.message : String(error));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 新規行の保存ハンドラー\n  const handleSaveNewRow = async () => {\n    // 入力検証 - より詳細な検証\n    const validationErrors = [];\n    if (!newRowData.name) {\n      validationErrors.push(\"名前は必須です\");\n    }\n    if (!newRowData.employee_id) {\n      validationErrors.push(\"社員IDは必須です\");\n    }\n\n    // 複数の検証エラーがある場合は、それらを表示して終了\n    if (validationErrors.length > 0) {\n      setErrorMessage(validationErrors.join(\"、\"));\n      return Promise.reject(validationErrors.join(\"、\"));\n    }\n    setIsLoading(true);\n    try {\n      console.log(`${fiscalYear}年に新規従業員データを作成します:`, newRowData);\n\n      // APIを通じての作成を試みる\n      // 深いコピーを作成して送信することで、オリジナルデータが失われないようにする\n      const dataToSend = JSON.parse(JSON.stringify(newRowData));\n\n      // カスタムプロパティを追加\n      dataToSend._timestamp = new Date().toISOString(); // 一意性を確保するためのタイムスタンプ\n\n      // 月パラメータは使用しないため0を渡す（APIの整合性のため）\n      const createdEmployee = await reportApi.createEmployeeDetail(fiscalYear, 0, dataToSend);\n      console.log(`作成された従業員データ:`, createdEmployee);\n\n      // 応答データの検証と変換\n      let newEmp;\n      if (createdEmployee && createdEmployee.employee && createdEmployee.employee.id) {\n        // APIから返された従業員データを使用\n        newEmp = createdEmployee.employee;\n\n        // 月次ステータスが配列でない場合は配列に変換\n        if (!Array.isArray(newEmp.monthlyStatus)) {\n          newEmp.monthlyStatus = Array(12).fill('');\n        }\n      } else {\n        // フォールバック: クライアント側でデータを生成\n        const timestamp = new Date().getTime();\n        const randomPart = Math.floor(Math.random() * 1000);\n        const tempId = parseInt(`${timestamp % 100000}${randomPart}`.substring(0, 6));\n        newEmp = {\n          ...newRowData,\n          id: tempId,\n          fiscal_year: fiscalYear,\n          monthlyStatus: Array.isArray(newRowData.monthlyStatus) ? newRowData.monthlyStatus : Array(12).fill('')\n        };\n        console.log('APIレスポンスからデータを取得できなかったため、クライアント側で生成:', newEmp);\n      }\n\n      // ローカル状態の更新\n      setLocalEmployees(prev => [...prev, newEmp]);\n      setOriginalEmployees(prev => [...prev, newEmp]);\n\n      // 成功メッセージの表示 - 年度に応じてメッセージを変更\n      if (fiscalYear >= 2024) {\n        setSuccessMessage(`将来年度(${fiscalYear}年)の従業員データをクライアント側で作成しました (ID: ${newEmp.id})`);\n        console.log(`新規従業員を保存しました: ID=${newEmp.id}, 名前=${newEmp.name}`);\n      } else {\n        setSuccessMessage('従業員データを作成しました');\n      }\n      setTimeout(() => setSuccessMessage(null), 3000);\n\n      // 新規追加モードを解除するが、入力値は保持する\n      setIsAddingNewRow(false);\n\n      // 成功した場合のみ入力値をクリア\n      if (createdEmployee && (createdEmployee.success || createdEmployee.employee)) {\n        console.log('データ保存成功: 入力値をクリアします');\n        setNewRowData({\n          ...defaultEmployee\n        }); // デフォルト値に戻す\n\n        // 入力値をクリア\n        setInputValues(prev => {\n          const filtered = Object.keys(prev).reduce((acc, key) => {\n            if (!key.startsWith('new-')) {\n              acc[key] = prev[key];\n            }\n            return acc;\n          }, {});\n          return filtered;\n        });\n      } else {\n        console.log('データ保存失敗: 入力値を保持します');\n      }\n\n      // 親コンポーネントへの通知\n      if (onRefreshData) {\n        console.log('親コンポーネントにデータ更新を通知');\n        onRefreshData();\n      }\n      return Promise.resolve(newEmp);\n    } catch (error) {\n      console.error('従業員作成エラー:', error);\n\n      // 拡張したエラーハンドリング関数を使用して適切なメッセージを表示\n      setErrorMessage(reportApi.handleApiError(error));\n\n      // 自動リトライの実装（2024年以降のデータに限り、クライアント側での保存を試みる）\n      if (fiscalYear >= 2024) {\n        console.log(`APIエラーが発生しましたが、将来年度(${fiscalYear}年)のデータなのでクライアント側で作成を試みます`);\n        try {\n          // タイムスタンプベースの一貫性のあるID生成\n          const timestamp = new Date().getTime();\n          const randomPart = Math.floor(Math.random() * 1000);\n          const tempId = parseInt(`${timestamp % 100000}${randomPart}`.substring(0, 6));\n\n          // 既存の従業員データから次のNo値を計算\n          const existingNos = localEmployees.map(emp => emp.no || 0);\n          const maxNo = existingNos.length > 0 ? Math.max(...existingNos) : 0;\n          const nextNo = maxNo + 1;\n          console.log(`エラー時の新規従業員のNo生成: 既存No=${existingNos.join(',')}, 最大No=${maxNo}, 次のNo=${nextNo}`);\n          const newEmp = {\n            ...newRowData,\n            id: tempId,\n            no: nextNo,\n            // 連番のNo値を設定\n            fiscal_year: fiscalYear,\n            monthlyStatus: Array.isArray(newRowData.monthlyStatus) ? newRowData.monthlyStatus : Array(12).fill('')\n          };\n\n          // ローカル状態の更新\n          setLocalEmployees(prev => [...prev, newEmp]);\n          setOriginalEmployees(prev => [...prev, newEmp]);\n\n          // ユーザーへのフィードバック\n          setSuccessMessage(`APIエラーが発生しましたが、${fiscalYear}年のデータをクライアント側で作成しました`);\n          setTimeout(() => {\n            setSuccessMessage(null);\n            setErrorMessage(null);\n          }, 3000);\n\n          // 新規追加モードを解除するが、入力値は保持する（エラー時は特に重要）\n          setIsAddingNewRow(false);\n\n          // 親コンポーネントへの通知\n          if (onRefreshData) {\n            onRefreshData();\n          }\n          return Promise.resolve(newEmp);\n        } catch (fallbackError) {\n          console.error('フォールバック処理中のエラー:', fallbackError);\n          // フォールバック処理中にエラーが発生した場合は元のエラーを返す\n          return Promise.reject(error);\n        }\n      }\n      return Promise.reject(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 保存ボタンのハンドラー\n  const handleSave = async () => {\n    setIsLoading(true);\n    console.log('従業員データ保存開始');\n    console.log('保存するデータ件数:', localEmployees.length);\n    console.log('=== デバッグ情報 ===');\n    console.log('ストレージキー:', `EMPLOYEE_DATA_${fiscalYear}`);\n    console.log('LocalStorage keys:', Object.keys(localStorage));\n    setErrorMessage(null);\n    try {\n      const originalEmps = originalEmployees.length > 0 ? originalEmployees : [];\n      const successfulUpdates = [];\n      const failedUpdates = [];\n      const skippedUpdates = []; // 変更がなかったものを追跡\n\n      // 2024年以降のデータの場合は特別な処理\n      const is2024OrLater = fiscalYear >= 2024;\n\n      // 一括更新のための変更の事前計算\n      const changesByEmployee = {};\n\n      // すべての従業員の変更を検出\n      for (const emp of localEmployees) {\n        const originalEmp = originalEmps.find(e => e.id === emp.id);\n        if (originalEmp) {\n          const changedFields = {};\n\n          // 各フィールドの変更を確認\n          ['employee_id', 'name', 'disability_type', 'disability', 'grade', 'hire_date', 'status', 'memo', 'hc'].forEach(field => {\n            // HC値がnumberの場合は文字列に変換して比較\n            const originalValue = field === 'hc' ? originalEmp[field] !== undefined ? String(originalEmp[field]) : '' : originalEmp[field];\n            const newValue = field === 'hc' ? emp[field] !== undefined ? String(emp[field]) : '' : emp[field];\n            if (originalValue !== newValue) {\n              // 値がundefinedやnullの場合は空文字列に変換\n              const value = emp[field];\n              changedFields[field] = String(value !== undefined && value !== null ? value : '');\n\n              // 詳細なログ出力（デバッグ用）\n              console.log(`フィールド ${field} の変更検出:`, {\n                original: originalEmp[field],\n                new: emp[field],\n                processed: changedFields[field]\n              });\n            }\n          });\n\n          // 月次ステータスの変更を確認\n          if (JSON.stringify(originalEmp.monthlyStatus) !== JSON.stringify(emp.monthlyStatus)) {\n            changedFields['monthlyStatus'] = JSON.stringify(emp.monthlyStatus);\n          }\n\n          // 変更があれば追跡\n          if (Object.keys(changedFields).length > 0) {\n            changesByEmployee[emp.id] = changedFields;\n          } else {\n            skippedUpdates.push(emp.id);\n          }\n        }\n      }\n      console.log(`検出された変更: ${Object.keys(changesByEmployee).length}件`, changesByEmployee);\n\n      // 2024年以降のデータの場合、localStorage に全データを保存\n      if (is2024OrLater) {\n        try {\n          // StorageKeyを生成\n          const storageKey = `EMPLOYEE_DATA_${fiscalYear}`;\n          let savedEmployees = {};\n          try {\n            const savedData = localStorage.getItem(storageKey);\n            if (savedData) {\n              savedEmployees = JSON.parse(savedData);\n            }\n          } catch (e) {\n            console.error('ローカルストレージの読み取りエラー:', e);\n          }\n\n          // 現在のすべての従業員データを保存\n          const allEmployeesForStorage = localEmployees.reduce((acc, emp) => {\n            if (emp.id) {\n              acc[emp.id] = {\n                ...emp,\n                fiscal_year: fiscalYear,\n                updated_at: new Date().toISOString()\n              };\n            }\n            return acc;\n          }, {});\n          console.log(`ローカルストレージに保存するデータ:`, allEmployeesForStorage);\n\n          // ローカルストレージに保存\n          localStorage.setItem(storageKey, JSON.stringify(allEmployeesForStorage));\n\n          // 保存が成功したか確認\n          const savedData = localStorage.getItem(storageKey);\n          if (savedData) {\n            const savedEmployeesObj = JSON.parse(savedData);\n            const savedEmployeesCount = Object.keys(savedEmployeesObj).length;\n            console.log(`${fiscalYear}年の従業員データをローカルストレージに保存しました`, savedEmployeesCount, '件');\n            console.log('保存確認 - 保存されたデータキー:', Object.keys(savedEmployeesObj));\n\n            // 保存後のデバッグ情報\n            console.log('=== 保存後のデバッグ情報 ===');\n            console.log('LocalStorage keys after save:', Object.keys(localStorage));\n            console.log('現在のストレージキー:', storageKey);\n            if (savedEmployeesCount === 0) {\n              console.warn('ローカルストレージに保存されたデータが空です。再試行します。');\n              // 再度保存を試みる\n              localStorage.setItem(storageKey, JSON.stringify(allEmployeesForStorage));\n              const retryData = localStorage.getItem(storageKey);\n              if (!retryData || Object.keys(JSON.parse(retryData)).length === 0) {\n                throw new Error('ローカルストレージへの保存に再試行しても失敗しました。');\n              }\n            }\n\n            // 親コンポーネントに変更を通知\n            if (onEmployeesUpdate) {\n              console.log('親コンポーネントに従業員データ更新を通知:', localEmployees.length, '件');\n              onEmployeesUpdate(localEmployees);\n            }\n\n            // すべての保存を成功として扱う\n            successfulUpdates.push(...localEmployees.map(emp => emp.id));\n          } else {\n            console.error('ローカルストレージへの保存に失敗しました。ストレージキー:', storageKey);\n            console.error('現在のローカルストレージキー一覧:', Object.keys(localStorage));\n            throw new Error('ローカルストレージへの保存に失敗しました。');\n          }\n        } catch (storageError) {\n          console.error('ローカルストレージへの保存エラー:', storageError);\n          // エラーメッセージを設定\n          setErrorMessage('ローカルストレージへの保存中にエラーが発生しました。');\n          failedUpdates.push(...localEmployees.map(emp => emp.id));\n        }\n      } else {\n        // 2023年以前のデータはAPI経由で更新\n        // バッチ処理の最大サイズ\n        const BATCH_SIZE = 5;\n        const employeeIds = Object.keys(changesByEmployee).map(Number);\n\n        // バッチ処理のために従業員IDをチャンクに分割\n        for (let i = 0; i < employeeIds.length; i += BATCH_SIZE) {\n          const batchIds = employeeIds.slice(i, i + BATCH_SIZE);\n          console.log(`処理バッチ ${i / BATCH_SIZE + 1}: 従業員ID ${batchIds.join(', ')}`);\n\n          // 並列処理のためのプロミス配列\n          const updatePromises = batchIds.map(async empId => {\n            const changedFields = changesByEmployee[empId];\n            try {\n              console.log(`従業員ID=${empId}の更新データ:`, changedFields);\n\n              // API呼び出し\n              const result = await reportApi.updateEmployeeData(fiscalYear, empId, changedFields);\n              console.log(`従業員ID=${empId}の更新結果:`, result);\n\n              // 親コンポーネントに変更を通知\n              Object.entries(changedFields).forEach(([field, value]) => {\n                onEmployeeChange(empId, field, value);\n              });\n              return {\n                success: true,\n                id: empId\n              };\n            } catch (error) {\n              console.error(`従業員ID ${empId} の更新エラー:`, error);\n              return {\n                success: false,\n                id: empId,\n                error\n              };\n            }\n          });\n\n          // 各バッチの結果を処理\n          const results = await Promise.allSettled(updatePromises);\n\n          // 結果の集計\n          results.forEach((result, index) => {\n            const empId = batchIds[index];\n            if (result.status === 'fulfilled') {\n              if (result.value.success) {\n                successfulUpdates.push(empId);\n              } else {\n                failedUpdates.push(empId);\n              }\n            } else {\n              console.error(`従業員ID=${empId}の更新中に予期せぬエラーが発生:`, result.reason);\n              failedUpdates.push(empId);\n            }\n          });\n        }\n      }\n\n      // 結果に基づいてメッセージを表示\n      let successMessage = '';\n      let errorMessage = null;\n      if (is2024OrLater) {\n        // 2024年以降のデータの場合の特別なメッセージ\n        if (successfulUpdates.length > 0) {\n          successMessage = `${fiscalYear}年の従業員データ（${successfulUpdates.length}件）をクライアント側で保存しました`;\n        }\n      } else {\n        // 通常の成功/失敗メッセージ\n        if (failedUpdates.length > 0) {\n          if (successfulUpdates.length > 0) {\n            successMessage = `${successfulUpdates.length}件の従業員データを保存しました`;\n            errorMessage = `${failedUpdates.length}件の従業員データの保存に失敗しました（ID: ${failedUpdates.join(', ')}）`;\n          } else {\n            errorMessage = `すべての従業員データの保存に失敗しました`;\n          }\n        } else if (successfulUpdates.length > 0) {\n          successMessage = `すべての従業員データを正常に保存しました（${successfulUpdates.length}件）`;\n        }\n      }\n\n      // 変更がなかった場合のメッセージ\n      if (successfulUpdates.length === 0 && failedUpdates.length === 0) {\n        successMessage = '変更はありませんでした';\n      }\n\n      // メッセージの設定\n      if (successMessage) {\n        setSuccessMessage(successMessage);\n      }\n      if (errorMessage) {\n        setErrorMessage(errorMessage);\n      }\n\n      // 編集状態の更新\n      onSaveSuccess();\n      setInternalIsEditing(false);\n\n      // データ再取得\n      if (onRefreshData) {\n        onRefreshData();\n      }\n\n      // 状態の更新\n      setOriginalEmployees(JSON.parse(JSON.stringify(localEmployees)));\n      setInputValues({});\n\n      // 一定時間後にメッセージをクリア\n      setTimeout(() => {\n        setSuccessMessage(null);\n        setErrorMessage(null);\n      }, 5000);\n    } catch (error) {\n      console.error('従業員データ保存エラー:', error);\n\n      // 拡張したエラーハンドリング関数を使用\n      setErrorMessage(reportApi.handleApiError(error));\n\n      // 2024年以降のデータの場合は、エラーがあってもUIからの編集を維持\n      if (fiscalYear >= 2024) {\n        // 元の状態を更新して変更を保持\n        setOriginalEmployees(JSON.parse(JSON.stringify(localEmployees)));\n        setSuccessMessage(`${fiscalYear}年のデータはクライアント側に保存されました`);\n\n        // 編集状態の更新\n        onSaveSuccess();\n        setInternalIsEditing(false);\n\n        // 一定時間後にメッセージをクリア\n        setTimeout(() => {\n          setSuccessMessage(null);\n          setErrorMessage(null);\n        }, 5000);\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // デフォルトのボタンスタイル\n  const defaultButtonStyles = {\n    primary: {\n      padding: '8px 16px',\n      backgroundColor: '#6c757d',\n      color: 'white',\n      border: 'none',\n      borderRadius: '4px',\n      cursor: 'pointer'\n    },\n    secondary: {\n      padding: '8px 16px',\n      backgroundColor: '#dc3545',\n      color: 'white',\n      border: 'none',\n      borderRadius: '4px',\n      cursor: 'pointer'\n    },\n    success: {\n      padding: '8px 16px',\n      backgroundColor: '#28a745',\n      color: 'white',\n      border: 'none',\n      borderRadius: '4px',\n      cursor: 'pointer'\n    }\n  };\n\n  // 実際に使用するボタンスタイル\n  const actualButtonStyles = {\n    primary: buttonStyles.primary || defaultButtonStyles.primary,\n    secondary: buttonStyles.secondary || defaultButtonStyles.secondary,\n    success: buttonStyles.success || defaultButtonStyles.success\n  };\n\n  // 年度選択リストを作成\n  const currentYear = new Date().getFullYear();\n  const yearOptions = [];\n  for (let year = currentYear - 5; year <= currentYear + 5; year++) {\n    yearOptions.push(year);\n  }\n\n  // デバッグ情報の出力\n  console.log('[DEBUG] HC入力欄のレンダリング状態:', {\n    従業員データ数: localEmployees.length,\n    最初の従業員のHC値: (_localEmployees$ = localEmployees[0]) === null || _localEmployees$ === void 0 ? void 0 : _localEmployees$.hc,\n    編集モード: isEditing,\n    実際の編集モード: actualIsEditing\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"employees-tab-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"data-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          marginBottom: '1rem',\n          backgroundColor: '#f8f9fa',\n          padding: '10px 15px',\n          borderRadius: '4px',\n          border: '1px solid #ddd'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            style: {\n              margin: 0\n            },\n            children: \"\\u5F93\\u696D\\u54E1\\u8A73\\u7D30\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3904,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3903,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            gap: '15px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              style: {\n                marginRight: '8px',\n                fontSize: '0.9rem'\n              },\n              children: \"\\u5E74\\u5EA6:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3910,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: fiscalYear,\n              onChange: e => {\n                const newYear = parseInt(e.target.value, 10);\n                const previousYear = fiscalYear;\n                console.log(`年度変更: ${previousYear} → ${newYear}`);\n\n                // 基本的な年度変更処理\n                setFiscalYear(newYear);\n\n                // 変更先の年度が次の年度の場合、データの引き継ぎ処理を行う\n                if (newYear === previousYear + 1) {\n                  console.log(`次年度へのデータ引き継ぎを確認: ${previousYear} → ${newYear}`);\n\n                  // 現在のローカルストレージデータを確認\n                  const nextYearStorageKey = `EMPLOYEE_DATA_${newYear}`;\n                  const nextYearData = localStorage.getItem(nextYearStorageKey);\n                  if (!nextYearData) {\n                    console.log(`${newYear}年度のデータが存在しないため、データ引き継ぎを実行します`);\n\n                    // 確認ダイアログを表示\n                    if (window.confirm(`${previousYear}年度から${newYear}年度へデータを引き継ぎますか？`)) {\n                      // 改良版のデータ引き継ぎ機能を使用\n                      const result = checkAndInheritEmployeeData(previousYear, newYear);\n                      if (result.success) {\n                        setSuccessMessage(result.message);\n                        setTimeout(() => setSuccessMessage(null), 5000);\n                      } else {\n                        setErrorMessage(result.message);\n                        setTimeout(() => setErrorMessage(null), 5000);\n                      }\n                    } else {\n                      console.log('データ引き継ぎはユーザーによってキャンセルされました');\n                    }\n                  } else {\n                    console.log(`${newYear}年度のデータが既に存在するため、データ引き継ぎをスキップします`);\n                  }\n                }\n\n                // データ取得処理\n                fetchEmployeesByYear(newYear);\n              },\n              style: {\n                padding: '6px 10px',\n                borderRadius: '4px',\n                border: '1px solid #ced4da',\n                fontSize: '0.9rem'\n              },\n              children: yearOptions.map(year => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: year,\n                children: year\n              }, year, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3964,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 3911,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 3909,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              gap: '10px'\n            },\n            children: [!isAddingNewRow && !actualIsEditing && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                onClick: () => {\n                  // 前年度からデータを引き継ぐ\n                  const fromYear = fiscalYear - 1;\n                  const toYear = fiscalYear;\n                  if (window.confirm(`${fromYear}年度から${toYear}年度へデータを引き継ぎますか？`)) {\n                    // 改良版のデータ引き継ぎ機能を使用\n                    manualInheritData(fromYear, toYear);\n                  }\n                },\n                style: {\n                  padding: '6px 12px',\n                  backgroundColor: '#17a2b8',\n                  color: 'white',\n                  border: 'none',\n                  borderRadius: '4px',\n                  cursor: 'pointer',\n                  fontSize: '0.85rem'\n                },\n                title: \"\\u524D\\u5E74\\u5EA6\\u304B\\u3089\\u73FE\\u5728\\u5E74\\u5EA6\\u3078\\u30C7\\u30FC\\u30BF\\u3092\\u5F15\\u304D\\u7D99\\u304E\\u307E\\u3059\",\n                children: \"\\u30C7\\u30FC\\u30BF\\u5F15\\u304D\\u7D99\\u304E\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 3974,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                onClick: deleteSelectedEmployees,\n                style: {\n                  padding: '6px 12px',\n                  backgroundColor: '#dc3545',\n                  color: 'white',\n                  border: 'none',\n                  borderRadius: '4px',\n                  cursor: 'pointer',\n                  fontSize: '0.85rem'\n                },\n                title: \"\\u9078\\u629E\\u3057\\u305F\\u5F93\\u696D\\u54E1\\u30C7\\u30FC\\u30BF\\u3092\\u524A\\u9664\",\n                disabled: selectedCount === 0,\n                children: [\"\\u9078\\u629E\\u524A\\u9664\", selectedCount > 0 ? ` (${selectedCount})` : '']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 4003,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true), !isAddingNewRow && !actualIsEditing && /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: handleToggleEditMode,\n              style: {\n                padding: '8px 16px',\n                backgroundColor: '#6c757d',\n                color: 'white',\n                border: 'none',\n                borderRadius: '4px',\n                cursor: 'pointer'\n              },\n              disabled: isLoading,\n              children: \"\\u7DE8\\u96C6\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4024,\n              columnNumber: 17\n            }, this), !isAddingNewRow && /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => setIsCSVImportModalOpen(true),\n              style: {\n                padding: '8px 16px',\n                backgroundColor: '#10b981',\n                // 緑色\n                color: 'white',\n                border: 'none',\n                borderRadius: '4px',\n                cursor: 'pointer',\n                marginRight: '8px'\n              },\n              disabled: isLoading,\n              children: \"CSV\\u30A4\\u30F3\\u30DD\\u30FC\\u30C8\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4043,\n              columnNumber: 17\n            }, this), !isAddingNewRow && /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: handleAddNewRow,\n              style: {\n                padding: '8px 16px',\n                backgroundColor: '#17a2b8',\n                color: 'white',\n                border: 'none',\n                borderRadius: '4px',\n                cursor: 'pointer'\n              },\n              disabled: isLoading || actualIsEditing && isAddingNewRow,\n              children: \"\\u65B0\\u898F\\u8FFD\\u52A0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4062,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 3970,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 3907,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3893,\n        columnNumber: 9\n      }, this), successMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          backgroundColor: '#d4edda',\n          color: '#155724',\n          padding: '10px',\n          borderRadius: '4px',\n          marginBottom: '15px'\n        },\n        children: successMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 4084,\n        columnNumber: 11\n      }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          backgroundColor: '#f8d7da',\n          color: '#721c24',\n          padding: '10px',\n          borderRadius: '4px',\n          marginBottom: '15px'\n        },\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 4097,\n        columnNumber: 11\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          backgroundColor: '#e9ecef',\n          padding: '10px',\n          borderRadius: '4px',\n          marginBottom: '15px',\n          textAlign: 'center'\n        },\n        children: \"\\u30C7\\u30FC\\u30BF\\u3092\\u51E6\\u7406\\u4E2D...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 4110,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          ...editingStyles,\n          overflowX: 'auto',\n          backgroundColor: 'white',\n          borderRadius: '4px',\n          border: '1px solid #dee2e6',\n          padding: '10px',\n          marginBottom: '20px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          style: {\n            width: '100%',\n            borderCollapse: 'collapse',\n            fontSize: '13px',\n            whiteSpace: 'nowrap'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              style: {\n                borderBottom: '2px solid #dee2e6'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                style: {\n                  padding: '8px',\n                  textAlign: 'center',\n                  width: '30px'\n                },\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: selectAll,\n                  onChange: toggleSelectAll,\n                  title: \"\\u3059\\u3079\\u3066\\u306E\\u884C\\u3092\\u9078\\u629E/\\u89E3\\u9664\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4141,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4140,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                style: {\n                  padding: '8px',\n                  textAlign: 'left',\n                  position: 'sticky',\n                  left: 0,\n                  backgroundColor: 'white',\n                  zIndex: 1\n                },\n                children: \"\\u793E\\u54E1ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4148,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                style: {\n                  padding: '8px',\n                  textAlign: 'left'\n                },\n                children: \"\\u6C0F\\u540D\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4149,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                style: {\n                  padding: '8px',\n                  textAlign: 'left'\n                },\n                children: \"\\u969C\\u5BB3\\u533A\\u5206\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4150,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                style: {\n                  padding: '8px',\n                  textAlign: 'left'\n                },\n                children: \"\\u969C\\u5BB3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4151,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                style: {\n                  padding: '8px',\n                  textAlign: 'left'\n                },\n                children: \"\\u7B49\\u7D1A\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4152,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                style: {\n                  padding: '8px',\n                  textAlign: 'left'\n                },\n                children: \"\\u63A1\\u7528\\u65E5\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4153,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                style: {\n                  padding: '8px',\n                  textAlign: 'left'\n                },\n                children: \"\\u72B6\\u614B\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4154,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                style: {\n                  padding: '8px',\n                  textAlign: 'left',\n                  minWidth: '140px'\n                },\n                children: \"WH\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4155,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                style: {\n                  padding: '8px',\n                  textAlign: 'center'\n                },\n                children: \"HC\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4156,\n                columnNumber: 17\n              }, this), months.map((month, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                style: {\n                  padding: '8px',\n                  textAlign: 'center'\n                },\n                children: month\n              }, `month-${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4158,\n                columnNumber: 19\n              }, this)), /*#__PURE__*/_jsxDEV(\"th\", {\n                style: {\n                  padding: '8px',\n                  textAlign: 'left'\n                },\n                children: \"\\u5099\\u8003\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4160,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                style: {\n                  padding: '8px',\n                  textAlign: 'left',\n                  width: '80px'\n                },\n                children: \"\\u524A\\u9664\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4161,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 4139,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 4138,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: [localEmployees.map((employee, index) => {\n              var _ref, _inputValues, _ref2, _inputValues2, _ref3, _inputValues3, _ref4, _inputValues4, _ref5, _inputValues5, _ref6, _inputValues6, _ref7, _inputValues7, _inputValues8, _ref8, _inputValues10;\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                style: {\n                  borderBottom: '1px solid #f0f0f0'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  style: {\n                    padding: '8px',\n                    textAlign: 'center'\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    checked: employee._selected || false,\n                    onChange: () => toggleSelectEmployee(employee.id),\n                    title: `従業員 ${employee.name} を選択/解除`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4169,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4168,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  style: {\n                    padding: '8px',\n                    position: 'sticky',\n                    left: 0,\n                    backgroundColor: 'white',\n                    zIndex: 1\n                  },\n                  children: actualIsEditing ? /*#__PURE__*/_jsxDEV(\"input\", {\n                    ref: el => {\n                      inputRefs.current[`${employee.id}-employee_id`] = el;\n                    },\n                    type: \"text\",\n                    value: (_ref = (_inputValues = inputValues[`${employee.id}-employee_id`]) !== null && _inputValues !== void 0 ? _inputValues : employee.employee_id) !== null && _ref !== void 0 ? _ref : '',\n                    onChange: e => handleFieldChange(employee.id, 'employee_id', e.target.value),\n                    onKeyDown: e => handleKeyDown(e, `${employee.id}-employee_id`),\n                    style: {\n                      width: '60px',\n                      padding: '4px',\n                      border: '1px solid #ddd',\n                      borderRadius: '4px',\n                      backgroundColor: '#fff'\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4178,\n                    columnNumber: 23\n                  }, this) : employee.employee_id || '-'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4176,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  style: {\n                    padding: '8px'\n                  },\n                  children: actualIsEditing ? /*#__PURE__*/_jsxDEV(\"input\", {\n                    ref: el => {\n                      inputRefs.current[`${employee.id}-name`] = el;\n                    },\n                    type: \"text\",\n                    value: (_ref2 = (_inputValues2 = inputValues[`${employee.id}-name`]) !== null && _inputValues2 !== void 0 ? _inputValues2 : employee.name) !== null && _ref2 !== void 0 ? _ref2 : '',\n                    onChange: e => handleFieldChange(employee.id, 'name', e.target.value),\n                    onKeyDown: e => handleKeyDown(e, `${employee.id}-name`),\n                    style: {\n                      width: '100px',\n                      padding: '4px',\n                      border: '1px solid #ddd',\n                      borderRadius: '4px',\n                      backgroundColor: '#fff'\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4198,\n                    columnNumber: 23\n                  }, this) : employee.name || '-'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4196,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  style: {\n                    padding: '8px'\n                  },\n                  children: actualIsEditing ? /*#__PURE__*/_jsxDEV(\"select\", {\n                    ref: el => {\n                      inputRefs.current[`${employee.id}-disability_type`] = el;\n                    },\n                    value: (_ref3 = (_inputValues3 = inputValues[`${employee.id}-disability_type`]) !== null && _inputValues3 !== void 0 ? _inputValues3 : employee.disability_type) !== null && _ref3 !== void 0 ? _ref3 : '',\n                    onChange: e => handleFieldChange(employee.id, 'disability_type', e.target.value),\n                    style: {\n                      width: '100px',\n                      padding: '4px',\n                      border: '1px solid #ddd',\n                      borderRadius: '4px',\n                      backgroundColor: '#fff'\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"\",\n                      children: \"\\u306A\\u3057\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 4230,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"\\u8EAB\\u4F53\\u969C\\u5BB3\",\n                      children: \"\\u8EAB\\u4F53\\u969C\\u5BB3\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 4231,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"\\u77E5\\u7684\\u969C\\u5BB3\",\n                      children: \"\\u77E5\\u7684\\u969C\\u5BB3\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 4232,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"\\u7CBE\\u795E\\u969C\\u5BB3\",\n                      children: \"\\u7CBE\\u795E\\u969C\\u5BB3\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 4233,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4218,\n                    columnNumber: 23\n                  }, this) : employee.disability_type || '-'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4216,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  style: {\n                    padding: '8px'\n                  },\n                  children: actualIsEditing ? /*#__PURE__*/_jsxDEV(\"input\", {\n                    ref: el => {\n                      inputRefs.current[`${employee.id}-disability`] = el;\n                    },\n                    type: \"text\",\n                    value: (_ref4 = (_inputValues4 = inputValues[`${employee.id}-disability`]) !== null && _inputValues4 !== void 0 ? _inputValues4 : employee.disability) !== null && _ref4 !== void 0 ? _ref4 : '',\n                    onChange: e => handleFieldChange(employee.id, 'disability', e.target.value),\n                    style: {\n                      width: '80px',\n                      padding: '4px',\n                      border: '1px solid #ddd',\n                      borderRadius: '4px',\n                      backgroundColor: '#fff'\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4241,\n                    columnNumber: 23\n                  }, this) : employee.disability || '-'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4239,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  style: {\n                    padding: '8px'\n                  },\n                  children: actualIsEditing ? /*#__PURE__*/_jsxDEV(\"input\", {\n                    ref: el => {\n                      inputRefs.current[`${employee.id}-grade`] = el;\n                    },\n                    type: \"text\",\n                    value: (_ref5 = (_inputValues5 = inputValues[`${employee.id}-grade`]) !== null && _inputValues5 !== void 0 ? _inputValues5 : employee.grade) !== null && _ref5 !== void 0 ? _ref5 : '',\n                    onChange: e => handleFieldChange(employee.id, 'grade', e.target.value),\n                    style: {\n                      width: '60px',\n                      padding: '4px',\n                      border: '1px solid #ddd',\n                      borderRadius: '4px',\n                      backgroundColor: '#fff'\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4260,\n                    columnNumber: 23\n                  }, this) : employee.grade || '-'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4258,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  style: {\n                    padding: '8px'\n                  },\n                  children: actualIsEditing ? /*#__PURE__*/_jsxDEV(\"input\", {\n                    ref: el => {\n                      inputRefs.current[`${employee.id}-hire_date`] = el;\n                    },\n                    type: \"date\",\n                    value: (() => {\n                      // Date input expects yyyy-MM-dd format\n                      const hireDate = inputValues[`${employee.id}-hire_date`] || employee.hire_date || '';\n                      if (!hireDate) return '';\n\n                      // Format: yyyy/MM/dd to yyyy-MM-dd\n                      const dateParts = hireDate.split('/');\n                      if (dateParts.length !== 3) return '';\n\n                      // Ensure year is 4 digits and properly formatted\n                      let [year, month, day] = dateParts;\n                      year = year.padStart(4, '0');\n                      month = month.padStart(2, '0');\n                      day = day.padStart(2, '0');\n                      return `${year}-${month}-${day}`;\n                    })(),\n                    onChange: e => {\n                      if (e.target.value) {\n                        // Convert from yyyy-MM-dd to yyyy/MM/dd for internal storage\n                        const formattedDate = e.target.value.split('-').join('/');\n                        handleFieldChange(employee.id, 'hire_date', formattedDate);\n                      } else {\n                        handleFieldChange(employee.id, 'hire_date', '');\n                      }\n                    },\n                    style: {\n                      width: '120px',\n                      padding: '4px',\n                      border: '1px solid #ddd',\n                      borderRadius: '4px',\n                      backgroundColor: '#fff'\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4279,\n                    columnNumber: 23\n                  }, this) : employee.hire_date || '-'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4277,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  style: {\n                    padding: '8px'\n                  },\n                  children: actualIsEditing ? /*#__PURE__*/_jsxDEV(\"select\", {\n                    ref: el => {\n                      inputRefs.current[`${employee.id}-status`] = el;\n                    },\n                    value: (_ref6 = (_inputValues6 = inputValues[`${employee.id}-status`]) !== null && _inputValues6 !== void 0 ? _inputValues6 : employee.status) !== null && _ref6 !== void 0 ? _ref6 : '在籍',\n                    onChange: e => handleFieldChange(employee.id, 'status', e.target.value),\n                    onKeyDown: e => handleKeyDown(e, `${employee.id}-status`),\n                    style: {\n                      width: '80px',\n                      padding: '4px',\n                      border: '1px solid #ddd',\n                      borderRadius: '4px',\n                      backgroundColor: '#fff'\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"\\u5728\\u7C4D\",\n                      children: \"\\u5728\\u7C4D\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 4335,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"\\u4F11\\u8077\",\n                      children: \"\\u4F11\\u8077\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 4336,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"\\u9000\\u8077\",\n                      children: \"\\u9000\\u8077\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 4337,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4322,\n                    columnNumber: 23\n                  }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                    style: {\n                      backgroundColor: employee.status === '在籍' ? '#4caf50' : employee.status === '休職' ? '#ff9800' : employee.status === '退職' ? '#f44336' : '#999',\n                      color: 'white',\n                      padding: '2px 6px',\n                      borderRadius: '4px',\n                      fontSize: '12px'\n                    },\n                    children: employee.status || '不明'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4340,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4320,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  style: {\n                    padding: '8px',\n                    minWidth: '140px'\n                  },\n                  children: actualIsEditing ? /*#__PURE__*/_jsxDEV(\"select\", {\n                    ref: el => {\n                      inputRefs.current[`${employee.id}-wh`] = el;\n                    },\n                    value: (_ref7 = (_inputValues7 = inputValues[`${employee.id}-wh`]) !== null && _inputValues7 !== void 0 ? _inputValues7 : employee.wh) !== null && _ref7 !== void 0 ? _ref7 : '正社員',\n                    onChange: e => handleFieldChange(employee.id, 'wh', e.target.value),\n                    onKeyDown: e => handleKeyDown(e, `${employee.id}-wh`),\n                    style: {\n                      width: '140px',\n                      padding: '2px',\n                      border: '1px solid #007bff',\n                      borderRadius: '4px',\n                      backgroundColor: '#fff'\n                    },\n                    children: WH_OPTIONS.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: option.value,\n                      children: option.label\n                    }, option.value, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 4371,\n                      columnNumber: 27\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4357,\n                    columnNumber: 23\n                  }, this) : employee.wh || '正社員'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4355,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  style: {\n                    padding: '4px',\n                    textAlign: 'center'\n                  },\n                  children: [(() => {\n                    console.log('[DEBUG] HC入力欄がレンダリングされました', {\n                      employeeId: employee.id,\n                      状態: employee.status,\n                      雇用形態: employee.wh || '正社員',\n                      HC値: employee.hc,\n                      退職日: employee.retirement_date\n                    });\n                    return null;\n                  })(), /*#__PURE__*/_jsxDEV(\"select\", {\n                    ref: el => {\n                      inputRefs.current[`${employee.id}-hc`] = el;\n                    },\n                    value: (_inputValues8 = inputValues[`${employee.id}-hc`]) !== null && _inputValues8 !== void 0 ? _inputValues8 : employee.hc === 0 ? '0' : employee.hc || '',\n                    onChange: e => {\n                      console.log(`[DEBUG] HC値変更: ID=${employee.id}, 値=${e.target.value}`);\n                      handleHcChange(employee.id, e.target.value);\n\n                      // HC値が変更された後に月次ステータスの計算を確実に実行\n                      setTimeout(() => {\n                        console.log(`[DEBUG] HC値変更後の確認: ID=${employee.id}`);\n                        const updatedEmployee = localEmployees.find(emp => emp.id === employee.id);\n                        if (updatedEmployee && updatedEmployee.hc !== undefined) {\n                          updateMonthlyStatusFromHc(updatedEmployee);\n                        }\n                      }, 150);\n                    },\n                    onBlur: e => {\n                      // フォーカスを外したときも計算を再実行\n                      handleHcChange(employee.id, e.target.value);\n                    },\n                    onKeyDown: e => handleKeyDown(e, `${employee.id}-hc`),\n                    style: {\n                      width: '55px',\n                      padding: '2px',\n                      border: '1px solid #007bff',\n                      borderRadius: '4px',\n                      textAlign: 'center',\n                      backgroundColor: '#fff'\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"\",\n                      children: \"-\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 4414,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"0\",\n                      children: \"0\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 4415,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"0.5\",\n                      children: \"0.5\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 4416,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"1\",\n                      children: \"1\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 4417,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"2\",\n                      children: \"2\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 4418,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4384,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4381,\n                  columnNumber: 19\n                }, this), (employee.monthlyStatus || Array(12).fill('')).map((status, monthIndex) => {\n                  var _inputValues9;\n                  return /*#__PURE__*/_jsxDEV(\"td\", {\n                    style: {\n                      padding: '4px',\n                      textAlign: 'center'\n                    },\n                    children: actualIsEditing ? /*#__PURE__*/_jsxDEV(\"input\", {\n                      ref: el => {\n                        inputRefs.current[`${employee.id}-monthlyStatus-${monthIndex}`] = el;\n                      },\n                      type: \"text\",\n                      value: (_inputValues9 = inputValues[`${employee.id}-monthlyStatus-${monthIndex}`]) !== null && _inputValues9 !== void 0 ? _inputValues9 : status === 0 ? '0' : status || '',\n                      onChange: e => handleMonthlyStatusChange(employee.id, monthIndex, e.target.value),\n                      onKeyDown: e => handleKeyDown(e, `${employee.id}-monthlyStatus-${monthIndex}`),\n                      style: {\n                        width: '40px',\n                        padding: '2px',\n                        border: '1px solid #ddd',\n                        borderRadius: '4px',\n                        textAlign: 'center',\n                        backgroundColor: '#fff'\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 4425,\n                      columnNumber: 25\n                    }, this) : status === 0 ? '0' : status || '-'\n                  }, `${employee.id}-month-${monthIndex}`, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4423,\n                    columnNumber: 21\n                  }, this);\n                }), /*#__PURE__*/_jsxDEV(\"td\", {\n                  style: {\n                    padding: '8px'\n                  },\n                  children: actualIsEditing ? /*#__PURE__*/_jsxDEV(\"input\", {\n                    ref: el => {\n                      inputRefs.current[`${employee.id}-memo`] = el;\n                    },\n                    type: \"text\",\n                    value: (_ref8 = (_inputValues10 = inputValues[`${employee.id}-memo`]) !== null && _inputValues10 !== void 0 ? _inputValues10 : employee.memo) !== null && _ref8 !== void 0 ? _ref8 : '',\n                    onChange: e => handleFieldChange(employee.id, 'memo', e.target.value),\n                    style: {\n                      width: '150px',\n                      padding: '4px',\n                      border: '1px solid #ddd',\n                      borderRadius: '4px',\n                      backgroundColor: '#fff'\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4447,\n                    columnNumber: 23\n                  }, this) : employee.memo || '-'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4445,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  style: {\n                    padding: '8px'\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    style: {\n                      display: 'flex',\n                      gap: '5px'\n                    },\n                    children: [actualIsEditing && /*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: () => {\n                        console.log(`削除ボタンがクリックされました: ID=${employee.id}, 名前=${employee.name}`);\n                        handleDeleteEmployee(employee.id);\n                      },\n                      style: {\n                        padding: '4px 8px',\n                        backgroundColor: '#dc3545',\n                        color: 'white',\n                        border: 'none',\n                        borderRadius: '4px',\n                        fontSize: '12px'\n                      },\n                      disabled: isLoading,\n                      title: \"\\u3053\\u306E\\u5F93\\u696D\\u54E1\\u3092\\u524A\\u9664\",\n                      children: \"\\u524A\\u9664\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 4468,\n                      columnNumber: 25\n                    }, this), !actualIsEditing && /*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: () => {\n                        console.log(`削除アイコンがクリックされました: ID=${employee.id}, 名前=${employee.name}`);\n                        handleDeleteEmployee(employee.id);\n                      },\n                      style: {\n                        padding: '4px',\n                        backgroundColor: 'transparent',\n                        color: '#dc3545',\n                        border: 'none',\n                        cursor: 'pointer',\n                        fontSize: '14px'\n                      },\n                      disabled: isLoading,\n                      title: \"\\u3053\\u306E\\u5F93\\u696D\\u54E1\\u3092\\u524A\\u9664\",\n                      children: \"\\uD83D\\uDDD1\\uFE0F\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 4490,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4465,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4464,\n                  columnNumber: 19\n                }, this)]\n              }, employee.id || index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 4167,\n                columnNumber: 17\n              }, this);\n            }), isAddingNewRow && /*#__PURE__*/_jsxDEV(\"tr\", {\n              style: {\n                borderBottom: '1px solid #f0f0f0',\n                backgroundColor: '#f8f9fa'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                style: {\n                  padding: '8px',\n                  position: 'sticky',\n                  left: 0,\n                  backgroundColor: '#f8f9fa',\n                  zIndex: 1\n                },\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  ref: el => {\n                    inputRefs.current[`new-employee_id`] = el;\n                  },\n                  type: \"text\",\n                  value: (_ref9 = (_inputValues11 = inputValues[`new-employee_id`]) !== null && _inputValues11 !== void 0 ? _inputValues11 : newRowData.employee_id) !== null && _ref9 !== void 0 ? _ref9 : '',\n                  onChange: e => handleNewRowFieldChange('employee_id', e.target.value),\n                  onKeyDown: e => handleKeyDown(e, `new-employee_id`),\n                  placeholder: \"\\u793E\\u54E1ID\",\n                  style: {\n                    width: '60px',\n                    padding: '4px',\n                    border: '1px solid #007bff',\n                    borderRadius: '4px',\n                    backgroundColor: '#fff'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4518,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4517,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                style: {\n                  padding: '8px'\n                },\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  ref: el => {\n                    inputRefs.current[`new-name`] = el;\n                  },\n                  type: \"text\",\n                  value: (_ref10 = (_inputValues12 = inputValues[`new-name`]) !== null && _inputValues12 !== void 0 ? _inputValues12 : newRowData.name) !== null && _ref10 !== void 0 ? _ref10 : '',\n                  onChange: e => handleNewRowFieldChange('name', e.target.value),\n                  placeholder: \"\\u6C0F\\u540D\",\n                  style: {\n                    width: '100px',\n                    padding: '4px',\n                    border: '1px solid #007bff',\n                    borderRadius: '4px',\n                    backgroundColor: '#fff'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4535,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4534,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                style: {\n                  padding: '8px'\n                },\n                children: /*#__PURE__*/_jsxDEV(\"select\", {\n                  ref: el => {\n                    inputRefs.current[`new-disability_type`] = el;\n                  },\n                  value: (_ref11 = (_inputValues13 = inputValues[`new-disability_type`]) !== null && _inputValues13 !== void 0 ? _inputValues13 : newRowData.disability_type) !== null && _ref11 !== void 0 ? _ref11 : '',\n                  onChange: e => handleNewRowFieldChange('disability_type', e.target.value),\n                  style: {\n                    width: '100px',\n                    padding: '4px',\n                    border: '1px solid #007bff',\n                    borderRadius: '4px',\n                    backgroundColor: '#fff'\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\",\n                    children: \"\\u306A\\u3057\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4563,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\\u8EAB\\u4F53\\u969C\\u5BB3\",\n                    children: \"\\u8EAB\\u4F53\\u969C\\u5BB3\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4564,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\\u77E5\\u7684\\u969C\\u5BB3\",\n                    children: \"\\u77E5\\u7684\\u969C\\u5BB3\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4565,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\\u7CBE\\u795E\\u969C\\u5BB3\",\n                    children: \"\\u7CBE\\u795E\\u969C\\u5BB3\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4566,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4551,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4550,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                style: {\n                  padding: '8px'\n                },\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  ref: el => {\n                    inputRefs.current[`new-disability`] = el;\n                  },\n                  type: \"text\",\n                  value: (_ref12 = (_inputValues14 = inputValues[`new-disability`]) !== null && _inputValues14 !== void 0 ? _inputValues14 : newRowData.disability) !== null && _ref12 !== void 0 ? _ref12 : '',\n                  onChange: e => handleNewRowFieldChange('disability', e.target.value),\n                  placeholder: \"\\u969C\\u5BB3\",\n                  style: {\n                    width: '80px',\n                    padding: '4px',\n                    border: '1px solid #007bff',\n                    borderRadius: '4px',\n                    backgroundColor: '#fff'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4570,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4569,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                style: {\n                  padding: '8px'\n                },\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  ref: el => {\n                    inputRefs.current[`new-grade`] = el;\n                  },\n                  type: \"text\",\n                  value: (_ref13 = (_inputValues15 = inputValues[`new-grade`]) !== null && _inputValues15 !== void 0 ? _inputValues15 : newRowData.grade) !== null && _ref13 !== void 0 ? _ref13 : '',\n                  onChange: e => handleNewRowFieldChange('grade', e.target.value),\n                  placeholder: \"\\u7B49\\u7D1A\",\n                  style: {\n                    width: '60px',\n                    padding: '4px',\n                    border: '1px solid #007bff',\n                    borderRadius: '4px',\n                    backgroundColor: '#fff'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4586,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4585,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                style: {\n                  padding: '8px'\n                },\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  ref: el => {\n                    inputRefs.current[`new-hire_date`] = el;\n                  },\n                  type: \"date\",\n                  value: (() => {\n                    // Date input expects yyyy-MM-dd format\n                    const hireDate = inputValues[`new-hire_date`] || newRowData.hire_date || '';\n                    if (!hireDate) return '';\n\n                    // Format: yyyy/MM/dd to yyyy-MM-dd\n                    const dateParts = hireDate.split('/');\n                    if (dateParts.length !== 3) return '';\n\n                    // Ensure year is 4 digits and properly formatted\n                    let [year, month, day] = dateParts;\n                    year = year.padStart(4, '0');\n                    month = month.padStart(2, '0');\n                    day = day.padStart(2, '0');\n                    return `${year}-${month}-${day}`;\n                  })(),\n                  onChange: e => {\n                    if (e.target.value) {\n                      // Convert from yyyy-MM-dd to yyyy/MM/dd for internal storage\n                      const formattedDate = e.target.value.split('-').join('/');\n                      handleNewRowFieldChange('hire_date', formattedDate);\n                    } else {\n                      handleNewRowFieldChange('hire_date', '');\n                    }\n                  },\n                  style: {\n                    width: '120px',\n                    padding: '4px',\n                    border: '1px solid #007bff',\n                    borderRadius: '4px',\n                    backgroundColor: '#fff'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4602,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4601,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                style: {\n                  padding: '8px'\n                },\n                children: /*#__PURE__*/_jsxDEV(\"select\", {\n                  ref: el => {\n                    inputRefs.current[`new-status`] = el;\n                  },\n                  value: (_ref14 = (_inputValues16 = inputValues[`new-status`]) !== null && _inputValues16 !== void 0 ? _inputValues16 : newRowData.status) !== null && _ref14 !== void 0 ? _ref14 : '在籍',\n                  onChange: e => handleNewRowFieldChange('status', e.target.value),\n                  onKeyDown: e => handleKeyDown(e, `new-status`),\n                  style: {\n                    width: '80px',\n                    padding: '4px',\n                    border: '1px solid #007bff',\n                    borderRadius: '4px',\n                    backgroundColor: '#fff'\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\\u5728\\u7C4D\",\n                    children: \"\\u5728\\u7C4D\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4654,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\\u4F11\\u8077\",\n                    children: \"\\u4F11\\u8077\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4655,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\\u9000\\u8077\",\n                    children: \"\\u9000\\u8077\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4656,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4641,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4640,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                style: {\n                  padding: '8px',\n                  minWidth: '140px'\n                },\n                children: /*#__PURE__*/_jsxDEV(\"select\", {\n                  ref: el => {\n                    inputRefs.current[`new-wh`] = el;\n                  },\n                  value: (_ref15 = (_inputValues17 = inputValues[`new-wh`]) !== null && _inputValues17 !== void 0 ? _inputValues17 : newRowData.wh) !== null && _ref15 !== void 0 ? _ref15 : '正社員',\n                  onChange: e => handleNewRowFieldChange('wh', e.target.value),\n                  onKeyDown: e => handleKeyDown(e, `new-wh`),\n                  style: {\n                    width: '140px',\n                    padding: '4px',\n                    border: '1px solid #007bff',\n                    borderRadius: '4px',\n                    backgroundColor: '#fff'\n                  },\n                  children: WH_OPTIONS.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: option.value,\n                    children: option.label\n                  }, option.value, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4675,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4661,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4660,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                style: {\n                  padding: '4px',\n                  textAlign: 'center'\n                },\n                children: [(() => {\n                  console.log('[DEBUG] 新規行HC入力欄がレンダリングされました', {\n                    状態: newRowData.status,\n                    雇用形態: newRowData.wh || '正社員',\n                    HC値: newRowData.hc\n                  });\n                  return null;\n                })(), /*#__PURE__*/_jsxDEV(\"select\", {\n                  ref: el => {\n                    inputRefs.current[`new-hc`] = el;\n                  },\n                  value: (_inputValues18 = inputValues[`new-hc`]) !== null && _inputValues18 !== void 0 ? _inputValues18 : newRowData.hc === 0 ? '0' : newRowData.hc || '',\n                  onChange: e => {\n                    handleNewRowHcChange(e.target.value);\n\n                    // HC値変更後、月次ステータスを再計算\n                    setTimeout(() => {\n                      console.log(`[DEBUG] 新規行 HC値変更後の確認`);\n                      updateMonthlyStatusForNewRow(newRowData);\n                    }, 150);\n                  },\n                  onBlur: e => handleNewRowHcChange(e.target.value),\n                  onKeyDown: e => handleKeyDown(e, `new-hc`),\n                  style: {\n                    width: '55px',\n                    padding: '2px',\n                    border: '1px solid #007bff',\n                    borderRadius: '4px',\n                    textAlign: 'center',\n                    backgroundColor: '#fff'\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\",\n                    children: \"-\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4708,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"0\",\n                    children: \"0\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4709,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"0.5\",\n                    children: \"0.5\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4710,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"1\",\n                    children: \"1\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4711,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"2\",\n                    children: \"2\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4712,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4685,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 4682,\n                columnNumber: 19\n              }, this), (newRowData.monthlyStatus || Array(12).fill('')).map((status, monthIndex) => {\n                var _inputValues19;\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  style: {\n                    padding: '4px',\n                    textAlign: 'center'\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    ref: el => {\n                      inputRefs.current[`new-monthlyStatus-${monthIndex}`] = el;\n                    },\n                    type: \"text\",\n                    value: (_inputValues19 = inputValues[`new-monthlyStatus-${monthIndex}`]) !== null && _inputValues19 !== void 0 ? _inputValues19 : status === 0 ? '0' : status || '',\n                    onChange: e => handleNewRowMonthlyStatusChange(monthIndex, e.target.value),\n                    onKeyDown: e => handleKeyDown(e, `new-monthlyStatus-${monthIndex}`),\n                    style: {\n                      width: '40px',\n                      padding: '2px',\n                      border: '1px solid #007bff',\n                      borderRadius: '4px',\n                      textAlign: 'center',\n                      backgroundColor: '#fff'\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4718,\n                    columnNumber: 23\n                  }, this)\n                }, `new-month-${monthIndex}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4717,\n                  columnNumber: 21\n                }, this);\n              }), /*#__PURE__*/_jsxDEV(\"td\", {\n                style: {\n                  padding: '8px'\n                },\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  ref: el => {\n                    inputRefs.current[`new-memo`] = el;\n                  },\n                  type: \"text\",\n                  value: (_ref16 = (_inputValues20 = inputValues[`new-memo`]) !== null && _inputValues20 !== void 0 ? _inputValues20 : newRowData.memo) !== null && _ref16 !== void 0 ? _ref16 : '',\n                  onChange: e => handleNewRowFieldChange('memo', e.target.value),\n                  placeholder: \"\\u5099\\u8003\",\n                  style: {\n                    width: '150px',\n                    padding: '4px',\n                    border: '1px solid #007bff',\n                    borderRadius: '4px',\n                    backgroundColor: '#fff'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4736,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4735,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                style: {\n                  padding: '8px'\n                },\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    display: 'flex',\n                    gap: '5px'\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: handleSaveNewRow,\n                    style: {\n                      padding: '4px 8px',\n                      backgroundColor: '#28a745',\n                      color: 'white',\n                      border: 'none',\n                      borderRadius: '4px',\n                      fontSize: '12px'\n                    },\n                    disabled: isLoading,\n                    children: \"\\u4FDD\\u5B58\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4753,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: handleCancelNewRow,\n                    style: {\n                      padding: '4px 8px',\n                      backgroundColor: '#dc3545',\n                      color: 'white',\n                      border: 'none',\n                      borderRadius: '4px',\n                      fontSize: '12px'\n                    },\n                    disabled: isLoading,\n                    children: \"\\u30AD\\u30E3\\u30F3\\u30BB\\u30EB\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 4767,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4752,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 4751,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 4516,\n              columnNumber: 17\n            }, this), localEmployees.length === 0 && !isAddingNewRow && /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: 22,\n                style: {\n                  textAlign: 'center',\n                  padding: '20px'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  style: {\n                    fontSize: '16px',\n                    color: '#666',\n                    marginBottom: '10px'\n                  },\n                  children: \"\\u5F93\\u696D\\u54E1\\u30C7\\u30FC\\u30BF\\u304C\\u3042\\u308A\\u307E\\u305B\\u3093\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4790,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"button\",\n                  onClick: handleAddNewRow,\n                  style: {\n                    padding: '8px 16px',\n                    backgroundColor: '#28a745',\n                    color: 'white',\n                    border: 'none',\n                    borderRadius: '4px',\n                    cursor: 'pointer'\n                  },\n                  children: \"\\u5F93\\u696D\\u54E1\\u8FFD\\u52A0\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 4791,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 4789,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 4788,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 4164,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 4132,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 4122,\n        columnNumber: 9\n      }, this), actualIsEditing && !isAddingNewRow && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'flex-end',\n          gap: '10px',\n          marginTop: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleCancelEdit,\n          style: {\n            padding: '8px 16px',\n            backgroundColor: '#6c757d',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          },\n          disabled: isLoading,\n          children: \"\\u30AD\\u30E3\\u30F3\\u30BB\\u30EB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 4820,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleSave,\n          style: {\n            padding: '8px 16px',\n            backgroundColor: '#28a745',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          },\n          disabled: isLoading,\n          children: isLoading ? '保存中...' : '変更を保存'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 4835,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 4814,\n        columnNumber: 11\n      }, this), actualIsEditing && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '15px',\n          backgroundColor: '#f8f9fa',\n          padding: '10px',\n          borderRadius: '4px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          style: {\n            margin: '0 0 8px 0',\n            fontSize: '14px'\n          },\n          children: \"\\u64CD\\u4F5C\\u65B9\\u6CD5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 4856,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          style: {\n            margin: '0',\n            paddingLeft: '20px',\n            fontSize: '13px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"HC: \\u30D8\\u30C3\\u30C9\\u30AB\\u30A6\\u30F3\\u30C8\\uFF08\\u982D\\u6570\\uFF09\\u3092\\u6570\\u5024\\u3067\\u5165\\u529B\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\\u3002\\u5728\\u7C4D\\u4E2D\\u306E\\u5834\\u5408\\u306F\\u81EA\\u52D5\\u7684\\u306BHC\\u5024\\u304C\\u8A2D\\u5B9A\\u3055\\u308C\\u307E\\u3059\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 4858,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"\\u6708\\u6B21\\u30B9\\u30C6\\u30FC\\u30BF\\u30B9: \\u81EA\\u52D5\\u7684\\u306BHC\\u5024\\u304C\\u8A2D\\u5B9A\\u3055\\u308C\\u307E\\u3059\\u304C\\u3001\\u5FC5\\u8981\\u306B\\u5FDC\\u3058\\u3066\\u5909\\u66F4\\u3067\\u304D\\u307E\\u3059 (\\u4F7F\\u7528\\u53EF\\u80FD\\u5024: 0, 0.5, 1, 2)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 4859,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"\\u63A1\\u7528\\u65E5\\u3068\\u72B6\\u614B\\u306B\\u57FA\\u3065\\u304D\\u3001\\u6708\\u6B21\\u30B9\\u30C6\\u30FC\\u30BF\\u30B9\\u306F\\u81EA\\u52D5\\u7684\\u306B\\u8A08\\u7B97\\u3055\\u308C\\u307E\\u3059\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 4860,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"\\u72B6\\u614B\\u304C\\u300C\\u9000\\u8077\\u300D\\u306E\\u5834\\u5408\\u3001\\u9000\\u8077\\u3057\\u305F\\u6708\\u4EE5\\u964D\\u306E\\u5024\\u306F\\u30AF\\u30EA\\u30A2\\u3055\\u308C\\u307E\\u3059\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 4861,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"\\u77E2\\u5370\\u30AD\\u30FC\\uFF08\\u2190\\u2192\\u2191\\u2193\\uFF09\\u3067\\u5165\\u529B\\u30D5\\u30A3\\u30FC\\u30EB\\u30C9\\u9593\\u3092\\u79FB\\u52D5\\u3067\\u304D\\u307E\\u3059\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 4862,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"\\u5909\\u66F4\\u5F8C\\u306F\\u300C\\u5909\\u66F4\\u3092\\u4FDD\\u5B58\\u300D\\u30DC\\u30BF\\u30F3\\u3092\\u62BC\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 4863,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 4857,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 4855,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3891,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EmployeeCSVImportModal, {\n      isOpen: isCSVImportModalOpen,\n      onClose: () => setIsCSVImportModalOpen(false),\n      onImportSuccess: handleCSVImportSuccess,\n      fiscalYear: fiscalYear\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 4870,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 3890,\n    columnNumber: 5\n  }, this);\n};\n_s(EmployeesTab, \"s5HZYRpcNB+VY4SN1UK7/iE+MHo=\", false, function () {\n  return [useYearMonth];\n});\n_c = EmployeesTab;\nexport default EmployeesTab;\nvar _c;\n$RefreshReg$(_c, \"EmployeesTab\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","useYearMonth","EmployeeCSVImportModal","jsxDEV","_jsxDEV","Fragment","_Fragment","WH_OPTIONS","value","label","reportApi","safeResponseParser","response","ok","json","jsonError","console","error","Error","clonedResponse","clone","errorMessage","status","errorData","message","text","includes","preview","substring","textError","getEmployeesByYear","year","log","storageKey","savedData","localStorage","getItem","sampleEmployees","id","no","employee_id","name","disability_type","disability","grade","hire_date","hc","monthlyStatus","Array","fill","memo","count","fiscal_year","savedEmployees","JSON","parse","employeesArray","Object","values","length","data","employees","storageError","fetch","headers","updateEmployeeData","employeeId","processMonthlyStatus","inputData","processedData","e","updateData","existingEmployee","updated_at","Date","toISOString","setItem","stringify","success","employee","method","body","responseData","createEmployeeDetail","_month","timestamp","getTime","randomPart","Math","floor","random","tempId","parseInt","employeeData","isArray","existingIds","keys","map","minId","max","customId","existingNos","emp","filter","isNaN","maxNo","nextNo","join","newEmployee","created_at","isCustom","apiError","warn","deleteEmployeeData","handleApiError","defaultEmployee","split","replace","EmployeesTab","onEmployeeChange","summaryData","onRefreshData","isEditing","onToggleEditMode","onSaveSuccess","editingStyles","buttonStyles","onYearChange","onEmployeesUpdate","_s","_localEmployees$","_ref9","_inputValues11","_ref10","_inputValues12","_ref11","_inputValues13","_ref12","_inputValues14","_ref13","_inputValues15","_ref14","_inputValues16","_ref15","_inputValues17","_inputValues18","_ref16","_inputValues20","fiscalYear","month","setFiscalYear","internalIsEditing","setInternalIsEditing","actualIsEditing","localEmployees","setLocalEmployees","originalEmployees","setOriginalEmployees","selectAll","setSelectAll","selectedCount","setSelectedCount","isAddingNewRow","setIsAddingNewRow","newRowData","setNewRowData","setErrorMessage","successMessage","setSuccessMessage","isLoading","setIsLoading","isCSVImportModalOpen","setIsCSVImportModalOpen","inputValues","setInputValues","months","monthNumbers","inputRefs","handleKeyDown","event","currentId","key","preventDefault","idPart","fieldPart","nextId","isMonthlyField","startsWith","currentMonthIndex","employeeIds","toString","newRowIdPrefix","isNewRow","fieldsOrder","currentIdIndex","indexOf","currentFieldIndex","current","_inputRefs$current$ne","focus","copyActiveEmployeesFromPreviousYear","currentYear","prevYear","prevYearStorageKey","currentYearStorageKey","currentYearData","savedCurrentYearData","savedPrevYearData","prevYearEmployees","activeEmployees","newEmployeesCount","forEach","newId","copiedEmployee","fetchEmployeesByYear","_response$data","processedEmployees","String","undefined","setTimeout","copiedCount","updatedData","updatedEmployees","updatedArray","monthly_status","isInitialRender","loadDataForFiscalYear","allKeys","legacyKey","then","foundInLocalStorage","inheritEmployeeData","fromYear","toYear","hireDateParts","hireYear","hireMonth","hireDay","inheritedFrom","_timestamp","bulkInheritEmployeeData","inheritedEmployees","skippedEmployees","inheritedEmployee","push","reason","checkAndInheritEmployeeData","fromKey","fromData","toKey","toData","isFromObject","trim","fromEmployees","fromEmployeeObj","toEmployees","toEmployeeObj","isToObject","employmentStatus","exists","inheritedCount","skippedCount","manualInheritData","result","checkEmployeeToDelete","allData","isObject","find","ID","名前","社員ID","障害区分","状態","採用日","deleteEmployeeFromDB","backupResult","createEmployeeBackup","hasRelatedMonthlyData","checkRelatedMonthlyData","employeeToDelete","deleteResult","deleteEmployeeFromLocalStorage","prev","backupPath","filteredData","storageKeys","backupKey","deleteMultipleEmployees","results","table","toggleSelectAll","newSelectAll","_selected","toggleSelectEmployee","newSelected","newSelectedCount","deleteSelectedEmployees","selectedEmployees","window","confirm","successCount","r","failCount","normalizeDisabilityType","disabilityType","normalized","toLowerCase","generateDefaultMonthlyStatus","hcValue","parseFloat","monthlyData","defaultHcValue","val","num","getStoredEmployeeData","storedData","saveEmployeeDataToLocalStorage","createBackup","currentData","cleanupOldBackups","backupPrefix","backupKeys","i","sort","reverse","keysToRemove","slice","removeItem","handleCSVImportSuccess","importedEmployees","targetYear","existingData","merged","changedCount","changes","_merged$employeeId","_merged$employeeId2","newEmployeeData","wh","employment_type","hc_value","retirement_date","clearCurrentYearData","employeeCount","debugDeleteFromUI","firstEmployee","willDelete","analyzeLocalStorageData","yearMatch","match","rawData","sampleId","sampleEmployee","convertArrayToObjectFormat","dataArray","dataObject","updateMonthlyStatusFromHc","loadEmployeeData","savedEmployeesArray","originalEmployeesCopy","handleToggleEditMode","handleCancelEdit","handleHcChange","currentEmployee","従業員ID","従業員データあり","従業員名","雇用形態","HC値","新しい値","退職日","updated","updatedEmp","employeeToUpdate","numValue","newMonthlyStatus","displayYear","displayMonth","systemCurrentYear","systemCurrentMonth","retirementMonth","retirementParts","retireYear","retireMonth","yearRelation","monthNum","index","calendarYear","isAfterHireDate","isDateAfterHireDate","isBeforeCurrentRealMonth","isBeforeOrEqualCurrentMonth","isBeforeRetirementMonth","isBeforeCurrentDisplayMonth","currentMonth","displayFiscalYear","handleFieldChange","field","prevEmployee","HC","convertedValue","currentFiscalYear","futureYearStorageKey","futureYearData","parsedData","updatedFields","retirementYear","retirementDay","retirementDate","handleNewRowFieldChange","hasRetirementDate","Boolean","updatedNewRowData","updateMonthlyStatusForNewRow","handleNewRowHcChange","新規行データあり","現在のHC値","rowData","currentDate","getFullYear","getMonth","handleMonthlyStatusChange","monthIndex","validValues","handleNewRowMonthlyStatusChange","handleAddNewRow","handleCancelNewRow","filtered","reduce","acc","handleDeleteEmployee","handleSaveNewRow","validationErrors","Promise","reject","dataToSend","createdEmployee","newEmp","resolve","fallbackError","handleSave","originalEmps","successfulUpdates","failedUpdates","skippedUpdates","is2024OrLater","changesByEmployee","originalEmp","changedFields","originalValue","newValue","original","new","processed","allEmployeesForStorage","savedEmployeesObj","savedEmployeesCount","retryData","BATCH_SIZE","Number","batchIds","updatePromises","empId","entries","allSettled","defaultButtonStyles","primary","padding","backgroundColor","color","border","borderRadius","cursor","secondary","actualButtonStyles","yearOptions","従業員データ数","最初の従業員のHC値","編集モード","実際の編集モード","className","children","style","display","justifyContent","alignItems","marginBottom","margin","fileName","_jsxFileName","lineNumber","columnNumber","gap","marginRight","fontSize","onChange","newYear","target","previousYear","nextYearStorageKey","nextYearData","type","onClick","title","disabled","textAlign","overflowX","width","borderCollapse","whiteSpace","borderBottom","checked","position","left","zIndex","minWidth","_ref","_inputValues","_ref2","_inputValues2","_ref3","_inputValues3","_ref4","_inputValues4","_ref5","_inputValues5","_ref6","_inputValues6","_ref7","_inputValues7","_inputValues8","_ref8","_inputValues10","ref","el","onKeyDown","hireDate","dateParts","day","padStart","formattedDate","option","updatedEmployee","onBlur","_inputValues9","placeholder","_inputValues19","colSpan","marginTop","paddingLeft","isOpen","onClose","onImportSuccess","_c","$RefreshReg$"],"sources":["/Users/gotouhiroaki/Programming/DAN_work/disability-employment-system/frontend/src/pages/MonthlyReport/EmployeesTab.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { useYearMonth } from './YearMonthContext';\nimport EmployeeCSVImportModal from './EmployeeCSVImportModal';\n\n// WH（雇用形態）の選択肢定義\nconst WH_OPTIONS = [\n  { value: '正社員', label: '正社員' },\n  { value: '短時間労働者', label: '短時間労働者' },\n  { value: '特定短時間労働者', label: '特定短時間労働者' }\n] as const;\n\n// 型定義\nexport interface Employee {\n  id: number;\n  no?: number;\n  employee_id: string | number;\n  name: string;\n  disability_type: string;\n  disability: string;\n  grade: string;\n  hire_date: string;\n  status: string;\n  wh?: '正社員' | '短時間労働者' | '特定短時間労働者';  // 雇用形態を追加\n  hc?: number;  // HC値を追加\n  monthlyStatus?: any[];\n  memo?: string;\n  count?: number;\n  retirement_date?: string; // 退職日を追加\n  fiscal_year?: number;  // 年度情報\n  inheritedFrom?: number;  // データの引き継ぎ元年度\n  _timestamp?: string;  // タイムスタンプ\n  _selected?: boolean;  // UI用の選択状態フラグ（データベースには保存されない）\n}\n\nexport interface MonthlyTotal {\n  id?: number;\n  fiscal_year?: number;\n  month?: number;\n  status?: string;\n  deadline?: string;\n  confirmed_at?: string;\n  body_count?: number;\n  intellectual_count?: number;\n  mental_count?: number;\n  total_count?: number;\n  created_at?: string;\n  updated_at?: string;\n  employees_count?: number; \n  fulltime_count?: number;\n  parttime_count?: number;\n  legal_employment_rate?: number;\n  employment_rate?: number;\n  required_count?: number;\n  over_under_count?: number;\n  level1_2_count?: number;\n  other_disability_count?: number;\n  level1_2_parttime_count?: number;\n  other_parttime_count?: number;\n}\n\n// API関数の修正版（実際のバックエンドエンドポイントに合わせる）\nconst reportApi = {\n  // 安全なレスポンス解析処理 - 共通関数化\n  safeResponseParser: async (response: Response) => {\n    if (response.ok) {\n      try {\n        return await response.json();\n      } catch (jsonError) {\n        console.error('JSONパースエラー:', jsonError);\n        throw new Error('不正な応答形式: JSONデータを解析できませんでした');\n      }\n    } else {\n      // エラー応答の処理\n      // 必ずレスポンスをクローンしてから本文を読み取る\n      const clonedResponse = response.clone();\n      let errorMessage = `API error: ${response.status}`;\n      \n      try {\n        // JSONとしての解析を試みる\n        const errorData = await response.json();\n        errorMessage = errorData.message || errorMessage;\n      } catch (jsonError) {\n        try {\n          // テキストとしての読み取りを試みる（HTML応答などの検出）\n          const text = await clonedResponse.text();\n          \n          // HTML応答のチェック\n          if (text.includes('<!DOCTYPE') || text.includes('<html')) {\n            console.error('HTML形式のレスポンスを検出:', { \n              status: response.status,\n              preview: text.substring(0, 100) + '...'\n            });\n            errorMessage = `APIがHTMLを返しました（ステータス: ${response.status}）`;\n          }\n        } catch (textError) {\n          // テキスト読み取りも失敗した場合\n          console.error('レスポンス本文読み取りエラー:', textError);\n        }\n      }\n      \n      throw new Error(errorMessage);\n    }\n  },\n\n  // 年度で従業員データを取得（実装済みエンドポイントを使用）\n  getEmployeesByYear: async (year: number) => {\n    console.log(`${year}年の従業員データを取得しています...`);\n    try {\n      // 特定の年の処理 (2024年以降はモックデータまたはローカルストレージから取得)\n      if (year >= 2024) {\n        console.log(`${year}年以降のデータはローカルストレージとモックデータを併用します`);\n        \n        try {\n          // ローカルストレージからデータを取得\n          const storageKey = `EMPLOYEE_DATA_${year}`;\n          console.log(`ストレージキー(読み込み時): ${storageKey}`);\n          const savedData = localStorage.getItem(storageKey);\n          \n          // サンプルデータを準備（index.tsxと同じ内容）\n          const sampleEmployees = [\n            {\n              id: 1,\n              no: 1,\n              employee_id: '1001',\n              name: '山田 太郎',\n              disability_type: '身体障害',\n              disability: '視覚',\n              grade: '1級',\n              hire_date: '2020/04/01',\n              status: '在籍',\n              hc: 1,\n              monthlyStatus: Array(12).fill(1), // 在籍状態なので全て1に設定\n              memo: '',\n              count: 0,\n              fiscal_year: year\n            },\n            {\n              id: 2,\n              no: 2,\n              employee_id: '2222',\n              name: '鈴木 花子',\n              disability_type: '身体障害',\n              disability: '聴覚',\n              grade: '4級',\n              hire_date: '2020/04/01',\n              status: '在籍',\n              hc: 0.5,\n              monthlyStatus: Array(12).fill(0.5), // 在籍状態なので全て0.5に設定\n              memo: '',\n              count: 0,\n              fiscal_year: year\n            },\n            {\n              id: 3,\n              no: 3,\n              employee_id: '3333',\n              name: '佐藤 一郎',\n              disability_type: '知的障害',\n              disability: '',\n              grade: 'B',\n              hire_date: '2020/04/01',\n              status: '在籍',\n              hc: 1,\n              monthlyStatus: Array(12).fill(1), // 在籍状態なので全て1に設定\n              memo: '',\n              count: 0,\n              fiscal_year: year\n            }\n          ];\n          \n          if (savedData) {\n            // ローカルストレージのデータが存在する場合\n            const savedEmployees = JSON.parse(savedData);\n            // オブジェクトから配列に変換\n            const employeesArray = Object.values(savedEmployees);\n            \n            if (employeesArray.length > 0) {\n              console.log(`${year}年の従業員データをローカルストレージから取得しました:`, employeesArray);\n              \n              // ローカルストレージのデータのみを使用する（サンプルデータは結合しない）\n              // 全データの詳細をログ出力（デバッグ用）\n              console.log(`${year}年のローカルストレージからのデータ(${employeesArray.length}件):`, employeesArray);\n              \n              return { \n                data: { \n                  employees: employeesArray\n                } \n              };\n            }\n          }\n          \n          // ローカルストレージにデータがない場合はサンプルデータを返す\n          console.log(`${year}年のローカルストレージデータが見つからないため、サンプルデータを返します`);\n          return { data: { employees: sampleEmployees } };\n        } catch (storageError) {\n          console.error('ローカルストレージ読み取りエラー:', storageError);\n          // エラー時はサンプルデータを返す\n          return { data: { employees: [] } };\n        }\n      }\n      \n      // axios スタイルのクライアントを使用（エンハンスドクライアントが理想的）\n      const response = await fetch(`/api/employees?year=${year}`, {\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n      \n      // 共通の安全なレスポンス処理を使用\n      const data = await reportApi.safeResponseParser(response);\n      return { data: { employees: data } };\n    } catch (error) {\n      console.error(`従業員データ取得エラー: ${error}`);\n      // エラー発生時は空のデータを返す\n      return { data: { employees: [] } };\n    }\n  },\n\n  // 従業員データを更新（実装済みエンドポイントを使用）\n  updateEmployeeData: async (year: number, employeeId: number, data: Record<string, string>) => {\n    console.log(`${year}年の従業員ID:${employeeId}を更新しています...`, data);\n    try {\n      // 共通の月次ステータス処理関数\n      const processMonthlyStatus = (inputData: Record<string, string>) => {\n        const processedData = {...inputData};\n        if (inputData.monthlyStatus) {\n          try {\n            // 文字列の場合はJSONパースする\n            if (typeof inputData.monthlyStatus === 'string') {\n              processedData.monthlyStatus = JSON.parse(inputData.monthlyStatus);\n            }\n            // それ以外の場合はそのまま使用\n          } catch (e) {\n            processedData.monthlyStatus = inputData.monthlyStatus;\n          }\n        }\n        return processedData;\n      };\n      \n      // 2024年以降のデータは特別処理 - 実際のAPIは呼び出さずにモック応答を返す\n      if (year >= 2024) {\n        console.log(`${year}年の従業員データはクライアント側で更新します（APIは呼び出しません）`);\n        \n        // データの加工処理（月次ステータスのJSON化など）\n        const updateData = processMonthlyStatus(data);\n        \n        // ローカルストレージにデータを保存\n        try {\n          // 現在の保存データを取得\n          const storageKey = `EMPLOYEE_DATA_${year}`;\n          let savedEmployees = {};\n          \n          try {\n            const savedData = localStorage.getItem(storageKey);\n            if (savedData) {\n              savedEmployees = JSON.parse(savedData);\n            }\n          } catch (e) {\n            console.error('ローカルストレージの読み取りエラー:', e);\n          }\n          \n          // 既存データがある場合は、元のデータと新しいデータをマージする\n          let existingEmployee = savedEmployees[employeeId] || {};\n          \n          // 従業員データを更新（既存データとマージ）\n          savedEmployees = {\n            ...savedEmployees,\n            [employeeId]: {\n              ...existingEmployee, // 既存のデータをベースにする\n              id: employeeId,\n              ...updateData, // 新しいデータで上書き\n              fiscal_year: year,\n              updated_at: new Date().toISOString()\n            }\n          };\n          \n          console.log(`更新するデータ:`, savedEmployees[employeeId]);\n          \n          // ローカルストレージに保存\n          localStorage.setItem(storageKey, JSON.stringify(savedEmployees));\n          console.log(`従業員ID=${employeeId}のデータをローカルストレージに保存しました`);\n        } catch (storageError) {\n          console.error('ローカルストレージへの保存エラー:', storageError);\n        }\n        \n        // モックレスポンスを返す\n        return {\n          success: true,\n          message: '従業員データをクライアント側で更新しました',\n          employee: {\n            id: employeeId,\n            ...updateData,\n            fiscal_year: year\n          }\n        };\n      }\n      \n      // 実際のAPI呼び出し（2023年以前のデータ）\n      const updateData = processMonthlyStatus(data);\n      \n      const response = await fetch(`/api/employees/${employeeId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify(updateData),\n      });\n      \n      // 共通の安全なレスポンス処理を使用\n      const responseData = await reportApi.safeResponseParser(response);\n      return responseData;\n    } catch (error) {\n      console.error(`従業員更新エラー: ${error}`);\n      \n      // 2024年以降のデータの場合は、エラーをスローする代わりにモックレスポンスを返す\n      if (year >= 2024) {\n        console.log(`エラーが発生しましたが、${year}年の従業員はクライアント側で更新します`);\n        \n        return {\n          success: true,\n          message: 'データベース接続エラーが発生しましたが、クライアント側で更新しました',\n          employee: {\n            id: employeeId,\n            ...data,\n            fiscal_year: year\n          }\n        };\n      }\n      \n      throw error;\n    }\n  },\n\n  // 従業員データを作成（実装済みエンドポイントを使用）\n  createEmployeeDetail: async (year: number, _month: number, data: Omit<Employee, 'id'>) => {\n    // 月パラメータは不要なので使用しない（APIとの整合性のために残す）\n    console.log(`${year}年に新規従業員を追加しています...`, data);\n    \n    try {\n      // 入力データの検証\n      if (!data.name) {\n        throw new Error('社員名は必須項目です');\n      }\n      \n      if (!data.employee_id) {\n        throw new Error('社員IDは必須項目です');\n      }\n      \n      // 2024年以降のデータは特別処理 - 実際のAPIは呼び出さずにモック応答を返す\n      if (year >= 2024) {\n        console.log(`${year}年のデータは直接作成します（APIは呼び出しません）`);\n        \n        // 一貫した仮ID生成 - タイムスタンプベースでより予測可能に\n        const timestamp = new Date().getTime();\n        const randomPart = Math.floor(Math.random() * 1000);\n        const tempId = parseInt(`${timestamp % 100000}${randomPart}`.substring(0, 6));\n        \n        // 月次ステータスの初期化を確実に実施\n        const employeeData = {\n          ...data,\n          monthlyStatus: Array.isArray(data.monthlyStatus) ? data.monthlyStatus : Array(12).fill('')\n        };\n        \n        // データの欠損フィールドを初期化\n        if (!employeeData.disability_type) employeeData.disability_type = '';\n        if (!employeeData.disability) employeeData.disability = '';\n        if (!employeeData.grade) employeeData.grade = '';\n        if (!employeeData.memo) employeeData.memo = '';\n        \n        // 新規作成した従業員データをローカルストレージに保存\n        try {\n          // 現在の保存データを取得\n          const storageKey = `EMPLOYEE_DATA_${year}`;\n          let savedEmployees = {};\n          \n          try {\n            const savedData = localStorage.getItem(storageKey);\n            if (savedData) {\n              savedEmployees = JSON.parse(savedData);\n            }\n          } catch (e) {\n            console.error('ローカルストレージの読み取りエラー:', e);\n          }\n          \n          // ユニークなIDを生成 (既存IDの最大値 + 1 または 10000以上の値)\n          // 既存のIDをすべて取得\n          const existingIds = Object.keys(savedEmployees).map(id => parseInt(id, 10));\n          // 最低でも10000以上の値を使う（サンプルデータのIDとの衝突を避けるため）\n          const minId = Math.max(...existingIds, 10000);\n          // さらに大きい値を使うためにタイムスタンプと組み合わせる\n          const customId = Math.max(tempId, minId + 1);\n          \n          // 既存の従業員からno値の最大値を見つける\n          // ローカルストレージ内の既存従業員からnoを取得\n          const existingNos = Object.values(savedEmployees)\n            .map((emp: any) => emp.no || 0)\n            .filter((no: number) => !isNaN(no));\n          \n          // 最大のNo値を検索\n          const maxNo = existingNos.length > 0 ? Math.max(...existingNos) : 0;\n          \n          // 次のno番号を生成 (最大値 + 1)\n          const nextNo = maxNo + 1;\n          \n          console.log(`新規従業員のNo生成: 既存No=${existingNos.join(',')}, 最大No=${maxNo}, 次のNo=${nextNo}`);\n          \n          const newEmployee = {\n            ...employeeData,\n            id: customId,\n            no: nextNo, // 連番のNo値を設定\n            fiscal_year: year,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n            // サンプルと区別するためのフラグ\n            isCustom: true\n          };\n          \n          // 新しい従業員データをログ出力（デバッグ用）\n          console.log(`新規作成する従業員データ:`, newEmployee);\n          \n          // 既存のデータに新しい従業員を追加\n          savedEmployees = {\n            ...savedEmployees,\n            [customId]: newEmployee\n          };\n          \n          // ローカルストレージに保存\n          localStorage.setItem(storageKey, JSON.stringify(savedEmployees));\n          console.log(`新規従業員ID=${customId}のデータをローカルストレージに保存しました`);\n          \n          // モックレスポンスを返す - 実際のAPIレスポンス形式に合わせる\n          return {\n            success: true,\n            message: '従業員データをクライアント側で作成しました',\n            employee: newEmployee // 完全なオブジェクトを返す\n          };\n        } catch (storageError) {\n          console.error('ローカルストレージへの保存エラー:', storageError);\n          throw storageError; // エラーを再スローして上位でキャッチできるようにする\n        }\n      }\n      \n      // 実際のAPI呼び出し（2023年以前のデータ）\n      try {\n        const response = await fetch(`/api/employees`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          },\n          body: JSON.stringify({\n            ...data,\n            fiscal_year: year,\n            // 月次ステータスが未定義の場合は空の配列を設定\n            monthlyStatus: data.monthlyStatus || Array(12).fill('')\n          }),\n        });\n        \n        // 共通の安全なレスポンス処理を使用\n        const responseData = await reportApi.safeResponseParser(response);\n        return responseData;\n      } catch (apiError) {\n        console.error(`API呼び出しエラー: ${apiError}`);\n        \n        // 2023年以前のデータではAPIエラーを再スロー\n        if (year < 2024) {\n          throw apiError;\n        }\n        \n        // 2024年以降のデータの場合は、APIエラーが発生してもクライアント側でデータを作成\n        console.warn(`APIエラーが発生しましたが、${year}年のデータはクライアント側で作成します`);\n        \n        const timestamp = new Date().getTime();\n        const randomPart = Math.floor(Math.random() * 1000);\n        const tempId = parseInt(`${timestamp % 100000}${randomPart}`.substring(0, 6));\n        \n        return {\n          success: true,\n          message: 'データベース接続エラーが発生しましたが、クライアント側でデータを作成しました',\n          employee: {\n            ...data,\n            id: tempId,\n            fiscal_year: year,\n            monthlyStatus: data.monthlyStatus || Array(12).fill('')\n          }\n        };\n      }\n    } catch (error) {\n      console.error(`従業員作成エラー: ${error}`);\n      \n      // 2024年以降のデータの場合は、エラーをスローする代わりにモックレスポンスを返す\n      if (year >= 2024) {\n        const timestamp = new Date().getTime();\n        const randomPart = Math.floor(Math.random() * 1000);\n        const tempId = parseInt(`${timestamp % 100000}${randomPart}`.substring(0, 6));\n        \n        console.log(`エラーが発生しましたが、${year}年のデータはクライアント側で作成します`);\n        \n        return {\n          success: true,\n          message: 'データベース接続エラーが発生しましたが、クライアント側でデータを作成しました',\n          employee: {\n            ...data,\n            id: tempId,\n            fiscal_year: year,\n            monthlyStatus: data.monthlyStatus || Array(12).fill('')\n          }\n        };\n      }\n      \n      throw error;\n    }\n  },\n\n  // 従業員データを削除（実装済みエンドポイントを使用）\n  deleteEmployeeData: async (year: number, employeeId: number) => {\n    console.log(`${year}年の従業員ID:${employeeId}を削除しています...`);\n    try {\n      // 2024年以降のデータは特別処理 - クライアント側での削除のみ\n      if (year >= 2024) {\n        console.log(`${year}年の従業員データはクライアント側で削除します（APIは呼び出しません）`);\n        \n        // 将来的に、ローカルストレージから削除する機能を追加可能\n        \n        return {\n          success: true,\n          message: '従業員データをクライアント側で削除しました'\n        };\n      }\n      \n      // 実際のAPI呼び出し（2023年以前のデータ）\n      const response = await fetch(`/api/employees/${employeeId}?fiscal_year=${year}`, {\n        method: 'DELETE',\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n      \n      // 共通の安全なレスポンス処理を使用\n      const responseData = await reportApi.safeResponseParser(response);\n      return responseData;\n    } catch (error) {\n      console.error(`従業員削除エラー: ${error}`);\n      \n      // 2024年以降のデータの場合は、エラーをスローする代わりに成功レスポンスを返す\n      if (year >= 2024) {\n        console.log(`エラーが発生しましたが、${year}年の従業員はクライアント側で削除します`);\n        \n        return {\n          success: true,\n          message: 'データベース接続エラーが発生しましたが、クライアント側で削除しました'\n        };\n      }\n      \n      throw error;\n    }\n  },\n\n  handleApiError: (error: any): string => {\n    // HTML応答のエラー（Expressサーバーのクラッシュやプロキシエラーなど）\n    if (error.message && error.message.includes('APIがHTMLを返しました')) {\n      return 'サーバーエラーが発生しました。管理者に連絡してください。';\n    }\n    \n    // 500エラー（サーバー内部エラー）\n    if (error.message && error.message.includes('API error: 500')) {\n      return 'サーバー内部エラーが発生しました。しばらく待ってから再試行してください。';\n    }\n    \n    // 404エラー（リソースが見つからない）\n    if (error.message && error.message.includes('API error: 404')) {\n      return '指定されたデータが見つかりません。データが削除されたか、権限がない可能性があります。';\n    }\n    \n    // 401/403エラー（認証/認可エラー）\n    if (error.message && (error.message.includes('API error: 401') || error.message.includes('API error: 403'))) {\n      return '権限がないか、セッションが期限切れになっています。再ログインしてください。';\n    }\n    \n    // 400エラー（不正なリクエスト）\n    if (error.message && error.message.includes('API error: 400')) {\n      return '入力データに問題があります。入力内容を確認してください。';\n    }\n    \n    // ネットワーク関連エラー\n    if (error.message && error.message.includes('Network Error')) {\n      return 'ネットワーク接続エラーが発生しました。インターネット接続を確認してください。';\n    }\n    \n    // タイムアウトエラー\n    if (error.message && error.message.includes('timeout')) {\n      return 'リクエストがタイムアウトしました。サーバーが混雑しているか、ネットワーク速度が遅い可能性があります。';\n    }\n    \n    // 2024年以降特有のエラー\n    if (error.message && error.message.includes('2024年以降のデータ')) {\n      return '将来年度のデータのため、現在はローカルで処理されています。';\n    }\n    \n    // JSON解析エラー\n    if (error.message && (error.message.includes('JSON') || error.message.includes('解析'))) {\n      return 'データ形式エラーが発生しました。管理者に連絡してください。';\n    }\n    \n    // その他のエラー\n    return `エラーが発生しました: ${error.message || '不明なエラー'}`;\n  }\n};\n\n// 親コンポーネントから受け取る props の型定義\ninterface EmployeesTabProps {\n  employees?: Employee[];\n  onEmployeeChange?: (id: number, field: string, value: string) => void;\n  summaryData?: MonthlyTotal;\n  onRefreshData?: () => void;\n  isEditing?: boolean;\n  onToggleEditMode?: () => void;\n  onSaveSuccess?: () => void;\n  editingStyles?: React.CSSProperties;\n  buttonStyles?: Record<string, React.CSSProperties>;\n  onYearChange?: (year: number) => void;\n  onEmployeesUpdate?: (employees: Employee[]) => void; // 親コンポーネントに変更を通知するコールバック\n}\n\n// 従業員データのデフォルト値\nconst defaultEmployee: Omit<Employee, 'id'> = {\n  no: 0,\n  employee_id: '',\n  name: '',\n  disability_type: '',\n  disability: '',\n  grade: '',\n  hire_date: new Date().toISOString().split('T')[0].replace(/-/g, '/'),\n  status: '在籍',\n  hc: 1, // デフォルトのHC値を1に設定\n  monthlyStatus: Array(12).fill(''),\n  memo: '',\n  count: 0\n};\n\n// EmployeesTabコンポーネント\nconst EmployeesTab: React.FC<EmployeesTabProps> = ({\n  employees = [],\n  onEmployeeChange = () => {},\n  summaryData = {},\n  onRefreshData,\n  isEditing = false,\n  onToggleEditMode,\n  onSaveSuccess = () => {},\n  editingStyles = {},\n  buttonStyles = {},\n  onYearChange,\n  onEmployeesUpdate\n}) => {\n  console.log('EmployeesTab マウント - 受け取った従業員データ:', employees);\n  \n  // 年月コンテキストから現在の年と月を取得\n  const { fiscalYear, month, setFiscalYear } = useYearMonth();\n  \n  // 内部編集状態\n  const [internalIsEditing, setInternalIsEditing] = useState<boolean>(false);\n  \n  // 実際に使用する編集状態\n  const actualIsEditing = isEditing || internalIsEditing;\n  \n  // ローカルの従業員データ\n  const [localEmployees, setLocalEmployees] = useState<Employee[]>([]);\n  \n  // 元の従業員データを保持するための状態（編集キャンセル用）\n  const [originalEmployees, setOriginalEmployees] = useState<Employee[]>([]);\n  \n  // 選択状態の管理\n  const [selectAll, setSelectAll] = useState<boolean>(false);\n  const [selectedCount, setSelectedCount] = useState<number>(0);\n  \n  // 新規行追加モード用の状態\n  const [isAddingNewRow, setIsAddingNewRow] = useState<boolean>(false);\n  const [newRowData, setNewRowData] = useState<Omit<Employee, 'id'>>({...defaultEmployee});\n  \n  // エラーメッセージ状態\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\n  \n  // 成功メッセージ状態\n  const [successMessage, setSuccessMessage] = useState<string | null>(null);\n  \n  // ローディング状態\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  \n  // CSVインポートモーダルの状態\n  const [isCSVImportModalOpen, setIsCSVImportModalOpen] = useState<boolean>(false);\n\n  // 入力状態管理用のローカルstate\n  const [inputValues, setInputValues] = useState<{[key: string]: any}>({});\n\n  // 月名の配列\n  const months = ['4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月', '1月', '2月', '3月'];\n  \n  // 月番号の配列（会計年度順）\n  const monthNumbers = [4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3];\n\n  // 入力フィールドの参照を保持\n  const inputRefs = useRef<{[key: string]: HTMLInputElement | HTMLSelectElement | null}>({});\n\n  // キーボードナビゲーションハンドラー\n  const handleKeyDown = useCallback((event: React.KeyboardEvent<HTMLInputElement | HTMLSelectElement>, currentId: string) => {\n    const { key } = event;\n    \n    // 矢印キーが押された場合\n    if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Tab'].includes(key)) {\n      event.preventDefault(); // デフォルトのタブ移動を防止\n      \n      // 現在の入力要素のIDから、行、列情報を解析\n      const [idPart, fieldPart] = currentId.split('-');\n      \n      // 移動先の要素IDを決定\n      let nextId = '';\n      \n      // 月次ステータスフィールドかどうかの判定\n      const isMonthlyField = fieldPart && fieldPart.startsWith('monthlyStatus');\n      const currentMonthIndex = isMonthlyField ? parseInt(fieldPart.split('-')[1]) : -1;\n      \n      const employeeIds = localEmployees.map(emp => emp.id.toString());\n      const newRowIdPrefix = 'new';\n      const isNewRow = idPart === newRowIdPrefix;\n      \n      // フィールド順序（月次ステータス以外）\n      const fieldsOrder = ['employee_id', 'name', 'disability_type', 'disability', 'grade', 'hire_date', 'status', 'memo'];\n      \n      switch (key) {\n        case 'ArrowUp':\n          if (isMonthlyField) {\n            // 上の従業員の同じ月フィールドに移動\n            const currentIdIndex = isNewRow \n              ? localEmployees.length \n              : employeeIds.indexOf(idPart);\n              \n            if (currentIdIndex > 0) {\n              // 上の行の同じ月フィールドに移動\n              nextId = `${employeeIds[currentIdIndex - 1]}-monthlyStatus-${currentMonthIndex}`;\n            }\n          } else {\n            // 上の従業員の同じフィールドに移動\n            const currentIdIndex = isNewRow \n              ? localEmployees.length \n              : employeeIds.indexOf(idPart);\n              \n            if (currentIdIndex > 0) {\n              // 上の行の同じフィールドに移動\n              nextId = `${employeeIds[currentIdIndex - 1]}-${fieldPart}`;\n            }\n          }\n          break;\n          \n        case 'ArrowDown':\n          if (isMonthlyField) {\n            // 下の従業員の同じ月フィールドに移動\n            const currentIdIndex = isNewRow \n              ? localEmployees.length \n              : employeeIds.indexOf(idPart);\n              \n            if (currentIdIndex < localEmployees.length - 1) {\n              // 下の行の同じ月フィールドに移動\n              nextId = `${employeeIds[currentIdIndex + 1]}-monthlyStatus-${currentMonthIndex}`;\n            } else if (currentIdIndex === localEmployees.length - 1 && isAddingNewRow) {\n              // 新規行の同じ月フィールドに移動\n              nextId = `new-monthlyStatus-${currentMonthIndex}`;\n            }\n          } else {\n            // 下の従業員の同じフィールドに移動\n            const currentIdIndex = isNewRow \n              ? localEmployees.length \n              : employeeIds.indexOf(idPart);\n              \n            if (currentIdIndex < localEmployees.length - 1) {\n              // 下の行の同じフィールドに移動\n              nextId = `${employeeIds[currentIdIndex + 1]}-${fieldPart}`;\n            } else if (currentIdIndex === localEmployees.length - 1 && isAddingNewRow) {\n              // 新規行の同じフィールドに移動\n              nextId = `new-${fieldPart}`;\n            }\n          }\n          break;\n          \n        case 'ArrowLeft':\n          if (isMonthlyField) {\n            // 左の月フィールドに移動\n            if (currentMonthIndex > 0) {\n              nextId = `${idPart}-monthlyStatus-${currentMonthIndex - 1}`;\n            } else {\n              // 月次ステータスの最初の列から左に移動する場合は通常フィールドの最後へ\n              nextId = `${idPart}-status`;\n            }\n          } else {\n            // 通常フィールドの場合、左のフィールドに移動\n            const currentFieldIndex = fieldsOrder.indexOf(fieldPart);\n            if (currentFieldIndex > 0) {\n              nextId = `${idPart}-${fieldsOrder[currentFieldIndex - 1]}`;\n            }\n          }\n          break;\n          \n        case 'ArrowRight':\n        case 'Tab':\n          if (isMonthlyField) {\n            // 右の月フィールドに移動\n            if (currentMonthIndex < 11) {\n              nextId = `${idPart}-monthlyStatus-${currentMonthIndex + 1}`;\n            } else {\n              // 月次ステータスの最後の列から右に移動する場合はメモフィールドへ\n              nextId = `${idPart}-memo`;\n            }\n          } else {\n            // 通常フィールドの場合、右のフィールドに移動\n            const currentFieldIndex = fieldsOrder.indexOf(fieldPart);\n            if (currentFieldIndex < fieldsOrder.length - 1) {\n              nextId = `${idPart}-${fieldsOrder[currentFieldIndex + 1]}`;\n            } else if (currentFieldIndex === fieldsOrder.length - 1) {\n              // メモフィールドの次は月次ステータスの最初へ\n              nextId = `${idPart}-monthlyStatus-0`;\n            }\n          }\n          break;\n      }\n      \n      // 次の入力フィールドにフォーカスを移す\n      if (nextId && inputRefs.current[nextId]) {\n        inputRefs.current[nextId]?.focus();\n      }\n    }\n  }, [localEmployees, isAddingNewRow]);\n\n  // 前年度の在籍中の従業員データを現在の年度にコピーする関数\n  const copyActiveEmployeesFromPreviousYear = async (currentYear: number): Promise<number> => {\n    try {\n      // 前年度のStorageKeyを生成\n      const prevYear = currentYear - 1;\n      const prevYearStorageKey = `EMPLOYEE_DATA_${prevYear}`;\n      \n      // 現在の年度のStorageKeyを生成\n      const currentYearStorageKey = `EMPLOYEE_DATA_${currentYear}`;\n      \n      // 現在の年度のデータを取得\n      let currentYearData: Record<string, any> = {};\n      try {\n        const savedCurrentYearData = localStorage.getItem(currentYearStorageKey);\n        if (savedCurrentYearData) {\n          currentYearData = JSON.parse(savedCurrentYearData);\n        }\n      } catch (e) {\n        console.error('現在年度のデータ読み取りエラー:', e);\n      }\n      \n      // 前年度のデータが存在するか確認\n      const savedPrevYearData = localStorage.getItem(prevYearStorageKey);\n      if (!savedPrevYearData) {\n        console.log(`${prevYear}年のデータが存在しないため、引き継ぐデータはありません`);\n        return 0;\n      }\n      \n      try {\n        // 前年度のデータを解析\n        const prevYearEmployees = JSON.parse(savedPrevYearData);\n        \n        // 在籍中または休職中の従業員のみをフィルタリング\n        const activeEmployees = Object.values(prevYearEmployees).filter((emp: any) => \n          emp.status === '在籍' || emp.status === '休職'\n        );\n        \n        if (activeEmployees.length === 0) {\n          console.log(`${prevYear}年に在籍中または休職中の従業員がいないため、引き継ぐデータはありません`);\n          return 0;\n        }\n        \n        // 在籍中の従業員を現在の年度にコピー\n        let newEmployeesCount = 0;\n        \n        // 最初に、現在の年度のデータから最大IDを見つける\n        const existingIds = Object.keys(currentYearData).map(id => parseInt(id));\n        let nextId = existingIds.length > 0 ? Math.max(...existingIds) + 1 : 10000; // 新しいIDの開始点\n        \n        // 在籍中の従業員を現在の年度にコピー\n        activeEmployees.forEach((emp: any) => {\n          // IDの衝突を避けるための新しいID生成\n          const newId = nextId++;\n          \n          // 従業員データを新しい年度用にコピー\n          const copiedEmployee = {\n            ...emp,\n            id: newId,\n            fiscal_year: currentYear,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n          };\n          \n          // 現在の年度のデータに追加\n          currentYearData[newId] = copiedEmployee;\n          newEmployeesCount++;\n        });\n        \n        // 更新されたデータをローカルストレージに保存\n        if (newEmployeesCount > 0) {\n          localStorage.setItem(currentYearStorageKey, JSON.stringify(currentYearData));\n          console.log(`${prevYear}年から${currentYear}年へ${newEmployeesCount}件の従業員データを引き継ぎました`);\n          return newEmployeesCount;\n        }\n      } catch (e) {\n        console.error('データの引き継ぎ中にエラーが発生しました:', e);\n      }\n    } catch (error) {\n      console.error('従業員データの引き継ぎ中にエラーが発生しました:', error);\n    }\n    \n    return 0;\n  };\n\n  // 年度変更時に従業員データを取得する関数\n  const fetchEmployeesByYear = useCallback(async (year: number) => {\n    try {\n      setIsLoading(true);\n      setErrorMessage(null);\n      console.log(`${year}年の従業員データを取得中...`);\n      \n      // 2024年以降のデータで、ローカルストレージを先にチェック\n      if (year >= 2024) {\n        const storageKey = `EMPLOYEE_DATA_${year}`;\n        try {\n          const savedData = localStorage.getItem(storageKey);\n          \n          if (savedData) {\n            // localStorage にデータが存在する場合は、それを優先して使用\n            const savedEmployees = JSON.parse(savedData);\n            \n            // オブジェクトから配列に変換\n            const employeesArray = Object.values(savedEmployees);\n            \n            if (employeesArray.length > 0) {\n              console.log(`${year}年の従業員データをローカルストレージから読み込みました:`, employeesArray.length, '件');\n              \n              const processedEmployees = employeesArray.map((emp: any) => ({\n                ...emp,\n                employee_id: typeof emp.employee_id === 'number' ? String(emp.employee_id) : emp.employee_id,\n                disability_type: emp.disability_type || '',\n                disability: emp.disability || '',\n                grade: emp.grade || '',\n                status: emp.status || '在籍',\n                hc: emp.hc !== undefined ? emp.hc : 1,\n                monthlyStatus: Array.isArray(emp.monthlyStatus) ? emp.monthlyStatus : Array(12).fill('')\n              }));\n              \n              setLocalEmployees(processedEmployees);\n              setOriginalEmployees(JSON.parse(JSON.stringify(processedEmployees)));\n              \n              setSuccessMessage(`${year}年のデータを読み込みました（${processedEmployees.length}件）`);\n              setTimeout(() => setSuccessMessage(null), 3000);\n              \n              setIsLoading(false);\n              return;\n            }\n          }\n          \n          // データが存在しない場合、前年度からデータを引き継ぐ\n          if (!savedData || (savedData && Object.keys(JSON.parse(savedData) || {}).length === 0)) {\n            console.log(`${year}年のデータが存在しないため、前年度からデータを引き継ぎを試みます`);\n            \n            // 前年度からデータを引き継ぐ\n            const copiedCount = await copyActiveEmployeesFromPreviousYear(year) || 0;\n            \n            if (copiedCount > 0) {\n              // 引き継ぎに成功した場合、改めてローカルストレージから読み込み直す\n              const updatedData = localStorage.getItem(storageKey);\n              if (updatedData) {\n                const updatedEmployees = JSON.parse(updatedData);\n                const updatedArray = Object.values(updatedEmployees);\n                \n                if (updatedArray.length > 0) {\n                  const processedEmployees = updatedArray.map((emp: any) => ({\n                    ...emp,\n                    employee_id: typeof emp.employee_id === 'number' ? String(emp.employee_id) : emp.employee_id,\n                    disability_type: emp.disability_type || '',\n                    disability: emp.disability || '',\n                    grade: emp.grade || '',\n                    status: emp.status || '在籍',\n                    hc: emp.hc !== undefined ? emp.hc : 1,\n                    monthlyStatus: Array.isArray(emp.monthlyStatus) ? emp.monthlyStatus : Array(12).fill('')\n                  }));\n                  \n                  setLocalEmployees(processedEmployees);\n                  setOriginalEmployees(JSON.parse(JSON.stringify(processedEmployees)));\n                  \n                  setSuccessMessage(`前年度から${copiedCount}件の従業員データを引き継ぎました`);\n                  setTimeout(() => setSuccessMessage(null), 3000);\n                  \n                  setIsLoading(false);\n                  return;\n                }\n              }\n            }\n          }\n        } catch (e) {\n          console.error('ローカルストレージ読み取りエラー:', e);\n        }\n      }\n      \n      // ローカルストレージにデータがない場合のみAPIから取得（2024年以降は空データが返される可能性が高い）\n      const response = await reportApi.getEmployeesByYear(year);\n      \n      if (response?.data?.employees) {\n        console.log(`${year}年の従業員データを取得成功:`, response.data.employees);\n        \n        // データの有無を確認\n        if (!Array.isArray(response.data.employees) || response.data.employees.length === 0) {\n          console.log(`${year}年のAPIデータは空です。空の配列を使用します。`);\n          setLocalEmployees([]);\n          setOriginalEmployees([]);\n          setSuccessMessage(`${year}年のデータがまだ作成されていません。新規追加ができます。`);\n          setTimeout(() => setSuccessMessage(null), 3000);\n          setIsLoading(false);\n          return;\n        }\n        \n        const processedEmployees = response.data.employees.map((emp: any) => ({\n          ...emp,\n          employee_id: typeof emp.employee_id === 'number' ? String(emp.employee_id) : emp.employee_id,\n          disability_type: emp.disability_type || '',\n          disability: emp.disability || '',\n          grade: emp.grade || '',\n          status: emp.status || '在籍',\n          hc: emp.hc !== undefined ? emp.hc : 1, // HCが未定義の場合は1をデフォルト値に設定\n          monthlyStatus: (() => {\n            if (Array.isArray(emp.monthlyStatus)) {\n              return emp.monthlyStatus;\n            } else if (typeof emp.monthly_status === 'string') {\n              try {\n                return JSON.parse(emp.monthly_status);\n              } catch (e) {\n                return Array(12).fill('');\n              }\n            } else {\n              return Array(12).fill('');\n            }\n          })()\n        }));\n        \n        setLocalEmployees(processedEmployees);\n        setOriginalEmployees(JSON.parse(JSON.stringify(processedEmployees)));\n        \n        if (processedEmployees.length > 0) {\n          setSuccessMessage(`${year}年のデータを読み込みました（${processedEmployees.length}件）`);\n          setTimeout(() => setSuccessMessage(null), 3000);\n        }\n      } else {\n        console.log(`${year}年の従業員データは空です`);\n        setLocalEmployees([]);\n        setOriginalEmployees([]);\n        setSuccessMessage(`${year}年のデータがまだ作成されていません。新規追加ができます。`);\n        setTimeout(() => setSuccessMessage(null), 3000);\n      }\n    } catch (error: any) {\n      console.error(`${year}年の従業員データ取得エラー:`, error);\n      // このエラーは発生しないはず (getEmployeesByYearでキャッチされる)\n      setErrorMessage(`予期せぬエラーが発生しました。管理者に連絡してください。`);\n      setLocalEmployees([]);\n      setOriginalEmployees([]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // useRefを通常のコンポーネントスコープで宣言（Hookのルールに従う）\n  const isInitialRender = useRef(true);\n  \n  // fiscalYear変更時のデータ読み込み処理\n  useEffect(() => {\n    // fiscalYearが変更されたときのみ実行するために、先にフラグをチェック\n    console.log(`fiscalYear変更を検知: ${fiscalYear}`);\n    \n    // データロード処理\n    const loadDataForFiscalYear = async () => {\n      // 統一されたストレージキー\n      const storageKey = `EMPLOYEE_DATA_${fiscalYear}`;\n      console.log('=== データロード開始 ===');\n      console.log('ローカルストレージから読み込み試行 - キー:', storageKey);\n      \n      try {\n        // 古いキーと新しいキーの両方をチェック\n        const allKeys = Object.keys(localStorage);\n        const legacyKey = `employee_data_${fiscalYear}`;\n        let savedData = localStorage.getItem(storageKey);\n        \n        // 新しいキーで見つからなければ古いキーを確認\n        if (!savedData && allKeys.includes(legacyKey)) {\n          console.log(`古いフォーマットのキー ${legacyKey} からデータを読み込みます`);\n          savedData = localStorage.getItem(legacyKey);\n          \n          // データが見つかれば新しいキーに移行\n          if (savedData) {\n            console.log('古いキーから新しいキーにデータを移行します');\n            localStorage.setItem(storageKey, savedData);\n            // 安全を確保するために今は古いキーは削除しない\n          }\n        }\n        \n        console.log('取得されたデータ有無:', savedData ? 'あり' : 'なし');\n        if (savedData) {\n          const savedEmployees = JSON.parse(savedData);\n          // オブジェクトから配列に変換\n          const employeesArray = Object.values(savedEmployees);\n          \n          if (employeesArray.length > 0) {\n            console.log(`${fiscalYear}年の${employeesArray.length}件のデータを読み込みました`);\n            \n            const processedEmployees = employeesArray.map((emp: any) => ({\n              ...emp,\n              employee_id: typeof emp.employee_id === 'number' ? String(emp.employee_id) : emp.employee_id,\n              disability_type: emp.disability_type || '',\n              disability: emp.disability || '',\n              grade: emp.grade || '',\n              status: emp.status || '在籍',\n              hc: emp.hc !== undefined ? emp.hc : 1,\n              monthlyStatus: Array.isArray(emp.monthlyStatus) ? emp.monthlyStatus : Array(12).fill('')\n            }));\n            \n            setLocalEmployees(processedEmployees);\n            setOriginalEmployees(JSON.parse(JSON.stringify(processedEmployees)));\n            \n            // 親コンポーネントにデータ変更を通知\n            if (onEmployeesUpdate) {\n              console.log('親コンポーネントに年度変更後のデータを通知:', processedEmployees.length, '件');\n              onEmployeesUpdate(processedEmployees);\n            }\n            \n            setSuccessMessage(`${fiscalYear}年のデータを読み込みました（${processedEmployees.length}件）`);\n            setTimeout(() => setSuccessMessage(null), 3000);\n            \n            return true; // データが見つかった場合はtrueを返す\n          }\n        }\n        return false; // データが見つからなかった場合はfalseを返す\n      } catch (e) {\n        console.error('fiscalYear変更時のデータ読み込みエラー:', e);\n        return false;\n      }\n    };\n    \n    // 実際のデータロード処理の実行\n    loadDataForFiscalYear().then(foundInLocalStorage => {\n      if (!foundInLocalStorage) {\n        console.log('ローカルストレージにデータが見つからないため、別の取得方法を試みます');\n        \n        // 2024年以降の場合は前年度からのデータ引き継ぎも試行\n        if (fiscalYear >= 2024) {\n          copyActiveEmployeesFromPreviousYear(fiscalYear).then(copiedCount => {\n            if (copiedCount > 0) {\n              console.log(`前年度から${copiedCount}件のデータを引き継ぎました`);\n              // 再度ローカルストレージから読み込む\n              loadDataForFiscalYear().then(success => {\n                if (!success) {\n                  // それでも読み込めない場合はAPIから取得\n                  fetchEmployeesByYear(fiscalYear);\n                }\n              });\n            } else {\n              // コピーできなかった場合はAPIから取得\n              fetchEmployeesByYear(fiscalYear);\n            }\n          });\n        } else {\n          // 2023年以前のデータはAPIから取得\n          fetchEmployeesByYear(fiscalYear);\n        }\n      }\n    });\n  }, [fiscalYear]); // fiscalYearが変わったときにのみ実行\n\n  // 従業員データ自動引き継ぎ関数\n  const inheritEmployeeData = (employee: Employee, fromYear: number, toYear: number): Employee | null => {\n    console.log(`従業員 ID=${employee.id}, 名前=${employee.name} のデータ引き継ぎ処理を開始`);\n    \n    // 状態チェック - 在籍状態でない場合は引き継がない\n    if (employee.status !== '在籍') {\n      console.log(`従業員 ID=${employee.id} の状態が「在籍」ではないため (${employee.status})、引き継ぎません`);\n      return null;\n    }\n    \n    // 採用日のチェック\n    if (!employee.hire_date) {\n      console.log(`従業員 ID=${employee.id} の採用日が未設定のため、引き継ぎません`);\n      return null;\n    }\n    \n    const hireDateParts = employee.hire_date.split('/');\n    if (hireDateParts.length !== 3) {\n      console.log(`従業員 ID=${employee.id} の採用日 ${employee.hire_date} のフォーマットが不正です`);\n      return null;\n    }\n    \n    const hireYear = parseInt(hireDateParts[0]);\n    const hireMonth = parseInt(hireDateParts[1]);\n    const hireDay = parseInt(hireDateParts[2]);\n    \n    console.log(`採用日: ${hireYear}/${hireMonth}/${hireDay}, 引継元年度: ${fromYear}, 引継先年度: ${toYear}`);\n    \n    // 新しい年度のデータを作成\n    const newEmployee: Employee = {\n      ...employee,\n      fiscal_year: toYear, // 年度を更新\n      inheritedFrom: fromYear, // 引き継ぎ元情報を追加\n      _timestamp: new Date().toISOString() // タイムスタンプ更新\n    };\n    \n    console.log(`${toYear}年度に従業員 ID=${employee.id} のデータを引き継ぎました`);\n    return newEmployee;\n  };\n  \n  // 全従業員データの一括引き継ぎ処理\n  const bulkInheritEmployeeData = (employees: Employee[], fromYear: number, toYear: number) => {\n    console.log(`\\n===== ${fromYear}年度から${toYear}年度への一括引き継ぎ処理 =====`);\n    \n    const inheritedEmployees: Employee[] = [];\n    const skippedEmployees: {id: number, name: string, reason: string}[] = [];\n    \n    employees.forEach(employee => {\n      const inheritedEmployee = inheritEmployeeData(employee, fromYear, toYear);\n      \n      if (inheritedEmployee) {\n        inheritedEmployees.push(inheritedEmployee);\n      } else {\n        skippedEmployees.push({\n          id: employee.id,\n          name: employee.name,\n          reason: \"状態が在籍でないか、採用日が無効\"\n        });\n      }\n    });\n    \n    console.log(`引き継ぎ結果: 成功=${inheritedEmployees.length}件, スキップ=${skippedEmployees.length}件`);\n    return {\n      inheritedEmployees,\n      skippedEmployees\n    };\n  };\n  \n  // 改良版データ引き継ぎ機能\n  const checkAndInheritEmployeeData = (fromYear: number, toYear: number) => {\n    console.log(`改良版従業員データの引き継ぎチェック開始: ${fromYear} → ${toYear}`);\n    \n    // 前年度のデータを取得\n    const fromKey = `EMPLOYEE_DATA_${fromYear}`;\n    const fromData = localStorage.getItem(fromKey);\n    \n    if (!fromData) {\n      console.log(`${fromYear}年度のデータが見つかりません`);\n      return { success: false, message: `${fromYear}年度のデータが見つかりません` };\n    }\n    \n    // 対象年度のデータを確認\n    const toKey = `EMPLOYEE_DATA_${toYear}`;\n    const toData = localStorage.getItem(toKey);\n    \n    // データ形式を判定して処理\n    try {\n      // 前年度データを解析\n      const isFromObject = fromData.trim().startsWith('{');\n      let fromEmployees: any[] = [];\n      \n      if (isFromObject) {\n        // オブジェクト形式の場合\n        const fromEmployeeObj = JSON.parse(fromData);\n        fromEmployees = Object.values(fromEmployeeObj);\n      } else {\n        // 配列形式の場合\n        fromEmployees = JSON.parse(fromData);\n      }\n      \n      console.log(`${fromYear}年度の従業員数: ${fromEmployees.length}`);\n      \n      // 対象年度データを解析\n      let toEmployees: any[] = [];\n      let toEmployeeObj: Record<string, any> = {};\n      \n      if (toData) {\n        const isToObject = toData.trim().startsWith('{');\n        \n        if (isToObject) {\n          toEmployeeObj = JSON.parse(toData);\n          toEmployees = Object.values(toEmployeeObj);\n        } else {\n          toEmployees = JSON.parse(toData);\n          \n          // 配列からオブジェクトに変換\n          toEmployees.forEach(emp => {\n            if (emp && emp.id) {\n              toEmployeeObj[emp.id] = emp;\n            }\n          });\n        }\n        \n        console.log(`${toYear}年度の従業員数: ${toEmployees.length}`);\n      } else {\n        console.log(`${toYear}年度のデータは存在しません。新規作成します。`);\n      }\n      \n      // 前年度の在籍者をフィルタリング\n      const activeEmployees = fromEmployees.filter(emp => {\n        // 状態が「在籍」かを確認（複数の表記に対応）\n        return emp.status === '在籍' || \n               emp.status === '雇用継続' || \n               emp.employmentStatus === '在籍';\n      });\n      \n      console.log(`引き継ぎ対象（在籍者）数: ${activeEmployees.length}`);\n      \n      // 引き継ぎ処理\n      const inheritedEmployees: any[] = [];\n      const skippedEmployees: any[] = [];\n      \n      activeEmployees.forEach(emp => {\n        // IDの重複チェック\n        const employeeId = emp.id;\n        const exists = toEmployeeObj[employeeId] !== undefined;\n        \n        if (exists) {\n          console.log(`従業員ID=${employeeId}, 名前=${emp.name || '名前なし'} は既に${toYear}年度に存在するためスキップします`);\n          skippedEmployees.push({\n            id: employeeId,\n            name: emp.name || '名前なし',\n            reason: '既に存在'\n          });\n          return;\n        }\n        \n        // 引き継ぎデータの作成\n        const inheritedEmployee = {\n          ...emp,\n          fiscal_year: toYear,\n          inheritedFrom: fromYear,\n          _timestamp: new Date().toISOString()\n        };\n        \n        // 月次データをリセット\n        if (inheritedEmployee.monthlyStatus) {\n          inheritedEmployee.monthlyStatus = Array(12).fill('');\n        }\n        \n        inheritedEmployees.push(inheritedEmployee);\n        toEmployeeObj[employeeId] = inheritedEmployee;\n      });\n      \n      // 対象年度のデータを保存\n      if (inheritedEmployees.length > 0) {\n        localStorage.setItem(toKey, JSON.stringify(toEmployeeObj));\n        console.log(`${toYear}年度に${inheritedEmployees.length}件のデータを引き継ぎました`);\n      }\n      \n      return {\n        success: true,\n        inheritedCount: inheritedEmployees.length,\n        skippedCount: skippedEmployees.length,\n        message: `${fromYear}年度から${toYear}年度へ${inheritedEmployees.length}件のデータを引き継ぎました（${skippedEmployees.length}件はスキップされました）`\n      };\n      \n    } catch (error) {\n      console.error(`データ引き継ぎ処理でエラーが発生しました:`, error);\n      return { \n        success: false, \n        message: `データ引き継ぎ処理でエラーが発生しました: ${error instanceof Error ? error.message : String(error)}` \n      };\n    }\n  };\n  \n  // 手動でデータ引き継ぎを実行する関数\n  const manualInheritData = (fromYear: number, toYear: number) => {\n    // バックアップの作成\n    try {\n      const fromKey = `EMPLOYEE_DATA_${fromYear}`;\n      const toKey = `EMPLOYEE_DATA_${toYear}`;\n      \n      localStorage.setItem(`${fromKey}_BACKUP`, localStorage.getItem(fromKey) || '');\n      localStorage.setItem(`${toKey}_BACKUP`, localStorage.getItem(toKey) || '');\n      \n      console.log(`バックアップを作成しました: ${fromKey}_BACKUP, ${toKey}_BACKUP`);\n    } catch (error) {\n      console.error(`バックアップ作成中にエラーが発生しました:`, error);\n    }\n    \n    // データ引き継ぎの実行\n    const result = checkAndInheritEmployeeData(fromYear, toYear);\n    \n    if (result.success) {\n      setSuccessMessage(result.message);\n      // データの再読み込み\n      fetchEmployeesByYear(fiscalYear);\n    } else {\n      setErrorMessage(result.message);\n    }\n    \n    setTimeout(() => {\n      setSuccessMessage(null);\n      setErrorMessage(null);\n    }, 5000);\n    \n    return result;\n  };\n\n  // 従業員データをDBから削除するスクリプト\n  \n  // 1. 削除対象の従業員を確認する関数\n  const checkEmployeeToDelete = async (employeeId: number) => {\n    console.log(\"=== 削除対象の従業員確認 ===\");\n    \n    try {\n      // 現在選択中の年度のデータを確認\n      const storageKey = `EMPLOYEE_DATA_${fiscalYear}`;\n      const allData = localStorage.getItem(storageKey);\n      \n      if (!allData) {\n        console.log(`${fiscalYear}年度のデータが見つかりません`);\n        return null;\n      }\n      \n      // データ形式に応じて処理\n      let employeeData: any = null;\n      const isObject = allData.trim().startsWith('{');\n      \n      if (isObject) {\n        const data = JSON.parse(allData);\n        employeeData = data[employeeId];\n      } else {\n        const data = JSON.parse(allData);\n        employeeData = data.find((emp: any) => emp.id === employeeId);\n      }\n      \n      if (!employeeData) {\n        console.log(`従業員ID=${employeeId}が見つかりません`);\n        return null;\n      }\n      \n      // 詳細ログ出力\n      console.log(\"=== 削除対象の従業員 ===\");\n      console.log({\n        ID: employeeData.id,\n        名前: employeeData.name,\n        社員ID: employeeData.employee_id,\n        障害区分: employeeData.disability_type,\n        状態: employeeData.status,\n        採用日: employeeData.hire_date\n      });\n      \n      return employeeData;\n    } catch (error) {\n      console.error(\"従業員確認エラー:\", error);\n      return null;\n    }\n  };\n  \n  // 2. 従業員データの削除を実行する関数\n  const deleteEmployeeFromDB = async (employeeId: number) => {\n    console.log(`\\n=== 従業員ID ${employeeId} の削除処理を開始 ===`);\n    \n    try {\n      // まずはバックアップを作成\n      const backupResult = await createEmployeeBackup(employeeId);\n      if (!backupResult.success) {\n        return backupResult;\n      }\n      \n      // トランザクション相当の処理 - まず関連データを確認\n      \n      // 関連する月次データを確認\n      const hasRelatedMonthlyData = await checkRelatedMonthlyData(employeeId);\n      console.log(`関連する月次データ: ${hasRelatedMonthlyData ? 'あり' : 'なし'}`);\n      \n      // 削除前にログを出力\n      const employeeToDelete = await checkEmployeeToDelete(employeeId);\n      if (!employeeToDelete) {\n        return {\n          success: false,\n          message: `従業員ID=${employeeId}が見つかりません`\n        };\n      }\n      \n      // DBからデータを削除\n      const deleteResult = await reportApi.deleteEmployeeData(fiscalYear, employeeId);\n      console.log(\"API削除結果:\", deleteResult);\n      \n      if (deleteResult && deleteResult.success) {\n        // LocalStorageからも削除\n        await deleteEmployeeFromLocalStorage(employeeId);\n        \n        // UIの更新（既存の機能を使用）\n        setLocalEmployees(prev => prev.filter(emp => emp.id !== employeeId));\n        setOriginalEmployees(prev => prev.filter(emp => emp.id !== employeeId));\n        \n        return {\n          success: true,\n          message: `従業員ID=${employeeId}を削除しました`,\n          backupPath: backupResult.backupPath\n        };\n      }\n      \n      return {\n        success: false,\n        message: \"削除処理に失敗しました\"\n      };\n      \n    } catch (error) {\n      console.error(\"削除エラー:\", error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : String(error)\n      };\n    }\n  };\n  \n  // 3. LocalStorageから従業員データを削除する関数\n  const deleteEmployeeFromLocalStorage = async (employeeId: number) => {\n    try {\n      const storageKey = `EMPLOYEE_DATA_${fiscalYear}`;\n      const data = localStorage.getItem(storageKey);\n      \n      if (!data) {\n        console.log(`${fiscalYear}年度のデータが見つかりません`);\n        return false;\n      }\n      \n      // データ形式に応じて処理\n      const isObject = data.trim().startsWith('{');\n      \n      if (isObject) {\n        // オブジェクト形式\n        const employeeData = JSON.parse(data);\n        if (employeeData[employeeId]) {\n          // 該当する従業員データを削除\n          delete employeeData[employeeId];\n          localStorage.setItem(storageKey, JSON.stringify(employeeData));\n          console.log(`LocalStorage(オブジェクト形式)から従業員ID=${employeeId}を削除しました`);\n          return true;\n        }\n      } else {\n        // 配列形式\n        const employeeData = JSON.parse(data);\n        const filteredData = employeeData.filter((emp: any) => emp.id !== employeeId);\n        localStorage.setItem(storageKey, JSON.stringify(filteredData));\n        console.log(`LocalStorage(配列形式)から従業員ID=${employeeId}を削除しました`);\n        return true;\n      }\n      \n      return false;\n    } catch (error) {\n      console.error(\"LocalStorage削除エラー:\", error);\n      return false;\n    }\n  };\n  \n  // 4. 関連する月次データをチェックする関数\n  const checkRelatedMonthlyData = async (employeeId: number) => {\n    try {\n      // 仮の実装 - 実際にはMonthlyReportデータを確認する\n      console.log(`従業員ID=${employeeId}の関連月次データをチェック`);\n      \n      const storageKeys = Object.keys(localStorage)\n        .filter(key => key.startsWith('MONTHLY_REPORT_') || key.startsWith('PAYMENT_REPORT_'));\n      \n      for (const key of storageKeys) {\n        const data = localStorage.getItem(key);\n        if (data) {\n          if (data.includes(`\"employee_id\":${employeeId}`) || \n              data.includes(`\"employeeId\":${employeeId}`) || \n              data.includes(`\"id\":${employeeId}`)) {\n            console.log(`関連データが見つかりました: ${key}`);\n            return true;\n          }\n        }\n      }\n      \n      return false;\n    } catch (error) {\n      console.error(\"関連データチェックエラー:\", error);\n      return false;\n    }\n  };\n  \n  // 5. 従業員データのバックアップを作成する関数\n  const createEmployeeBackup = async (employeeId: number) => {\n    try {\n      const employeeData = await checkEmployeeToDelete(employeeId);\n      if (!employeeData) {\n        return {\n          success: false,\n          message: `従業員ID=${employeeId}が見つかりません`\n        };\n      }\n      \n      // バックアップキーの生成\n      const timestamp = new Date().getTime();\n      const backupKey = `EMPLOYEE_BACKUP_${employeeId}_${fiscalYear}_${timestamp}`;\n      \n      // バックアップの保存\n      localStorage.setItem(backupKey, JSON.stringify(employeeData));\n      console.log(`バックアップを作成しました: ${backupKey}`);\n      \n      return {\n        success: true,\n        message: `従業員ID=${employeeId}のバックアップを作成しました`,\n        backupPath: backupKey\n      };\n    } catch (error) {\n      console.error(\"バックアップ作成エラー:\", error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : String(error)\n      };\n    }\n  };\n  \n  // 6. 複数従業員の削除（必要な場合）\n  const deleteMultipleEmployees = async (employeeIds: number[]) => {\n    console.log(`\\n=== ${employeeIds.length}人の従業員削除処理 ===`);\n    \n    // 結果を格納する配列に明示的な型を定義\n    type DeleteResult = {\n      id: number;\n      success: boolean;\n      message?: string;\n      error?: string;\n      backupPath?: string;\n    };\n    \n    const results: DeleteResult[] = [];\n    \n    for (const id of employeeIds) {\n      console.log(`\\n--- 従業員ID=${id}の削除処理 ---`);\n      const result = await deleteEmployeeFromDB(id);\n      results.push({ id, ...result } as DeleteResult);\n    }\n    \n    console.log(\"\\n=== 全削除処理の結果 ===\");\n    console.table(results);\n    \n    return results;\n  };\n  \n  // 7. 安全な削除（バックアップ付き）- すでにdeleteEmployeeFromDBに実装済み\n  \n  // 年度データを一括削除する関数\n  // 選択状態を切り替える関数\n  const toggleSelectAll = () => {\n    const newSelectAll = !selectAll;\n    setSelectAll(newSelectAll);\n    \n    // すべての従業員の選択状態を更新\n    setLocalEmployees(prev => {\n      const updatedEmployees = prev.map(emp => ({\n        ...emp,\n        _selected: newSelectAll\n      }));\n      \n      // 選択数を更新\n      setSelectedCount(newSelectAll ? updatedEmployees.length : 0);\n      \n      return updatedEmployees;\n    });\n  };\n  \n  // 個別の従業員の選択状態を切り替える関数\n  const toggleSelectEmployee = (id: number) => {\n    setLocalEmployees(prev => {\n      const updatedEmployees = prev.map(emp => {\n        if (emp.id === id) {\n          // 選択状態を反転\n          const newSelected = !emp._selected;\n          return {\n            ...emp,\n            _selected: newSelected\n          };\n        }\n        return emp;\n      });\n      \n      // 選択数を再計算\n      const newSelectedCount = updatedEmployees.filter(emp => emp._selected).length;\n      setSelectedCount(newSelectedCount);\n      \n      // 全選択状態を更新\n      setSelectAll(newSelectedCount === updatedEmployees.length && newSelectedCount > 0);\n      \n      return updatedEmployees;\n    });\n  };\n  \n  // 選択した従業員を一括削除する関数\n  const deleteSelectedEmployees = async () => {\n    // 選択された従業員を取得\n    const selectedEmployees = localEmployees.filter(emp => emp._selected);\n    \n    if (selectedEmployees.length === 0) {\n      setErrorMessage('削除する従業員が選択されていません');\n      setTimeout(() => setErrorMessage(null), 3000);\n      return;\n    }\n    \n    // 削除確認\n    if (!window.confirm(`選択した${selectedEmployees.length}人の従業員データを削除します。\\nこの操作は元に戻せません。\\n\\n実行してもよろしいですか？`)) {\n      console.log('一括削除操作がキャンセルされました');\n      return;\n    }\n    \n    // 削除処理\n    console.log(`${selectedEmployees.length}人の従業員の一括削除を開始します`);\n    setIsLoading(true);\n    \n    try {\n      // 削除するIDのリスト\n      const employeeIds = selectedEmployees.map(emp => emp.id);\n      \n      // 一括削除実行\n      const result = await deleteMultipleEmployees(employeeIds);\n      \n      // 結果集計\n      const successCount = result.filter(r => r.success).length;\n      const failCount = result.length - successCount;\n      \n      // 成功メッセージ\n      setSuccessMessage(`${successCount}人の従業員データを削除しました${failCount > 0 ? `（${failCount}件の失敗）` : ''}`);\n      setTimeout(() => setSuccessMessage(null), 5000);\n      \n      // 選択状態をリセット\n      setSelectAll(false);\n      setSelectedCount(0);\n      \n      // データ更新通知\n      if (onRefreshData) {\n        onRefreshData();\n      }\n    } catch (error) {\n      console.error('一括削除エラー:', error);\n      setErrorMessage(`一括削除処理中にエラーが発生しました: ${error instanceof Error ? error.message : String(error)}`);\n      setTimeout(() => setErrorMessage(null), 5000);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  // CSVからのインポート処理\n  // CSVファイルから検出された障害区分を正規化する関数\n  const normalizeDisabilityType = (disabilityType: string): string => {\n    if (!disabilityType) return '';\n    \n    // 小文字変換して空白を削除\n    const normalized = disabilityType.toLowerCase().trim();\n    \n    // 障害区分の正規化マッピング\n    if (normalized.includes('身体') || normalized.includes('physical')) {\n      return '身体障害';\n    } else if (normalized.includes('知的') || normalized.includes('intellectual')) {\n      return '知的障害';\n    } else if (normalized.includes('精神') || normalized.includes('mental')) {\n      return '精神障害';\n    } else if (normalized.includes('発達') || normalized.includes('developmental')) {\n      return '発達障害';\n    }\n    \n    // マッチしない場合は元の値を返す\n    return disabilityType;\n  };\n  \n  // 月次データのデフォルト状態を生成\n  const generateDefaultMonthlyStatus = (hcValue: number | string): number[] => {\n    const hc = typeof hcValue === 'string' ? parseFloat(hcValue) || 1 : hcValue || 1;\n    \n    // 12ヶ月分の配列を生成\n    return Array(12).fill(hc);\n  };\n  \n  // 月次データの処理 - 様々な形式に対応\n  const processMonthlyStatus = (monthlyData: any, defaultHcValue: number | string): number[] => {\n    const hc = typeof defaultHcValue === 'string' ? parseFloat(defaultHcValue) || 1 : defaultHcValue || 1;\n    \n    // データがない場合\n    if (!monthlyData) {\n      return generateDefaultMonthlyStatus(hc);\n    }\n    \n    // すでに配列の場合\n    if (Array.isArray(monthlyData)) {\n      return monthlyData.map(val => {\n        if (typeof val === 'number') return val;\n        if (typeof val === 'string') {\n          const num = parseFloat(val);\n          return isNaN(num) ? hc : num;\n        }\n        return hc;\n      });\n    }\n    \n    // オブジェクト形式の場合 (キーに月名が含まれている場合)\n    if (typeof monthlyData === 'object' && monthlyData !== null) {\n      const months = ['4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月', '1月', '2月', '3月'];\n      return months.map(month => {\n        if (month in monthlyData) {\n          const val = monthlyData[month];\n          if (typeof val === 'number') return val;\n          if (typeof val === 'string') {\n            const num = parseFloat(val);\n            return isNaN(num) ? hc : num;\n          }\n        }\n        return hc;\n      });\n    }\n    \n    // その他の場合は全て同じ値で埋める\n    return generateDefaultMonthlyStatus(hc);\n  };\n  \n  // 指定年度の従業員データをローカルストレージから取得\n  const getStoredEmployeeData = (year: number): Record<string, Employee> => {\n    try {\n      // 年度に紐づいた従業員データのキー\n      const storageKey = `EMPLOYEE_DATA_${year}`;\n      const storedData = localStorage.getItem(storageKey);\n      \n      // 保存データが存在する場合はJSONとしてパース\n      if (storedData) {\n        return JSON.parse(storedData);\n      }\n      \n      // データがない場合は空のオブジェクトを返す\n      return {};\n    } catch (error) {\n      console.error(`${year}年度の従業員データ取得エラー:`, error);\n      return {};\n    }\n  };\n  \n  // 従業員データをローカルストレージに保存\n  const saveEmployeeDataToLocalStorage = (data: Record<string, Employee>, year: number): void => {\n    try {\n      // 年度に紐づいた従業員データのキー\n      const storageKey = `EMPLOYEE_DATA_${year}`;\n      localStorage.setItem(storageKey, JSON.stringify(data));\n      console.log(`${year}年度の従業員データを保存しました (${Object.keys(data).length}件)`);\n    } catch (error) {\n      console.error(`${year}年度の従業員データ保存エラー:`, error);\n      setErrorMessage('データの保存中にエラーが発生しました。ブラウザのストレージ容量を確認してください。');\n      setTimeout(() => setErrorMessage(null), 5000);\n    }\n  };\n  \n  // データのバックアップを作成\n  const createBackup = (year: number): void => {\n    try {\n      // 現在のデータを取得\n      const storageKey = `EMPLOYEE_DATA_${year}`;\n      const currentData = localStorage.getItem(storageKey);\n      \n      if (!currentData) {\n        console.log(`${year}年度のデータが存在しないため、バックアップは作成しません`);\n        return;\n      }\n      \n      // バックアップキーを生成（タイムスタンプ付き）\n      const timestamp = new Date().getTime();\n      const backupKey = `EMPLOYEE_DATA_${year}_BACKUP_${timestamp}`;\n      \n      // バックアップを保存\n      localStorage.setItem(backupKey, currentData);\n      console.log(`${year}年度の従業員データのバックアップを作成しました: ${backupKey}`);\n      \n      // 古いバックアップの削除（最新5件のみ保持）\n      cleanupOldBackups(year);\n    } catch (error) {\n      console.error(`${year}年度のバックアップ作成エラー:`, error);\n    }\n  };\n  \n  // 古いバックアップの削除（最新5件のみ保持）\n  const cleanupOldBackups = (year: number): void => {\n    try {\n      const backupPrefix = `EMPLOYEE_DATA_${year}_BACKUP_`;\n      const backupKeys: string[] = [];\n      \n      // すべてのバックアップキーを収集\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key && key.startsWith(backupPrefix)) {\n          backupKeys.push(key);\n        }\n      }\n      \n      // タイムスタンプの新しい順にソート\n      backupKeys.sort().reverse();\n      \n      // 5件以上ある場合、古いものを削除\n      if (backupKeys.length > 5) {\n        const keysToRemove = backupKeys.slice(5);\n        keysToRemove.forEach(key => {\n          localStorage.removeItem(key);\n          console.log(`古いバックアップを削除しました: ${key}`);\n        });\n      }\n    } catch (error) {\n      console.error('バックアップクリーンアップエラー:', error);\n    }\n  };\n\n  // CSVインポート成功時のハンドラ - 改善版\n  const handleCSVImportSuccess = (importedEmployees: any[]) => {\n    // 年度の取得（CSVから検出された年度を優先）\n    const targetYear = importedEmployees.length > 0 && importedEmployees[0].fiscal_year ? \n      importedEmployees[0].fiscal_year : fiscalYear;\n    \n    console.log(`CSVから${importedEmployees.length}名の従業員データをインポートします (${targetYear}年度)`);\n    \n    try {\n      // インポートするデータのバックアップを作成\n      createBackup(targetYear);\n      \n      // 既存データの取得（対象年度のデータを取得）\n      const existingData = getStoredEmployeeData(targetYear);\n      const merged: Record<string, Employee> = { ...existingData };\n      \n      // データの変換と統合\n      let changedCount = 0;\n      const changes: Record<string, Employee> = {};\n      \n      importedEmployees.forEach(employee => {\n        // employeeIdを確実に文字列として扱う\n        const employeeId = String(employee.employee_id);\n        // 障害区分の正規化\n        const disabilityType = normalizeDisabilityType(employee.disability_type);\n        \n        // 新しい従業員データオブジェクトを作成\n        const newEmployeeData: Employee = {\n          id: merged[employeeId]?.id || Math.max(0, ...Object.values(merged).map(e => e.id || 0)) + 1,\n          no: merged[employeeId]?.no || Object.keys(merged).length + 1,\n          employee_id: employeeId,\n          name: employee.name,\n          disability_type: disabilityType,\n          disability: employee.disability || '',\n          grade: employee.grade || '',\n          hire_date: employee.hire_date || '',\n          status: employee.status || '在籍',\n          wh: employee.employment_type || employee.wh || '正社員',\n          hc: parseFloat(String(employee.hc_value || employee.hc)) || 1,\n          retirement_date: employee.retirement_date || null,\n          monthlyStatus: processMonthlyStatus(employee.monthly_status, employee.hc_value || employee.hc || 1),\n          fiscal_year: targetYear\n        };\n        \n        // 既存データとの差分チェック\n        if (!merged[employeeId] || JSON.stringify(merged[employeeId]) !== JSON.stringify(newEmployeeData)) {\n          merged[employeeId] = newEmployeeData;\n          changes[employeeId] = newEmployeeData;\n          changedCount++;\n        }\n      });\n      \n      console.log(`検出された変更: ${changedCount}件`, changes);\n      \n      // 変更が存在する場合\n      if (changedCount > 0) {\n        // データを保存\n        saveEmployeeDataToLocalStorage(merged, targetYear);\n        \n        // UIに反映するためにローカル状態を更新\n        const updatedEmployees = Object.values(merged);\n        setLocalEmployees(updatedEmployees);\n        \n        // 年度が現在表示中の年度と異なる場合は、年度を切り替える確認\n        if (targetYear !== fiscalYear) {\n          const message = `インポートされた年度(${targetYear})が現在の表示年度(${fiscalYear})と異なります。\\n年度を切り替えますか？`;\n          if (window.confirm(message)) {\n            console.log(`年度を切り替えます: ${fiscalYear} → ${targetYear}`);\n            setFiscalYear(targetYear);\n          }\n        }\n        \n        // 成功メッセージ（変更内容の概要を含める）\n        setSuccessMessage(`CSVから${importedEmployees.length}名の従業員データをインポートしました。(新規/更新: ${changedCount}件)`);\n        setTimeout(() => setSuccessMessage(null), 5000);\n      } else {\n        setSuccessMessage('インポートされたデータに変更はありませんでした。');\n        setTimeout(() => setSuccessMessage(null), 5000);\n      }\n      \n    } catch (error) {\n      console.error('CSVインポート処理エラー:', error);\n      setErrorMessage(`インポート処理中にエラーが発生しました: ${error instanceof Error ? error.message : String(error)}`);\n      setTimeout(() => setErrorMessage(null), 5000);\n    }\n  };\n  \n  const clearCurrentYearData = async () => {\n    console.log(`${fiscalYear}年度のデータ一括削除処理を開始します`);\n    \n    try {\n      // ステップ1: 現在の年度データをバックアップ\n      const storageKey = `EMPLOYEE_DATA_${fiscalYear}`;\n      const currentData = localStorage.getItem(storageKey);\n      \n      if (!currentData) {\n        setErrorMessage(`${fiscalYear}年度のデータが見つかりません`);\n        setTimeout(() => setErrorMessage(null), 3000);\n        return;\n      }\n      \n      // バックアップの作成\n      const timestamp = new Date().getTime();\n      const backupKey = `EMPLOYEE_DATA_${fiscalYear}_BACKUP_${timestamp}`;\n      localStorage.setItem(backupKey, currentData);\n      console.log(`${fiscalYear}年度のデータをバックアップしました: ${backupKey}`);\n      \n      // ステップ2: データの解析\n      let employeeCount = 0;\n      try {\n        // データ形式に応じた処理\n        const isObject = currentData.trim().startsWith('{');\n        if (isObject) {\n          const data = JSON.parse(currentData);\n          employeeCount = Object.keys(data).length;\n        } else {\n          const data = JSON.parse(currentData);\n          employeeCount = data.length;\n        }\n      } catch (e) {\n        console.error('データ解析エラー:', e);\n      }\n      \n      // ステップ3: 年度データの削除\n      localStorage.removeItem(storageKey);\n      console.log(`${fiscalYear}年度のデータを削除しました (${employeeCount}件)`);\n      \n      // ステップ4: UIの更新\n      setLocalEmployees([]);\n      setOriginalEmployees([]);\n      \n      // 成功メッセージの表示\n      setSuccessMessage(`${fiscalYear}年度のデータを削除しました (${employeeCount}件)。\\nバックアップ: ${backupKey}`);\n      setTimeout(() => setSuccessMessage(null), 5000);\n      \n      return {\n        success: true,\n        message: `${fiscalYear}年度のデータを削除しました (${employeeCount}件)`,\n        backupKey\n      };\n    } catch (error) {\n      console.error(`${fiscalYear}年度のデータ削除中にエラーが発生しました:`, error);\n      setErrorMessage(`データ削除中にエラーが発生しました: ${error instanceof Error ? error.message : String(error)}`);\n      setTimeout(() => setErrorMessage(null), 5000);\n      \n      return {\n        success: false,\n        error: error instanceof Error ? error.message : String(error)\n      };\n    }\n  };\n  \n  // 8. フロントエンドでの削除処理デバッグ用\n  const debugDeleteFromUI = () => {\n    // 削除ボタンを探す\n    console.log(\"UIの削除機能をデバッグします...\");\n    \n    // 現在表示されている従業員データを確認\n    console.log(`現在のページには${localEmployees.length}人の従業員データが表示されています`);\n    \n    if (localEmployees.length > 0) {\n      const firstEmployee = localEmployees[0];\n      console.log(`最初の従業員: ID=${firstEmployee.id}, 名前=${firstEmployee.name}`);\n      \n      // 削除ボタンをシミュレート\n      const willDelete = window.confirm(`テスト削除: 従業員「${firstEmployee.name}」(ID=${firstEmployee.id})を削除しますか？`);\n      \n      if (willDelete) {\n        console.log(`従業員ID=${firstEmployee.id}の削除をシミュレートします...`);\n        \n        // 通常の削除ルーチンを使用\n        deleteEmployeeFromDB(firstEmployee.id)\n          .then(result => {\n            console.log(\"削除結果:\", result);\n            if (result.success) {\n              setSuccessMessage(`テスト削除成功: ${result.message}`);\n            } else {\n              setErrorMessage(`テスト削除失敗: ${result.message}`);\n            }\n            setTimeout(() => {\n              setSuccessMessage(null);\n              setErrorMessage(null);\n            }, 3000);\n          });\n      }\n    }\n  };\n  \n  // LocalStorageデータ構造分析関数\n  const analyzeLocalStorageData = () => {\n    console.log(\"=== LocalStorage データ構造分析 ===\");\n    \n    // 全年度のデータキーを取得\n    const keys = Object.keys(localStorage).filter(key => key.startsWith('EMPLOYEE_DATA_'));\n    console.log(`従業員データキー: ${keys.join(', ')}`);\n    \n    // 各年度のデータを分析\n    keys.forEach(key => {\n      try {\n        const yearMatch = key.match(/EMPLOYEE_DATA_(\\d+)/);\n        if (!yearMatch) return;\n        \n        const year = yearMatch[1];\n        const rawData = localStorage.getItem(key);\n        if (!rawData) {\n          console.log(`${year}年度のデータは空です`);\n          return;\n        }\n        \n        // データ形式を判定\n        const isObject = rawData.trim().startsWith('{');\n        \n        // パースしてデータ構造を分析\n        let data;\n        if (isObject) {\n          // オブジェクト形式（従業員IDがキー）\n          data = JSON.parse(rawData);\n          const employeeIds = Object.keys(data);\n          console.log(`${year}年度: オブジェクト形式, ${employeeIds.length}件`);\n          \n          // サンプルデータを表示\n          if (employeeIds.length > 0) {\n            const sampleId = employeeIds[0];\n            const sampleEmployee = data[sampleId];\n            console.log(`サンプル(ID=${sampleId}):`, {\n              id: sampleEmployee.id,\n              name: sampleEmployee.name,\n              status: sampleEmployee.status,\n              keys: Object.keys(sampleEmployee)\n            });\n          }\n        } else {\n          // 配列形式\n          data = JSON.parse(rawData);\n          console.log(`${year}年度: 配列形式, ${data.length}件`);\n          \n          // サンプルデータを表示\n          if (data.length > 0) {\n            const sampleEmployee = data[0];\n            console.log(`サンプル(index=0):`, {\n              id: sampleEmployee.id,\n              name: sampleEmployee.name,\n              status: sampleEmployee.status,\n              keys: Object.keys(sampleEmployee)\n            });\n          }\n        }\n      } catch (error) {\n        console.error(`${key}の分析中にエラー:`, error);\n      }\n    });\n    \n    console.log(\"=== 分析完了 ===\");\n  };\n  \n  // 配列データをオブジェクト形式に変換する関数\n  const convertArrayToObjectFormat = (employees, year) => {\n    const storageKey = `EMPLOYEE_DATA_${year}`;\n    try {\n      // 現在のデータを確認\n      const currentData = localStorage.getItem(storageKey);\n      if (!currentData) {\n        console.log(`${year}年度のデータが存在しません`);\n        return false;\n      }\n      \n      // データ形式を判定\n      const isObject = currentData.trim().startsWith('{');\n      if (isObject) {\n        console.log(`${year}年度のデータは既にオブジェクト形式です`);\n        return true;\n      }\n      \n      // 配列からオブジェクトに変換\n      const dataArray = JSON.parse(currentData);\n      const dataObject = {};\n      \n      dataArray.forEach(emp => {\n        if (emp && emp.id) {\n          dataObject[emp.id] = emp;\n        }\n      });\n      \n      // 変換したデータを保存\n      localStorage.setItem(storageKey, JSON.stringify(dataObject));\n      console.log(`${year}年度のデータを配列からオブジェクト形式に変換しました (${Object.keys(dataObject).length}件)`);\n      return true;\n    } catch (error) {\n      console.error(`${year}年度のデータ変換中にエラー:`, error);\n      return false;\n    }\n  };\n\n  // 従業員データが変更された時、または年度が変更された時にHC計算を実行\n  useEffect(() => {\n    // 従業員データが存在する場合\n    if (localEmployees.length > 0) {\n      console.log(`[監視] 従業員データが変更されました。${localEmployees.length}人に対してHC計算を実行します。`);\n      \n      // 各従業員に対してHC計算を実行\n      setTimeout(() => {\n        localEmployees.forEach(employee => {\n          if (employee.status && employee.hire_date && employee.hc !== undefined) {\n            console.log(`[監視] ID=${employee.id}のHC計算を実行`);\n            updateMonthlyStatusFromHc(employee);\n          }\n        });\n      }, 300);\n    }\n  }, [fiscalYear, month]); // fiscalYearまたはmonthが変更されたときに実行\n\n  // 初回マウント時のみ実行するuseEffect\n  useEffect(() => {\n    // 初回マウント時のみローカルストレージから読み込み（マウント時のみ実行されるようにする）\n    console.log('初回マウント時の従業員データ初期化処理');\n    \n    // 従業員データが読み込まれた後、HC自動計算を実行\n    if (localEmployees.length > 0) {\n      console.log(`[初期化] ${localEmployees.length}人の従業員データが読み込まれました。HC計算を実行します。`);\n      \n      // 各従業員に対してHC計算を実行\n      setTimeout(() => {\n        localEmployees.forEach(employee => {\n          if (employee.status && employee.hire_date && employee.hc !== undefined) {\n            console.log(`[初期化] ID=${employee.id}のHC計算を実行`);\n            updateMonthlyStatusFromHc(employee);\n          }\n        });\n      }, 500);\n    }\n    \n    // ローカルストレージを最初に読み込み\n    const loadEmployeeData = async () => {\n      try {\n        // すでにローカルデータがロードされている場合は何もしない\n        if (localEmployees.length > 0) {\n          console.log('すでにローカルにデータがロードされているため初期化をスキップ', localEmployees.length, '件');\n          return;\n        }\n        \n        // 統一したストレージキーを使用\n        const storageKey = `EMPLOYEE_DATA_${fiscalYear}`;\n        console.log(`ストレージキー: ${storageKey} からデータをロード`);\n        \n        // 全てのキーを確認して古いフォーマットのキーも検索（データ移行処理）\n        const allKeys = Object.keys(localStorage);\n        const legacyKey = `employee_data_${fiscalYear}`;\n        let savedData = localStorage.getItem(storageKey);\n        \n        // 新しいキーで見つからなければ古いキーを確認\n        if (!savedData && allKeys.includes(legacyKey)) {\n          console.log(`古いフォーマットのキー ${legacyKey} からデータを読み込みます`);\n          savedData = localStorage.getItem(legacyKey);\n          \n          // データが見つかれば新しいキーに移行\n          if (savedData) {\n            console.log('古いキーから新しいキーにデータを移行します');\n            localStorage.setItem(storageKey, savedData);\n            // 安全を確保するために今は古いキーは削除しない\n          }\n        }\n        \n        // ローカルストレージにデータがある場合はそれを使用\n        if (savedData) {\n          try {\n            const savedEmployees = JSON.parse(savedData);\n            if (Object.keys(savedEmployees).length > 0) {\n              console.log(`ローカルストレージにデータ(${Object.keys(savedEmployees).length}件)を読み込みました`);\n              const savedEmployeesArray = Object.values(savedEmployees);\n              \n              const processedEmployees = savedEmployeesArray.map((emp: any) => ({\n                ...emp,\n                employee_id: typeof emp.employee_id === 'number' ? String(emp.employee_id) : emp.employee_id,\n                disability_type: emp.disability_type || '',\n                disability: emp.disability || '',\n                grade: emp.grade || '',\n                status: emp.status || '在籍',\n                hc: emp.hc !== undefined ? emp.hc : 1,\n                monthlyStatus: Array.isArray(emp.monthlyStatus) ? emp.monthlyStatus : Array(12).fill('')\n              }));\n              \n              const originalEmployeesCopy = JSON.parse(JSON.stringify(processedEmployees));\n              \n              setLocalEmployees(processedEmployees);\n              setOriginalEmployees(originalEmployeesCopy);\n              \n              // 親コンポーネントに初期データを通知\n              if (onEmployeesUpdate) {\n                console.log('親コンポーネントに初期データを通知');\n                onEmployeesUpdate(processedEmployees);\n              }\n              \n              return true; // データがロードされたことを示す\n            }\n          } catch (error) {\n            console.error('ローカルストレージデータの解析エラー:', error);\n          }\n        }\n        \n        // ローカルストレージになければプロパティから初期化\n        if (employees && employees.length > 0) {\n          console.log('propsからデータを初期化:', employees.length, '件');\n          \n          const processedEmployees = employees.map(emp => ({\n            ...emp,\n            employee_id: typeof emp.employee_id === 'number' ? String(emp.employee_id) : emp.employee_id,\n            disability_type: emp.disability_type || '',\n            disability: emp.disability || '',\n            grade: emp.grade || '',\n            status: emp.status || '在籍',\n            hc: emp.hc !== undefined ? emp.hc : 1,\n            monthlyStatus: Array.isArray(emp.monthlyStatus) ? emp.monthlyStatus : Array(12).fill('')\n          }));\n          \n          const originalEmployeesCopy = JSON.parse(JSON.stringify(processedEmployees));\n          \n          setLocalEmployees(processedEmployees);\n          setOriginalEmployees(originalEmployeesCopy);\n          return true; // データがロードされたことを示す\n        }\n        \n        return false; // データがロードされなかった\n      } catch (error) {\n        console.error('従業員データの初期化エラー:', error);\n        return false;\n      }\n    };\n    \n    // データ読み込み実行\n    loadEmployeeData();\n    \n    // クリーンアップ関数\n    return () => {\n      console.log('EmployeesTabコンポーネントがアンマウントされます');\n    };\n  // 依存配列を空に保ち、初回マウント時のみ実行。fiscalYearは不要（別のuseEffectが担当）\n  }, []);\n\n  // localEmployees変更時に自動計算を実行\n  useEffect(() => {\n    // データがロードされた場合に自動計算を実行\n    if (localEmployees.length > 0) {\n      console.log(`[HC] localEmployees変更を検知 (${localEmployees.length}件) - 自動計算を実行します`);\n      \n      // 各従業員に対してHC自動計算を実行\n      localEmployees.forEach(employee => {\n        if (employee.hc !== undefined && employee.hire_date && employee.status) {\n          console.log(`[HC] 従業員ID=${employee.id}のHC自動計算を実行`);\n          // 少し遅延させて実行\n          setTimeout(() => {\n            updateMonthlyStatusFromHc(employee);\n          }, 100);\n        }\n      });\n    }\n  }, [localEmployees.length]); // localEmployees.lengthが変わった時に実行\n\n  // 編集モード切り替えハンドラー\n  const handleToggleEditMode = () => {\n    console.log('編集モード切替ボタンクリック:', !actualIsEditing);\n    \n    setInternalIsEditing(!internalIsEditing);\n    \n    if (onToggleEditMode) {\n      onToggleEditMode();\n    }\n    \n    if (actualIsEditing) {\n      setErrorMessage(null);\n      setIsAddingNewRow(false);\n      setInputValues({});\n    }\n  };\n\n  // 編集キャンセルハンドラー\n  const handleCancelEdit = () => {\n    console.log('編集をキャンセルします');\n    \n    setLocalEmployees([...JSON.parse(JSON.stringify(originalEmployees))]);\n    \n    setInternalIsEditing(false);\n    if (onToggleEditMode) {\n      onToggleEditMode();\n    }\n    \n    setErrorMessage(null);\n    setIsAddingNewRow(false);\n    setInputValues({});\n    \n    setSuccessMessage('編集をキャンセルしました');\n    setTimeout(() => setSuccessMessage(null), 3000);\n  };\n\n  // HC値の変更ハンドラー\n  const handleHcChange = (id: number, value: string) => {\n    console.log(`[HC] handleHcChange呼び出し: ID=${id}, 値=${value}`);\n    console.log(`HC値変更: ID=${id}, 値=${value}`);\n    \n    // 従業員データの確認\n    const currentEmployee = localEmployees.find(emp => emp.id === id);\n    console.log('[DEBUG] handleHcChange対象従業員:', {\n      従業員ID: id,\n      従業員データあり: !!currentEmployee,\n      従業員名: currentEmployee?.name,\n      状態: currentEmployee?.status,\n      採用日: currentEmployee?.hire_date,\n      雇用形態: currentEmployee?.wh,\n      HC値: currentEmployee?.hc,\n      新しい値: value,\n      退職日: currentEmployee?.retirement_date\n    });\n    \n    // 数値入力チェック\n    if (value === '') {\n      // 空の場合は許可\n      setInputValues(prev => ({\n        ...prev,\n        [`${id}-hc`]: value\n      }));\n      \n      // 空の場合はHC値をクリア\n      setLocalEmployees(prev => {\n        // 現在の従業員を取得して確実に処理する\n        const currentEmployee = prev.find(emp => emp.id === id);\n        if (!currentEmployee) {\n          console.error(`ID=${id}の従業員が見つかりません`);\n          return prev;\n        }\n        \n        const updated = prev.map(emp => {\n          if (emp.id === id) {\n            const updatedEmp = { ...emp, hc: undefined };\n            return updatedEmp;\n          }\n          return emp;\n        });\n        \n        // 月次ステータス値をクリア（HC値がなくなるため）\n        setTimeout(() => {\n          const employeeToUpdate = updated.find(emp => emp.id === id);\n          if (employeeToUpdate) {\n            console.log(`HC値クリア時の月次ステータス更新 - ID=${id}`);\n            \n            // HC値がundefinedなので、月次ステータスは全て空になる\n            setLocalEmployees(current => {\n              return current.map(emp => {\n                if (emp.id === id) {\n                  return { \n                    ...emp, \n                    monthlyStatus: Array(12).fill('') \n                  };\n                }\n                return emp;\n              });\n            });\n          }\n        }, 50);\n        \n        // 親コンポーネントへの通知はバッチ処理のために遅延させる（非同期処理）\n        setTimeout(() => {\n          if (onEmployeesUpdate) {\n            console.log('HC値変更 (空): 親コンポーネントに通知', updated.length, '件');\n            onEmployeesUpdate(updated);\n          }\n        }, 100);\n        \n        return updated;\n      });\n      setErrorMessage(null);\n      return;\n    }\n    \n    // セレクトボックスからの値を数値に変換\n    const numValue = parseFloat(value);\n    // ドロップダウンメニューからの選択値なので入力チェックは不要（常に有効な値）\n    \n    // 入力値の状態を更新\n    setInputValues(prev => ({\n      ...prev,\n      [`${id}-hc`]: value\n    }));\n    \n    // ローカル従業員データの状態を更新\n    setLocalEmployees(prev => {\n      // 現在の従業員を取得して確実に処理する\n      const currentEmployee = prev.find(emp => emp.id === id);\n      if (!currentEmployee) {\n        console.error(`ID=${id}の従業員が見つかりません`);\n        return prev;\n      }\n      \n      const updated = prev.map(emp => {\n        if (emp.id === id) {\n          const updatedEmp = { ...emp, hc: numValue };\n          console.log(`HC値を更新: `, updatedEmp);\n          return updatedEmp;\n        }\n        return emp;\n      });\n      \n      // 非同期で月次ステータス値を自動計算\n      setTimeout(() => {\n        const employeeToUpdate = updated.find(emp => emp.id === id);\n        if (employeeToUpdate) {\n          console.log(`[HC] HC値変更後の自動計算を実行します - ID=${id}, 値=${numValue}`);\n          console.log(`HC自動計算実行開始（HC値変更時） - ID=${id}, 値=${numValue}`);\n          // 必ず計算ロジックを呼び出す\n          updateMonthlyStatusFromHc(employeeToUpdate);\n          console.log(`HC自動計算実行完了（HC値変更時） - ID=${id}`);\n        }\n      }, 50);\n      \n      // 親コンポーネントへの通知はバッチ処理のために遅延させる（非同期処理）\n      setTimeout(() => {\n        if (onEmployeesUpdate) {\n          console.log('HC値変更: 親コンポーネントに通知', updated.length, '件');\n          onEmployeesUpdate(updated);\n        }\n      }, 150); // 月次ステータス更新後に通知するために少し長めの遅延\n      \n      return updated;\n    });\n    setErrorMessage(null);\n  };\n  \n  // 採用日と状態に基づいて月次ステータスを更新する関数\n  const updateMonthlyStatusFromHc = (employee: Employee) => {\n    console.log('[HC] 計算処理開始');\n    console.log(`===== HC自動計算関数開始 - ID=${employee.id} =====`);\n    \n    // 必要なデータがない場合は何もしない\n    if (!employee.hire_date || !employee.status || employee.hc === undefined) {\n      console.log('【エラー】自動計算に必要なデータがありません:', { hire_date: employee.hire_date, status: employee.status, hc: employee.hc });\n      return;\n    }\n    \n    console.log(`【HC自動計算】入力データ:`, {\n      従業員ID: employee.id,\n      従業員名: employee.name,\n      採用日: employee.hire_date,\n      状態: employee.status,\n      雇用形態: employee.wh || '正社員',\n      HC値: employee.hc,\n      退職日: employee.retirement_date || '未設定'\n    });\n    \n    try {\n      // 採用日をDateオブジェクトに変換\n      const hireDateParts = employee.hire_date.split('/');\n      if (hireDateParts.length !== 3) {\n        console.error('【エラー】採用日のフォーマットが不正です:', employee.hire_date);\n        return;\n      }\n      \n      const hireYear = parseInt(hireDateParts[0]);\n      const hireMonth = parseInt(hireDateParts[1]);\n      const hireDay = parseInt(hireDateParts[2]);\n      \n      if (isNaN(hireYear) || isNaN(hireMonth) || isNaN(hireDay)) {\n        console.error('【エラー】採用日のパースに失敗しました:', { hireYear, hireMonth, hireDay });\n        return;\n      }\n      \n      // 現在の月次ステータスを取得または初期化\n      const newMonthlyStatus = [...(employee.monthlyStatus || Array(12).fill(''))];\n      \n      // 表示年度と表示月を取得\n      const displayYear = fiscalYear;\n      const displayMonth = month;\n      \n      // 2025年5月を固定値として使用（要件に合わせて）\n      const systemCurrentYear = 2025;\n      const systemCurrentMonth = 5;\n      \n      // 退職日の取得（退職状態の場合）\n      type RetirementMonthType = { year: number; month: number } | null;\n      let retirementMonth: RetirementMonthType = null;\n      if (employee.status === '退職' && employee.retirement_date) {\n        // 退職日がある場合はパース\n        const retirementParts = employee.retirement_date.split('/');\n        if (retirementParts.length === 3) {\n          const retireYear = parseInt(retirementParts[0]);\n          const retireMonth = parseInt(retirementParts[1]);\n          retirementMonth = { year: retireYear, month: retireMonth };\n          console.log(`【退職処理】退職日が設定されています: ${retireYear}年${retireMonth}月`);\n        }\n      } \n      \n      // 年度表示関係の判定\n      const yearRelation = displayYear < systemCurrentYear ? \"過去\" : \n                           displayYear === systemCurrentYear ? \"現在\" : \"未来\";\n      \n      console.log(`【HC自動計算】基本情報: 採用日=${hireYear}/${hireMonth}/${hireDay}, ` + \n                  `表示年度(${yearRelation}年度)=${displayYear}/${displayMonth}, ` + \n                  `現在日付(固定)=${systemCurrentYear}/${systemCurrentMonth}, ` + \n                  `退職日=${retirementMonth ? `${retirementMonth.year}/${retirementMonth.month}` : '未設定'}`);\n      \n      // 各月について処理\n      monthNumbers.forEach((monthNum, index) => {\n        // 会計年度を考慮して年を調整（1-3月は次の年）\n        const calendarYear = monthNum >= 4 ? displayYear : displayYear + 1;\n        \n        // 採用月以降かどうか\n        const isAfterHireDate = isDateAfterHireDate(calendarYear, monthNum, hireYear, hireMonth);\n        \n        // 表示年度を考慮した現在月以前かどうか\n        const isBeforeCurrentRealMonth = isBeforeOrEqualCurrentMonth(calendarYear, monthNum, systemCurrentYear, systemCurrentMonth);\n        \n        // 退職月以前かどうか（退職状態の場合のみ関連）\n        let isBeforeRetirementMonth = true;\n        if (employee.status === '退職' && retirementMonth) {\n          isBeforeRetirementMonth = (calendarYear < retirementMonth.year) || \n                                   (calendarYear === retirementMonth.year && monthNum <= retirementMonth.month);\n          console.log(`【退職月判定】${monthNumbers[index]}月: 退職月(${retirementMonth.year}/${retirementMonth.month})以前=${isBeforeRetirementMonth}`);\n        }\n        \n        // 詳細なログ出力（デバッグ用）\n        console.log(`【月次処理】[${index+1}]=${monthNumbers[index]}月: 暦年=${calendarYear}, ` +\n                    `採用日以降=${isAfterHireDate}, 表示対象=${isBeforeCurrentRealMonth}`);\n        \n        // 状態に応じた処理\n        if (employee.status === '在籍') {\n          // 在籍の場合、採用日以降かつ表示対象かどうかで判定\n          if (isAfterHireDate && isBeforeCurrentRealMonth) {\n            newMonthlyStatus[index] = employee.hc!;\n            console.log(`  → 在籍: ${monthNumbers[index]}月にHC値${employee.hc}を設定`);\n          } else if (!isAfterHireDate) {\n            newMonthlyStatus[index] = '';\n            console.log(`  → 在籍: ${monthNumbers[index]}月は採用日前のため空白`);\n          } else {\n            newMonthlyStatus[index] = '';\n            console.log(`  → 在籍: ${monthNumbers[index]}月は未来月のため空白`);\n          }\n        } else if (employee.status === '退職') {\n          // 退職の場合、採用日以降かつ退職月以前かつ現在月以前はHC値を設定\n          if (isAfterHireDate && isBeforeCurrentRealMonth) {\n            if (retirementMonth && !isBeforeRetirementMonth) {\n              // 退職月が設定されており、それより後の月は空白に\n              newMonthlyStatus[index] = '';\n              console.log(`  → 退職: ${monthNumbers[index]}月は退職月(${retirementMonth.year}/${retirementMonth.month})より後のため空白`);\n            } else {\n              // 退職月以前（または退職月未設定）なら表示\n              newMonthlyStatus[index] = employee.hc!;\n              console.log(`  → 退職: ${monthNumbers[index]}月にHC値${employee.hc}を設定 (${calendarYear}年${monthNum}月)`);\n            }\n          } else if (!isAfterHireDate) {\n            newMonthlyStatus[index] = '';\n            console.log(`  → 退職: ${monthNumbers[index]}月は採用日前のため空白`);\n          } else {\n            newMonthlyStatus[index] = '';\n            console.log(`  → 退職: ${monthNumbers[index]}月は未来月のため空白`);\n          }\n        } else {\n          // その他の状態は変更なし\n          console.log(`  → その他の状態: ${employee.status} - 変更なし`);\n        }\n      });\n      \n      // 月次ステータスを更新\n      setLocalEmployees(prev => {\n        return prev.map(emp => {\n          if (emp.id === employee.id) {\n            return { ...emp, monthlyStatus: newMonthlyStatus };\n          }\n          return emp;\n        });\n      });\n      \n      console.log(`ID=${employee.id}の月次ステータスを自動計算しました:`, newMonthlyStatus);\n      console.log(`===== HC自動計算関数終了 - ID=${employee.id} =====`);\n    } catch (error) {\n      console.error('月次ステータスの自動計算でエラーが発生しました:', error);\n      console.log(`===== HC自動計算関数エラー終了 - ID=${employee.id} =====`);\n    }\n  };\n  \n  // 指定した年月が採用日以降かどうかをチェックする関数\n  const isDateAfterHireDate = (year: number, month: number, hireYear: number, hireMonth: number): boolean => {\n    // 年が採用年より後の場合は true\n    if (year > hireYear) return true;\n    // 年が採用年と同じで、月が採用月以降の場合は true\n    if (year === hireYear && month >= hireMonth) return true;\n    // それ以外は false\n    return false;\n  };\n  \n  // 指定した年月が現在表示中の年月以前かどうかをチェックする関数\n  const isBeforeCurrentDisplayMonth = (year: number, month: number, displayYear: number, displayMonth: number): boolean => {\n    // 年が表示年より前の場合は true\n    if (year < displayYear) return true;\n    // 年が表示年と同じで、月が表示月以前の場合は true\n    if (year === displayYear && month <= displayMonth) return true;\n    // それ以外は false\n    return false;\n  };\n  \n  // 指定した年月が表示中の年度を考慮して有効かどうかをチェックする関数\n  const isBeforeOrEqualCurrentMonth = (year: number, month: number, currentYear: number, currentMonth: number): boolean => {\n    console.log(`【日付比較】検証: 暦年${year}月${month} vs 現在${currentYear}月${currentMonth}`);\n    \n    // 表示中の年度（UIで選択された年度）\n    const displayFiscalYear = fiscalYear;\n    \n    // 2025年5月を固定値として扱う（要件に合わせて）\n    // システム上の「現在」は常に2025年5月として扱う\n    const systemCurrentYear = 2025;\n    const systemCurrentMonth = 5;\n    \n    console.log(`【日付比較】現在日付(固定値): ${systemCurrentYear}年${systemCurrentMonth}月 (※要件に合わせて2025/5を使用)`);\n    console.log(`【日付比較】表示中の年度: ${displayFiscalYear}年度`);\n    \n    // 表示年度が過去の年度の場合（表示年度 < 現在システム年度）\n    // 2024年度やそれ以前の過去年度データは全て表示（HC計算）するため常にtrueを返す\n    if (displayFiscalYear < systemCurrentYear) {\n      console.log(`【判定】過去年度(${displayFiscalYear}年)の表示: ${year}/${month}月 → すべて表示する`);\n      return true;\n    }\n    \n    // 表示年度が現在年度の場合（表示年度 = 現在システム年度 = 2025年度）\n    // 現在年度なら5月までの月を表示対象とする\n    if (displayFiscalYear === systemCurrentYear) {\n      // 4-12月は2025年、1-3月は2026年の暦月として処理\n      const result = (year < systemCurrentYear) || \n                     (year === systemCurrentYear && month <= systemCurrentMonth);\n      \n      console.log(`【判定】現在年度(${displayFiscalYear}年)の表示: ${year}/${month}月 vs 現在${systemCurrentYear}/${systemCurrentMonth}月 → ${result ? '表示する' : '表示しない'}`);\n      return result;\n    }\n    \n    // 表示年度が未来年度の場合（表示年度 > 現在システム年度）\n    // 現在（システム）日付までのみ表示（※通常は発生しない条件だが念のため）\n    if (displayFiscalYear > systemCurrentYear) {\n      // 未来年度の場合は特別処理：現在月までのみ表示\n      const result = (year < systemCurrentYear) || \n                     (year === systemCurrentYear && month <= systemCurrentMonth);\n      \n      console.log(`【判定】未来年度(${displayFiscalYear}年)の表示: ${year}/${month}月 vs 現在${systemCurrentYear}/${systemCurrentMonth}月 → ${result ? '表示する' : '表示しない'}`);\n      return result;\n    }\n    \n    // それ以外は表示しない（通常はここには来ない）\n    console.log(`【判定】不明な条件のため表示しない: ${year}/${month}月`);\n    return false;\n  };\n\n  // フィールド更新ハンドラー\n  const handleFieldChange = (id: number, field: string, value: string | number) => {\n    console.log(`【フィールド変更】ID=${id}, フィールド=${field}, 値=${value}, 型=${typeof value}`);\n    \n    // 入力値の状態を更新\n    setInputValues(prev => ({\n      ...prev,\n      [`${id}-${field}`]: value\n    }));\n    \n    // ローカル従業員データの状態を更新\n    setLocalEmployees(prev => {\n      // 変更前のデータを取得（退職処理のためのログとチェック）\n      const prevEmployee = prev.find(emp => emp.id === id);\n      if (prevEmployee) {\n        console.log(`【変更前】従業員データ:`, {\n          ID: prevEmployee.id,\n          名前: prevEmployee.name,\n          状態: prevEmployee.status,\n          採用日: prevEmployee.hire_date,\n          退職日: prevEmployee.retirement_date,\n          HC: prevEmployee.hc\n        });\n      }\n      \n      return prev.map(emp => {\n        if (emp.id === id) {\n          // 値の適切な型変換を行う\n          let convertedValue = value;\n          if (field === 'status' && typeof value !== 'string') {\n            convertedValue = String(value);\n          }\n          \n          // 状態が退職に変更された場合、将来年度のデータをクリーンアップする\n          if (field === 'status' && value === '退職' && emp.status !== '退職') {\n            console.log(`従業員ID=${id}の状態が退職に変更されました。将来年度のデータをクリーンアップします。`);\n            \n            // 現在の年度を取得\n            const currentFiscalYear = fiscalYear;\n            \n            // 未来の年度に対して処理を行う（現在の年度+1から2030年まで）\n            for (let year = currentFiscalYear + 1; year <= 2030; year++) {\n              const futureYearStorageKey = `EMPLOYEE_DATA_${year}`;\n              try {\n                // 該当年度のデータを取得\n                const futureYearData = localStorage.getItem(futureYearStorageKey);\n                if (futureYearData) {\n                  const parsedData = JSON.parse(futureYearData);\n                  \n                  // 退職従業員のデータがあるか確認\n                  if (parsedData[id]) {\n                    // 退職従業員のデータを削除\n                    delete parsedData[id];\n                    \n                    // 更新したデータを保存\n                    localStorage.setItem(futureYearStorageKey, JSON.stringify(parsedData));\n                    console.log(`従業員ID=${id}の${year}年度のデータを削除しました`);\n                  }\n                }\n              } catch (error) {\n                console.error(`${year}年度のデータクリーンアップでエラーが発生しました:`, error);\n              }\n            }\n          }\n          \n          // フィールド更新と退職処理を一度に行う\n          let updatedFields: Record<string, any> = { [field]: convertedValue };\n          \n          // 重要: 「退職」状態への変更を特別に処理\n          if (field === 'status' && convertedValue === '退職') {\n            console.log(`【退職処理】従業員が退職状態に変更されました - ID=${id}`);\n            \n            // 退職日が未設定の場合は、現在の表示月を退職月として設定\n            if (!emp.retirement_date) {\n              // 現在の年月を退職日として設定（2025年5月を使用）\n              const retirementYear = 2025; \n              const retirementMonth = 5;\n              const retirementDay = 1; // 月初日を使用\n              \n              const retirementDate = `${retirementYear}/${retirementMonth}/${retirementDay}`;\n              // フィールド更新に退職日も追加\n              updatedFields.retirement_date = retirementDate;\n              \n              console.log(`【退職処理】退職日を自動設定しました: ${retirementDate}`);\n            }\n          }\n          \n          // すべての更新フィールドを適用\n          const updatedEmp = { ...emp, ...updatedFields };\n          \n          console.log(`【更新後】フィールド \"${field}\" を更新:`, {\n            ID: updatedEmp.id,\n            名前: updatedEmp.name,\n            状態: updatedEmp.status,\n            採用日: updatedEmp.hire_date,\n            退職日: updatedEmp.retirement_date,\n            HC: updatedEmp.hc\n          });\n          \n          // 採用日または状態が変更された場合は、HC値に基づいて月次ステータスを再計算\n          if (field === 'status' || field === 'hire_date') {\n            console.log(`[HC] ${field}が変更されたため自動計算を実行します`);\n            console.log(`【重要フィールド変更】\"${field}\" が変更されたため、HC自動計算を実行します`);\n            \n            // 少し遅延して実行（状態が先に更新されるのを待つ）\n            setTimeout(() => {\n              console.log(`【HC自動計算】実行開始 - ID=${id}, フィールド=${field}, 値=${value}`);\n              updateMonthlyStatusFromHc(updatedEmp);\n              console.log(`【HC自動計算】実行完了 - ID=${id}`);\n            }, 50); // 確実に更新後に実行されるよう少し長めの遅延を設定\n          }\n          \n          return updatedEmp;\n        }\n        return emp;\n      });\n    });\n  };\n\n  // 新規行データの更新ハンドラー\n  const handleNewRowFieldChange = (field: string, value: string | number) => {\n    console.log(`【新規行】フィールド変更: フィールド=${field}, 値=${value}, 型=${typeof value}`);\n    \n    setInputValues(prev => ({\n      ...prev,\n      [`new-${field}`]: value\n    }));\n    \n    // 重要: 「退職」状態への変更を特別に処理\n    if (field === 'status' && value === '退職') {\n      console.log(`【新規行】退職状態に変更されました`);\n      \n      // 退職日が未設定の場合は、現在の表示月を退職月として設定\n      const hasRetirementDate = newRowData && typeof newRowData === 'object' && 'retirement_date' in newRowData && Boolean(newRowData.retirement_date);\n      if (!hasRetirementDate) {\n        // 現在の年月を退職日として設定（2025年5月を使用）\n        const retirementYear = 2025; \n        const retirementMonth = 5;\n        const retirementDay = 1; // 月初日を使用\n        \n        const retirementDate = `${retirementYear}/${retirementMonth}/${retirementDay}`;\n        \n        setNewRowData(prev => ({\n          ...prev,\n          [field]: value,\n          retirement_date: retirementDate\n        }));\n        \n        console.log(`【新規行】退職日を自動設定しました: ${retirementDate}`);\n        \n        // 採用日または状態が変更された場合は、HC値に基づいて月次ステータスを再計算\n        if (newRowData.hc !== undefined) {\n          console.log(`[HC] 新規行退職時: 自動計算を実行します`);\n          console.log(`【新規行】重要フィールド \"${field}\" が変更されたため、HC自動計算を実行します`);\n          \n          setTimeout(() => {\n            // 非同期で月次ステータスを更新（状態変更が適用されるのを待つ）\n            const updatedNewRowData = { \n              ...newRowData,\n              [field]: value,\n              retirement_date: retirementDate\n            };\n            \n            console.log(`【新規行】HC自動計算実行開始: `, updatedNewRowData);\n            // 型を明示的に指定してキャスト\n            updateMonthlyStatusForNewRow(updatedNewRowData as NewRowData);\n            console.log(`【新規行】HC自動計算実行完了`);\n          }, 100);\n        }\n        \n        return; // 早期リターン\n      }\n    }\n    \n    // 通常のフィールド更新\n    setNewRowData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n    \n    // 採用日または状態が変更された場合は、HC値に基づいて月次ステータスを再計算\n    if ((field === 'status' || field === 'hire_date') && newRowData.hc !== undefined) {\n      console.log(`[HC] 新規行: ${field}が変更されたため自動計算を実行します`);\n      console.log(`【新規行】重要フィールド \"${field}\" が変更されたため、HC自動計算を実行します`);\n      \n      setTimeout(() => {\n        // 非同期で月次ステータスを更新（状態変更が適用されるのを待つ）\n        const updatedNewRowData = { \n          ...newRowData, \n          [field]: field === 'status' ? String(value) : value // 状態は明示的に文字列に変換\n        };\n        \n        console.log(`新規行 HC自動計算実行開始 - フィールド=${field}, 値=${value}`);\n        updateMonthlyStatusForNewRow(updatedNewRowData as NewRowData);\n        console.log(`新規行 HC自動計算実行完了`);\n      }, 50); // 確実に更新後に実行されるよう少し長めの遅延を設定\n    }\n  };\n  \n  // 新規行のHC値変更ハンドラー\n  const handleNewRowHcChange = (value: string) => {\n    console.log(`[HC] handleNewRowHcChange呼び出し: 値=${value}`);\n    console.log(`新規行のHC値変更: 値=${value}`);\n    \n    // 新規行データの確認\n    console.log('[DEBUG] handleNewRowHcChange対象データ:', {\n      新規行データあり: !!newRowData,\n      現在のHC値: newRowData?.hc,\n      新しい値: value,\n      状態: newRowData?.status,\n      採用日: newRowData?.hire_date\n    });\n    \n    // 数値入力チェック\n    if (value === '') {\n      // 空の場合は許可\n      setInputValues(prev => ({\n        ...prev,\n        [`new-hc`]: value\n      }));\n      \n      // 空の場合はHC値をクリア\n      setNewRowData(prev => {\n        const updated = {\n          ...prev,\n          hc: undefined\n        };\n        \n        // HC値がクリアされた場合は月次ステータスも全てクリア\n        setTimeout(() => {\n          console.log(`新規行: HC値クリア時の月次ステータス更新`);\n          setNewRowData(current => ({\n            ...current,\n            monthlyStatus: Array(12).fill('')\n          }));\n        }, 50);\n        \n        return updated;\n      });\n      setErrorMessage(null);\n      return;\n    }\n    \n    // セレクトボックスからの値を数値に変換\n    const numValue = parseFloat(value);\n    // ドロップダウンメニューからの選択値なので入力チェックは不要（常に有効な値）\n    \n    // 入力値の状態を更新\n    setInputValues(prev => ({\n      ...prev,\n      [`new-hc`]: value\n    }));\n    \n    // 新規行データの状態を更新\n    const updatedNewRowData = {\n      ...newRowData,\n      hc: numValue,\n      // 明示的に型を確保\n      status: String(newRowData.status || ''),\n      employee_id: newRowData.employee_id || '',\n      name: newRowData.name || '',\n      disability_type: newRowData.disability_type || '',\n      disability: newRowData.disability || '',\n      grade: newRowData.grade || '',\n      hire_date: newRowData.hire_date || '',\n    };\n    setNewRowData(updatedNewRowData);\n    \n    // 月次ステータス値を自動計算（採用日と状態がある場合のみ）\n    if (updatedNewRowData.status && updatedNewRowData.hire_date) {\n      console.log(`[HC] 新規行HC値変更後の自動計算を実行します - 値=${numValue}`);\n      console.log(`新規行 HC自動計算実行開始（HC値変更時） - 値=${numValue}`);\n      // 必ず計算ロジックを呼び出す\n      updateMonthlyStatusForNewRow(updatedNewRowData as NewRowData);\n      console.log(`新規行 HC自動計算実行完了（HC値変更時）`);\n    } else {\n      console.log(`新規行: HC値を${numValue}に設定しましたが、採用日または状態が設定されていないため自動計算を実行しません`, {\n        status: updatedNewRowData.status,\n        hire_date: updatedNewRowData.hire_date\n      });\n    }\n    \n    setErrorMessage(null);\n  };\n  \n  // 新規行の採用日と状態に基づいて月次ステータスを更新する関数\n  interface NewRowData {\n    no?: number;\n    employee_id: string | number;\n    name: string;\n    disability_type: string;\n    disability: string;\n    grade: string;\n    hire_date: string;\n    status: string;\n    hc?: number;\n    monthlyStatus?: any[];\n    memo?: string;\n    count?: number;\n    retirement_date?: string;\n  }\n  \n  const updateMonthlyStatusForNewRow = (rowData: NewRowData) => {\n    console.log('[HC] 新規行計算処理開始');\n    console.log(`===== 【新規行】HC自動計算関数開始 =====`);\n    \n    // 必要なデータがない場合は何もしない\n    if (!rowData.hire_date || !rowData.status || rowData.hc === undefined) {\n      console.log('【新規行】自動計算に必要なデータがありません:', { hire_date: rowData.hire_date, status: rowData.status, hc: rowData.hc });\n      return;\n    }\n    \n    // 退職状態の場合に退職日の確認\n    if (rowData.status === '退職' && !rowData.retirement_date) {\n      console.log('【新規行】退職状態だが退職日が未設定のため、現在月を退職日として自動設定します');\n      \n      // 現在の年月を退職日として設定（2025年5月を使用）\n      const retirementYear = 2025; \n      const retirementMonth = 5;\n      const retirementDay = 1; // 月初日を使用\n      \n      rowData.retirement_date = `${retirementYear}/${retirementMonth}/${retirementDay}`;\n    }\n    \n    console.log(`新規行 HC自動計算用データ:`, {\n      従業員名: rowData.name,\n      採用日: rowData.hire_date,\n      状態: rowData.status,\n      HC値: rowData.hc\n    });\n    \n    try {\n      // 採用日をDateオブジェクトに変換\n      const hireDateParts = rowData.hire_date.split('/');\n      if (hireDateParts.length !== 3) {\n        console.error('採用日のフォーマットが不正です:', rowData.hire_date);\n        return;\n      }\n      \n      const hireYear = parseInt(hireDateParts[0]);\n      const hireMonth = parseInt(hireDateParts[1]);\n      const hireDay = parseInt(hireDateParts[2]);\n      \n      if (isNaN(hireYear) || isNaN(hireMonth) || isNaN(hireDay)) {\n        console.error('採用日のパースに失敗しました:', { hireYear, hireMonth, hireDay });\n        return;\n      }\n      \n      // 現在の月次ステータスを取得または初期化\n      const newMonthlyStatus = [...(rowData.monthlyStatus || Array(12).fill(''))];\n      \n      // 表示年度と表示月を取得\n      const displayYear = fiscalYear;\n      const displayMonth = month;\n      \n      // 現在の実際の年月を取得（システム日付）\n      const currentDate = new Date();\n      const currentYear = currentDate.getFullYear();\n      const currentMonth = currentDate.getMonth() + 1; // JavaScriptの月は0始まり\n      \n      // システム年度と表示年度の関係を分かりやすく表示\n      const yearRelation = displayYear < currentYear ? \"過去\" : \n                           displayYear === currentYear ? \"現在\" : \"未来\";\n      \n      console.log(`新規行 HC自動計算 - 採用日: ${hireYear}/${hireMonth}/${hireDay}, ` + \n                  `表示年度(${yearRelation}年度): ${displayYear}/${displayMonth}, ` + \n                  `現在日付: ${currentYear}/${currentMonth}`);\n      \n      // 各月について処理\n      monthNumbers.forEach((monthNum, index) => {\n        // 会計年度を考慮して年を調整（1-3月は次の年）\n        const calendarYear = monthNum >= 4 ? displayYear : displayYear + 1;\n        \n        // 採用月以降かどうか\n        const isAfterHireDate = isDateAfterHireDate(calendarYear, monthNum, hireYear, hireMonth);\n        \n        // 表示年度を考慮した現在月以前かどうか\n        const isBeforeCurrentRealMonth = isBeforeOrEqualCurrentMonth(calendarYear, monthNum, currentYear, currentMonth);\n        \n        // 詳細なログ出力（デバッグ用）\n        console.log(`新規行 月[${index+1}]=${monthNumbers[index]}月の処理: 暦年${calendarYear}, ` +\n                    `採用日以降=${isAfterHireDate}, 表示対象=${isBeforeCurrentRealMonth}`);\n        \n        // 状態に応じた処理\n        if (rowData.status === '在籍') {\n          // 在籍の場合、採用日以降かつ表示対象かどうかで判定\n          if (isAfterHireDate && isBeforeCurrentRealMonth) {\n            newMonthlyStatus[index] = rowData.hc!;\n            console.log(`  → 在籍: ${monthNumbers[index]}月にHC値${rowData.hc}を設定`);\n          } else if (!isAfterHireDate) {\n            newMonthlyStatus[index] = '';\n            console.log(`  → 在籍: ${monthNumbers[index]}月は採用日前のため空白`);\n          } else {\n            newMonthlyStatus[index] = '';\n            console.log(`  → 在籍: ${monthNumbers[index]}月は未来月のため空白`);\n          }\n        } else if (rowData.status === '退職') {\n          // 退職日の取得\n          type RetirementMonthType = { year: number; month: number } | null;\n          let retirementMonth: RetirementMonthType = null;\n          if (rowData.retirement_date) {\n            const retirementParts = rowData.retirement_date.split('/');\n            if (retirementParts.length === 3) {\n              const retireYear = parseInt(retirementParts[0]);\n              const retireMonth = parseInt(retirementParts[1]);\n              retirementMonth = { year: retireYear, month: retireMonth };\n            }\n          }\n          \n          // 退職月以前かどうか\n          let isBeforeRetirementMonth = true;\n          if (retirementMonth) {\n            isBeforeRetirementMonth = (calendarYear < retirementMonth.year) || \n                                     (calendarYear === retirementMonth.year && monthNum <= retirementMonth.month);\n            console.log(`【新規行】【退職月判定】${monthNumbers[index]}月: 退職月(${retirementMonth.year}/${retirementMonth.month})以前=${isBeforeRetirementMonth}`);\n          }\n          \n          // 退職の場合、採用日以降かつ表示月以前かつ退職月以前はHC値を設定\n          if (isAfterHireDate && isBeforeCurrentRealMonth) {\n            if (retirementMonth && !isBeforeRetirementMonth) {\n              // 退職月が設定されており、それより後の月は空白に\n              newMonthlyStatus[index] = '';\n              console.log(`  → 退職: ${monthNumbers[index]}月は退職月(${retirementMonth.year}/${retirementMonth.month})より後のため空白`);\n            } else {\n              // 退職月以前（または退職月未設定）なら表示\n              newMonthlyStatus[index] = rowData.hc!;\n              console.log(`  → 退職: ${monthNumbers[index]}月にHC値${rowData.hc}を設定`);\n            }\n          } else if (!isAfterHireDate) {\n            newMonthlyStatus[index] = '';\n            console.log(`  → 退職: ${monthNumbers[index]}月は採用日前のため空白`);\n          } else {\n            newMonthlyStatus[index] = '';\n            console.log(`  → 退職: ${monthNumbers[index]}月は未来月のため空白`);\n          }\n        } else {\n          // その他の状態は変更なし\n          console.log(`  → その他の状態: ${rowData.status} - 変更なし`);\n        }\n      });\n      \n      // 新規行データの月次ステータスを更新\n      setNewRowData(prev => ({\n        ...prev,\n        monthlyStatus: newMonthlyStatus\n      }));\n      \n      console.log('新規行の月次ステータスを自動計算しました:', newMonthlyStatus);\n      console.log(`===== 新規行 HC自動計算関数終了 =====`);\n    } catch (error) {\n      console.error('新規行の月次ステータスの自動計算でエラーが発生しました:', error);\n      console.log(`===== 新規行 HC自動計算関数エラー終了 =====`);\n    }\n  };\n\n  // 月次ステータス更新ハンドラー\n  const handleMonthlyStatusChange = (id: number, monthIndex: number, value: string) => {\n    console.log(`月次ステータス変更: ID=${id}, 月=${monthIndex}, 値=${value}`);\n    \n    // 入力値を状態に保存\n    setInputValues(prev => ({\n      ...prev,\n      [`${id}-monthlyStatus-${monthIndex}`]: value\n    }));\n    \n    // 空の場合は空文字列を設定\n    if (value === \"\") {\n      setLocalEmployees(prev => {\n        return prev.map(emp => {\n          if (emp.id === id) {\n            const newMonthlyStatus = [...(emp.monthlyStatus || Array(12).fill(''))];\n            newMonthlyStatus[monthIndex] = '';\n            return { ...emp, monthlyStatus: newMonthlyStatus };\n          }\n          return emp;\n        });\n      });\n      setErrorMessage(null);\n      return;\n    }\n    \n    // 数値変換\n    let convertedValue: number | string = value;\n    // 数値としてパース\n    if (value === \"1\" || value === \"2\" || value === \"0\" || value === \"0.5\") {\n      convertedValue = parseFloat(value);\n    }\n    \n    // 有効な値かどうか確認\n    const validValues = [0, 0.5, 1, 2];\n    const numValue = parseFloat(value);\n    \n    if (!isNaN(numValue) && validValues.includes(numValue)) {\n      console.log(`有効な月次ステータス値を設定: ID=${id}, 月=${monthIndex}, 値=${convertedValue}`);\n      \n      setLocalEmployees(prev => {\n        return prev.map(emp => {\n          if (emp.id === id) {\n            const newMonthlyStatus = [...(emp.monthlyStatus || Array(12).fill(''))];\n            newMonthlyStatus[monthIndex] = convertedValue;\n            \n            // 変更後の状態をログ出力\n            console.log(`ID=${id}の月次ステータス更新後:`, newMonthlyStatus);\n            \n            return { ...emp, monthlyStatus: newMonthlyStatus };\n          }\n          return emp;\n        });\n      });\n      setErrorMessage(null);\n    } else {\n      setErrorMessage(\"月次ステータスには 0, 0.5, 1, 2 のいずれかを入力してください\");\n    }\n  };\n\n  // 新規行の月次ステータス更新ハンドラー\n  const handleNewRowMonthlyStatusChange = (monthIndex: number, value: string) => {\n    console.log(`新規行月次ステータス変更: 月=${monthIndex}, 値=${value}`);\n    \n    setInputValues(prev => ({\n      ...prev,\n      [`new-monthlyStatus-${monthIndex}`]: value\n    }));\n    \n    if (value === \"\") {\n      setNewRowData(prev => {\n        const newMonthlyStatus = [...(prev.monthlyStatus || Array(12).fill(''))];\n        newMonthlyStatus[monthIndex] = '';\n        return {\n          ...prev,\n          monthlyStatus: newMonthlyStatus\n        };\n      });\n      setErrorMessage(null);\n      return;\n    }\n    \n    const numValue = parseFloat(value);\n    const validValues = [0, 0.5, 1, 2];\n    \n    if (isNaN(numValue) || !validValues.includes(numValue)) {\n      setErrorMessage(\"月次ステータスには 0, 0.5, 1, 2 のいずれかを入力してください\");\n      return;\n    }\n    \n    setNewRowData(prev => {\n      const newMonthlyStatus = [...(prev.monthlyStatus || Array(12).fill(''))];\n      newMonthlyStatus[monthIndex] = numValue;\n      return {\n        ...prev,\n        monthlyStatus: newMonthlyStatus\n      };\n    });\n    setErrorMessage(null);\n  };\n\n  // 新規追加行を表示するハンドラー\n  const handleAddNewRow = () => {\n    console.log('新規行追加を開始');\n    \n    if (!actualIsEditing) {\n      setInternalIsEditing(true);\n      \n      if (onToggleEditMode) {\n        onToggleEditMode();\n      }\n    }\n    \n    const nextNo = Math.max(...localEmployees.map(emp => emp.no || 0), 0) + 1;\n    setNewRowData({\n      ...defaultEmployee,\n      no: nextNo\n    });\n    \n    setIsAddingNewRow(true);\n  };\n\n  // 新規行のキャンセルハンドラー\n  const handleCancelNewRow = () => {\n    console.log('新規行追加をキャンセル');\n    setIsAddingNewRow(false);\n    setErrorMessage(null);\n    setInputValues(prev => {\n      const filtered = Object.keys(prev).reduce((acc, key) => {\n        if (!key.startsWith('new-')) {\n          acc[key] = prev[key];\n        }\n        return acc;\n      }, {} as {[key: string]: any});\n      return filtered;\n    });\n  };\n\n  // 従業員データの削除ハンドラー\n  const handleDeleteEmployee = async (id: number) => {\n    console.log(`従業員削除ボタンがクリックされました: ID=${id}`);\n    \n    if (!window.confirm('この従業員データを削除してもよろしいですか？\\n（バックアップが自動的に作成されます）')) {\n      console.log('削除操作がキャンセルされました');\n      return;\n    }\n    \n    setIsLoading(true);\n    \n    try {\n      console.log(`従業員削除開始: ID=${id}`);\n      \n      // 新しい削除関数を使用\n      const result = await deleteEmployeeFromDB(id);\n      console.log('削除結果:', result);\n      \n      if (result.success) {\n        // 削除成功時はUIを更新（すでにdeleteEmployeeFromDB内で実行されているが、念のため）\n        setLocalEmployees(prev => prev.filter(emp => emp.id !== id));\n        setOriginalEmployees(prev => prev.filter(emp => emp.id !== id));\n        \n        // 成功メッセージ\n        setSuccessMessage(`従業員データを削除しました。バックアップ: ${result.backupPath}`);\n        setTimeout(() => setSuccessMessage(null), 5000);\n        \n        // データ更新通知\n        if (onRefreshData) {\n          onRefreshData();\n        }\n      } else {\n        // 削除失敗\n        setErrorMessage(result.message || '削除処理に失敗しました');\n        setTimeout(() => setErrorMessage(null), 5000);\n      }\n    } catch (error: any) {\n      console.error('従業員削除エラー:', error);\n      setErrorMessage(error instanceof Error ? error.message : String(error));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 新規行の保存ハンドラー\n  const handleSaveNewRow = async () => {\n    // 入力検証 - より詳細な検証\n    const validationErrors: string[] = [];\n    \n    if (!newRowData.name) {\n      validationErrors.push(\"名前は必須です\");\n    }\n    \n    if (!newRowData.employee_id) {\n      validationErrors.push(\"社員IDは必須です\");\n    }\n    \n    // 複数の検証エラーがある場合は、それらを表示して終了\n    if (validationErrors.length > 0) {\n      setErrorMessage(validationErrors.join(\"、\"));\n      return Promise.reject(validationErrors.join(\"、\"));\n    }\n    \n    setIsLoading(true);\n    \n    try {\n      console.log(`${fiscalYear}年に新規従業員データを作成します:`, newRowData);\n      \n      // APIを通じての作成を試みる\n      // 深いコピーを作成して送信することで、オリジナルデータが失われないようにする\n      const dataToSend = JSON.parse(JSON.stringify(newRowData));\n      \n      // カスタムプロパティを追加\n      dataToSend._timestamp = new Date().toISOString(); // 一意性を確保するためのタイムスタンプ\n      \n      // 月パラメータは使用しないため0を渡す（APIの整合性のため）\n      const createdEmployee = await reportApi.createEmployeeDetail(fiscalYear, 0, dataToSend);\n      console.log(`作成された従業員データ:`, createdEmployee);\n      \n      // 応答データの検証と変換\n      let newEmp: Employee;\n      \n      if (createdEmployee && createdEmployee.employee && createdEmployee.employee.id) {\n        // APIから返された従業員データを使用\n        newEmp = createdEmployee.employee as Employee;\n        \n        // 月次ステータスが配列でない場合は配列に変換\n        if (!Array.isArray(newEmp.monthlyStatus)) {\n          newEmp.monthlyStatus = Array(12).fill('');\n        }\n      } else {\n        // フォールバック: クライアント側でデータを生成\n        const timestamp = new Date().getTime();\n        const randomPart = Math.floor(Math.random() * 1000);\n        const tempId = parseInt(`${timestamp % 100000}${randomPart}`.substring(0, 6));\n        \n        newEmp = {\n          ...newRowData,\n          id: tempId,\n          fiscal_year: fiscalYear,\n          monthlyStatus: Array.isArray(newRowData.monthlyStatus) ? newRowData.monthlyStatus : Array(12).fill('')\n        } as Employee;\n        \n        console.log('APIレスポンスからデータを取得できなかったため、クライアント側で生成:', newEmp);\n      }\n      \n      // ローカル状態の更新\n      setLocalEmployees(prev => [...prev, newEmp]);\n      setOriginalEmployees(prev => [...prev, newEmp]);\n      \n      // 成功メッセージの表示 - 年度に応じてメッセージを変更\n      if (fiscalYear >= 2024) {\n        setSuccessMessage(`将来年度(${fiscalYear}年)の従業員データをクライアント側で作成しました (ID: ${newEmp.id})`);\n        console.log(`新規従業員を保存しました: ID=${newEmp.id}, 名前=${newEmp.name}`);\n      } else {\n        setSuccessMessage('従業員データを作成しました');\n      }\n      setTimeout(() => setSuccessMessage(null), 3000);\n      \n      // 新規追加モードを解除するが、入力値は保持する\n      setIsAddingNewRow(false);\n      \n      // 成功した場合のみ入力値をクリア\n      if (createdEmployee && (createdEmployee.success || createdEmployee.employee)) {\n        console.log('データ保存成功: 入力値をクリアします');\n        setNewRowData({...defaultEmployee}); // デフォルト値に戻す\n        \n        // 入力値をクリア\n        setInputValues(prev => {\n          const filtered = Object.keys(prev).reduce((acc, key) => {\n            if (!key.startsWith('new-')) {\n              acc[key] = prev[key];\n            }\n            return acc;\n          }, {} as {[key: string]: any});\n          return filtered;\n        });\n      } else {\n        console.log('データ保存失敗: 入力値を保持します');\n      }\n      \n      // 親コンポーネントへの通知\n      if (onRefreshData) {\n        console.log('親コンポーネントにデータ更新を通知');\n        onRefreshData();\n      }\n      \n      return Promise.resolve(newEmp);\n    } catch (error: any) {\n      console.error('従業員作成エラー:', error);\n      \n      // 拡張したエラーハンドリング関数を使用して適切なメッセージを表示\n      setErrorMessage(reportApi.handleApiError(error));\n      \n      // 自動リトライの実装（2024年以降のデータに限り、クライアント側での保存を試みる）\n      if (fiscalYear >= 2024) {\n        console.log(`APIエラーが発生しましたが、将来年度(${fiscalYear}年)のデータなのでクライアント側で作成を試みます`);\n        \n        try {\n          // タイムスタンプベースの一貫性のあるID生成\n          const timestamp = new Date().getTime();\n          const randomPart = Math.floor(Math.random() * 1000);\n          const tempId = parseInt(`${timestamp % 100000}${randomPart}`.substring(0, 6));\n          \n          // 既存の従業員データから次のNo値を計算\n          const existingNos = localEmployees.map(emp => emp.no || 0);\n          const maxNo = existingNos.length > 0 ? Math.max(...existingNos) : 0;\n          const nextNo = maxNo + 1;\n          \n          console.log(`エラー時の新規従業員のNo生成: 既存No=${existingNos.join(',')}, 最大No=${maxNo}, 次のNo=${nextNo}`);\n          \n          const newEmp: Employee = {\n            ...newRowData,\n            id: tempId,\n            no: nextNo, // 連番のNo値を設定\n            fiscal_year: fiscalYear,\n            monthlyStatus: Array.isArray(newRowData.monthlyStatus) ? newRowData.monthlyStatus : Array(12).fill('')\n          } as Employee;\n          \n          // ローカル状態の更新\n          setLocalEmployees(prev => [...prev, newEmp]);\n          setOriginalEmployees(prev => [...prev, newEmp]);\n          \n          // ユーザーへのフィードバック\n          setSuccessMessage(`APIエラーが発生しましたが、${fiscalYear}年のデータをクライアント側で作成しました`);\n          setTimeout(() => {\n            setSuccessMessage(null);\n            setErrorMessage(null);\n          }, 3000);\n          \n          // 新規追加モードを解除するが、入力値は保持する（エラー時は特に重要）\n          setIsAddingNewRow(false);\n          \n          // 親コンポーネントへの通知\n          if (onRefreshData) {\n            onRefreshData();\n          }\n          \n          return Promise.resolve(newEmp);\n        } catch (fallbackError) {\n          console.error('フォールバック処理中のエラー:', fallbackError);\n          // フォールバック処理中にエラーが発生した場合は元のエラーを返す\n          return Promise.reject(error);\n        }\n      }\n      \n      return Promise.reject(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 保存ボタンのハンドラー\n  const handleSave = async () => {\n    setIsLoading(true);\n    console.log('従業員データ保存開始');\n    console.log('保存するデータ件数:', localEmployees.length);\n    console.log('=== デバッグ情報 ===');\n    console.log('ストレージキー:', `EMPLOYEE_DATA_${fiscalYear}`);\n    console.log('LocalStorage keys:', Object.keys(localStorage));\n    setErrorMessage(null);\n    \n    try {\n      const originalEmps = originalEmployees.length > 0 ? originalEmployees : [];\n      const successfulUpdates: number[] = [];\n      const failedUpdates: number[] = [];\n      const skippedUpdates: number[] = []; // 変更がなかったものを追跡\n      \n      // 2024年以降のデータの場合は特別な処理\n      const is2024OrLater = fiscalYear >= 2024;\n      \n      // 一括更新のための変更の事前計算\n      const changesByEmployee: Record<number, Record<string, string>> = {};\n      \n      // すべての従業員の変更を検出\n      for (const emp of localEmployees) {\n        const originalEmp = originalEmps.find(e => e.id === emp.id);\n        if (originalEmp) {\n          const changedFields: Record<string, string> = {};\n          \n          // 各フィールドの変更を確認\n          ['employee_id', 'name', 'disability_type', 'disability', 'grade', 'hire_date', 'status', 'memo', 'hc'].forEach(field => {\n            // HC値がnumberの場合は文字列に変換して比較\n            const originalValue = field === 'hc' \n              ? (originalEmp[field as keyof Employee] !== undefined ? String(originalEmp[field as keyof Employee]) : '') \n              : originalEmp[field as keyof Employee];\n              \n            const newValue = field === 'hc' \n              ? (emp[field as keyof Employee] !== undefined ? String(emp[field as keyof Employee]) : '') \n              : emp[field as keyof Employee];\n              \n            if (originalValue !== newValue) {\n              // 値がundefinedやnullの場合は空文字列に変換\n              const value = emp[field as keyof Employee];\n              changedFields[field] = String(value !== undefined && value !== null ? value : '');\n              \n              // 詳細なログ出力（デバッグ用）\n              console.log(`フィールド ${field} の変更検出:`, {\n                original: originalEmp[field as keyof Employee], \n                new: emp[field as keyof Employee],\n                processed: changedFields[field]\n              });\n            }\n          });\n          \n          // 月次ステータスの変更を確認\n          if (JSON.stringify(originalEmp.monthlyStatus) !== JSON.stringify(emp.monthlyStatus)) {\n            changedFields['monthlyStatus'] = JSON.stringify(emp.monthlyStatus);\n          }\n          \n          // 変更があれば追跡\n          if (Object.keys(changedFields).length > 0) {\n            changesByEmployee[emp.id] = changedFields;\n          } else {\n            skippedUpdates.push(emp.id);\n          }\n        }\n      }\n      \n      console.log(`検出された変更: ${Object.keys(changesByEmployee).length}件`, changesByEmployee);\n      \n      // 2024年以降のデータの場合、localStorage に全データを保存\n      if (is2024OrLater) {\n        try {\n          // StorageKeyを生成\n          const storageKey = `EMPLOYEE_DATA_${fiscalYear}`;\n          let savedEmployees = {};\n          \n          try {\n            const savedData = localStorage.getItem(storageKey);\n            if (savedData) {\n              savedEmployees = JSON.parse(savedData);\n            }\n          } catch (e) {\n            console.error('ローカルストレージの読み取りエラー:', e);\n          }\n          \n          // 現在のすべての従業員データを保存\n          const allEmployeesForStorage = localEmployees.reduce((acc, emp) => {\n            if (emp.id) {\n              acc[emp.id] = {\n                ...emp,\n                fiscal_year: fiscalYear,\n                updated_at: new Date().toISOString()\n              };\n            }\n            return acc;\n          }, {} as Record<number, any>);\n          \n          console.log(`ローカルストレージに保存するデータ:`, allEmployeesForStorage);\n          \n          // ローカルストレージに保存\n          localStorage.setItem(storageKey, JSON.stringify(allEmployeesForStorage));\n          \n          // 保存が成功したか確認\n          const savedData = localStorage.getItem(storageKey);\n          if (savedData) {\n            const savedEmployeesObj = JSON.parse(savedData);\n            const savedEmployeesCount = Object.keys(savedEmployeesObj).length;\n            console.log(`${fiscalYear}年の従業員データをローカルストレージに保存しました`, savedEmployeesCount, '件');\n            console.log('保存確認 - 保存されたデータキー:', Object.keys(savedEmployeesObj));\n            \n            // 保存後のデバッグ情報\n            console.log('=== 保存後のデバッグ情報 ===');\n            console.log('LocalStorage keys after save:', Object.keys(localStorage));\n            console.log('現在のストレージキー:', storageKey);\n            \n            if (savedEmployeesCount === 0) {\n              console.warn('ローカルストレージに保存されたデータが空です。再試行します。');\n              // 再度保存を試みる\n              localStorage.setItem(storageKey, JSON.stringify(allEmployeesForStorage));\n              const retryData = localStorage.getItem(storageKey);\n              if (!retryData || Object.keys(JSON.parse(retryData)).length === 0) {\n                throw new Error('ローカルストレージへの保存に再試行しても失敗しました。');\n              }\n            }\n            \n            // 親コンポーネントに変更を通知\n            if (onEmployeesUpdate) {\n              console.log('親コンポーネントに従業員データ更新を通知:', localEmployees.length, '件');\n              onEmployeesUpdate(localEmployees);\n            }\n            \n            // すべての保存を成功として扱う\n            successfulUpdates.push(...localEmployees.map(emp => emp.id));\n          } else {\n            console.error('ローカルストレージへの保存に失敗しました。ストレージキー:', storageKey);\n            console.error('現在のローカルストレージキー一覧:', Object.keys(localStorage));\n            throw new Error('ローカルストレージへの保存に失敗しました。');\n          }\n        } catch (storageError) {\n          console.error('ローカルストレージへの保存エラー:', storageError);\n          // エラーメッセージを設定\n          setErrorMessage('ローカルストレージへの保存中にエラーが発生しました。');\n          failedUpdates.push(...localEmployees.map(emp => emp.id));\n        }\n      } else {\n        // 2023年以前のデータはAPI経由で更新\n        // バッチ処理の最大サイズ\n        const BATCH_SIZE = 5;\n        const employeeIds = Object.keys(changesByEmployee).map(Number);\n        \n        // バッチ処理のために従業員IDをチャンクに分割\n        for (let i = 0; i < employeeIds.length; i += BATCH_SIZE) {\n          const batchIds = employeeIds.slice(i, i + BATCH_SIZE);\n          console.log(`処理バッチ ${i / BATCH_SIZE + 1}: 従業員ID ${batchIds.join(', ')}`);\n          \n          // 並列処理のためのプロミス配列\n          const updatePromises = batchIds.map(async (empId) => {\n            const changedFields = changesByEmployee[empId];\n            \n            try {\n              console.log(`従業員ID=${empId}の更新データ:`, changedFields);\n              \n              // API呼び出し\n              const result = await reportApi.updateEmployeeData(fiscalYear, empId, changedFields);\n              console.log(`従業員ID=${empId}の更新結果:`, result);\n              \n              // 親コンポーネントに変更を通知\n              Object.entries(changedFields).forEach(([field, value]) => {\n                onEmployeeChange(empId, field, value);\n              });\n              \n              return { success: true, id: empId };\n            } catch (error: any) {\n              console.error(`従業員ID ${empId} の更新エラー:`, error);\n              return { success: false, id: empId, error };\n            }\n          });\n          \n          // 各バッチの結果を処理\n          const results = await Promise.allSettled(updatePromises);\n          \n          // 結果の集計\n          results.forEach((result, index) => {\n            const empId = batchIds[index];\n            \n            if (result.status === 'fulfilled') {\n              if (result.value.success) {\n                successfulUpdates.push(empId);\n              } else {\n                failedUpdates.push(empId);\n              }\n            } else {\n              console.error(`従業員ID=${empId}の更新中に予期せぬエラーが発生:`, result.reason);\n              failedUpdates.push(empId);\n            }\n          });\n        }\n      }\n      \n      // 結果に基づいてメッセージを表示\n      let successMessage = '';\n      let errorMessage: string | null = null;\n      \n      if (is2024OrLater) {\n        // 2024年以降のデータの場合の特別なメッセージ\n        if (successfulUpdates.length > 0) {\n          successMessage = `${fiscalYear}年の従業員データ（${successfulUpdates.length}件）をクライアント側で保存しました`;\n        }\n      } else {\n        // 通常の成功/失敗メッセージ\n        if (failedUpdates.length > 0) {\n          if (successfulUpdates.length > 0) {\n            successMessage = `${successfulUpdates.length}件の従業員データを保存しました`;\n            errorMessage = `${failedUpdates.length}件の従業員データの保存に失敗しました（ID: ${failedUpdates.join(', ')}）`;\n          } else {\n            errorMessage = `すべての従業員データの保存に失敗しました`;\n          }\n        } else if (successfulUpdates.length > 0) {\n          successMessage = `すべての従業員データを正常に保存しました（${successfulUpdates.length}件）`;\n        }\n      }\n      \n      // 変更がなかった場合のメッセージ\n      if (successfulUpdates.length === 0 && failedUpdates.length === 0) {\n        successMessage = '変更はありませんでした';\n      }\n      \n      // メッセージの設定\n      if (successMessage) {\n        setSuccessMessage(successMessage);\n      }\n      \n      if (errorMessage) {\n        setErrorMessage(errorMessage);\n      }\n      \n      // 編集状態の更新\n      onSaveSuccess();\n      setInternalIsEditing(false);\n      \n      // データ再取得\n      if (onRefreshData) {\n        onRefreshData();\n      }\n      \n      // 状態の更新\n      setOriginalEmployees(JSON.parse(JSON.stringify(localEmployees)));\n      setInputValues({});\n      \n      // 一定時間後にメッセージをクリア\n      setTimeout(() => {\n        setSuccessMessage(null);\n        setErrorMessage(null);\n      }, 5000);\n    } catch (error: any) {\n      console.error('従業員データ保存エラー:', error);\n      \n      // 拡張したエラーハンドリング関数を使用\n      setErrorMessage(reportApi.handleApiError(error));\n      \n      // 2024年以降のデータの場合は、エラーがあってもUIからの編集を維持\n      if (fiscalYear >= 2024) {\n        // 元の状態を更新して変更を保持\n        setOriginalEmployees(JSON.parse(JSON.stringify(localEmployees)));\n        setSuccessMessage(`${fiscalYear}年のデータはクライアント側に保存されました`);\n        \n        // 編集状態の更新\n        onSaveSuccess();\n        setInternalIsEditing(false);\n        \n        // 一定時間後にメッセージをクリア\n        setTimeout(() => {\n          setSuccessMessage(null);\n          setErrorMessage(null);\n        }, 5000);\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // デフォルトのボタンスタイル\n  const defaultButtonStyles = {\n    primary: {\n      padding: '8px 16px',\n      backgroundColor: '#6c757d',\n      color: 'white',\n      border: 'none',\n      borderRadius: '4px',\n      cursor: 'pointer'\n    },\n    secondary: {\n      padding: '8px 16px',\n      backgroundColor: '#dc3545',\n      color: 'white',\n      border: 'none',\n      borderRadius: '4px',\n      cursor: 'pointer'\n    },\n    success: {\n      padding: '8px 16px',\n      backgroundColor: '#28a745',\n      color: 'white',\n      border: 'none',\n      borderRadius: '4px',\n      cursor: 'pointer'\n    }\n  };\n\n  // 実際に使用するボタンスタイル\n  const actualButtonStyles = {\n    primary: buttonStyles.primary || defaultButtonStyles.primary,\n    secondary: buttonStyles.secondary || defaultButtonStyles.secondary,\n    success: buttonStyles.success || defaultButtonStyles.success\n  };\n\n  // 年度選択リストを作成\n  const currentYear = new Date().getFullYear();\n  const yearOptions: number[] = [];\n  for (let year = currentYear - 5; year <= currentYear + 5; year++) {\n    yearOptions.push(year);\n  }\n\n  // デバッグ情報の出力\n  console.log('[DEBUG] HC入力欄のレンダリング状態:', {\n    従業員データ数: localEmployees.length,\n    最初の従業員のHC値: localEmployees[0]?.hc,\n    編集モード: isEditing,\n    実際の編集モード: actualIsEditing\n  });\n  \n  return (\n    <div className=\"employees-tab-container\">\n      <div className=\"data-container\">\n        {/* 年度選択と従業員詳細ヘッダー */}\n        <div style={{ \n          display: 'flex', \n          justifyContent: 'space-between', \n          alignItems: 'center', \n          marginBottom: '1rem',\n          backgroundColor: '#f8f9fa',\n          padding: '10px 15px',\n          borderRadius: '4px',\n          border: '1px solid #ddd'\n        }}>\n          <div>\n            <h3 style={{ margin: 0 }}>従業員詳細</h3>\n          </div>\n          \n          <div style={{ display: 'flex', alignItems: 'center', gap: '15px' }}>\n            {/* 年度選択ドロップダウン */}\n            <div>\n              <label style={{ marginRight: '8px', fontSize: '0.9rem' }}>年度:</label>\n              <select\n                value={fiscalYear}\n                onChange={(e) => {\n                  const newYear = parseInt(e.target.value, 10);\n                  const previousYear = fiscalYear;\n                  \n                  console.log(`年度変更: ${previousYear} → ${newYear}`);\n                  \n                  // 基本的な年度変更処理\n                  setFiscalYear(newYear);\n                  \n                  // 変更先の年度が次の年度の場合、データの引き継ぎ処理を行う\n                  if (newYear === previousYear + 1) {\n                    console.log(`次年度へのデータ引き継ぎを確認: ${previousYear} → ${newYear}`);\n                    \n                    // 現在のローカルストレージデータを確認\n                    const nextYearStorageKey = `EMPLOYEE_DATA_${newYear}`;\n                    const nextYearData = localStorage.getItem(nextYearStorageKey);\n                    \n                    if (!nextYearData) {\n                      console.log(`${newYear}年度のデータが存在しないため、データ引き継ぎを実行します`);\n                      \n                      // 確認ダイアログを表示\n                      if (window.confirm(`${previousYear}年度から${newYear}年度へデータを引き継ぎますか？`)) {\n                        // 改良版のデータ引き継ぎ機能を使用\n                        const result = checkAndInheritEmployeeData(previousYear, newYear);\n                        \n                        if (result.success) {\n                          setSuccessMessage(result.message);\n                          setTimeout(() => setSuccessMessage(null), 5000);\n                        } else {\n                          setErrorMessage(result.message);\n                          setTimeout(() => setErrorMessage(null), 5000);\n                        }\n                      } else {\n                        console.log('データ引き継ぎはユーザーによってキャンセルされました');\n                      }\n                    } else {\n                      console.log(`${newYear}年度のデータが既に存在するため、データ引き継ぎをスキップします`);\n                    }\n                  }\n                  \n                  // データ取得処理\n                  fetchEmployeesByYear(newYear);\n                }}\n                style={{\n                  padding: '6px 10px',\n                  borderRadius: '4px',\n                  border: '1px solid #ced4da',\n                  fontSize: '0.9rem'\n                }}\n              >\n                {yearOptions.map(year => (\n                  <option key={year} value={year}>{year}</option>\n                ))}\n              </select>\n            </div>\n\n            {/* データ引き継ぎと編集ボタン群 */}\n            <div style={{ display: 'flex', gap: '10px' }}>\n              {!isAddingNewRow && !actualIsEditing && (\n                <>\n                  {/* データ引き継ぎボタン */}\n                  <button\n                    type=\"button\"\n                    onClick={() => {\n                      // 前年度からデータを引き継ぐ\n                      const fromYear = fiscalYear - 1;\n                      const toYear = fiscalYear;\n                      \n                      if (window.confirm(`${fromYear}年度から${toYear}年度へデータを引き継ぎますか？`)) {\n                        // 改良版のデータ引き継ぎ機能を使用\n                        manualInheritData(fromYear, toYear);\n                      }\n                    }}\n                    style={{\n                      padding: '6px 12px',\n                      backgroundColor: '#17a2b8',\n                      color: 'white',\n                      border: 'none',\n                      borderRadius: '4px',\n                      cursor: 'pointer',\n                      fontSize: '0.85rem'\n                    }}\n                    title=\"前年度から現在年度へデータを引き継ぎます\"\n                  >\n                    データ引き継ぎ\n                  </button>\n                  \n                  {/* データ分析・削除テストボタンは削除 */}\n                  \n                  {/* 選択従業員削除ボタン */}\n                  <button\n                    type=\"button\"\n                    onClick={deleteSelectedEmployees}\n                    style={{\n                      padding: '6px 12px',\n                      backgroundColor: '#dc3545',\n                      color: 'white',\n                      border: 'none',\n                      borderRadius: '4px',\n                      cursor: 'pointer',\n                      fontSize: '0.85rem'\n                    }}\n                    title=\"選択した従業員データを削除\"\n                    disabled={selectedCount === 0}\n                  >\n                    選択削除{selectedCount > 0 ? ` (${selectedCount})` : ''}\n                  </button>\n                </>\n              )}\n              \n              {!isAddingNewRow && !actualIsEditing && (\n                <button \n                  type=\"button\"\n                  onClick={handleToggleEditMode}\n                  style={{\n                    padding: '8px 16px',\n                    backgroundColor: '#6c757d',\n                    color: 'white',\n                    border: 'none',\n                    borderRadius: '4px',\n                    cursor: 'pointer'\n                  }}\n                  disabled={isLoading}\n                >\n                  編集\n                </button>\n              )}\n              \n              {/* CSVインポートボタン */}\n              {!isAddingNewRow && (\n                <button \n                  type=\"button\"\n                  onClick={() => setIsCSVImportModalOpen(true)}\n                  style={{ \n                    padding: '8px 16px',\n                    backgroundColor: '#10b981', // 緑色\n                    color: 'white',\n                    border: 'none',\n                    borderRadius: '4px',\n                    cursor: 'pointer',\n                    marginRight: '8px'\n                  }}\n                  disabled={isLoading}\n                >\n                  CSVインポート\n                </button>\n              )}\n              \n              {!isAddingNewRow && (\n                <button \n                  type=\"button\"\n                  onClick={handleAddNewRow}\n                  style={{ \n                    padding: '8px 16px',\n                    backgroundColor: '#17a2b8',\n                    color: 'white',\n                    border: 'none',\n                    borderRadius: '4px',\n                    cursor: 'pointer'\n                  }}\n                  disabled={isLoading || (actualIsEditing && isAddingNewRow)}\n                >\n                  新規追加\n                </button>\n              )}\n            </div>\n          </div>\n        </div>\n        \n        {/* 成功メッセージ表示エリア */}\n        {successMessage && (\n          <div style={{ \n            backgroundColor: '#d4edda', \n            color: '#155724', \n            padding: '10px', \n            borderRadius: '4px', \n            marginBottom: '15px' \n          }}>\n            {successMessage}\n          </div>\n        )}\n        \n        {/* エラーメッセージ表示エリア */}\n        {errorMessage && (\n          <div style={{ \n            backgroundColor: '#f8d7da', \n            color: '#721c24', \n            padding: '10px', \n            borderRadius: '4px', \n            marginBottom: '15px' \n          }}>\n            {errorMessage}\n          </div>\n        )}\n        \n        {/* ローディングインジケーター */}\n        {isLoading && (\n          <div style={{ \n            backgroundColor: '#e9ecef', \n            padding: '10px', \n            borderRadius: '4px', \n            marginBottom: '15px',\n            textAlign: 'center'\n          }}>\n            データを処理中...\n          </div>\n        )}\n\n        {/* テーブルコンテナ */}\n        <div style={{ \n          ...editingStyles,\n          overflowX: 'auto',\n          backgroundColor: 'white',\n          borderRadius: '4px',\n          border: '1px solid #dee2e6',\n          padding: '10px',\n          marginBottom: '20px'\n        }}>\n          {/* 従業員データテーブル */}\n          <table style={{ \n            width: '100%', \n            borderCollapse: 'collapse',\n            fontSize: '13px',\n            whiteSpace: 'nowrap'\n          }}>\n            <thead>\n              <tr style={{ borderBottom: '2px solid #dee2e6' }}>\n                <th style={{ padding: '8px', textAlign: 'center', width: '30px' }}>\n                  <input \n                    type=\"checkbox\" \n                    checked={selectAll} \n                    onChange={toggleSelectAll}\n                    title=\"すべての行を選択/解除\"\n                  />\n                </th>\n                <th style={{ padding: '8px', textAlign: 'left', position: 'sticky', left: 0, backgroundColor: 'white', zIndex: 1 }}>社員ID</th>\n                <th style={{ padding: '8px', textAlign: 'left' }}>氏名</th>\n                <th style={{ padding: '8px', textAlign: 'left' }}>障害区分</th>\n                <th style={{ padding: '8px', textAlign: 'left' }}>障害</th>\n                <th style={{ padding: '8px', textAlign: 'left' }}>等級</th>\n                <th style={{ padding: '8px', textAlign: 'left' }}>採用日</th>\n                <th style={{ padding: '8px', textAlign: 'left' }}>状態</th>\n                <th style={{ padding: '8px', textAlign: 'left', minWidth: '140px' }}>WH</th>\n                <th style={{ padding: '8px', textAlign: 'center' }}>HC</th>\n                {months.map((month, index) => (\n                  <th key={`month-${index}`} style={{ padding: '8px', textAlign: 'center' }}>{month}</th>\n                ))}\n                <th style={{ padding: '8px', textAlign: 'left' }}>備考</th>\n                <th style={{ padding: '8px', textAlign: 'left', width: '80px' }}>削除</th>\n              </tr>\n            </thead>\n            <tbody>\n              {/* 既存の従業員データ行 */}\n              {localEmployees.map((employee, index) => (\n                <tr key={employee.id || index} style={{ borderBottom: '1px solid #f0f0f0' }}>\n                  <td style={{ padding: '8px', textAlign: 'center' }}>\n                    <input \n                      type=\"checkbox\" \n                      checked={employee._selected || false}\n                      onChange={() => toggleSelectEmployee(employee.id)}\n                      title={`従業員 ${employee.name} を選択/解除`}\n                    />\n                  </td>\n                  <td style={{ padding: '8px', position: 'sticky', left: 0, backgroundColor: 'white', zIndex: 1 }}>\n                    {actualIsEditing ? (\n                      <input \n                        ref={(el) => { inputRefs.current[`${employee.id}-employee_id`] = el; }}\n                        type=\"text\" \n                        value={inputValues[`${employee.id}-employee_id`] ?? employee.employee_id ?? ''}\n                        onChange={(e) => handleFieldChange(employee.id, 'employee_id', e.target.value)}\n                        onKeyDown={(e) => handleKeyDown(e, `${employee.id}-employee_id`)}\n                        style={{ \n                          width: '60px',\n                          padding: '4px',\n                          border: '1px solid #ddd',\n                          borderRadius: '4px',\n                          backgroundColor: '#fff'\n                        }}\n                      />\n                    ) : (\n                      employee.employee_id || '-'\n                    )}\n                  </td>\n                  <td style={{ padding: '8px' }}>\n                    {actualIsEditing ? (\n                      <input \n                        ref={(el) => { inputRefs.current[`${employee.id}-name`] = el; }}\n                        type=\"text\" \n                        value={inputValues[`${employee.id}-name`] ?? employee.name ?? ''}\n                        onChange={(e) => handleFieldChange(employee.id, 'name', e.target.value)}\n                        onKeyDown={(e) => handleKeyDown(e, `${employee.id}-name`)}\n                        style={{ \n                          width: '100px',\n                          padding: '4px',\n                          border: '1px solid #ddd',\n                          borderRadius: '4px',\n                          backgroundColor: '#fff'\n                        }}\n                      />\n                    ) : (\n                      employee.name || '-'\n                    )}\n                  </td>\n                  <td style={{ padding: '8px' }}>\n                    {actualIsEditing ? (\n                      <select \n                        ref={(el) => { inputRefs.current[`${employee.id}-disability_type`] = el; }}\n                        value={inputValues[`${employee.id}-disability_type`] ?? employee.disability_type ?? ''}\n                        onChange={(e) => handleFieldChange(employee.id, 'disability_type', e.target.value)}\n                        style={{ \n                          width: '100px',\n                          padding: '4px',\n                          border: '1px solid #ddd',\n                          borderRadius: '4px',\n                          backgroundColor: '#fff'\n                        }}\n                      >\n                        <option value=\"\">なし</option>\n                        <option value=\"身体障害\">身体障害</option>\n                        <option value=\"知的障害\">知的障害</option>\n                        <option value=\"精神障害\">精神障害</option>\n                      </select>\n                    ) : (\n                      employee.disability_type || '-'\n                    )}\n                  </td>\n                  <td style={{ padding: '8px' }}>\n                    {actualIsEditing ? (\n                      <input \n                        ref={(el) => { inputRefs.current[`${employee.id}-disability`] = el; }}\n                        type=\"text\" \n                        value={inputValues[`${employee.id}-disability`] ?? employee.disability ?? ''}\n                        onChange={(e) => handleFieldChange(employee.id, 'disability', e.target.value)}\n                        style={{ \n                          width: '80px',\n                          padding: '4px',\n                          border: '1px solid #ddd',\n                          borderRadius: '4px',\n                          backgroundColor: '#fff'\n                        }}\n                      />\n                    ) : (\n                      employee.disability || '-'\n                    )}\n                  </td>\n                  <td style={{ padding: '8px' }}>\n                    {actualIsEditing ? (\n                      <input \n                        ref={(el) => { inputRefs.current[`${employee.id}-grade`] = el; }}\n                        type=\"text\" \n                        value={inputValues[`${employee.id}-grade`] ?? employee.grade ?? ''}\n                        onChange={(e) => handleFieldChange(employee.id, 'grade', e.target.value)}\n                        style={{ \n                          width: '60px',\n                          padding: '4px',\n                          border: '1px solid #ddd',\n                          borderRadius: '4px',\n                          backgroundColor: '#fff'\n                        }}\n                      />\n                    ) : (\n                      employee.grade || '-'\n                    )}\n                  </td>\n                  <td style={{ padding: '8px' }}>\n                    {actualIsEditing ? (\n                      <input \n                        ref={(el) => { inputRefs.current[`${employee.id}-hire_date`] = el; }}\n                        type=\"date\"\n                        value={(() => {\n                          // Date input expects yyyy-MM-dd format\n                          const hireDate = inputValues[`${employee.id}-hire_date`] || employee.hire_date || '';\n                          if (!hireDate) return '';\n                          \n                          // Format: yyyy/MM/dd to yyyy-MM-dd\n                          const dateParts = hireDate.split('/');\n                          if (dateParts.length !== 3) return '';\n                          \n                          // Ensure year is 4 digits and properly formatted\n                          let [year, month, day] = dateParts;\n                          year = year.padStart(4, '0');\n                          month = month.padStart(2, '0');\n                          day = day.padStart(2, '0');\n                          \n                          return `${year}-${month}-${day}`;\n                        })()}\n                        onChange={(e) => {\n                          if (e.target.value) {\n                            // Convert from yyyy-MM-dd to yyyy/MM/dd for internal storage\n                            const formattedDate = e.target.value.split('-').join('/');\n                            handleFieldChange(employee.id, 'hire_date', formattedDate);\n                          } else {\n                            handleFieldChange(employee.id, 'hire_date', '');\n                          }\n                        }}\n                        style={{ \n                          width: '120px',\n                          padding: '4px',\n                          border: '1px solid #ddd',\n                          borderRadius: '4px',\n                          backgroundColor: '#fff'\n                        }}\n                      />\n                    ) : (\n                      employee.hire_date || '-'\n                    )}\n                  </td>\n                  <td style={{ padding: '8px' }}>\n                    {actualIsEditing ? (\n                      <select \n                        ref={(el) => { inputRefs.current[`${employee.id}-status`] = el; }}\n                        value={inputValues[`${employee.id}-status`] ?? employee.status ?? '在籍'}\n                        onChange={(e) => handleFieldChange(employee.id, 'status', e.target.value)}\n                        onKeyDown={(e) => handleKeyDown(e, `${employee.id}-status`)}\n                        style={{ \n                          width: '80px',\n                          padding: '4px',\n                          border: '1px solid #ddd',\n                          borderRadius: '4px',\n                          backgroundColor: '#fff'\n                        }}\n                      >\n                        <option value=\"在籍\">在籍</option>\n                        <option value=\"休職\">休職</option>\n                        <option value=\"退職\">退職</option>\n                      </select>\n                    ) : (\n                      <span style={{ \n                        backgroundColor: \n                          employee.status === '在籍' ? '#4caf50' : \n                          employee.status === '休職' ? '#ff9800' : \n                          employee.status === '退職' ? '#f44336' : '#999',\n                        color: 'white', \n                        padding: '2px 6px', \n                        borderRadius: '4px', \n                        fontSize: '12px' \n                      }}>\n                        {employee.status || '不明'}\n                      </span>\n                    )}\n                  </td>\n                  {/* WH入力欄（雇用形態） */}\n                  <td style={{ padding: '8px', minWidth: '140px' }}>\n                    {actualIsEditing ? (\n                      <select \n                        ref={(el) => { inputRefs.current[`${employee.id}-wh`] = el; }}\n                        value={inputValues[`${employee.id}-wh`] ?? employee.wh ?? '正社員'}\n                        onChange={(e) => handleFieldChange(employee.id, 'wh', e.target.value)}\n                        onKeyDown={(e) => handleKeyDown(e, `${employee.id}-wh`)}\n                        style={{ \n                          width: '140px',\n                          padding: '2px',\n                          border: '1px solid #007bff',\n                          borderRadius: '4px',\n                          backgroundColor: '#fff'\n                        }}\n                      >\n                        {WH_OPTIONS.map(option => (\n                          <option key={option.value} value={option.value}>\n                            {option.label}\n                          </option>\n                        ))}\n                      </select>\n                    ) : (\n                      employee.wh || '正社員'\n                    )}\n                  </td>\n                  {/* HC入力欄 */}\n                  <td style={{ padding: '4px', textAlign: 'center' }}>\n                    {/* デバッグログをJSX内に移動 */}\n                    {(() => { console.log('[DEBUG] HC入力欄がレンダリングされました', { employeeId: employee.id, 状態: employee.status, 雇用形態: employee.wh || '正社員', HC値: employee.hc, 退職日: employee.retirement_date }); return null; })()}\n                    <select \n                      ref={(el) => { inputRefs.current[`${employee.id}-hc`] = el; }}\n                      value={inputValues[`${employee.id}-hc`] ?? (employee.hc === 0 ? '0' : (employee.hc || ''))}\n                      onChange={(e) => {\n                        console.log(`[DEBUG] HC値変更: ID=${employee.id}, 値=${e.target.value}`);\n                        handleHcChange(employee.id, e.target.value);\n                        \n                        // HC値が変更された後に月次ステータスの計算を確実に実行\n                        setTimeout(() => {\n                          console.log(`[DEBUG] HC値変更後の確認: ID=${employee.id}`);\n                          const updatedEmployee = localEmployees.find(emp => emp.id === employee.id);\n                          if (updatedEmployee && updatedEmployee.hc !== undefined) {\n                            updateMonthlyStatusFromHc(updatedEmployee);\n                          }\n                        }, 150);\n                      }}\n                      onBlur={(e) => {\n                        // フォーカスを外したときも計算を再実行\n                        handleHcChange(employee.id, e.target.value);\n                      }}\n                      onKeyDown={(e) => handleKeyDown(e, `${employee.id}-hc`)}\n                      style={{ \n                        width: '55px',\n                        padding: '2px',\n                        border: '1px solid #007bff',\n                        borderRadius: '4px',\n                        textAlign: 'center',\n                        backgroundColor: '#fff'\n                      }}\n                    >\n                      <option value=\"\">-</option>\n                      <option value=\"0\">0</option>\n                      <option value=\"0.5\">0.5</option>\n                      <option value=\"1\">1</option>\n                      <option value=\"2\">2</option>\n                    </select>\n                  </td>\n                  {/* 月次ステータス入力欄 */}\n                  {(employee.monthlyStatus || Array(12).fill('')).map((status, monthIndex) => (\n                    <td key={`${employee.id}-month-${monthIndex}`} style={{ padding: '4px', textAlign: 'center' }}>\n                      {actualIsEditing ? (\n                        <input \n                          ref={(el) => { inputRefs.current[`${employee.id}-monthlyStatus-${monthIndex}`] = el; }}\n                          type=\"text\" \n                          value={inputValues[`${employee.id}-monthlyStatus-${monthIndex}`] ?? (status === 0 ? '0' : status || '')}\n                          onChange={(e) => handleMonthlyStatusChange(employee.id, monthIndex, e.target.value)}\n                          onKeyDown={(e) => handleKeyDown(e, `${employee.id}-monthlyStatus-${monthIndex}`)}\n                          style={{ \n                            width: '40px',\n                            padding: '2px',\n                            border: '1px solid #ddd',\n                            borderRadius: '4px',\n                            textAlign: 'center',\n                            backgroundColor: '#fff'\n                          }}\n                        />\n                      ) : (\n                        status === 0 ? '0' : status || '-'\n                      )}\n                    </td>\n                  ))}\n                  <td style={{ padding: '8px' }}>\n                    {actualIsEditing ? (\n                      <input \n                        ref={(el) => { inputRefs.current[`${employee.id}-memo`] = el; }}\n                        type=\"text\" \n                        value={inputValues[`${employee.id}-memo`] ?? employee.memo ?? ''}\n                        onChange={(e) => handleFieldChange(employee.id, 'memo', e.target.value)}\n                        style={{ \n                          width: '150px',\n                          padding: '4px',\n                          border: '1px solid #ddd',\n                          borderRadius: '4px',\n                          backgroundColor: '#fff'\n                        }}\n                      />\n                    ) : (\n                      employee.memo || '-'\n                    )}\n                  </td>\n                  <td style={{ padding: '8px' }}>\n                    <div style={{ display: 'flex', gap: '5px' }}>\n                      {/* 編集モード中の削除ボタン */}\n                      {actualIsEditing && (\n                        <button\n                          onClick={() => {\n                            console.log(`削除ボタンがクリックされました: ID=${employee.id}, 名前=${employee.name}`);\n                            handleDeleteEmployee(employee.id);\n                          }}\n                          style={{\n                            padding: '4px 8px',\n                            backgroundColor: '#dc3545',\n                            color: 'white',\n                            border: 'none',\n                            borderRadius: '4px',\n                            fontSize: '12px'\n                          }}\n                          disabled={isLoading}\n                          title=\"この従業員を削除\"\n                        >\n                          削除\n                        </button>\n                      )}\n                      \n                      {/* 非編集モード時の削除アイコン */}\n                      {!actualIsEditing && (\n                        <button\n                          onClick={() => {\n                            console.log(`削除アイコンがクリックされました: ID=${employee.id}, 名前=${employee.name}`);\n                            handleDeleteEmployee(employee.id);\n                          }}\n                          style={{\n                            padding: '4px',\n                            backgroundColor: 'transparent',\n                            color: '#dc3545',\n                            border: 'none',\n                            cursor: 'pointer',\n                            fontSize: '14px'\n                          }}\n                          disabled={isLoading}\n                          title=\"この従業員を削除\"\n                        >\n                          🗑️\n                        </button>\n                      )}\n                    </div>\n                  </td>\n                </tr>\n              ))}\n              \n              {/* 新規追加行 */}\n              {isAddingNewRow && (\n                <tr style={{ borderBottom: '1px solid #f0f0f0', backgroundColor: '#f8f9fa' }}>\n                  <td style={{ padding: '8px', position: 'sticky', left: 0, backgroundColor: '#f8f9fa', zIndex: 1 }}>\n                    <input \n                      ref={(el) => { inputRefs.current[`new-employee_id`] = el; }}\n                      type=\"text\" \n                      value={inputValues[`new-employee_id`] ?? newRowData.employee_id ?? ''}\n                      onChange={(e) => handleNewRowFieldChange('employee_id', e.target.value)}\n                      onKeyDown={(e) => handleKeyDown(e, `new-employee_id`)}\n                      placeholder=\"社員ID\"\n                      style={{ \n                        width: '60px',\n                        padding: '4px',\n                        border: '1px solid #007bff',\n                        borderRadius: '4px',\n                        backgroundColor: '#fff'\n                      }}\n                    />\n                  </td>\n                  <td style={{ padding: '8px' }}>\n                    <input \n                      ref={(el) => { inputRefs.current[`new-name`] = el; }}\n                      type=\"text\" \n                      value={inputValues[`new-name`] ?? newRowData.name ?? ''}\n                      onChange={(e) => handleNewRowFieldChange('name', e.target.value)}\n                      placeholder=\"氏名\"\n                      style={{ \n                        width: '100px',\n                        padding: '4px',\n                        border: '1px solid #007bff',\n                        borderRadius: '4px',\n                        backgroundColor: '#fff'\n                      }}\n                    />\n                  </td>\n                  <td style={{ padding: '8px' }}>\n                    <select \n                      ref={(el) => { inputRefs.current[`new-disability_type`] = el; }}\n                      value={inputValues[`new-disability_type`] ?? newRowData.disability_type ?? ''}\n                      onChange={(e) => handleNewRowFieldChange('disability_type', e.target.value)}\n                      style={{ \n                        width: '100px',\n                        padding: '4px',\n                        border: '1px solid #007bff',\n                        borderRadius: '4px',\n                        backgroundColor: '#fff'\n                      }}\n                    >\n                      <option value=\"\">なし</option>\n                      <option value=\"身体障害\">身体障害</option>\n                      <option value=\"知的障害\">知的障害</option>\n                      <option value=\"精神障害\">精神障害</option>\n                    </select>\n                  </td>\n                  <td style={{ padding: '8px' }}>\n                    <input \n                      ref={(el) => { inputRefs.current[`new-disability`] = el; }}\n                      type=\"text\" \n                      value={inputValues[`new-disability`] ?? newRowData.disability ?? ''}\n                      onChange={(e) => handleNewRowFieldChange('disability', e.target.value)}\n                      placeholder=\"障害\"\n                      style={{ \n                        width: '80px',\n                        padding: '4px',\n                        border: '1px solid #007bff',\n                        borderRadius: '4px',\n                        backgroundColor: '#fff'\n                      }}\n                    />\n                  </td>\n                  <td style={{ padding: '8px' }}>\n                    <input \n                      ref={(el) => { inputRefs.current[`new-grade`] = el; }}\n                      type=\"text\" \n                      value={inputValues[`new-grade`] ?? newRowData.grade ?? ''}\n                      onChange={(e) => handleNewRowFieldChange('grade', e.target.value)}\n                      placeholder=\"等級\"\n                      style={{ \n                        width: '60px',\n                        padding: '4px',\n                        border: '1px solid #007bff',\n                        borderRadius: '4px',\n                        backgroundColor: '#fff'\n                      }}\n                    />\n                  </td>\n                  <td style={{ padding: '8px' }}>\n                    <input \n                      ref={(el) => { inputRefs.current[`new-hire_date`] = el; }}\n                      type=\"date\"\n                      value={(() => {\n                        // Date input expects yyyy-MM-dd format\n                        const hireDate = inputValues[`new-hire_date`] || newRowData.hire_date || '';\n                        if (!hireDate) return '';\n                        \n                        // Format: yyyy/MM/dd to yyyy-MM-dd\n                        const dateParts = hireDate.split('/');\n                        if (dateParts.length !== 3) return '';\n                        \n                        // Ensure year is 4 digits and properly formatted\n                        let [year, month, day] = dateParts;\n                        year = year.padStart(4, '0');\n                        month = month.padStart(2, '0');\n                        day = day.padStart(2, '0');\n                        \n                        return `${year}-${month}-${day}`;\n                      })()}\n                      onChange={(e) => {\n                        if (e.target.value) {\n                          // Convert from yyyy-MM-dd to yyyy/MM/dd for internal storage\n                          const formattedDate = e.target.value.split('-').join('/');\n                          handleNewRowFieldChange('hire_date', formattedDate);\n                        } else {\n                          handleNewRowFieldChange('hire_date', '');\n                        }\n                      }}\n                      style={{ \n                        width: '120px',\n                        padding: '4px',\n                        border: '1px solid #007bff',\n                        borderRadius: '4px',\n                        backgroundColor: '#fff'\n                      }}\n                    />\n                  </td>\n                  <td style={{ padding: '8px' }}>\n                    <select \n                      ref={(el) => { inputRefs.current[`new-status`] = el; }}\n                      value={inputValues[`new-status`] ?? newRowData.status ?? '在籍'}\n                      onChange={(e) => handleNewRowFieldChange('status', e.target.value)}\n                      onKeyDown={(e) => handleKeyDown(e, `new-status`)}\n                      style={{ \n                        width: '80px',\n                        padding: '4px',\n                        border: '1px solid #007bff',\n                        borderRadius: '4px',\n                        backgroundColor: '#fff'\n                      }}\n                    >\n                      <option value=\"在籍\">在籍</option>\n                      <option value=\"休職\">休職</option>\n                      <option value=\"退職\">退職</option>\n                    </select>\n                  </td>\n                  {/* 新規行のWH入力欄（雇用形態） */}\n                  <td style={{ padding: '8px', minWidth: '140px' }}>\n                    <select \n                      ref={(el) => { inputRefs.current[`new-wh`] = el; }}\n                      value={inputValues[`new-wh`] ?? newRowData.wh ?? '正社員'}\n                      onChange={(e) => handleNewRowFieldChange('wh', e.target.value)}\n                      onKeyDown={(e) => handleKeyDown(e, `new-wh`)}\n                      style={{ \n                        width: '140px',\n                        padding: '4px',\n                        border: '1px solid #007bff',\n                        borderRadius: '4px',\n                        backgroundColor: '#fff'\n                      }}\n                    >\n                      {WH_OPTIONS.map(option => (\n                        <option key={option.value} value={option.value}>\n                          {option.label}\n                        </option>\n                      ))}\n                    </select>\n                  </td>\n                  {/* 新規行のHC入力欄 */}\n                  <td style={{ padding: '4px', textAlign: 'center' }}>\n                    {/* デバッグログをJSX内に移動 */}\n                    {(() => { console.log('[DEBUG] 新規行HC入力欄がレンダリングされました', { 状態: newRowData.status, 雇用形態: newRowData.wh || '正社員', HC値: newRowData.hc }); return null; })()}\n                    <select \n                      ref={(el) => { inputRefs.current[`new-hc`] = el; }}\n                      value={inputValues[`new-hc`] ?? (newRowData.hc === 0 ? '0' : newRowData.hc || '')}\n                      onChange={(e) => {\n                        handleNewRowHcChange(e.target.value);\n                        \n                        // HC値変更後、月次ステータスを再計算\n                        setTimeout(() => {\n                          console.log(`[DEBUG] 新規行 HC値変更後の確認`);\n                          updateMonthlyStatusForNewRow(newRowData);\n                        }, 150);\n                      }}\n                      onBlur={(e) => handleNewRowHcChange(e.target.value)}\n                      onKeyDown={(e) => handleKeyDown(e, `new-hc`)}\n                      style={{ \n                        width: '55px',\n                        padding: '2px',\n                        border: '1px solid #007bff',\n                        borderRadius: '4px',\n                        textAlign: 'center',\n                        backgroundColor: '#fff'\n                      }}\n                    >\n                      <option value=\"\">-</option>\n                      <option value=\"0\">0</option>\n                      <option value=\"0.5\">0.5</option>\n                      <option value=\"1\">1</option>\n                      <option value=\"2\">2</option>\n                    </select>\n                  </td>\n                  {/* 新規行の月次ステータス入力欄 */}\n                  {(newRowData.monthlyStatus || Array(12).fill('')).map((status, monthIndex) => (\n                    <td key={`new-month-${monthIndex}`} style={{ padding: '4px', textAlign: 'center' }}>\n                      <input \n                        ref={(el) => { inputRefs.current[`new-monthlyStatus-${monthIndex}`] = el; }}\n                        type=\"text\" \n                        value={inputValues[`new-monthlyStatus-${monthIndex}`] ?? (status === 0 ? '0' : status || '')}\n                        onChange={(e) => handleNewRowMonthlyStatusChange(monthIndex, e.target.value)}\n                        onKeyDown={(e) => handleKeyDown(e, `new-monthlyStatus-${monthIndex}`)}\n                        style={{ \n                          width: '40px',\n                          padding: '2px',\n                          border: '1px solid #007bff',\n                          borderRadius: '4px',\n                          textAlign: 'center',\n                          backgroundColor: '#fff'\n                        }}\n                      />\n                    </td>\n                  ))}\n                  <td style={{ padding: '8px' }}>\n                    <input \n                      ref={(el) => { inputRefs.current[`new-memo`] = el; }}\n                      type=\"text\" \n                      value={inputValues[`new-memo`] ?? newRowData.memo ?? ''}\n                      onChange={(e) => handleNewRowFieldChange('memo', e.target.value)}\n                      placeholder=\"備考\"\n                      style={{ \n                        width: '150px',\n                        padding: '4px',\n                        border: '1px solid #007bff',\n                        borderRadius: '4px',\n                        backgroundColor: '#fff'\n                      }}\n                    />\n                  </td>\n                  <td style={{ padding: '8px' }}>\n                    <div style={{ display: 'flex', gap: '5px' }}>\n                      <button\n                        onClick={handleSaveNewRow}\n                        style={{\n                          padding: '4px 8px',\n                          backgroundColor: '#28a745',\n                          color: 'white',\n                          border: 'none',\n                          borderRadius: '4px',\n                          fontSize: '12px'\n                        }}\n                        disabled={isLoading}\n                      >\n                        保存\n                      </button>\n                      <button\n                        onClick={handleCancelNewRow}\n                        style={{\n                          padding: '4px 8px',\n                          backgroundColor: '#dc3545',\n                          color: 'white',\n                          border: 'none',\n                          borderRadius: '4px',\n                          fontSize: '12px'\n                        }}\n                        disabled={isLoading}\n                      >\n                        キャンセル\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n              )}\n              \n              {/* データが無い場合のメッセージ行 */}\n              {localEmployees.length === 0 && !isAddingNewRow && (\n                <tr>\n                  <td colSpan={22} style={{ textAlign: 'center', padding: '20px' }}>\n                    <p style={{ fontSize: '16px', color: '#666', marginBottom: '10px' }}>従業員データがありません</p>\n                    <button \n                      type=\"button\"\n                      onClick={handleAddNewRow}\n                      style={{\n                        padding: '8px 16px',\n                        backgroundColor: '#28a745',\n                        color: 'white',\n                        border: 'none',\n                        borderRadius: '4px',\n                        cursor: 'pointer'\n                      }}\n                    >\n                      従業員追加\n                    </button>\n                  </td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n        \n        {/* 編集中の場合のみ表示するアクション領域 */}\n        {actualIsEditing && !isAddingNewRow && (\n          <div style={{ \n            display: 'flex', \n            justifyContent: 'flex-end', \n            gap: '10px', \n            marginTop: '10px' \n          }}>\n            <button \n              type=\"button\"\n              onClick={handleCancelEdit}\n              style={{\n                padding: '8px 16px',\n                backgroundColor: '#6c757d',\n                color: 'white',\n                border: 'none',\n                borderRadius: '4px',\n                cursor: 'pointer'\n              }}\n              disabled={isLoading}\n            >\n              キャンセル\n            </button>\n            <button \n              type=\"button\"\n              onClick={handleSave}\n              style={{\n                padding: '8px 16px',\n                backgroundColor: '#28a745',\n                color: 'white',\n                border: 'none',\n                borderRadius: '4px',\n                cursor: 'pointer'\n              }}\n              disabled={isLoading}\n            >\n              {isLoading ? '保存中...' : '変更を保存'}\n            </button>\n          </div>\n        )}\n        \n        {/* 入力方法のガイド表示 - 編集モード時のみ表示 */}\n        {actualIsEditing && (\n          <div style={{ marginTop: '15px', backgroundColor: '#f8f9fa', padding: '10px', borderRadius: '4px' }}>\n            <h4 style={{ margin: '0 0 8px 0', fontSize: '14px' }}>操作方法</h4>\n            <ul style={{ margin: '0', paddingLeft: '20px', fontSize: '13px' }}>\n              <li>HC: ヘッドカウント（頭数）を数値で入力してください。在籍中の場合は自動的にHC値が設定されます</li>\n              <li>月次ステータス: 自動的にHC値が設定されますが、必要に応じて変更できます (使用可能値: 0, 0.5, 1, 2)</li>\n              <li>採用日と状態に基づき、月次ステータスは自動的に計算されます</li>\n              <li>状態が「退職」の場合、退職した月以降の値はクリアされます</li>\n              <li>矢印キー（←→↑↓）で入力フィールド間を移動できます</li>\n              <li>変更後は「変更を保存」ボタンを押してください</li>\n            </ul>\n          </div>\n        )}\n      </div>\n\n      {/* CSVインポートモーダル */}\n      <EmployeeCSVImportModal\n        isOpen={isCSVImportModalOpen}\n        onClose={() => setIsCSVImportModalOpen(false)}\n        onImportSuccess={handleCSVImportSuccess}\n        fiscalYear={fiscalYear}\n      />\n    </div>\n  );\n};\n\nexport default EmployeesTab;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}