{"ast":null,"code":"import axios from 'axios';\n// APIのベースURLを設定\n// 開発環境ではproxy設定を使用するため'/api'を使用\n// 本番環境では環境変数からURLを取得\nconst API_BASE_URL = process.env.NODE_ENV === 'development' ? '/api' : process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\nconsole.log(`API クライアント初期化 - BaseURL: ${API_BASE_URL}, 環境: ${process.env.NODE_ENV}`);\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json' // JSON応答を明示的に要求\n  },\n  timeout: 15000,\n  // タイムアウトを15秒に設定（より長く）\n  validateStatus: status => {\n    // すべてのステータスコードをハンドリング（リジェクトしない）\n    return true;\n  }\n});\n\n// リクエストインターセプター（トークン付与など）\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('auth_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// レスポンスインターセプター（エラーハンドリングなど）\napiClient.interceptors.response.use(response => {\n  // JSON応答でない場合は警告を出す\n  const contentType = response.headers['content-type'] || '';\n  if (!contentType.includes('application/json') && response.status !== 204) {\n    console.warn('非JSONレスポンス:', {\n      url: response.config.url,\n      method: response.config.method,\n      status: response.status,\n      contentType: contentType\n    });\n  }\n  return response;\n}, error => {\n  // エラーオブジェクトが存在するか確認\n  if (!error) {\n    console.error('不明なエラーが発生しました（エラーオブジェクトなし）');\n    return Promise.reject(new Error('不明なエラーが発生しました'));\n  }\n\n  // HTML応答またはJSONパースエラーを検出\n  const isHtmlResponse = detectHtmlResponse(error);\n  const isJsonParseError = error.message && error.message.includes('Unexpected token');\n\n  // HTMLレスポンスの処理\n  if (isHtmlResponse) {\n    var _error$config, _error$config2, _error$response, _error$request, _error$response2;\n    console.error('HTML応答を検出:', {\n      url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url,\n      method: (_error$config2 = error.config) === null || _error$config2 === void 0 ? void 0 : _error$config2.method,\n      status: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) || 'unknown',\n      preview: (_error$request = error.request) !== null && _error$request !== void 0 && _error$request.responseText ? error.request.responseText.substring(0, 150) + '...' : '(レスポンステキストなし)'\n    });\n\n    // エラーオブジェクトの拡張\n    error.isHtmlResponse = true;\n    error.customMessage = 'サーバーがJSONの代わりにHTMLを返しました。APIエンドポイントが正しくないか、サーバーエラーが発生した可能性があります。';\n\n    // 404エラーの場合は明確なメッセージ\n    if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 404) {\n      var _error$config3;\n      error.customMessage = `リクエストされたAPIパス (${(_error$config3 = error.config) === null || _error$config3 === void 0 ? void 0 : _error$config3.url}) は存在しません。`;\n    }\n  }\n\n  // JSONパースエラーの処理（HTMLではない場合）\n  else if (isJsonParseError && !isHtmlResponse) {\n    console.error('JSONパースエラー:', error.message);\n    error.customMessage = 'レスポンスデータを解析できませんでした。サーバーが無効なJSONを返しました。';\n  }\n\n  // 認証エラー処理\n  if (error.response && error.response.status === 401) {\n    // 認証エラー時の処理（ログアウトなど）\n    localStorage.removeItem('auth_token');\n    window.location.href = '/login';\n  }\n\n  // エラーログ出力（開発環境のみ詳細表示）\n  if (process.env.NODE_ENV === 'development') {\n    var _error$config4, _error$config5, _error$response3, _error$response4, _error$response5;\n    console.error('API エラー:', {\n      url: (_error$config4 = error.config) === null || _error$config4 === void 0 ? void 0 : _error$config4.url,\n      method: (_error$config5 = error.config) === null || _error$config5 === void 0 ? void 0 : _error$config5.method,\n      status: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status,\n      statusText: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.statusText,\n      message: error.message,\n      customMessage: error.customMessage,\n      data: (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data\n    });\n  }\n  return Promise.reject(error);\n});\n\n// HTMLレスポンスを検出するヘルパー関数\nfunction detectHtmlResponse(error) {\n  var _error$request2, _error$response6, _error$response6$head;\n  // レスポンステキストからHTMLを検出\n  const hasHtmlContent = ((_error$request2 = error.request) === null || _error$request2 === void 0 ? void 0 : _error$request2.responseText) && (error.request.responseText.includes('<!DOCTYPE') || error.request.responseText.includes('<html') || error.request.responseText.includes('<!doctype') || error.request.responseText.includes('<HTML'));\n\n  // Content-Typeヘッダーからも検出\n  const contentType = ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$head = _error$response6.headers) === null || _error$response6$head === void 0 ? void 0 : _error$response6$head['content-type']) || '';\n  const hasHtmlContentType = contentType.includes('text/html');\n  return hasHtmlContent || hasHtmlContentType;\n}\nexport default apiClient;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","NODE_ENV","REACT_APP_API_URL","console","log","apiClient","create","baseURL","headers","timeout","validateStatus","status","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","contentType","includes","warn","url","method","Error","isHtmlResponse","detectHtmlResponse","isJsonParseError","message","_error$config","_error$config2","_error$response","_error$request","_error$response2","preview","responseText","substring","customMessage","_error$config3","removeItem","window","location","href","_error$config4","_error$config5","_error$response3","_error$response4","_error$response5","statusText","data","_error$request2","_error$response6","_error$response6$head","hasHtmlContent","hasHtmlContentType"],"sources":["/Users/gotouhiroaki/Programming/DAN_work/disability-employment-system/frontend/src/api/client.ts"],"sourcesContent":["import axios from 'axios';\nimport { checkControlVisibilityFromHeader, checkControlVisibilityFromData } from './yearMonthControlsHandler';\n\n// APIのベースURLを設定\n// 開発環境ではproxy設定を使用するため'/api'を使用\n// 本番環境では環境変数からURLを取得\nconst API_BASE_URL = process.env.NODE_ENV === 'development' \n  ? '/api' \n  : (process.env.REACT_APP_API_URL || 'http://localhost:5001/api');\n\nconsole.log(`API クライアント初期化 - BaseURL: ${API_BASE_URL}, 環境: ${process.env.NODE_ENV}`);\n\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'  // JSON応答を明示的に要求\n  },\n  timeout: 15000, // タイムアウトを15秒に設定（より長く）\n  validateStatus: (status) => {\n    // すべてのステータスコードをハンドリング（リジェクトしない）\n    return true; \n  }\n});\n\n// リクエストインターセプター（トークン付与など）\napiClient.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('auth_token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// レスポンスインターセプター（エラーハンドリングなど）\napiClient.interceptors.response.use(\n  (response) => {\n    // JSON応答でない場合は警告を出す\n    const contentType = response.headers['content-type'] || '';\n    if (!contentType.includes('application/json') && response.status !== 204) {\n      console.warn('非JSONレスポンス:', {\n        url: response.config.url,\n        method: response.config.method,\n        status: response.status,\n        contentType: contentType\n      });\n    }\n    return response;\n  },\n  (error) => {\n    // エラーオブジェクトが存在するか確認\n    if (!error) {\n      console.error('不明なエラーが発生しました（エラーオブジェクトなし）');\n      return Promise.reject(new Error('不明なエラーが発生しました'));\n    }\n\n    // HTML応答またはJSONパースエラーを検出\n    const isHtmlResponse = detectHtmlResponse(error);\n    const isJsonParseError = error.message && error.message.includes('Unexpected token');\n    \n    // HTMLレスポンスの処理\n    if (isHtmlResponse) {\n      console.error('HTML応答を検出:', {\n        url: error.config?.url,\n        method: error.config?.method,\n        status: error.response?.status || 'unknown',\n        preview: error.request?.responseText ? \n          error.request.responseText.substring(0, 150) + '...' : \n          '(レスポンステキストなし)'\n      });\n      \n      // エラーオブジェクトの拡張\n      error.isHtmlResponse = true;\n      error.customMessage = 'サーバーがJSONの代わりにHTMLを返しました。APIエンドポイントが正しくないか、サーバーエラーが発生した可能性があります。';\n      \n      // 404エラーの場合は明確なメッセージ\n      if (error.response?.status === 404) {\n        error.customMessage = `リクエストされたAPIパス (${error.config?.url}) は存在しません。`;\n      }\n    }\n    \n    // JSONパースエラーの処理（HTMLではない場合）\n    else if (isJsonParseError && !isHtmlResponse) {\n      console.error('JSONパースエラー:', error.message);\n      error.customMessage = 'レスポンスデータを解析できませんでした。サーバーが無効なJSONを返しました。';\n    }\n    \n    // 認証エラー処理\n    if (error.response && error.response.status === 401) {\n      // 認証エラー時の処理（ログアウトなど）\n      localStorage.removeItem('auth_token');\n      window.location.href = '/login';\n    }\n    \n    // エラーログ出力（開発環境のみ詳細表示）\n    if (process.env.NODE_ENV === 'development') {\n      console.error('API エラー:', {\n        url: error.config?.url,\n        method: error.config?.method,\n        status: error.response?.status,\n        statusText: error.response?.statusText,\n        message: error.message,\n        customMessage: error.customMessage,\n        data: error.response?.data\n      });\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\n// HTMLレスポンスを検出するヘルパー関数\nfunction detectHtmlResponse(error) {\n  // レスポンステキストからHTMLを検出\n  const hasHtmlContent = error.request?.responseText && \n    (error.request.responseText.includes('<!DOCTYPE') || \n     error.request.responseText.includes('<html') ||\n     error.request.responseText.includes('<!doctype') ||\n     error.request.responseText.includes('<HTML'));\n  \n  // Content-Typeヘッダーからも検出\n  const contentType = error.response?.headers?.['content-type'] || '';\n  const hasHtmlContentType = contentType.includes('text/html');\n  \n  return hasHtmlContent || hasHtmlContentType;\n}\n\nexport default apiClient;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}