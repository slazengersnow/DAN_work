{"ast":null,"code":"/**\n * 月次報告の対象年度セレクタを非表示にするスクリプト\n * - 月次報告画面の上部に表示されている年度選択部分を隠します\n * - MutationObserverの副作用を最小限に抑えて実装\n * - デバッグ情報を詳細に出力\n */\n(function () {\n  'use strict';\n\n  // デバッグログ用の関数\n  function logDebug(message) {\n    console.log('[YearSelectorHider] ' + message);\n  }\n  logDebug('スクリプトを開始します');\n\n  // 既存のMutationObserverを停止（存在する場合）\n  if (window._existingYearObserver && typeof window._existingYearObserver.disconnect === 'function') {\n    window._existingYearObserver.disconnect();\n    logDebug('既存のObserverを停止しました');\n  }\n\n  // 月次報告の年度セレクタを非表示にする関数\n  function hideMonthlyReportYearSelector() {\n    logDebug('月次報告の年度セレクタを探しています...');\n\n    // 特定方法1: 「年度:」ラベルを含む要素\n    const yearLabels = Array.from(document.querySelectorAll('label')).filter(el => el.textContent && el.textContent.includes('年度'));\n    if (yearLabels.length > 0) {\n      yearLabels.forEach(label => {\n        // 月次詳細タブの年度セレクタは非表示にしない\n        if (label.closest('.monthly-report-detail')) {\n          logDebug('月次詳細タブの年度セレクタは非表示にしません');\n          return;\n        }\n\n        // 親要素を取得（フォームグループ全体を非表示にするため）\n        const formGroup = label.closest('.form-group, .form-inline, .row');\n        if (formGroup) {\n          // 対象年度の入力グループ全体を非表示\n          formGroup.style.cssText = 'display: none !important; visibility: hidden !important;';\n          logDebug('年度ラベルの親要素を非表示にしました');\n          return true;\n        } else {\n          logDebug('年度ラベルの親要素が見つかりませんでした');\n        }\n      });\n    }\n\n    // 特定方法2: 「年度：」というテキストを含む div\n    const yearTexts = Array.from(document.querySelectorAll('div')).filter(el => el.textContent && el.textContent.includes('年度：'));\n    if (yearTexts.length > 0) {\n      yearTexts.forEach(text => {\n        // 月次詳細タブの要素は非表示にしない\n        if (text.closest('.monthly-report-detail')) {\n          logDebug('月次詳細タブの年度テキストは非表示にしません');\n          return;\n        }\n\n        // 最も近い親コンテナを非表示\n        const container = text.closest('.form-group, .row, .col, .control-group');\n        if (container) {\n          container.style.cssText = 'display: none !important; visibility: hidden !important;';\n          logDebug('「年度：」テキストのコンテナを非表示にしました');\n          return true;\n        } else {\n          // もし親コンテナが見つからない場合は要素自体を非表示\n          text.style.cssText = 'display: none !important; visibility: hidden !important;';\n          logDebug('「年度：」テキスト要素を直接非表示にしました');\n          return true;\n        }\n      });\n    }\n\n    // 特定方法3: 月次報告コンテナ内の最初のフォームグループ\n    const monthlyReportTitles = document.querySelectorAll('h1, h2, h3, h4');\n    for (const title of monthlyReportTitles) {\n      if (title.textContent && title.textContent.includes('月次報告')) {\n        const container = title.closest('.container, .content, .page');\n        if (container) {\n          const firstFormGroup = container.querySelector('.form-group, .form-row, .input-group');\n          if (firstFormGroup && firstFormGroup.textContent.includes('年度')) {\n            firstFormGroup.style.cssText = 'display: none !important; visibility: hidden !important;';\n            logDebug('月次報告内の最初のフォームグループを非表示にしました');\n            return true;\n          }\n        }\n      }\n    }\n\n    // 特定方法4: スタイルベースで追加の対応\n    const yearSelectors = document.querySelectorAll('select');\n    for (const selector of yearSelectors) {\n      // 月次詳細タブの年度セレクタは非表示にしない\n      if (selector.closest('.monthly-report-detail')) {\n        continue;\n      }\n\n      // selectの中に2024, 2025などの年号を含む選択肢があるか確認\n      const hasYearOptions = Array.from(selector.options || []).some(option => /20\\d\\d/.test(option.textContent || ''));\n      if (hasYearOptions) {\n        // 親要素を取得（フォームグループ全体を非表示にするため）\n        const container = selector.closest('.form-group, .row, .col');\n        if (container && container.textContent && container.textContent.includes('年度')) {\n          container.style.cssText = 'display: none !important; visibility: hidden !important;';\n          logDebug('年度選択肢を含むセレクトボックスのコンテナを非表示にしました');\n          return true;\n        }\n      }\n    }\n\n    // 特定方法5: 月次報告画面のトップパネル全体を非表示\n    const topPanel = document.querySelector('.monthly-report-container > div > div:nth-child(3)');\n    if (topPanel) {\n      topPanel.style.cssText = 'display: none !important; visibility: hidden !important;';\n      logDebug('月次報告の上部パネル全体を非表示にしました');\n      return true;\n    }\n\n    // 特定方法6: 月次報告ページの上部にある年度選択部分を特定\n    const monthlyReportContainer = document.querySelector('.monthly-report-container');\n    if (monthlyReportContainer) {\n      const yearSelectPanels = monthlyReportContainer.querySelectorAll('.row, .panel, .card');\n      for (const panel of yearSelectPanels) {\n        // パネル内に年度選択のセレクタがあるか確認\n        const hasYearSelect = panel.textContent && panel.textContent.includes('年度') && panel.querySelector('select');\n        if (hasYearSelect) {\n          panel.style.cssText = 'display: none !important; visibility: hidden !important;';\n          logDebug('月次報告の年度選択パネルを非表示にしました');\n          return true;\n        }\n      }\n    }\n    logDebug('非表示にする年度セレクタが見つかりませんでした');\n    return false;\n  }\n\n  // スタイルシートによる追加対策\n  function injectHidingStyles() {\n    // 既存のスタイル要素があれば再利用、なければ新規作成\n    let styleEl = document.getElementById('year-selector-hider-styles');\n    if (!styleEl) {\n      styleEl = document.createElement('style');\n      styleEl.id = 'year-selector-hider-styles';\n      document.head.appendChild(styleEl);\n    }\n\n    // CSS定義\n    styleEl.textContent = `\n      /* 月次レポート画面のトップパネルの年度セレクタを非表示 */\n      .monthly-report-container .monthly-tab select[value],\n      .monthly-report-container > div > div > div:first-child select[value] {\n        display: none !important;\n        visibility: hidden !important;\n      }\n      \n      /* 月次レポート画面のトップパネルを非表示 */\n      .monthly-report-container > div > div:nth-child(3) {\n        display: none !important;\n        visibility: hidden !important;\n      }\n      \n      /* 月次詳細タブの年度セレクタは表示する */\n      .monthly-report-detail select#fiscal-year-select {\n        display: inline-block !important;\n        visibility: visible !important;\n      }\n    `;\n    logDebug('非表示用CSSスタイルを注入しました');\n  }\n\n  // 初回実行\n  injectHidingStyles();\n  const result = hideMonthlyReportYearSelector();\n  logDebug(`初回実行結果: ${result ? '成功' : '要素が見つかりませんでした'}`);\n\n  // MutationObserverの設定\n  // デバウンス処理用の変数\n  let debounceTimer = null;\n  const observer = new MutationObserver(function (mutations) {\n    // 処理を間引く（デバウンス）\n    if (debounceTimer) {\n      clearTimeout(debounceTimer);\n    }\n    debounceTimer = setTimeout(() => {\n      // 重要な変更のみに反応するフィルタリング\n      let shouldUpdate = false;\n      for (const mutation of mutations) {\n        if (mutation.type === 'childList' && mutation.addedNodes.length) {\n          for (const node of mutation.addedNodes) {\n            if (node.nodeType === Node.ELEMENT_NODE) {\n              var _node$classList, _node$querySelector, _node$classList2, _node$querySelector2;\n              // タブやコンテナの追加のみに反応\n              if ((_node$classList = node.classList) !== null && _node$classList !== void 0 && _node$classList.contains('tab-pane') || (_node$querySelector = node.querySelector) !== null && _node$querySelector !== void 0 && _node$querySelector.call(node, '.tab-pane') || (_node$classList2 = node.classList) !== null && _node$classList2 !== void 0 && _node$classList2.contains('monthly-report-container') || (_node$querySelector2 = node.querySelector) !== null && _node$querySelector2 !== void 0 && _node$querySelector2.call(node, 'select')) {\n                shouldUpdate = true;\n                break;\n              }\n            }\n          }\n        }\n        if (shouldUpdate) break;\n      }\n      if (shouldUpdate) {\n        logDebug('重要なDOM変更を検出しました - 年度セレクタの非表示処理を再実行します');\n        hideMonthlyReportYearSelector();\n      }\n    }, 500); // 500ms以内の連続した変更をまとめて処理\n  });\n\n  // 監視設定（ページ全体、子要素の追加のみ監視）\n  observer.observe(document.body, {\n    childList: true,\n    subtree: true,\n    attributes: false // 属性変更は監視しない\n  });\n\n  // グローバル変数に保存（後で停止できるように）\n  window._existingYearObserver = observer;\n\n  // タブ切り替えイベントでの処理\n  document.addEventListener('click', function (e) {\n    // タブのクリックを検出\n    if (e.target.classList.contains('nav-link') || e.target.closest && e.target.closest('.nav-link')) {\n      logDebug('タブ切り替えを検出しました');\n      // タブ切り替え後に少し遅延させて実行\n      setTimeout(() => {\n        hideMonthlyReportYearSelector();\n        // 念のためスタイルも再注入\n        injectHidingStyles();\n      }, 300);\n    }\n  });\n\n  // ページ読み込み完了時の処理\n  window.addEventListener('load', function () {\n    logDebug('ページ読み込み完了時の処理を実行します');\n    hideMonthlyReportYearSelector();\n    injectHidingStyles();\n  });\n  logDebug('月次報告の対象年度セレクタを非表示にするスクリプトを設定しました');\n})();","map":{"version":3,"names":["logDebug","message","console","log","window","_existingYearObserver","disconnect","hideMonthlyReportYearSelector","yearLabels","Array","from","document","querySelectorAll","filter","el","textContent","includes","length","forEach","label","closest","formGroup","style","cssText","yearTexts","text","container","monthlyReportTitles","title","firstFormGroup","querySelector","yearSelectors","selector","hasYearOptions","options","some","option","test","topPanel","monthlyReportContainer","yearSelectPanels","panel","hasYearSelect","injectHidingStyles","styleEl","getElementById","createElement","id","head","appendChild","result","debounceTimer","observer","MutationObserver","mutations","clearTimeout","setTimeout","shouldUpdate","mutation","type","addedNodes","node","nodeType","Node","ELEMENT_NODE","_node$classList","_node$querySelector","_node$classList2","_node$querySelector2","classList","contains","call","observe","body","childList","subtree","attributes","addEventListener","e","target"],"sources":["/Users/gotouhiroaki/Programming/DAN_work/disability-employment-system/frontend/src/pages/MonthlyReport/YearSelectorHider.js"],"sourcesContent":["/**\n * 月次報告の対象年度セレクタを非表示にするスクリプト\n * - 月次報告画面の上部に表示されている年度選択部分を隠します\n * - MutationObserverの副作用を最小限に抑えて実装\n * - デバッグ情報を詳細に出力\n */\n(function() {\n  'use strict';\n  \n  // デバッグログ用の関数\n  function logDebug(message) {\n    console.log('[YearSelectorHider] ' + message);\n  }\n\n  logDebug('スクリプトを開始します');\n\n  // 既存のMutationObserverを停止（存在する場合）\n  if (window._existingYearObserver && typeof window._existingYearObserver.disconnect === 'function') {\n    window._existingYearObserver.disconnect();\n    logDebug('既存のObserverを停止しました');\n  }\n\n  // 月次報告の年度セレクタを非表示にする関数\n  function hideMonthlyReportYearSelector() {\n    logDebug('月次報告の年度セレクタを探しています...');\n    \n    // 特定方法1: 「年度:」ラベルを含む要素\n    const yearLabels = Array.from(document.querySelectorAll('label')).filter(el => \n      el.textContent && el.textContent.includes('年度'));\n    \n    if (yearLabels.length > 0) {\n      yearLabels.forEach(label => {\n        // 月次詳細タブの年度セレクタは非表示にしない\n        if (label.closest('.monthly-report-detail')) {\n          logDebug('月次詳細タブの年度セレクタは非表示にしません');\n          return;\n        }\n        \n        // 親要素を取得（フォームグループ全体を非表示にするため）\n        const formGroup = label.closest('.form-group, .form-inline, .row');\n        if (formGroup) {\n          // 対象年度の入力グループ全体を非表示\n          formGroup.style.cssText = 'display: none !important; visibility: hidden !important;';\n          logDebug('年度ラベルの親要素を非表示にしました');\n          return true;\n        } else {\n          logDebug('年度ラベルの親要素が見つかりませんでした');\n        }\n      });\n    }\n    \n    // 特定方法2: 「年度：」というテキストを含む div\n    const yearTexts = Array.from(document.querySelectorAll('div')).filter(el => \n      el.textContent && el.textContent.includes('年度：'));\n    \n    if (yearTexts.length > 0) {\n      yearTexts.forEach(text => {\n        // 月次詳細タブの要素は非表示にしない\n        if (text.closest('.monthly-report-detail')) {\n          logDebug('月次詳細タブの年度テキストは非表示にしません');\n          return;\n        }\n        \n        // 最も近い親コンテナを非表示\n        const container = text.closest('.form-group, .row, .col, .control-group');\n        if (container) {\n          container.style.cssText = 'display: none !important; visibility: hidden !important;';\n          logDebug('「年度：」テキストのコンテナを非表示にしました');\n          return true;\n        } else {\n          // もし親コンテナが見つからない場合は要素自体を非表示\n          text.style.cssText = 'display: none !important; visibility: hidden !important;';\n          logDebug('「年度：」テキスト要素を直接非表示にしました');\n          return true;\n        }\n      });\n    }\n    \n    // 特定方法3: 月次報告コンテナ内の最初のフォームグループ\n    const monthlyReportTitles = document.querySelectorAll('h1, h2, h3, h4');\n    for (const title of monthlyReportTitles) {\n      if (title.textContent && title.textContent.includes('月次報告')) {\n        const container = title.closest('.container, .content, .page');\n        if (container) {\n          const firstFormGroup = container.querySelector('.form-group, .form-row, .input-group');\n          if (firstFormGroup && firstFormGroup.textContent.includes('年度')) {\n            firstFormGroup.style.cssText = 'display: none !important; visibility: hidden !important;';\n            logDebug('月次報告内の最初のフォームグループを非表示にしました');\n            return true;\n          }\n        }\n      }\n    }\n    \n    // 特定方法4: スタイルベースで追加の対応\n    const yearSelectors = document.querySelectorAll('select');\n    for (const selector of yearSelectors) {\n      // 月次詳細タブの年度セレクタは非表示にしない\n      if (selector.closest('.monthly-report-detail')) {\n        continue;\n      }\n      \n      // selectの中に2024, 2025などの年号を含む選択肢があるか確認\n      const hasYearOptions = Array.from(selector.options || []).some(option => \n        /20\\d\\d/.test(option.textContent || '')\n      );\n      \n      if (hasYearOptions) {\n        // 親要素を取得（フォームグループ全体を非表示にするため）\n        const container = selector.closest('.form-group, .row, .col');\n        if (container && container.textContent && container.textContent.includes('年度')) {\n          container.style.cssText = 'display: none !important; visibility: hidden !important;';\n          logDebug('年度選択肢を含むセレクトボックスのコンテナを非表示にしました');\n          return true;\n        }\n      }\n    }\n    \n    // 特定方法5: 月次報告画面のトップパネル全体を非表示\n    const topPanel = document.querySelector('.monthly-report-container > div > div:nth-child(3)');\n    if (topPanel) {\n      topPanel.style.cssText = 'display: none !important; visibility: hidden !important;';\n      logDebug('月次報告の上部パネル全体を非表示にしました');\n      return true;\n    }\n    \n    // 特定方法6: 月次報告ページの上部にある年度選択部分を特定\n    const monthlyReportContainer = document.querySelector('.monthly-report-container');\n    if (monthlyReportContainer) {\n      const yearSelectPanels = monthlyReportContainer.querySelectorAll('.row, .panel, .card');\n      for (const panel of yearSelectPanels) {\n        // パネル内に年度選択のセレクタがあるか確認\n        const hasYearSelect = panel.textContent && panel.textContent.includes('年度') && \n                             panel.querySelector('select');\n        \n        if (hasYearSelect) {\n          panel.style.cssText = 'display: none !important; visibility: hidden !important;';\n          logDebug('月次報告の年度選択パネルを非表示にしました');\n          return true;\n        }\n      }\n    }\n    \n    logDebug('非表示にする年度セレクタが見つかりませんでした');\n    return false;\n  }\n  \n  // スタイルシートによる追加対策\n  function injectHidingStyles() {\n    // 既存のスタイル要素があれば再利用、なければ新規作成\n    let styleEl = document.getElementById('year-selector-hider-styles');\n    if (!styleEl) {\n      styleEl = document.createElement('style');\n      styleEl.id = 'year-selector-hider-styles';\n      document.head.appendChild(styleEl);\n    }\n    \n    // CSS定義\n    styleEl.textContent = `\n      /* 月次レポート画面のトップパネルの年度セレクタを非表示 */\n      .monthly-report-container .monthly-tab select[value],\n      .monthly-report-container > div > div > div:first-child select[value] {\n        display: none !important;\n        visibility: hidden !important;\n      }\n      \n      /* 月次レポート画面のトップパネルを非表示 */\n      .monthly-report-container > div > div:nth-child(3) {\n        display: none !important;\n        visibility: hidden !important;\n      }\n      \n      /* 月次詳細タブの年度セレクタは表示する */\n      .monthly-report-detail select#fiscal-year-select {\n        display: inline-block !important;\n        visibility: visible !important;\n      }\n    `;\n    \n    logDebug('非表示用CSSスタイルを注入しました');\n  }\n\n  // 初回実行\n  injectHidingStyles();\n  const result = hideMonthlyReportYearSelector();\n  logDebug(`初回実行結果: ${result ? '成功' : '要素が見つかりませんでした'}`);\n\n  // MutationObserverの設定\n  // デバウンス処理用の変数\n  let debounceTimer = null;\n  \n  const observer = new MutationObserver(function(mutations) {\n    // 処理を間引く（デバウンス）\n    if (debounceTimer) {\n      clearTimeout(debounceTimer);\n    }\n    \n    debounceTimer = setTimeout(() => {\n      // 重要な変更のみに反応するフィルタリング\n      let shouldUpdate = false;\n      \n      for (const mutation of mutations) {\n        if (mutation.type === 'childList' && mutation.addedNodes.length) {\n          for (const node of mutation.addedNodes) {\n            if (node.nodeType === Node.ELEMENT_NODE) {\n              // タブやコンテナの追加のみに反応\n              if (\n                node.classList?.contains('tab-pane') || \n                node.querySelector?.('.tab-pane') ||\n                node.classList?.contains('monthly-report-container') ||\n                node.querySelector?.('select')\n              ) {\n                shouldUpdate = true;\n                break;\n              }\n            }\n          }\n        }\n        \n        if (shouldUpdate) break;\n      }\n      \n      if (shouldUpdate) {\n        logDebug('重要なDOM変更を検出しました - 年度セレクタの非表示処理を再実行します');\n        hideMonthlyReportYearSelector();\n      }\n    }, 500); // 500ms以内の連続した変更をまとめて処理\n  });\n\n  // 監視設定（ページ全体、子要素の追加のみ監視）\n  observer.observe(document.body, {\n    childList: true,\n    subtree: true,\n    attributes: false // 属性変更は監視しない\n  });\n\n  // グローバル変数に保存（後で停止できるように）\n  window._existingYearObserver = observer;\n  \n  // タブ切り替えイベントでの処理\n  document.addEventListener('click', function(e) {\n    // タブのクリックを検出\n    if (e.target.classList.contains('nav-link') || \n        (e.target.closest && e.target.closest('.nav-link'))) {\n      logDebug('タブ切り替えを検出しました');\n      // タブ切り替え後に少し遅延させて実行\n      setTimeout(() => {\n        hideMonthlyReportYearSelector();\n        // 念のためスタイルも再注入\n        injectHidingStyles();\n      }, 300);\n    }\n  });\n\n  // ページ読み込み完了時の処理\n  window.addEventListener('load', function() {\n    logDebug('ページ読み込み完了時の処理を実行します');\n    hideMonthlyReportYearSelector();\n    injectHidingStyles();\n  });\n\n  logDebug('月次報告の対象年度セレクタを非表示にするスクリプトを設定しました');\n})();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}