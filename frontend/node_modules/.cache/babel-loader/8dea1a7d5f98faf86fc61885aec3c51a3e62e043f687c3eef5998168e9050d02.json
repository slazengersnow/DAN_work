{"ast":null,"code":"/**\n * 従業員詳細画面の年度表示を最適化するスクリプト\n * - 重複している年度表示を削除\n * - 右側に適切な対象年度セレクタを追加\n * - 月次詳細と同様のレイアウトに調整\n */\n(function () {\n  'use strict';\n\n  // デバッグログ用の関数\n  function logDebug(message) {\n    console.log('[EmployeeDetailFix] ' + message);\n  }\n  logDebug('スクリプト実行開始');\n\n  // 既存のObserverを停止（重複実行防止）\n  if (window._employeeYearFixObserver && typeof window._employeeYearFixObserver.disconnect === 'function') {\n    window._employeeYearFixObserver.disconnect();\n    logDebug('既存のObserverを停止しました');\n  }\n\n  // 従業員詳細画面の年度表示を修正する関数\n  function fixEmployeeDetailYearDisplay() {\n    // 従業員詳細画面が表示されているか確認\n    const employeeDetailHeading = Array.from(document.querySelectorAll('h2, h3, h4')).find(el => el.textContent && el.textContent.includes('従業員詳細'));\n    if (!employeeDetailHeading) {\n      // 従業員詳細タブが選択されているか確認（別の方法）\n      const activeTab = document.querySelector('.nav-link.active');\n      if (!activeTab || activeTab.textContent && !activeTab.textContent.includes('従業員詳細')) {\n        logDebug('従業員詳細画面が表示されていません');\n        return false;\n      }\n    }\n    logDebug('従業員詳細画面を検出しました');\n\n    // すでに修正済みかチェック\n    if (document.querySelector('.employee-year-fixed')) {\n      logDebug('すでに修正済みです');\n      return true;\n    }\n\n    // 重複している年度ラベルを非表示にする\n    const duplicateYearLabels = Array.from(document.querySelectorAll('label, div')).filter(el => el.textContent && (el.textContent.includes('年度:') || el.textContent.includes('対象年度:') || el.textContent.includes('年度')) && el.closest('.employee-detail, [class*=\"employee\"], .employee-year-selector-fixed'));\n    duplicateYearLabels.forEach(label => {\n      // 他のスクリプトで追加されたセレクタも含めて確認\n      const container = label.closest('.form-group, .row, .col, [class*=\"group\"], .employee-year-selector-fixed');\n      if (container) {\n        // 表示されたままにしたい要素でないことを確認\n        if (!container.classList.contains('employee-year-fixed')) {\n          container.style.cssText = 'display: none !important;';\n          logDebug('重複している年度ラベルを非表示にしました: ' + (label.textContent || '').trim());\n        }\n      }\n    });\n\n    // ツールバー領域を検出\n    const toolbarCandidates = [document.querySelector('.btn-group, .toolbar, .action-buttons'), document.querySelector('button[class*=\"csv\"], button'), document.querySelector('button[class*=\"edit\"], button')].filter(Boolean).map(el => el.closest('.row, .col, .container') || el.parentElement);\n    let toolbar = toolbarCandidates[0];\n    if (!toolbar) {\n      logDebug('ツールバー領域が見つかりませんでした');\n      return false;\n    }\n\n    // 年度セレクタコンテナを作成\n    const yearContainer = document.createElement('div');\n    yearContainer.className = 'employee-year-fixed';\n    yearContainer.style.cssText = 'display: flex; align-items: center; justify-content: flex-end; margin-bottom: 15px; margin-top: 5px;';\n\n    // 現在の年を取得\n    const currentYear = new Date().getFullYear();\n\n    // 年度セレクタの内容を作成（右揃えで配置）\n    yearContainer.innerHTML = `\n      <div style=\"margin-left: auto; display: flex; align-items: center;\">\n        <label style=\"margin-right: 8px; margin-bottom: 0; font-weight: normal;\">対象年度:</label>\n        <select class=\"form-control form-control-sm\" style=\"width: auto; display: inline-block; padding: 4px 8px; height: auto;\">\n          <option value=\"${currentYear - 2}\">${currentYear - 2}年度</option>\n          <option value=\"${currentYear - 1}\">${currentYear - 1}年度</option>\n          <option value=\"${currentYear}\" selected>${currentYear}年度</option>\n          <option value=\"${currentYear + 1}\">${currentYear + 1}年度</option>\n        </select>\n      </div>\n    `;\n\n    // 最適な挿入位置を探す\n    // 方法1: テーブルやタブセクションの前\n    const insertBeforeElement = document.querySelector('.employee-detail table, .employee-list, .data-table, .tab-content, .nav-tabs');\n\n    // 方法2: ツールバーの親要素の次\n    const parentRow = toolbar.closest('.row, .container') || toolbar.parentElement;\n\n    // 方法3: 見出しの後\n    const headingElement = document.querySelector('h2:contains(\"従業員詳細\"), h3:contains(\"従業員詳細\")');\n    if (insertBeforeElement) {\n      // テーブルやタブセクションの前に挿入\n      insertBeforeElement.parentElement.insertBefore(yearContainer, insertBeforeElement);\n      logDebug('テーブル/タブの前に年度セレクタを挿入しました');\n    } else if (parentRow) {\n      // ツールバーの後に挿入\n      if (parentRow.nextSibling) {\n        parentRow.parentElement.insertBefore(yearContainer, parentRow.nextSibling);\n      } else {\n        parentRow.parentElement.appendChild(yearContainer);\n      }\n      logDebug('ツールバーの後に年度セレクタを挿入しました');\n    } else if (headingElement && headingElement.nextSibling) {\n      // 見出しの後に挿入\n      headingElement.parentElement.insertBefore(yearContainer, headingElement.nextSibling);\n      logDebug('見出しの後に年度セレクタを挿入しました');\n    } else {\n      // 最終手段: bodyの先頭に追加\n      const mainContent = document.querySelector('main, .main-content, .content');\n      if (mainContent) {\n        if (mainContent.firstChild) {\n          mainContent.insertBefore(yearContainer, mainContent.firstChild);\n        } else {\n          mainContent.appendChild(yearContainer);\n        }\n        logDebug('メインコンテンツに年度セレクタを挿入しました');\n      } else {\n        // どうしても挿入先が見つからない場合\n        document.body.appendChild(yearContainer);\n        logDebug('ボディに年度セレクタを挿入しました');\n      }\n    }\n\n    // イベントリスナーを追加\n    const select = yearContainer.querySelector('select');\n    if (select) {\n      select.addEventListener('change', function (e) {\n        logDebug(`年度が変更されました: ${e.target.value}`);\n\n        // 年度変更イベントの発行（他のコンポーネントが購読可能）\n        const yearChangeEvent = new CustomEvent('employeeYearChanged', {\n          detail: {\n            year: parseInt(e.target.value, 10),\n            yearText: `${e.target.value}年度`\n          },\n          bubbles: true\n        });\n        document.dispatchEvent(yearChangeEvent);\n\n        // UIフィードバック\n        const yearText = document.createElement('span');\n        yearText.className = 'year-change-notification';\n        yearText.textContent = `${e.target.value}年度のデータを表示します`;\n        yearText.style.cssText = 'color: #3a66d4; margin-left: 10px; font-weight: bold; opacity: 0; transition: opacity 0.3s;';\n\n        // 既存の通知を削除\n        const existingNotification = document.querySelector('.year-change-notification');\n        if (existingNotification) {\n          existingNotification.remove();\n        }\n\n        // 新しい通知を追加\n        yearContainer.querySelector('div').appendChild(yearText);\n\n        // アニメーション効果\n        setTimeout(() => {\n          yearText.style.opacity = '1';\n\n          // 3秒後にフェードアウト\n          setTimeout(() => {\n            yearText.style.opacity = '0';\n\n            // フェードアウト後に削除\n            setTimeout(() => {\n              if (yearText.parentNode) yearText.parentNode.removeChild(yearText);\n            }, 300);\n          }, 3000);\n        }, 10);\n      });\n    }\n    logDebug('従業員詳細の年度表示を修正しました');\n    return true;\n  }\n\n  // 初回実行\n  setTimeout(() => {\n    const result = fixEmployeeDetailYearDisplay();\n    logDebug(`初回実行結果: ${result ? '成功' : '失敗'}`);\n  }, 500);\n\n  // MutationObserverの設定\n  // デバウンス処理用の変数\n  let debounceTimer = null;\n  const observer = new MutationObserver(function (mutations) {\n    // 処理を間引く（デバウンス）\n    if (debounceTimer) {\n      clearTimeout(debounceTimer);\n    }\n    debounceTimer = setTimeout(() => {\n      // 重要な変更のみに反応\n      let shouldUpdate = false;\n      for (const mutation of mutations) {\n        var _mutation$target$clas;\n        // 要素追加の場合\n        if (mutation.type === 'childList' && mutation.addedNodes.length) {\n          for (const node of mutation.addedNodes) {\n            if (node.nodeType === Node.ELEMENT_NODE) {\n              var _node$classList, _node$classList2, _node$querySelector;\n              // 従業員詳細関連の要素か確認\n              if (node.textContent && node.textContent.includes('従業員詳細') || (_node$classList = node.classList) !== null && _node$classList !== void 0 && _node$classList.contains('tab-pane') || (_node$classList2 = node.classList) !== null && _node$classList2 !== void 0 && _node$classList2.contains('employee-detail') || (_node$querySelector = node.querySelector) !== null && _node$querySelector !== void 0 && _node$querySelector.call(node, '.employee-detail, h2, h3, h4, button')) {\n                shouldUpdate = true;\n                break;\n              }\n            }\n          }\n        }\n\n        // タブの切り替わりなど属性変更の場合\n        if (mutation.type === 'attributes' && mutation.attributeName === 'class' && (_mutation$target$clas = mutation.target.classList) !== null && _mutation$target$clas !== void 0 && _mutation$target$clas.contains('active')) {\n          shouldUpdate = true;\n        }\n        if (shouldUpdate) break;\n      }\n      if (shouldUpdate) {\n        logDebug('重要なDOM変更を検出しました');\n        fixEmployeeDetailYearDisplay();\n      }\n    }, 300); // 300ms以内の連続した変更をまとめて処理\n  });\n\n  // 監視設定（ページ全体、子要素の追加と属性変更を監視）\n  observer.observe(document.body, {\n    childList: true,\n    subtree: true,\n    attributes: true,\n    // タブの active 状態変化を検出するため属性変更も監視\n    attributeFilter: ['class'] // クラス属性の変更のみ監視\n  });\n\n  // グローバル変数に保存（後で停止できるように）\n  window._employeeYearFixObserver = observer;\n\n  // タブ切り替えイベントでの処理\n  document.addEventListener('click', function (e) {\n    var _e$target$classList;\n    // タブのクリックを検出\n    if ((_e$target$classList = e.target.classList) !== null && _e$target$classList !== void 0 && _e$target$classList.contains('nav-link') || e.target.closest && e.target.closest('.nav-link')) {\n      logDebug('タブ切り替えを検出しました');\n\n      // タブ切り替え後に少し遅延させて実行\n      setTimeout(() => {\n        // クリックされたのが従業員詳細タブかチェック\n        const targetElement = e.target.closest('.nav-link') || e.target;\n        const isEmployeeTab = targetElement.textContent && (targetElement.textContent.includes('従業員詳細') || targetElement.textContent.includes('従業員'));\n        if (isEmployeeTab) {\n          logDebug('従業員詳細タブがクリックされました');\n          fixEmployeeDetailYearDisplay();\n        }\n      }, 300);\n    }\n  });\n\n  // URL変更の検出（ページ遷移）\n  let lastUrl = window.location.href;\n  new MutationObserver(() => {\n    const url = window.location.href;\n    if (url !== lastUrl) {\n      lastUrl = url;\n      logDebug('URL変更を検出しました');\n\n      // URLが従業員詳細を含むか確認\n      if (url.includes('employee') || url.includes('staff')) {\n        setTimeout(fixEmployeeDetailYearDisplay, 500);\n      }\n    }\n  }).observe(document, {\n    subtree: true,\n    childList: true\n  });\n\n  // ページ読み込み完了時の処理\n  window.addEventListener('load', function () {\n    logDebug('ページ読み込み完了');\n    setTimeout(fixEmployeeDetailYearDisplay, 300);\n  });\n  logDebug('従業員詳細の年度表示修正スクリプトを設定しました');\n})();","map":{"version":3,"names":["logDebug","message","console","log","window","_employeeYearFixObserver","disconnect","fixEmployeeDetailYearDisplay","employeeDetailHeading","Array","from","document","querySelectorAll","find","el","textContent","includes","activeTab","querySelector","duplicateYearLabels","filter","closest","forEach","label","container","classList","contains","style","cssText","trim","toolbarCandidates","Boolean","map","parentElement","toolbar","yearContainer","createElement","className","currentYear","Date","getFullYear","innerHTML","insertBeforeElement","parentRow","headingElement","insertBefore","nextSibling","appendChild","mainContent","firstChild","body","select","addEventListener","e","target","value","yearChangeEvent","CustomEvent","detail","year","parseInt","yearText","bubbles","dispatchEvent","existingNotification","remove","setTimeout","opacity","parentNode","removeChild","result","debounceTimer","observer","MutationObserver","mutations","clearTimeout","shouldUpdate","mutation","_mutation$target$clas","type","addedNodes","length","node","nodeType","Node","ELEMENT_NODE","_node$classList","_node$classList2","_node$querySelector","call","attributeName","observe","childList","subtree","attributes","attributeFilter","_e$target$classList","targetElement","isEmployeeTab","lastUrl","location","href","url"],"sources":["/Users/gotouhiroaki/Programming/DAN_work/disability-employment-system/frontend/src/pages/EmployeeDetail/EmployeeYearDisplayFix.js"],"sourcesContent":["/**\n * 従業員詳細画面の年度表示を最適化するスクリプト\n * - 重複している年度表示を削除\n * - 右側に適切な対象年度セレクタを追加\n * - 月次詳細と同様のレイアウトに調整\n */\n(function() {\n  'use strict';\n  \n  // デバッグログ用の関数\n  function logDebug(message) {\n    console.log('[EmployeeDetailFix] ' + message);\n  }\n\n  logDebug('スクリプト実行開始');\n\n  // 既存のObserverを停止（重複実行防止）\n  if (window._employeeYearFixObserver && typeof window._employeeYearFixObserver.disconnect === 'function') {\n    window._employeeYearFixObserver.disconnect();\n    logDebug('既存のObserverを停止しました');\n  }\n\n  // 従業員詳細画面の年度表示を修正する関数\n  function fixEmployeeDetailYearDisplay() {\n    // 従業員詳細画面が表示されているか確認\n    const employeeDetailHeading = Array.from(document.querySelectorAll('h2, h3, h4')).find(el => \n      el.textContent && el.textContent.includes('従業員詳細'));\n    \n    if (!employeeDetailHeading) {\n      // 従業員詳細タブが選択されているか確認（別の方法）\n      const activeTab = document.querySelector('.nav-link.active');\n      if (!activeTab || (activeTab.textContent && !activeTab.textContent.includes('従業員詳細'))) {\n        logDebug('従業員詳細画面が表示されていません');\n        return false;\n      }\n    }\n    \n    logDebug('従業員詳細画面を検出しました');\n    \n    // すでに修正済みかチェック\n    if (document.querySelector('.employee-year-fixed')) {\n      logDebug('すでに修正済みです');\n      return true;\n    }\n    \n    // 重複している年度ラベルを非表示にする\n    const duplicateYearLabels = Array.from(document.querySelectorAll('label, div')).filter(el => \n      el.textContent && \n      (el.textContent.includes('年度:') || el.textContent.includes('対象年度:') || el.textContent.includes('年度')) &&\n      el.closest('.employee-detail, [class*=\"employee\"], .employee-year-selector-fixed')\n    );\n    \n    duplicateYearLabels.forEach(label => {\n      // 他のスクリプトで追加されたセレクタも含めて確認\n      const container = label.closest('.form-group, .row, .col, [class*=\"group\"], .employee-year-selector-fixed');\n      if (container) {\n        // 表示されたままにしたい要素でないことを確認\n        if (!container.classList.contains('employee-year-fixed')) {\n          container.style.cssText = 'display: none !important;';\n          logDebug('重複している年度ラベルを非表示にしました: ' + (label.textContent || '').trim());\n        }\n      }\n    });\n    \n    // ツールバー領域を検出\n    const toolbarCandidates = [\n      document.querySelector('.btn-group, .toolbar, .action-buttons'),\n      document.querySelector('button[class*=\"csv\"], button'),\n      document.querySelector('button[class*=\"edit\"], button')\n    ].filter(Boolean).map(el => el.closest('.row, .col, .container') || el.parentElement);\n    \n    let toolbar = toolbarCandidates[0];\n    \n    if (!toolbar) {\n      logDebug('ツールバー領域が見つかりませんでした');\n      return false;\n    }\n    \n    // 年度セレクタコンテナを作成\n    const yearContainer = document.createElement('div');\n    yearContainer.className = 'employee-year-fixed';\n    yearContainer.style.cssText = 'display: flex; align-items: center; justify-content: flex-end; margin-bottom: 15px; margin-top: 5px;';\n    \n    // 現在の年を取得\n    const currentYear = new Date().getFullYear();\n    \n    // 年度セレクタの内容を作成（右揃えで配置）\n    yearContainer.innerHTML = `\n      <div style=\"margin-left: auto; display: flex; align-items: center;\">\n        <label style=\"margin-right: 8px; margin-bottom: 0; font-weight: normal;\">対象年度:</label>\n        <select class=\"form-control form-control-sm\" style=\"width: auto; display: inline-block; padding: 4px 8px; height: auto;\">\n          <option value=\"${currentYear-2}\">${currentYear-2}年度</option>\n          <option value=\"${currentYear-1}\">${currentYear-1}年度</option>\n          <option value=\"${currentYear}\" selected>${currentYear}年度</option>\n          <option value=\"${currentYear+1}\">${currentYear+1}年度</option>\n        </select>\n      </div>\n    `;\n    \n    // 最適な挿入位置を探す\n    // 方法1: テーブルやタブセクションの前\n    const insertBeforeElement = document.querySelector('.employee-detail table, .employee-list, .data-table, .tab-content, .nav-tabs');\n    \n    // 方法2: ツールバーの親要素の次\n    const parentRow = toolbar.closest('.row, .container') || toolbar.parentElement;\n    \n    // 方法3: 見出しの後\n    const headingElement = document.querySelector('h2:contains(\"従業員詳細\"), h3:contains(\"従業員詳細\")');\n    \n    if (insertBeforeElement) {\n      // テーブルやタブセクションの前に挿入\n      insertBeforeElement.parentElement.insertBefore(yearContainer, insertBeforeElement);\n      logDebug('テーブル/タブの前に年度セレクタを挿入しました');\n    } else if (parentRow) {\n      // ツールバーの後に挿入\n      if (parentRow.nextSibling) {\n        parentRow.parentElement.insertBefore(yearContainer, parentRow.nextSibling);\n      } else {\n        parentRow.parentElement.appendChild(yearContainer);\n      }\n      logDebug('ツールバーの後に年度セレクタを挿入しました');\n    } else if (headingElement && headingElement.nextSibling) {\n      // 見出しの後に挿入\n      headingElement.parentElement.insertBefore(yearContainer, headingElement.nextSibling);\n      logDebug('見出しの後に年度セレクタを挿入しました');\n    } else {\n      // 最終手段: bodyの先頭に追加\n      const mainContent = document.querySelector('main, .main-content, .content');\n      if (mainContent) {\n        if (mainContent.firstChild) {\n          mainContent.insertBefore(yearContainer, mainContent.firstChild);\n        } else {\n          mainContent.appendChild(yearContainer);\n        }\n        logDebug('メインコンテンツに年度セレクタを挿入しました');\n      } else {\n        // どうしても挿入先が見つからない場合\n        document.body.appendChild(yearContainer);\n        logDebug('ボディに年度セレクタを挿入しました');\n      }\n    }\n    \n    // イベントリスナーを追加\n    const select = yearContainer.querySelector('select');\n    if (select) {\n      select.addEventListener('change', function(e) {\n        logDebug(`年度が変更されました: ${e.target.value}`);\n        \n        // 年度変更イベントの発行（他のコンポーネントが購読可能）\n        const yearChangeEvent = new CustomEvent('employeeYearChanged', {\n          detail: { \n            year: parseInt(e.target.value, 10),\n            yearText: `${e.target.value}年度`\n          },\n          bubbles: true\n        });\n        document.dispatchEvent(yearChangeEvent);\n        \n        // UIフィードバック\n        const yearText = document.createElement('span');\n        yearText.className = 'year-change-notification';\n        yearText.textContent = `${e.target.value}年度のデータを表示します`;\n        yearText.style.cssText = 'color: #3a66d4; margin-left: 10px; font-weight: bold; opacity: 0; transition: opacity 0.3s;';\n        \n        // 既存の通知を削除\n        const existingNotification = document.querySelector('.year-change-notification');\n        if (existingNotification) {\n          existingNotification.remove();\n        }\n        \n        // 新しい通知を追加\n        yearContainer.querySelector('div').appendChild(yearText);\n        \n        // アニメーション効果\n        setTimeout(() => {\n          yearText.style.opacity = '1';\n          \n          // 3秒後にフェードアウト\n          setTimeout(() => {\n            yearText.style.opacity = '0';\n            \n            // フェードアウト後に削除\n            setTimeout(() => {\n              if (yearText.parentNode) yearText.parentNode.removeChild(yearText);\n            }, 300);\n          }, 3000);\n        }, 10);\n      });\n    }\n    \n    logDebug('従業員詳細の年度表示を修正しました');\n    return true;\n  }\n\n  // 初回実行\n  setTimeout(() => {\n    const result = fixEmployeeDetailYearDisplay();\n    logDebug(`初回実行結果: ${result ? '成功' : '失敗'}`);\n  }, 500);\n\n  // MutationObserverの設定\n  // デバウンス処理用の変数\n  let debounceTimer = null;\n  \n  const observer = new MutationObserver(function(mutations) {\n    // 処理を間引く（デバウンス）\n    if (debounceTimer) {\n      clearTimeout(debounceTimer);\n    }\n    \n    debounceTimer = setTimeout(() => {\n      // 重要な変更のみに反応\n      let shouldUpdate = false;\n      \n      for (const mutation of mutations) {\n        // 要素追加の場合\n        if (mutation.type === 'childList' && mutation.addedNodes.length) {\n          for (const node of mutation.addedNodes) {\n            if (node.nodeType === Node.ELEMENT_NODE) {\n              // 従業員詳細関連の要素か確認\n              if (\n                (node.textContent && node.textContent.includes('従業員詳細')) ||\n                node.classList?.contains('tab-pane') ||\n                node.classList?.contains('employee-detail') ||\n                node.querySelector?.('.employee-detail, h2, h3, h4, button')\n              ) {\n                shouldUpdate = true;\n                break;\n              }\n            }\n          }\n        }\n        \n        // タブの切り替わりなど属性変更の場合\n        if (mutation.type === 'attributes' && \n            mutation.attributeName === 'class' && \n            mutation.target.classList?.contains('active')) {\n          shouldUpdate = true;\n        }\n        \n        if (shouldUpdate) break;\n      }\n      \n      if (shouldUpdate) {\n        logDebug('重要なDOM変更を検出しました');\n        fixEmployeeDetailYearDisplay();\n      }\n    }, 300); // 300ms以内の連続した変更をまとめて処理\n  });\n\n  // 監視設定（ページ全体、子要素の追加と属性変更を監視）\n  observer.observe(document.body, {\n    childList: true,\n    subtree: true,\n    attributes: true, // タブの active 状態変化を検出するため属性変更も監視\n    attributeFilter: ['class'] // クラス属性の変更のみ監視\n  });\n\n  // グローバル変数に保存（後で停止できるように）\n  window._employeeYearFixObserver = observer;\n  \n  // タブ切り替えイベントでの処理\n  document.addEventListener('click', function(e) {\n    // タブのクリックを検出\n    if (e.target.classList?.contains('nav-link') || \n        (e.target.closest && e.target.closest('.nav-link'))) {\n      logDebug('タブ切り替えを検出しました');\n      \n      // タブ切り替え後に少し遅延させて実行\n      setTimeout(() => {\n        // クリックされたのが従業員詳細タブかチェック\n        const targetElement = e.target.closest('.nav-link') || e.target;\n        const isEmployeeTab = targetElement.textContent && \n                             (targetElement.textContent.includes('従業員詳細') || \n                              targetElement.textContent.includes('従業員'));\n        \n        if (isEmployeeTab) {\n          logDebug('従業員詳細タブがクリックされました');\n          fixEmployeeDetailYearDisplay();\n        }\n      }, 300);\n    }\n  });\n  \n  // URL変更の検出（ページ遷移）\n  let lastUrl = window.location.href;\n  new MutationObserver(() => {\n    const url = window.location.href;\n    if (url !== lastUrl) {\n      lastUrl = url;\n      logDebug('URL変更を検出しました');\n      \n      // URLが従業員詳細を含むか確認\n      if (url.includes('employee') || url.includes('staff')) {\n        setTimeout(fixEmployeeDetailYearDisplay, 500);\n      }\n    }\n  }).observe(document, {subtree: true, childList: true});\n  \n  // ページ読み込み完了時の処理\n  window.addEventListener('load', function() {\n    logDebug('ページ読み込み完了');\n    setTimeout(fixEmployeeDetailYearDisplay, 300);\n  });\n\n  logDebug('従業員詳細の年度表示修正スクリプトを設定しました');\n})();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}