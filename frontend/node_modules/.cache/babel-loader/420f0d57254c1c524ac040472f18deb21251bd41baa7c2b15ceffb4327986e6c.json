{"ast":null,"code":"/**\n * nullまたはundefinedの場合は0を返す安全な数値変換関数\n */\nexport function safeNumber(value) {\n  if (value === undefined || value === null || value === '') {\n    return 0;\n  }\n  const num = typeof value === 'string' ? parseFloat(value) : value;\n  return isNaN(num) ? 0 : num;\n}\n\n/**\n * processEmployeeData: 従業員データを処理して月次レポート用に整形する\n */\nexport const processEmployeeData = (apiEmployeeData, selectedYear) => {\n  return apiEmployeeData.map((emp, index) => {\n    var _emp$monthlyWork;\n    // 月次ステータスを計算\n    const monthlyStatus = Array(12).fill(1);\n    if (emp.monthlyWork) {\n      const monthIndex = emp.monthlyWork.month - 1;\n      if (emp.monthlyWork.actual_hours === 0) {\n        monthlyStatus[monthIndex] = 0;\n      } else if (emp.monthlyWork.actual_hours < emp.monthlyWork.scheduled_hours * 0.8) {\n        monthlyStatus[monthIndex] = 0.5;\n      }\n    }\n    return {\n      ...emp,\n      no: index + 1,\n      monthlyStatus,\n      memo: ((_emp$monthlyWork = emp.monthlyWork) === null || _emp$monthlyWork === void 0 ? void 0 : _emp$monthlyWork.exception_reason) || ''\n    };\n  });\n};\n\n/**\n * 年間データをUI表示用に変換する\n */\nexport const formatYearlyDataForUI = yearlyData => {\n  // 無効なデータをフィルタリング\n  const validData = yearlyData.filter(d => d != null);\n\n  // 月別に並べ替え（4月始まり会計年度を想定）\n  const orderedData = [...validData.filter(d => d.month >= 4).sort((a, b) => a.month - b.month), ...validData.filter(d => d.month <= 3).sort((a, b) => a.month - b.month)];\n\n  // 各月のデータが存在するか確認し、不足している月のデータを補完\n  const fullYearData = [];\n  const monthsInFiscalYear = [4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3];\n\n  // 必要に応じて全ての月のデータを用意\n  const fiscalYear = orderedData.length > 0 ? orderedData[0].fiscal_year : new Date().getFullYear();\n  monthsInFiscalYear.forEach(month => {\n    const existingData = orderedData.find(d => d.month === month);\n    if (existingData) {\n      fullYearData.push(existingData);\n    } else {\n      // 存在しない月のデータを空データで補完\n      fullYearData.push({\n        id: 0,\n        fiscal_year: fiscalYear,\n        month: month,\n        employees_count: 0,\n        fulltime_count: 0,\n        parttime_count: 0,\n        level1_2_count: 0,\n        other_disability_count: 0,\n        level1_2_parttime_count: 0,\n        other_parttime_count: 0,\n        legal_employment_rate: 2.3,\n        total_disability_count: 0,\n        employment_rate: 0,\n        required_count: 0,\n        over_under_count: 0,\n        status: ''\n      });\n    }\n  });\n\n  // 各値の合計を計算\n  const sumTotalEmployees = fullYearData.reduce((sum, d) => sum + safeNumber(d.employees_count), 0);\n  const sumFullTimeEmployees = fullYearData.reduce((sum, d) => sum + safeNumber(d.fulltime_count), 0);\n  const sumPartTimeEmployees = fullYearData.reduce((sum, d) => sum + safeNumber(d.parttime_count), 0);\n  const sumLevel1_2Count = fullYearData.reduce((sum, d) => sum + safeNumber(d.level1_2_count), 0);\n  const sumOtherDisabilityCount = fullYearData.reduce((sum, d) => sum + safeNumber(d.other_disability_count), 0);\n  const sumLevel1_2ParttimeCount = fullYearData.reduce((sum, d) => sum + safeNumber(d.level1_2_parttime_count), 0);\n  const sumOtherParttimeCount = fullYearData.reduce((sum, d) => sum + safeNumber(d.other_parttime_count), 0);\n  const sumTotalDisabilityCount = fullYearData.reduce((sum, d) => sum + safeNumber(d.total_disability_count), 0);\n  const avgActualRate = parseFloat((fullYearData.reduce((sum, d) => sum + safeNumber(d.employment_rate), 0) / fullYearData.length).toFixed(1));\n  const avgLegalRate = parseFloat((fullYearData.reduce((sum, d) => sum + safeNumber(d.legal_employment_rate), 0) / fullYearData.length).toFixed(1));\n  const sumLegalCount = fullYearData.reduce((sum, d) => sum + safeNumber(d.required_count), 0);\n  const sumOverUnder = fullYearData.reduce((sum, d) => sum + safeNumber(d.over_under_count), 0);\n\n  // UI表示用のデータ形式に変換\n  return {\n    months: ['4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月', '1月', '2月', '3月', '合計'],\n    data: [{\n      id: 1,\n      item: '従業員数',\n      values: [...fullYearData.map(d => safeNumber(d.employees_count)), sumTotalEmployees],\n      suffix: '名'\n    }, {\n      id: 2,\n      item: 'フルタイム従業員数',\n      values: [...fullYearData.map(d => safeNumber(d.fulltime_count)), sumFullTimeEmployees],\n      suffix: '名'\n    }, {\n      id: 3,\n      item: 'パートタイム従業員数',\n      values: [...fullYearData.map(d => safeNumber(d.parttime_count)), sumPartTimeEmployees],\n      suffix: '名'\n    }, {\n      id: 4,\n      item: 'トータル従業員数',\n      values: [...fullYearData.map(d => safeNumber(d.employees_count)), sumTotalEmployees],\n      suffix: '名',\n      isCalculated: true\n    }, {\n      id: 5,\n      item: '1級・2級の障がい者',\n      values: [...fullYearData.map(d => safeNumber(d.level1_2_count)), sumLevel1_2Count],\n      suffix: '名',\n      isDisability: true\n    }, {\n      id: 6,\n      item: 'その他障がい者',\n      values: [...fullYearData.map(d => safeNumber(d.other_disability_count)), sumOtherDisabilityCount],\n      suffix: '名',\n      isDisability: true\n    }, {\n      id: 7,\n      item: '1級・2級の障がい者(パートタイム)',\n      values: [...fullYearData.map(d => safeNumber(d.level1_2_parttime_count)), sumLevel1_2ParttimeCount],\n      suffix: '名',\n      isDisability: true\n    }, {\n      id: 8,\n      item: 'その他障がい者(パートタイム)',\n      values: [...fullYearData.map(d => safeNumber(d.other_parttime_count)), sumOtherParttimeCount],\n      suffix: '名',\n      isDisability: true\n    }, {\n      id: 9,\n      item: '障がい者合計',\n      values: [...fullYearData.map(d => safeNumber(d.total_disability_count)), sumTotalDisabilityCount],\n      suffix: '名',\n      isDisability: true,\n      isCalculated: true\n    }, {\n      id: 10,\n      item: '実雇用率',\n      values: [...fullYearData.map(d => safeNumber(d.employment_rate)), avgActualRate],\n      suffix: '%',\n      isRatio: true,\n      isCalculated: true\n    }, {\n      id: 11,\n      item: '法定雇用率',\n      values: [...fullYearData.map(d => safeNumber(d.legal_employment_rate)), avgLegalRate],\n      suffix: '%',\n      isRatio: true\n    }, {\n      id: 12,\n      item: '法定雇用者数',\n      values: [...fullYearData.map(d => safeNumber(d.required_count)), sumLegalCount],\n      suffix: '名',\n      isCalculated: true\n    }, {\n      id: 13,\n      item: '超過・未達',\n      values: [...fullYearData.map(d => safeNumber(d.over_under_count)), sumOverUnder],\n      isNegative: true,\n      isCalculated: true,\n      suffix: '名'\n    }]\n  };\n};\n\n// CSVインポート用のデータ構造\n\n/**\n * CSVデータ項目と内部APIフィールドの対応マッピング\n */\nconst CSV_TO_API_FIELD_MAPPING = {\n  // 従業員データ\n  '従業員数': 'employees_count',\n  '従業員数 (名)': 'employees_count',\n  'フルタイム従業員数': 'fulltime_count',\n  'フルタイム従業員数 (名)': 'fulltime_count',\n  'パートタイム従業員数': 'parttime_count',\n  'パートタイム従業員数 (名)': 'parttime_count',\n  'トータル従業員数': 'total_employees_count',\n  'トータル従業員数 (名)': 'total_employees_count',\n  // 障がい者データ\n  '1級・2級の障がい者': 'level1_2_count',\n  '1級・2級の障がい者 (名)': 'level1_2_count',\n  'その他障がい者': 'other_disability_count',\n  'その他障がい者 (名)': 'other_disability_count',\n  '1級・2級の障がい者(パートタイム)': 'level1_2_parttime_count',\n  '1級・2級の障がい者(パートタイム)(名)': 'level1_2_parttime_count',\n  '1級・2級の障がい者（パートタイム）': 'level1_2_parttime_count',\n  '1級・2級の障がい者（パートタイム）(名)': 'level1_2_parttime_count',\n  'その他障がい者(パートタイム)': 'other_parttime_count',\n  'その他障がい者(パートタイム)(名)': 'other_parttime_count',\n  'その他障がい者（パートタイム）': 'other_parttime_count',\n  'その他障がい者（パートタイム）(名)': 'other_parttime_count',\n  '障がい者合計': 'total_disability_count',\n  '障がい者合計 (名)': 'total_disability_count',\n  // 雇用率関連\n  '実雇用率': 'employment_rate',\n  '実雇用率 (%)': 'employment_rate',\n  '法定雇用率': 'legal_employment_rate',\n  '法定雇用率 (%)': 'legal_employment_rate',\n  '法定雇用者数': 'required_count',\n  '法定雇用者数 (名)': 'required_count',\n  '超過・未達': 'over_under_count',\n  '超過・未達 (名)': 'over_under_count'\n};\n\n/**\n * 文字化けを防止するBOMを追加してCSVテンプレートを生成する\n * MonthlyReportDetailの表示項目と一致させた形式に修正\n */\nexport const generateCSVTemplate = fiscalYear => {\n  // CSVデータ作成\n  let csvContent = '\\uFEFF'; // BOMを追加して文字化けを防止\n\n  // 年度行を追加 - 年度の値を明示的に指定\n  csvContent += `年度,${fiscalYear}\\n`;\n\n  // 月の行 - 各月を明示的に列挙\n  csvContent += '月,4,5,6,7,8,9,10,11,12,1,2,3\\n';\n\n  // データ行 - 指定された項目のみ含める（自動計算項目を除外）\n  const dataRows = [['従業員数 (名)', ...Array(12).fill('0')], ['フルタイム従業員数 (名)', ...Array(12).fill('0')], ['パートタイム従業員数 (名)', ...Array(12).fill('0')], ['1級・2級の障がい者 (名)', ...Array(12).fill('0')], ['その他障がい者 (名)', ...Array(12).fill('0')], ['1級・2級の障がい者(パートタイム)(名)', ...Array(12).fill('0')], ['その他障がい者(パートタイム)(名)', ...Array(12).fill('0')], ['法定雇用率 (%)', ...Array(12).fill('2.3')]];\n\n  // データ行を追加\n  dataRows.forEach(row => {\n    csvContent += row.join(',') + '\\n';\n  });\n  return csvContent;\n};\n\n/**\n * CSVファイルをダウンロードする\n */\nexport const downloadCSV = (content, filename) => {\n  const blob = new Blob([content], {\n    type: 'text/csv;charset=utf-8;'\n  });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.setAttribute('href', url);\n  link.setAttribute('download', filename);\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n};\n\n/**\n * 行タイプを識別する関数 - 表記ゆれに対応\n */\nconst identifyRowType = rowText => {\n  // 表記ゆれや部分一致を考慮した判定ルール\n  const patterns = [{\n    id: '従業員数 (名)',\n    keywords: ['従業員数'],\n    excludes: ['フルタイム', 'パートタイム', 'トータル']\n  }, {\n    id: 'フルタイム従業員数 (名)',\n    keywords: ['フルタイム', '従業員']\n  }, {\n    id: 'パートタイム従業員数 (名)',\n    keywords: ['パートタイム', '従業員']\n  }, {\n    id: 'トータル従業員数 (名)',\n    keywords: ['トータル', '従業員']\n  }, {\n    id: '1級・2級の障がい者 (名)',\n    keywords: ['1級・2級', '障がい者'],\n    excludes: ['パートタイム']\n  }, {\n    id: 'その他障がい者 (名)',\n    keywords: ['その他', '障がい者'],\n    excludes: ['パートタイム']\n  }, {\n    id: '1級・2級の障がい者(パートタイム)(名)',\n    keywords: ['1級・2級', '障がい者', 'パートタイム']\n  }, {\n    id: 'その他障がい者(パートタイム)(名)',\n    keywords: ['その他', '障がい者', 'パートタイム']\n  }, {\n    id: '法定雇用率 (%)',\n    keywords: ['法定', '雇用率']\n  }];\n  for (const pattern of patterns) {\n    const allKeywordsMatch = pattern.keywords.every(kw => rowText.includes(kw));\n    const noExcludesMatch = !pattern.excludes || pattern.excludes.every(ex => !rowText.includes(ex));\n    if (allKeywordsMatch && noExcludesMatch) {\n      return pattern.id;\n    }\n  }\n  return null;\n};\n\n/**\n * CSVから抽出された障がい者データを正しくAPIデータに変換する関数\n */\nconst processDisabilityData = (level1_2Count, otherDisabilityCount, level1_2ParttimeCount, otherParttimeCount) => {\n  // それぞれの値を整数に変換\n  const l1_2 = Math.round(level1_2Count);\n  const other = Math.round(otherDisabilityCount);\n  const l1_2_part = Math.round(level1_2ParttimeCount);\n  const other_part = Math.round(otherParttimeCount);\n\n  // 合計値を計算（障がい者合計値）\n  // 1級・2級は2倍、パートタイムは0.5倍でカウント\n  const total = l1_2 * 2 + other + l1_2_part * 2 * 0.5 + other_part * 0.5;\n  return {\n    level1_2_count: l1_2,\n    other_disability_count: other,\n    level1_2_parttime_count: l1_2_part,\n    other_parttime_count: other_part,\n    total_disability_count: total\n  };\n};\n\n/**\n * CSV形式で入力されたテンプレートデータをAPIで使用可能な形式に変換する\n * 改良版: 年度の検出とカラム名の特定を強化、障がい者データのマッピングを修正\n */\nexport const convertTemplateDataToApiFormat = (csvData, defaultFiscalYear) => {\n  // デバッグ出力\n  console.log('テンプレートデータをAPI形式に変換開始:', csvData);\n\n  // 年度の取得\n  let fiscalYear = defaultFiscalYear; // デフォルト値\n  let actualYearDetected = false; // 実際に年度が検出されたかのフラグ\n\n  // CSVのヘッダー行を分析し、数値の年度を検出する\n  for (const row of csvData) {\n    // 年度キーが存在する行を検索\n    if ('年度' in row && row['年度'] !== null && row['年度'] !== '' && row['年度'] !== undefined) {\n      const yearValue = row['年度'];\n      if (yearValue !== null && yearValue !== '' && yearValue !== undefined) {\n        // 文字列や数値にかかわらず、有効な年度値として処理を試みる\n        let yearNum = null;\n        if (typeof yearValue === 'number') {\n          yearNum = yearValue;\n        } else if (typeof yearValue === 'string') {\n          // 文字列から数値を抽出\n          const match = yearValue.match(/\\d{4}/);\n          if (match) {\n            yearNum = parseInt(match[0], 10);\n          } else {\n            const parsedNum = parseInt(yearValue, 10);\n            if (!isNaN(parsedNum)) {\n              yearNum = parsedNum;\n            }\n          }\n        }\n        if (yearNum !== null && !isNaN(yearNum) && yearNum >= 1000 && yearNum <= 9999) {\n          // 有効な4桁の年度として認識\n          fiscalYear = yearNum;\n          actualYearDetected = true;\n          console.log(`CSVから年度を検出: ${fiscalYear}`);\n          break;\n        }\n      }\n    }\n\n    // 年度の列がなければ、列名自体から年度を探す (例: 2024, 2023 などの列名)\n    for (const [key, value] of Object.entries(row)) {\n      if (typeof key === 'string' && /^20\\d{2}$/.test(key)) {\n        const yearNum = parseInt(key, 10);\n        if (!isNaN(yearNum) && yearNum >= 2000 && yearNum <= 2999) {\n          fiscalYear = yearNum;\n          actualYearDetected = true;\n          console.log(`CSV列名から年度を検出: ${fiscalYear}`);\n          break;\n        }\n      }\n    }\n    if (actualYearDetected) break;\n  }\n\n  // 年度が検出されなかった場合はデフォルト値を使用\n  if (!actualYearDetected) {\n    console.log(`年度が検出されませんでした。デフォルト値を使用します: ${defaultFiscalYear}`);\n  } else {\n    console.log(`使用する年度: ${fiscalYear}`);\n  }\n\n  // 横型テンプレートの処理（修正版）\n  return processHorizontalTemplate(csvData, fiscalYear);\n};\n\n/**\n * 横型テンプレート処理の改良版\n * いくつかの特殊な形式に対応し、障がい者データのマッピングを修正\n */\nconst processHorizontalTemplate = (csvData, fiscalYear) => {\n  console.log('横型テンプレート処理開始:', {\n    rows: csvData.length,\n    fiscalYear\n  });\n\n  // 各月のデータを格納する配列\n  const monthlyData = [];\n\n  // 各月に対応する列の名前と数値\n  const monthColumns = ['4', '5', '6', '7', '8', '9', '10', '11', '12', '1', '2', '3'];\n  if (csvData.length === 0) {\n    console.error('CSVデータが空です');\n    return [];\n  }\n\n  // データを詳細に調査するための状態表示\n  console.log('CSVデータの先頭行:', csvData[0]);\n  console.log('CSV行の例:', csvData.slice(0, 3));\n\n  // すべての行のキーを表示\n  const allKeys = new Set();\n  csvData.forEach(row => {\n    Object.keys(row).forEach(key => allKeys.add(key));\n  });\n  console.log('すべての列キー:', Array.from(allKeys));\n\n  // ヘッダー行を特定するための改良処理\n  let monthKeyMap = {};\n\n  // 月の行を探す - 改良版\n  for (const row of csvData) {\n    // '月'という値を持つ行を探す (これは元のテンプレート形式)\n    const rowValues = Object.values(row).map(v => String(v).trim());\n    if (rowValues.includes('月')) {\n      console.log('「月」を含む行を検出:', row);\n\n      // 月の列と数値の対応関係を作成\n      Object.entries(row).forEach(([key, value]) => {\n        // 月の値と一致する列を記録\n        if (monthColumns.includes(String(value))) {\n          monthKeyMap[key] = parseInt(String(value), 10);\n        }\n      });\n      if (Object.keys(monthKeyMap).length > 0) {\n        console.log('月の列マッピングを検出:', monthKeyMap);\n        break;\n      }\n    }\n  }\n\n  // 月の行が見つからない場合、最初の行が月の行であると仮定\n  if (!monthKeyMap || Object.keys(monthKeyMap).length === 0) {\n    console.log('明示的な月行が見つからないため、最初の行を使用します');\n    const firstRow = csvData[0];\n\n    // 最初の行の数値を月として解釈\n    if (firstRow) {\n      // nullチェックを追加\n      Object.entries(firstRow).forEach(([key, value]) => {\n        const strValue = String(value).trim();\n        // 数値または月の列名に一致する値を探す\n        if (monthColumns.includes(strValue) || !isNaN(parseInt(strValue, 10))) {\n          // 数値の場合、1-12の範囲に収める\n          const monthNum = parseInt(strValue, 10);\n          if (monthNum >= 1 && monthNum <= 12) {\n            monthKeyMap[key] = monthNum;\n          }\n        }\n      });\n    }\n    console.log('推測された月の列マッピング:', monthKeyMap);\n  }\n\n  // 月の行が依然として見つからない、またはマッピングが作成できない場合\n  if (Object.keys(monthKeyMap).length === 0) {\n    console.log('月のマッピングが作成できませんでした。列名から推測を試みます。');\n\n    // 列名から月を推測\n    const possibleMonthColumns = Array.from(allKeys).filter(key => key !== '年度' && key !== '月');\n\n    // 月の順序を推測\n    possibleMonthColumns.forEach((key, index) => {\n      const monthIndex = index % 12;\n      const monthNum = monthIndex >= 9 ? monthIndex - 8 : monthIndex + 4; // 4,5,6,7,8,9,10,11,12,1,2,3\n      monthKeyMap[key] = monthNum;\n    });\n    console.log('列名から推測された月のマッピング:', monthKeyMap);\n  }\n  if (Object.keys(monthKeyMap).length === 0) {\n    console.error('月行が見つからず、マッピングも作成できません');\n    return [];\n  }\n\n  // 各行のタイプを特定し、データマッピングを構築\n  const dataRowMappings = {};\n\n  // CSVの各行を調査\n  for (const row of csvData) {\n    // 行のすべての値を連結して検索しやすくする\n    const rowText = Object.values(row).map(v => String(v).trim()).join(' ');\n    // 行のタイプを特定（従業員数、障がい者数など）\n    const rowType = identifyRowType(rowText);\n    if (rowType) {\n      console.log(`「${rowType}」の行を検出:`, row);\n      dataRowMappings[rowType] = row;\n    }\n  }\n  console.log('検出されたデータ行:', Object.keys(dataRowMappings));\n\n  // データの欠落を検出し、警告\n  const expectedRows = ['従業員数 (名)', 'フルタイム従業員数 (名)', 'パートタイム従業員数 (名)', '1級・2級の障がい者 (名)', 'その他障がい者 (名)', '1級・2級の障がい者(パートタイム)(名)', 'その他障がい者(パートタイム)(名)', '法定雇用率 (%)'];\n  const missingRows = expectedRows.filter(row => !dataRowMappings[row]);\n  if (missingRows.length > 0) {\n    console.warn('必要なデータ行が見つかりません:', missingRows);\n  }\n\n  // 各月のデータを抽出\n  Object.entries(monthKeyMap).forEach(([columnKey, month]) => {\n    if (month < 1 || month > 12) {\n      console.log(`無効な月番号: ${month}, スキップします`);\n      return;\n    }\n    console.log(`月${month}のデータを処理中... (列キー: ${columnKey})`);\n\n    // 値を安全に取得する関数\n    const getValueSafely = (rowKey, colKey) => {\n      const rowMapping = dataRowMappings[rowKey];\n      if (!rowMapping) return 0;\n      const value = rowMapping[colKey];\n      if (value === undefined || value === null || value === '') return 0;\n      const numValue = typeof value === 'number' ? value : parseFloat(String(value));\n      return isNaN(numValue) ? 0 : numValue;\n    };\n\n    // 各項目の値を取得\n    const employeesCount = getValueSafely('従業員数 (名)', columnKey);\n    const fulltimeCount = getValueSafely('フルタイム従業員数 (名)', columnKey);\n    const parttimeCount = getValueSafely('パートタイム従業員数 (名)', columnKey);\n\n    // 障がい者データの取得\n    const level1_2Count = getValueSafely('1級・2級の障がい者 (名)', columnKey);\n    const otherDisabilityCount = getValueSafely('その他障がい者 (名)', columnKey);\n    const level1_2ParttimeCount = getValueSafely('1級・2級の障がい者(パートタイム)(名)', columnKey);\n    const otherParttimeCount = getValueSafely('その他障がい者(パートタイム)(名)', columnKey);\n\n    // 法定雇用率\n    const legalEmploymentRate = getValueSafely('法定雇用率 (%)', columnKey);\n\n    // 障がい者データを処理\n    const disabilityData = processDisabilityData(level1_2Count, otherDisabilityCount, level1_2ParttimeCount, otherParttimeCount);\n\n    // 月データのオブジェクトを作成\n    const monthData = {\n      fiscal_year: fiscalYear,\n      month,\n      employees_count: Math.round(employeesCount),\n      fulltime_count: Math.round(fulltimeCount),\n      parttime_count: Math.round(parttimeCount),\n      level1_2_count: disabilityData.level1_2_count,\n      other_disability_count: disabilityData.other_disability_count,\n      level1_2_parttime_count: disabilityData.level1_2_parttime_count,\n      other_parttime_count: disabilityData.other_parttime_count,\n      legal_employment_rate: legalEmploymentRate,\n      total_disability_count: disabilityData.total_disability_count\n    };\n\n    // 実雇用率を計算（障がい者合計数 / 従業員数 * 100）- 小数点第2位で切り上げ\n    if (employeesCount > 0) {\n      const rawRate = disabilityData.total_disability_count / employeesCount * 100;\n      monthData.employment_rate = Math.ceil(rawRate * 10) / 10; // 小数点第2位で切り上げ\n    }\n\n    // 法定雇用者数を計算（従業員数 * 法定雇用率 / 100）\n    if (employeesCount > 0 && legalEmploymentRate > 0) {\n      monthData.required_count = Math.ceil(employeesCount * (legalEmploymentRate / 100));\n    }\n\n    // 超過・未達を計算（障がい者合計数 - 法定雇用者数）\n    if (monthData.required_count !== undefined && monthData.total_disability_count !== undefined) {\n      monthData.over_under_count = monthData.total_disability_count - monthData.required_count;\n    }\n    console.log(`月${month}のデータ:`, monthData);\n    monthlyData.push(monthData);\n  });\n  console.log(`${monthlyData.length}ヶ月分のデータを抽出しました`);\n  return monthlyData;\n};","map":{"version":3,"names":["safeNumber","value","undefined","num","parseFloat","isNaN","processEmployeeData","apiEmployeeData","selectedYear","map","emp","index","_emp$monthlyWork","monthlyStatus","Array","fill","monthlyWork","monthIndex","month","actual_hours","scheduled_hours","no","memo","exception_reason","formatYearlyDataForUI","yearlyData","validData","filter","d","orderedData","sort","a","b","fullYearData","monthsInFiscalYear","fiscalYear","length","fiscal_year","Date","getFullYear","forEach","existingData","find","push","id","employees_count","fulltime_count","parttime_count","level1_2_count","other_disability_count","level1_2_parttime_count","other_parttime_count","legal_employment_rate","total_disability_count","employment_rate","required_count","over_under_count","status","sumTotalEmployees","reduce","sum","sumFullTimeEmployees","sumPartTimeEmployees","sumLevel1_2Count","sumOtherDisabilityCount","sumLevel1_2ParttimeCount","sumOtherParttimeCount","sumTotalDisabilityCount","avgActualRate","toFixed","avgLegalRate","sumLegalCount","sumOverUnder","months","data","item","values","suffix","isCalculated","isDisability","isRatio","isNegative","CSV_TO_API_FIELD_MAPPING","generateCSVTemplate","csvContent","dataRows","row","join","downloadCSV","content","filename","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","setAttribute","body","appendChild","click","removeChild","identifyRowType","rowText","patterns","keywords","excludes","pattern","allKeywordsMatch","every","kw","includes","noExcludesMatch","ex","processDisabilityData","level1_2Count","otherDisabilityCount","level1_2ParttimeCount","otherParttimeCount","l1_2","Math","round","other","l1_2_part","other_part","total","convertTemplateDataToApiFormat","csvData","defaultFiscalYear","console","log","actualYearDetected","yearValue","yearNum","match","parseInt","parsedNum","key","Object","entries","test","processHorizontalTemplate","rows","monthlyData","monthColumns","error","slice","allKeys","Set","keys","add","from","monthKeyMap","rowValues","v","String","trim","firstRow","strValue","monthNum","possibleMonthColumns","dataRowMappings","rowType","expectedRows","missingRows","warn","columnKey","getValueSafely","rowKey","colKey","rowMapping","numValue","employeesCount","fulltimeCount","parttimeCount","legalEmploymentRate","disabilityData","monthData","rawRate","ceil"],"sources":["/Users/gotouhiroaki/Programming/DAN_work/disability-employment-system/frontend/src/pages/MonthlyReport/utils.ts"],"sourcesContent":["import { \n  MonthlyTotal, \n  MonthlyDetailData, \n  Employee, \n  MonthlyDetailDataRow\n} from './types';\n\n/**\n * nullまたはundefinedの場合は0を返す安全な数値変換関数\n */\nexport function safeNumber(value: number | string | undefined | null): number {\n  if (value === undefined || value === null || value === '') {\n    return 0;\n  }\n  const num = typeof value === 'string' ? parseFloat(value) : value;\n  return isNaN(num) ? 0 : num;\n}\n\n/**\n * processEmployeeData: 従業員データを処理して月次レポート用に整形する\n */\nexport const processEmployeeData = (apiEmployeeData: any[], selectedYear?: number): Employee[] => {\n  return apiEmployeeData.map((emp: any, index: number) => {\n    // 月次ステータスを計算\n    const monthlyStatus = Array(12).fill(1);\n    if (emp.monthlyWork) {\n      const monthIndex = emp.monthlyWork.month - 1;\n      if (emp.monthlyWork.actual_hours === 0) {\n        monthlyStatus[monthIndex] = 0;\n      } else if (emp.monthlyWork.actual_hours < emp.monthlyWork.scheduled_hours * 0.8) {\n        monthlyStatus[monthIndex] = 0.5;\n      }\n    }\n    \n    return {\n      ...emp,\n      no: index + 1,\n      monthlyStatus,\n      memo: emp.monthlyWork?.exception_reason || ''\n    };\n  });\n};\n\n/**\n * 年間データをUI表示用に変換する\n */\nexport const formatYearlyDataForUI = (yearlyData: MonthlyTotal[]): MonthlyDetailData => {\n  // 無効なデータをフィルタリング\n  const validData = yearlyData.filter(d => d != null);\n  \n  // 月別に並べ替え（4月始まり会計年度を想定）\n  const orderedData = [\n    ...validData.filter(d => d.month >= 4).sort((a, b) => a.month - b.month),\n    ...validData.filter(d => d.month <= 3).sort((a, b) => a.month - b.month)\n  ];\n\n  // 各月のデータが存在するか確認し、不足している月のデータを補完\n  const fullYearData: MonthlyTotal[] = [];\n  const monthsInFiscalYear = [4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3];\n  \n  // 必要に応じて全ての月のデータを用意\n  const fiscalYear = orderedData.length > 0 ? orderedData[0].fiscal_year : new Date().getFullYear();\n  \n  monthsInFiscalYear.forEach(month => {\n    const existingData = orderedData.find(d => d.month === month);\n    if (existingData) {\n      fullYearData.push(existingData);\n    } else {\n      // 存在しない月のデータを空データで補完\n      fullYearData.push({\n        id: 0,\n        fiscal_year: fiscalYear,\n        month: month,\n        employees_count: 0,\n        fulltime_count: 0,\n        parttime_count: 0,\n        level1_2_count: 0,\n        other_disability_count: 0,\n        level1_2_parttime_count: 0,\n        other_parttime_count: 0,\n        legal_employment_rate: 2.3,\n        total_disability_count: 0,\n        employment_rate: 0,\n        required_count: 0,\n        over_under_count: 0,\n        status: ''\n      });\n    }\n  });\n\n  // 各値の合計を計算\n  const sumTotalEmployees = fullYearData.reduce((sum, d) => sum + safeNumber(d.employees_count), 0);\n  const sumFullTimeEmployees = fullYearData.reduce((sum, d) => sum + safeNumber(d.fulltime_count), 0);\n  const sumPartTimeEmployees = fullYearData.reduce((sum, d) => sum + safeNumber(d.parttime_count), 0);\n  const sumLevel1_2Count = fullYearData.reduce((sum, d) => sum + safeNumber(d.level1_2_count), 0);\n  const sumOtherDisabilityCount = fullYearData.reduce((sum, d) => sum + safeNumber(d.other_disability_count), 0);\n  const sumLevel1_2ParttimeCount = fullYearData.reduce((sum, d) => sum + safeNumber(d.level1_2_parttime_count), 0);\n  const sumOtherParttimeCount = fullYearData.reduce((sum, d) => sum + safeNumber(d.other_parttime_count), 0);\n  const sumTotalDisabilityCount = fullYearData.reduce((sum, d) => sum + safeNumber(d.total_disability_count), 0);\n  const avgActualRate = parseFloat((fullYearData.reduce((sum, d) => sum + safeNumber(d.employment_rate), 0) / fullYearData.length).toFixed(1));\n  const avgLegalRate = parseFloat((fullYearData.reduce((sum, d) => sum + safeNumber(d.legal_employment_rate), 0) / fullYearData.length).toFixed(1));\n  const sumLegalCount = fullYearData.reduce((sum, d) => sum + safeNumber(d.required_count), 0);\n  const sumOverUnder = fullYearData.reduce((sum, d) => sum + safeNumber(d.over_under_count), 0);\n\n  // UI表示用のデータ形式に変換\n  return {\n    months: ['4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月', '1月', '2月', '3月', '合計'],\n    data: [\n      { id: 1, item: '従業員数', values: [...fullYearData.map(d => safeNumber(d.employees_count)), sumTotalEmployees], suffix: '名' },\n      { id: 2, item: 'フルタイム従業員数', values: [...fullYearData.map(d => safeNumber(d.fulltime_count)), sumFullTimeEmployees], suffix: '名' },\n      { id: 3, item: 'パートタイム従業員数', values: [...fullYearData.map(d => safeNumber(d.parttime_count)), sumPartTimeEmployees], suffix: '名' },\n      { id: 4, item: 'トータル従業員数', values: [...fullYearData.map(d => safeNumber(d.employees_count)), sumTotalEmployees], suffix: '名', isCalculated: true },\n      { id: 5, item: '1級・2級の障がい者', values: [...fullYearData.map(d => safeNumber(d.level1_2_count)), sumLevel1_2Count], suffix: '名', isDisability: true },\n      { id: 6, item: 'その他障がい者', values: [...fullYearData.map(d => safeNumber(d.other_disability_count)), sumOtherDisabilityCount], suffix: '名', isDisability: true },\n      { id: 7, item: '1級・2級の障がい者(パートタイム)', values: [...fullYearData.map(d => safeNumber(d.level1_2_parttime_count)), sumLevel1_2ParttimeCount], suffix: '名', isDisability: true },\n      { id: 8, item: 'その他障がい者(パートタイム)', values: [...fullYearData.map(d => safeNumber(d.other_parttime_count)), sumOtherParttimeCount], suffix: '名', isDisability: true },\n      { id: 9, item: '障がい者合計', values: [...fullYearData.map(d => safeNumber(d.total_disability_count)), sumTotalDisabilityCount], suffix: '名', isDisability: true, isCalculated: true },\n      { id: 10, item: '実雇用率', values: [...fullYearData.map(d => safeNumber(d.employment_rate)), avgActualRate], suffix: '%', isRatio: true, isCalculated: true },\n      { id: 11, item: '法定雇用率', values: [...fullYearData.map(d => safeNumber(d.legal_employment_rate)), avgLegalRate], suffix: '%', isRatio: true },\n      { id: 12, item: '法定雇用者数', values: [...fullYearData.map(d => safeNumber(d.required_count)), sumLegalCount], suffix: '名', isCalculated: true },\n      { id: 13, item: '超過・未達', values: [...fullYearData.map(d => safeNumber(d.over_under_count)), sumOverUnder], isNegative: true, isCalculated: true, suffix: '名' }\n    ]\n  };\n};\n\n// CSVインポート用のデータ構造\nexport interface MonthlyCSVData {\n  fiscal_year: number;\n  month: number;\n  employees_count: number;\n  fulltime_count: number;\n  parttime_count: number;\n  level1_2_count: number;\n  other_disability_count: number;\n  level1_2_parttime_count: number;\n  other_parttime_count: number;\n  legal_employment_rate: number;\n  total_disability_count?: number;\n  employment_rate?: number;\n  required_count?: number;\n  over_under_count?: number;\n}\n\n/**\n * CSVデータ項目と内部APIフィールドの対応マッピング\n */\nconst CSV_TO_API_FIELD_MAPPING: { [key: string]: string } = {\n  // 従業員データ\n  '従業員数': 'employees_count',  \n  '従業員数 (名)': 'employees_count',\n  'フルタイム従業員数': 'fulltime_count',\n  'フルタイム従業員数 (名)': 'fulltime_count',\n  'パートタイム従業員数': 'parttime_count',\n  'パートタイム従業員数 (名)': 'parttime_count',\n  'トータル従業員数': 'total_employees_count',\n  'トータル従業員数 (名)': 'total_employees_count',\n  \n  // 障がい者データ\n  '1級・2級の障がい者': 'level1_2_count',\n  '1級・2級の障がい者 (名)': 'level1_2_count',\n  'その他障がい者': 'other_disability_count',\n  'その他障がい者 (名)': 'other_disability_count',\n  '1級・2級の障がい者(パートタイム)': 'level1_2_parttime_count',\n  '1級・2級の障がい者(パートタイム)(名)': 'level1_2_parttime_count',\n  '1級・2級の障がい者（パートタイム）': 'level1_2_parttime_count',\n  '1級・2級の障がい者（パートタイム）(名)': 'level1_2_parttime_count',\n  'その他障がい者(パートタイム)': 'other_parttime_count',\n  'その他障がい者(パートタイム)(名)': 'other_parttime_count',\n  'その他障がい者（パートタイム）': 'other_parttime_count',\n  'その他障がい者（パートタイム）(名)': 'other_parttime_count',\n  '障がい者合計': 'total_disability_count',\n  '障がい者合計 (名)': 'total_disability_count',\n  \n  // 雇用率関連\n  '実雇用率': 'employment_rate',\n  '実雇用率 (%)': 'employment_rate',\n  '法定雇用率': 'legal_employment_rate',\n  '法定雇用率 (%)': 'legal_employment_rate',\n  '法定雇用者数': 'required_count',\n  '法定雇用者数 (名)': 'required_count',\n  '超過・未達': 'over_under_count',\n  '超過・未達 (名)': 'over_under_count'\n};\n\n/**\n * 文字化けを防止するBOMを追加してCSVテンプレートを生成する\n * MonthlyReportDetailの表示項目と一致させた形式に修正\n */\nexport const generateCSVTemplate = (fiscalYear: number): string => {\n  // CSVデータ作成\n  let csvContent = '\\uFEFF'; // BOMを追加して文字化けを防止\n  \n  // 年度行を追加 - 年度の値を明示的に指定\n  csvContent += `年度,${fiscalYear}\\n`;\n  \n  // 月の行 - 各月を明示的に列挙\n  csvContent += '月,4,5,6,7,8,9,10,11,12,1,2,3\\n';\n  \n  // データ行 - 指定された項目のみ含める（自動計算項目を除外）\n  const dataRows = [\n    ['従業員数 (名)', ...Array(12).fill('0')],\n    ['フルタイム従業員数 (名)', ...Array(12).fill('0')],\n    ['パートタイム従業員数 (名)', ...Array(12).fill('0')],\n    ['1級・2級の障がい者 (名)', ...Array(12).fill('0')],\n    ['その他障がい者 (名)', ...Array(12).fill('0')],\n    ['1級・2級の障がい者(パートタイム)(名)', ...Array(12).fill('0')],\n    ['その他障がい者(パートタイム)(名)', ...Array(12).fill('0')],\n    ['法定雇用率 (%)', ...Array(12).fill('2.3')]\n  ];\n  \n  // データ行を追加\n  dataRows.forEach(row => {\n    csvContent += row.join(',') + '\\n';\n  });\n  \n  return csvContent;\n};\n\n/**\n * CSVファイルをダウンロードする\n */\nexport const downloadCSV = (content: string, filename: string): void => {\n  const blob = new Blob([content], { type: 'text/csv;charset=utf-8;' });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.setAttribute('href', url);\n  link.setAttribute('download', filename);\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n};\n\n/**\n * 行タイプを識別する関数 - 表記ゆれに対応\n */\nconst identifyRowType = (rowText: string): string | null => {\n  // 表記ゆれや部分一致を考慮した判定ルール\n  const patterns = [\n    { id: '従業員数 (名)', keywords: ['従業員数'], excludes: ['フルタイム', 'パートタイム', 'トータル'] },\n    { id: 'フルタイム従業員数 (名)', keywords: ['フルタイム', '従業員'] },\n    { id: 'パートタイム従業員数 (名)', keywords: ['パートタイム', '従業員'] },\n    { id: 'トータル従業員数 (名)', keywords: ['トータル', '従業員'] },\n    { id: '1級・2級の障がい者 (名)', keywords: ['1級・2級', '障がい者'], excludes: ['パートタイム'] },\n    { id: 'その他障がい者 (名)', keywords: ['その他', '障がい者'], excludes: ['パートタイム'] },\n    { id: '1級・2級の障がい者(パートタイム)(名)', keywords: ['1級・2級', '障がい者', 'パートタイム'] },\n    { id: 'その他障がい者(パートタイム)(名)', keywords: ['その他', '障がい者', 'パートタイム'] },\n    { id: '法定雇用率 (%)', keywords: ['法定', '雇用率'] }\n  ];\n\n  for (const pattern of patterns) {\n    const allKeywordsMatch = pattern.keywords.every(kw => rowText.includes(kw));\n    const noExcludesMatch = !pattern.excludes || \n      pattern.excludes.every(ex => !rowText.includes(ex));\n    \n    if (allKeywordsMatch && noExcludesMatch) {\n      return pattern.id;\n    }\n  }\n  \n  return null;\n};\n\n/**\n * CSVから抽出された障がい者データを正しくAPIデータに変換する関数\n */\nconst processDisabilityData = (\n  level1_2Count: number, \n  otherDisabilityCount: number, \n  level1_2ParttimeCount: number, \n  otherParttimeCount: number\n): { \n  level1_2_count: number, \n  other_disability_count: number, \n  level1_2_parttime_count: number, \n  other_parttime_count: number,\n  total_disability_count: number\n} => {\n  // それぞれの値を整数に変換\n  const l1_2 = Math.round(level1_2Count);\n  const other = Math.round(otherDisabilityCount);\n  const l1_2_part = Math.round(level1_2ParttimeCount);\n  const other_part = Math.round(otherParttimeCount);\n  \n  // 合計値を計算（障がい者合計値）\n  // 1級・2級は2倍、パートタイムは0.5倍でカウント\n  const total = (l1_2 * 2) + other + (l1_2_part * 2 * 0.5) + (other_part * 0.5);\n  \n  return {\n    level1_2_count: l1_2,\n    other_disability_count: other,\n    level1_2_parttime_count: l1_2_part,\n    other_parttime_count: other_part,\n    total_disability_count: total\n  };\n};\n\n/**\n * CSV形式で入力されたテンプレートデータをAPIで使用可能な形式に変換する\n * 改良版: 年度の検出とカラム名の特定を強化、障がい者データのマッピングを修正\n */\nexport const convertTemplateDataToApiFormat = (csvData: any[], defaultFiscalYear: number): MonthlyCSVData[] => {\n  // デバッグ出力\n  console.log('テンプレートデータをAPI形式に変換開始:', csvData);\n  \n  // 年度の取得\n  let fiscalYear = defaultFiscalYear; // デフォルト値\n  let actualYearDetected = false;     // 実際に年度が検出されたかのフラグ\n  \n  // CSVのヘッダー行を分析し、数値の年度を検出する\n  for (const row of csvData) {\n    // 年度キーが存在する行を検索\n    if ('年度' in row && row['年度'] !== null && row['年度'] !== '' && row['年度'] !== undefined) {\n      const yearValue = row['年度'];\n      if (yearValue !== null && yearValue !== '' && yearValue !== undefined) {\n        // 文字列や数値にかかわらず、有効な年度値として処理を試みる\n        let yearNum: number | null = null;\n        \n        if (typeof yearValue === 'number') {\n          yearNum = yearValue;\n        } else if (typeof yearValue === 'string') {\n          // 文字列から数値を抽出\n          const match = yearValue.match(/\\d{4}/);\n          if (match) {\n            yearNum = parseInt(match[0], 10);\n          } else {\n            const parsedNum = parseInt(yearValue, 10);\n            if (!isNaN(parsedNum)) {\n              yearNum = parsedNum;\n            }\n          }\n        }\n        \n        if (yearNum !== null && !isNaN(yearNum) && yearNum >= 1000 && yearNum <= 9999) {\n          // 有効な4桁の年度として認識\n          fiscalYear = yearNum;\n          actualYearDetected = true;\n          console.log(`CSVから年度を検出: ${fiscalYear}`);\n          break;\n        }\n      }\n    }\n    \n    // 年度の列がなければ、列名自体から年度を探す (例: 2024, 2023 などの列名)\n    for (const [key, value] of Object.entries(row)) {\n      if (typeof key === 'string' && /^20\\d{2}$/.test(key)) {\n        const yearNum = parseInt(key, 10);\n        if (!isNaN(yearNum) && yearNum >= 2000 && yearNum <= 2999) {\n          fiscalYear = yearNum;\n          actualYearDetected = true;\n          console.log(`CSV列名から年度を検出: ${fiscalYear}`);\n          break;\n        }\n      }\n    }\n    \n    if (actualYearDetected) break;\n  }\n  \n  // 年度が検出されなかった場合はデフォルト値を使用\n  if (!actualYearDetected) {\n    console.log(`年度が検出されませんでした。デフォルト値を使用します: ${defaultFiscalYear}`);\n  } else {\n    console.log(`使用する年度: ${fiscalYear}`);\n  }\n  \n  // 横型テンプレートの処理（修正版）\n  return processHorizontalTemplate(csvData, fiscalYear);\n};\n\n/**\n * 横型テンプレート処理の改良版\n * いくつかの特殊な形式に対応し、障がい者データのマッピングを修正\n */\nconst processHorizontalTemplate = (csvData: any[], fiscalYear: number): MonthlyCSVData[] => {\n  console.log('横型テンプレート処理開始:', { rows: csvData.length, fiscalYear });\n  \n  // 各月のデータを格納する配列\n  const monthlyData: MonthlyCSVData[] = [];\n  \n  // 各月に対応する列の名前と数値\n  const monthColumns = ['4', '5', '6', '7', '8', '9', '10', '11', '12', '1', '2', '3'];\n  \n  if (csvData.length === 0) {\n    console.error('CSVデータが空です');\n    return [];\n  }\n\n  // データを詳細に調査するための状態表示\n  console.log('CSVデータの先頭行:', csvData[0]);\n  console.log('CSV行の例:', csvData.slice(0, 3));\n  \n  // すべての行のキーを表示\n  const allKeys = new Set<string>();\n  csvData.forEach(row => {\n    Object.keys(row).forEach(key => allKeys.add(key));\n  });\n  console.log('すべての列キー:', Array.from(allKeys));\n\n  // ヘッダー行を特定するための改良処理\n  let monthKeyMap: {[key: string]: number} = {};\n  \n  // 月の行を探す - 改良版\n  for (const row of csvData) {\n    // '月'という値を持つ行を探す (これは元のテンプレート形式)\n    const rowValues = Object.values(row).map(v => String(v).trim());\n    if (rowValues.includes('月')) {\n      console.log('「月」を含む行を検出:', row);\n      \n      // 月の列と数値の対応関係を作成\n      Object.entries(row).forEach(([key, value]) => {\n        // 月の値と一致する列を記録\n        if (monthColumns.includes(String(value))) {\n          monthKeyMap[key] = parseInt(String(value), 10);\n        }\n      });\n      \n      if (Object.keys(monthKeyMap).length > 0) {\n        console.log('月の列マッピングを検出:', monthKeyMap);\n        break;\n      }\n    }\n  }\n  \n  // 月の行が見つからない場合、最初の行が月の行であると仮定\n  if (!monthKeyMap || Object.keys(monthKeyMap).length === 0) {\n    console.log('明示的な月行が見つからないため、最初の行を使用します');\n    const firstRow = csvData[0];\n    \n    // 最初の行の数値を月として解釈\n    if (firstRow) {  // nullチェックを追加\n      Object.entries(firstRow).forEach(([key, value]) => {\n        const strValue = String(value).trim();\n        // 数値または月の列名に一致する値を探す\n        if (monthColumns.includes(strValue) || !isNaN(parseInt(strValue, 10))) {\n          // 数値の場合、1-12の範囲に収める\n          const monthNum = parseInt(strValue, 10);\n          if (monthNum >= 1 && monthNum <= 12) {\n            monthKeyMap[key] = monthNum;\n          }\n        }\n      });\n    }\n    \n    console.log('推測された月の列マッピング:', monthKeyMap);\n  }\n  \n  // 月の行が依然として見つからない、またはマッピングが作成できない場合\n  if (Object.keys(monthKeyMap).length === 0) {\n    console.log('月のマッピングが作成できませんでした。列名から推測を試みます。');\n    \n    // 列名から月を推測\n    const possibleMonthColumns = Array.from(allKeys).filter(key => \n      key !== '年度' && key !== '月'\n    );\n    \n    // 月の順序を推測\n    possibleMonthColumns.forEach((key, index) => {\n      const monthIndex = index % 12;\n      const monthNum = monthIndex >= 9 ? monthIndex - 8 : monthIndex + 4; // 4,5,6,7,8,9,10,11,12,1,2,3\n      monthKeyMap[key] = monthNum;\n    });\n    \n    console.log('列名から推測された月のマッピング:', monthKeyMap);\n  }\n  \n  if (Object.keys(monthKeyMap).length === 0) {\n    console.error('月行が見つからず、マッピングも作成できません');\n    return [];\n  }\n\n  // 各行のタイプを特定し、データマッピングを構築\n  const dataRowMappings: {[key: string]: any} = {};\n  \n  // CSVの各行を調査\n  for (const row of csvData) {\n    // 行のすべての値を連結して検索しやすくする\n    const rowText = Object.values(row).map(v => String(v).trim()).join(' ');\n    // 行のタイプを特定（従業員数、障がい者数など）\n    const rowType = identifyRowType(rowText);\n    \n    if (rowType) {\n      console.log(`「${rowType}」の行を検出:`, row);\n      dataRowMappings[rowType] = row;\n    }\n  }\n  \n  console.log('検出されたデータ行:', Object.keys(dataRowMappings));\n  \n  // データの欠落を検出し、警告\n  const expectedRows = [\n    '従業員数 (名)', 'フルタイム従業員数 (名)', 'パートタイム従業員数 (名)', \n    '1級・2級の障がい者 (名)', 'その他障がい者 (名)', \n    '1級・2級の障がい者(パートタイム)(名)', 'その他障がい者(パートタイム)(名)',\n    '法定雇用率 (%)'\n  ];\n  \n  const missingRows = expectedRows.filter(row => !dataRowMappings[row]);\n  if (missingRows.length > 0) {\n    console.warn('必要なデータ行が見つかりません:', missingRows);\n  }\n  \n  // 各月のデータを抽出\n  Object.entries(monthKeyMap).forEach(([columnKey, month]) => {\n    if (month < 1 || month > 12) {\n      console.log(`無効な月番号: ${month}, スキップします`);\n      return;\n    }\n    \n    console.log(`月${month}のデータを処理中... (列キー: ${columnKey})`);\n    \n    // 値を安全に取得する関数\n    const getValueSafely = (rowKey: string, colKey: string): number => {\n      const rowMapping = dataRowMappings[rowKey];\n      if (!rowMapping) return 0;\n      \n      const value = rowMapping[colKey];\n      if (value === undefined || value === null || value === '') return 0;\n      \n      const numValue = typeof value === 'number' ? value : parseFloat(String(value));\n      return isNaN(numValue) ? 0 : numValue;\n    };\n    \n    // 各項目の値を取得\n    const employeesCount = getValueSafely('従業員数 (名)', columnKey);\n    const fulltimeCount = getValueSafely('フルタイム従業員数 (名)', columnKey);\n    const parttimeCount = getValueSafely('パートタイム従業員数 (名)', columnKey);\n    \n    // 障がい者データの取得\n    const level1_2Count = getValueSafely('1級・2級の障がい者 (名)', columnKey);\n    const otherDisabilityCount = getValueSafely('その他障がい者 (名)', columnKey);\n    const level1_2ParttimeCount = getValueSafely('1級・2級の障がい者(パートタイム)(名)', columnKey);\n    const otherParttimeCount = getValueSafely('その他障がい者(パートタイム)(名)', columnKey);\n    \n    // 法定雇用率\n    const legalEmploymentRate = getValueSafely('法定雇用率 (%)', columnKey);\n    \n    // 障がい者データを処理\n    const disabilityData = processDisabilityData(\n      level1_2Count, \n      otherDisabilityCount, \n      level1_2ParttimeCount, \n      otherParttimeCount\n    );\n    \n    // 月データのオブジェクトを作成\n    const monthData: MonthlyCSVData = {\n      fiscal_year: fiscalYear,\n      month,\n      employees_count: Math.round(employeesCount),\n      fulltime_count: Math.round(fulltimeCount),\n      parttime_count: Math.round(parttimeCount),\n      level1_2_count: disabilityData.level1_2_count,\n      other_disability_count: disabilityData.other_disability_count,\n      level1_2_parttime_count: disabilityData.level1_2_parttime_count,\n      other_parttime_count: disabilityData.other_parttime_count,\n      legal_employment_rate: legalEmploymentRate,\n      total_disability_count: disabilityData.total_disability_count\n    };\n    \n    // 実雇用率を計算（障がい者合計数 / 従業員数 * 100）- 小数点第2位で切り上げ\n    if (employeesCount > 0) {\n      const rawRate = (disabilityData.total_disability_count / employeesCount) * 100;\n      monthData.employment_rate = Math.ceil(rawRate * 10) / 10; // 小数点第2位で切り上げ\n    }\n    \n    // 法定雇用者数を計算（従業員数 * 法定雇用率 / 100）\n    if (employeesCount > 0 && legalEmploymentRate > 0) {\n      monthData.required_count = Math.ceil(employeesCount * (legalEmploymentRate / 100));\n    }\n    \n    // 超過・未達を計算（障がい者合計数 - 法定雇用者数）\n    if (monthData.required_count !== undefined && monthData.total_disability_count !== undefined) {\n      monthData.over_under_count = monthData.total_disability_count - monthData.required_count;\n    }\n    \n    console.log(`月${month}のデータ:`, monthData);\n    monthlyData.push(monthData);\n  });\n  \n  console.log(`${monthlyData.length}ヶ月分のデータを抽出しました`);\n  return monthlyData;\n};"],"mappings":"AAOA;AACA;AACA;AACA,OAAO,SAASA,UAAUA,CAACC,KAAyC,EAAU;EAC5E,IAAIA,KAAK,KAAKC,SAAS,IAAID,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,EAAE,EAAE;IACzD,OAAO,CAAC;EACV;EACA,MAAME,GAAG,GAAG,OAAOF,KAAK,KAAK,QAAQ,GAAGG,UAAU,CAACH,KAAK,CAAC,GAAGA,KAAK;EACjE,OAAOI,KAAK,CAACF,GAAG,CAAC,GAAG,CAAC,GAAGA,GAAG;AAC7B;;AAEA;AACA;AACA;AACA,OAAO,MAAMG,mBAAmB,GAAGA,CAACC,eAAsB,EAAEC,YAAqB,KAAiB;EAChG,OAAOD,eAAe,CAACE,GAAG,CAAC,CAACC,GAAQ,EAAEC,KAAa,KAAK;IAAA,IAAAC,gBAAA;IACtD;IACA,MAAMC,aAAa,GAAGC,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;IACvC,IAAIL,GAAG,CAACM,WAAW,EAAE;MACnB,MAAMC,UAAU,GAAGP,GAAG,CAACM,WAAW,CAACE,KAAK,GAAG,CAAC;MAC5C,IAAIR,GAAG,CAACM,WAAW,CAACG,YAAY,KAAK,CAAC,EAAE;QACtCN,aAAa,CAACI,UAAU,CAAC,GAAG,CAAC;MAC/B,CAAC,MAAM,IAAIP,GAAG,CAACM,WAAW,CAACG,YAAY,GAAGT,GAAG,CAACM,WAAW,CAACI,eAAe,GAAG,GAAG,EAAE;QAC/EP,aAAa,CAACI,UAAU,CAAC,GAAG,GAAG;MACjC;IACF;IAEA,OAAO;MACL,GAAGP,GAAG;MACNW,EAAE,EAAEV,KAAK,GAAG,CAAC;MACbE,aAAa;MACbS,IAAI,EAAE,EAAAV,gBAAA,GAAAF,GAAG,CAACM,WAAW,cAAAJ,gBAAA,uBAAfA,gBAAA,CAAiBW,gBAAgB,KAAI;IAC7C,CAAC;EACH,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,qBAAqB,GAAIC,UAA0B,IAAwB;EACtF;EACA,MAAMC,SAAS,GAAGD,UAAU,CAACE,MAAM,CAACC,CAAC,IAAIA,CAAC,IAAI,IAAI,CAAC;;EAEnD;EACA,MAAMC,WAAW,GAAG,CAClB,GAAGH,SAAS,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACV,KAAK,IAAI,CAAC,CAAC,CAACY,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACb,KAAK,GAAGc,CAAC,CAACd,KAAK,CAAC,EACxE,GAAGQ,SAAS,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACV,KAAK,IAAI,CAAC,CAAC,CAACY,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACb,KAAK,GAAGc,CAAC,CAACd,KAAK,CAAC,CACzE;;EAED;EACA,MAAMe,YAA4B,GAAG,EAAE;EACvC,MAAMC,kBAAkB,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;;EAElE;EACA,MAAMC,UAAU,GAAGN,WAAW,CAACO,MAAM,GAAG,CAAC,GAAGP,WAAW,CAAC,CAAC,CAAC,CAACQ,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EAEjGL,kBAAkB,CAACM,OAAO,CAACtB,KAAK,IAAI;IAClC,MAAMuB,YAAY,GAAGZ,WAAW,CAACa,IAAI,CAACd,CAAC,IAAIA,CAAC,CAACV,KAAK,KAAKA,KAAK,CAAC;IAC7D,IAAIuB,YAAY,EAAE;MAChBR,YAAY,CAACU,IAAI,CAACF,YAAY,CAAC;IACjC,CAAC,MAAM;MACL;MACAR,YAAY,CAACU,IAAI,CAAC;QAChBC,EAAE,EAAE,CAAC;QACLP,WAAW,EAAEF,UAAU;QACvBjB,KAAK,EAAEA,KAAK;QACZ2B,eAAe,EAAE,CAAC;QAClBC,cAAc,EAAE,CAAC;QACjBC,cAAc,EAAE,CAAC;QACjBC,cAAc,EAAE,CAAC;QACjBC,sBAAsB,EAAE,CAAC;QACzBC,uBAAuB,EAAE,CAAC;QAC1BC,oBAAoB,EAAE,CAAC;QACvBC,qBAAqB,EAAE,GAAG;QAC1BC,sBAAsB,EAAE,CAAC;QACzBC,eAAe,EAAE,CAAC;QAClBC,cAAc,EAAE,CAAC;QACjBC,gBAAgB,EAAE,CAAC;QACnBC,MAAM,EAAE;MACV,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;;EAEF;EACA,MAAMC,iBAAiB,GAAGzB,YAAY,CAAC0B,MAAM,CAAC,CAACC,GAAG,EAAEhC,CAAC,KAAKgC,GAAG,GAAG5D,UAAU,CAAC4B,CAAC,CAACiB,eAAe,CAAC,EAAE,CAAC,CAAC;EACjG,MAAMgB,oBAAoB,GAAG5B,YAAY,CAAC0B,MAAM,CAAC,CAACC,GAAG,EAAEhC,CAAC,KAAKgC,GAAG,GAAG5D,UAAU,CAAC4B,CAAC,CAACkB,cAAc,CAAC,EAAE,CAAC,CAAC;EACnG,MAAMgB,oBAAoB,GAAG7B,YAAY,CAAC0B,MAAM,CAAC,CAACC,GAAG,EAAEhC,CAAC,KAAKgC,GAAG,GAAG5D,UAAU,CAAC4B,CAAC,CAACmB,cAAc,CAAC,EAAE,CAAC,CAAC;EACnG,MAAMgB,gBAAgB,GAAG9B,YAAY,CAAC0B,MAAM,CAAC,CAACC,GAAG,EAAEhC,CAAC,KAAKgC,GAAG,GAAG5D,UAAU,CAAC4B,CAAC,CAACoB,cAAc,CAAC,EAAE,CAAC,CAAC;EAC/F,MAAMgB,uBAAuB,GAAG/B,YAAY,CAAC0B,MAAM,CAAC,CAACC,GAAG,EAAEhC,CAAC,KAAKgC,GAAG,GAAG5D,UAAU,CAAC4B,CAAC,CAACqB,sBAAsB,CAAC,EAAE,CAAC,CAAC;EAC9G,MAAMgB,wBAAwB,GAAGhC,YAAY,CAAC0B,MAAM,CAAC,CAACC,GAAG,EAAEhC,CAAC,KAAKgC,GAAG,GAAG5D,UAAU,CAAC4B,CAAC,CAACsB,uBAAuB,CAAC,EAAE,CAAC,CAAC;EAChH,MAAMgB,qBAAqB,GAAGjC,YAAY,CAAC0B,MAAM,CAAC,CAACC,GAAG,EAAEhC,CAAC,KAAKgC,GAAG,GAAG5D,UAAU,CAAC4B,CAAC,CAACuB,oBAAoB,CAAC,EAAE,CAAC,CAAC;EAC1G,MAAMgB,uBAAuB,GAAGlC,YAAY,CAAC0B,MAAM,CAAC,CAACC,GAAG,EAAEhC,CAAC,KAAKgC,GAAG,GAAG5D,UAAU,CAAC4B,CAAC,CAACyB,sBAAsB,CAAC,EAAE,CAAC,CAAC;EAC9G,MAAMe,aAAa,GAAGhE,UAAU,CAAC,CAAC6B,YAAY,CAAC0B,MAAM,CAAC,CAACC,GAAG,EAAEhC,CAAC,KAAKgC,GAAG,GAAG5D,UAAU,CAAC4B,CAAC,CAAC0B,eAAe,CAAC,EAAE,CAAC,CAAC,GAAGrB,YAAY,CAACG,MAAM,EAAEiC,OAAO,CAAC,CAAC,CAAC,CAAC;EAC5I,MAAMC,YAAY,GAAGlE,UAAU,CAAC,CAAC6B,YAAY,CAAC0B,MAAM,CAAC,CAACC,GAAG,EAAEhC,CAAC,KAAKgC,GAAG,GAAG5D,UAAU,CAAC4B,CAAC,CAACwB,qBAAqB,CAAC,EAAE,CAAC,CAAC,GAAGnB,YAAY,CAACG,MAAM,EAAEiC,OAAO,CAAC,CAAC,CAAC,CAAC;EACjJ,MAAME,aAAa,GAAGtC,YAAY,CAAC0B,MAAM,CAAC,CAACC,GAAG,EAAEhC,CAAC,KAAKgC,GAAG,GAAG5D,UAAU,CAAC4B,CAAC,CAAC2B,cAAc,CAAC,EAAE,CAAC,CAAC;EAC5F,MAAMiB,YAAY,GAAGvC,YAAY,CAAC0B,MAAM,CAAC,CAACC,GAAG,EAAEhC,CAAC,KAAKgC,GAAG,GAAG5D,UAAU,CAAC4B,CAAC,CAAC4B,gBAAgB,CAAC,EAAE,CAAC,CAAC;;EAE7F;EACA,OAAO;IACLiB,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IACzFC,IAAI,EAAE,CACJ;MAAE9B,EAAE,EAAE,CAAC;MAAE+B,IAAI,EAAE,MAAM;MAAEC,MAAM,EAAE,CAAC,GAAG3C,YAAY,CAACxB,GAAG,CAACmB,CAAC,IAAI5B,UAAU,CAAC4B,CAAC,CAACiB,eAAe,CAAC,CAAC,EAAEa,iBAAiB,CAAC;MAAEmB,MAAM,EAAE;IAAI,CAAC,EAC1H;MAAEjC,EAAE,EAAE,CAAC;MAAE+B,IAAI,EAAE,WAAW;MAAEC,MAAM,EAAE,CAAC,GAAG3C,YAAY,CAACxB,GAAG,CAACmB,CAAC,IAAI5B,UAAU,CAAC4B,CAAC,CAACkB,cAAc,CAAC,CAAC,EAAEe,oBAAoB,CAAC;MAAEgB,MAAM,EAAE;IAAI,CAAC,EACjI;MAAEjC,EAAE,EAAE,CAAC;MAAE+B,IAAI,EAAE,YAAY;MAAEC,MAAM,EAAE,CAAC,GAAG3C,YAAY,CAACxB,GAAG,CAACmB,CAAC,IAAI5B,UAAU,CAAC4B,CAAC,CAACmB,cAAc,CAAC,CAAC,EAAEe,oBAAoB,CAAC;MAAEe,MAAM,EAAE;IAAI,CAAC,EAClI;MAAEjC,EAAE,EAAE,CAAC;MAAE+B,IAAI,EAAE,UAAU;MAAEC,MAAM,EAAE,CAAC,GAAG3C,YAAY,CAACxB,GAAG,CAACmB,CAAC,IAAI5B,UAAU,CAAC4B,CAAC,CAACiB,eAAe,CAAC,CAAC,EAAEa,iBAAiB,CAAC;MAAEmB,MAAM,EAAE,GAAG;MAAEC,YAAY,EAAE;IAAK,CAAC,EAClJ;MAAElC,EAAE,EAAE,CAAC;MAAE+B,IAAI,EAAE,YAAY;MAAEC,MAAM,EAAE,CAAC,GAAG3C,YAAY,CAACxB,GAAG,CAACmB,CAAC,IAAI5B,UAAU,CAAC4B,CAAC,CAACoB,cAAc,CAAC,CAAC,EAAEe,gBAAgB,CAAC;MAAEc,MAAM,EAAE,GAAG;MAAEE,YAAY,EAAE;IAAK,CAAC,EAClJ;MAAEnC,EAAE,EAAE,CAAC;MAAE+B,IAAI,EAAE,SAAS;MAAEC,MAAM,EAAE,CAAC,GAAG3C,YAAY,CAACxB,GAAG,CAACmB,CAAC,IAAI5B,UAAU,CAAC4B,CAAC,CAACqB,sBAAsB,CAAC,CAAC,EAAEe,uBAAuB,CAAC;MAAEa,MAAM,EAAE,GAAG;MAAEE,YAAY,EAAE;IAAK,CAAC,EAC9J;MAAEnC,EAAE,EAAE,CAAC;MAAE+B,IAAI,EAAE,oBAAoB;MAAEC,MAAM,EAAE,CAAC,GAAG3C,YAAY,CAACxB,GAAG,CAACmB,CAAC,IAAI5B,UAAU,CAAC4B,CAAC,CAACsB,uBAAuB,CAAC,CAAC,EAAEe,wBAAwB,CAAC;MAAEY,MAAM,EAAE,GAAG;MAAEE,YAAY,EAAE;IAAK,CAAC,EAC3K;MAAEnC,EAAE,EAAE,CAAC;MAAE+B,IAAI,EAAE,iBAAiB;MAAEC,MAAM,EAAE,CAAC,GAAG3C,YAAY,CAACxB,GAAG,CAACmB,CAAC,IAAI5B,UAAU,CAAC4B,CAAC,CAACuB,oBAAoB,CAAC,CAAC,EAAEe,qBAAqB,CAAC;MAAEW,MAAM,EAAE,GAAG;MAAEE,YAAY,EAAE;IAAK,CAAC,EAClK;MAAEnC,EAAE,EAAE,CAAC;MAAE+B,IAAI,EAAE,QAAQ;MAAEC,MAAM,EAAE,CAAC,GAAG3C,YAAY,CAACxB,GAAG,CAACmB,CAAC,IAAI5B,UAAU,CAAC4B,CAAC,CAACyB,sBAAsB,CAAC,CAAC,EAAEc,uBAAuB,CAAC;MAAEU,MAAM,EAAE,GAAG;MAAEE,YAAY,EAAE,IAAI;MAAED,YAAY,EAAE;IAAK,CAAC,EACjL;MAAElC,EAAE,EAAE,EAAE;MAAE+B,IAAI,EAAE,MAAM;MAAEC,MAAM,EAAE,CAAC,GAAG3C,YAAY,CAACxB,GAAG,CAACmB,CAAC,IAAI5B,UAAU,CAAC4B,CAAC,CAAC0B,eAAe,CAAC,CAAC,EAAEc,aAAa,CAAC;MAAES,MAAM,EAAE,GAAG;MAAEG,OAAO,EAAE,IAAI;MAAEF,YAAY,EAAE;IAAK,CAAC,EAC1J;MAAElC,EAAE,EAAE,EAAE;MAAE+B,IAAI,EAAE,OAAO;MAAEC,MAAM,EAAE,CAAC,GAAG3C,YAAY,CAACxB,GAAG,CAACmB,CAAC,IAAI5B,UAAU,CAAC4B,CAAC,CAACwB,qBAAqB,CAAC,CAAC,EAAEkB,YAAY,CAAC;MAAEO,MAAM,EAAE,GAAG;MAAEG,OAAO,EAAE;IAAK,CAAC,EAC5I;MAAEpC,EAAE,EAAE,EAAE;MAAE+B,IAAI,EAAE,QAAQ;MAAEC,MAAM,EAAE,CAAC,GAAG3C,YAAY,CAACxB,GAAG,CAACmB,CAAC,IAAI5B,UAAU,CAAC4B,CAAC,CAAC2B,cAAc,CAAC,CAAC,EAAEgB,aAAa,CAAC;MAAEM,MAAM,EAAE,GAAG;MAAEC,YAAY,EAAE;IAAK,CAAC,EAC5I;MAAElC,EAAE,EAAE,EAAE;MAAE+B,IAAI,EAAE,OAAO;MAAEC,MAAM,EAAE,CAAC,GAAG3C,YAAY,CAACxB,GAAG,CAACmB,CAAC,IAAI5B,UAAU,CAAC4B,CAAC,CAAC4B,gBAAgB,CAAC,CAAC,EAAEgB,YAAY,CAAC;MAAES,UAAU,EAAE,IAAI;MAAEH,YAAY,EAAE,IAAI;MAAED,MAAM,EAAE;IAAI,CAAC;EAElK,CAAC;AACH,CAAC;;AAED;;AAkBA;AACA;AACA;AACA,MAAMK,wBAAmD,GAAG;EAC1D;EACA,MAAM,EAAE,iBAAiB;EACzB,UAAU,EAAE,iBAAiB;EAC7B,WAAW,EAAE,gBAAgB;EAC7B,eAAe,EAAE,gBAAgB;EACjC,YAAY,EAAE,gBAAgB;EAC9B,gBAAgB,EAAE,gBAAgB;EAClC,UAAU,EAAE,uBAAuB;EACnC,cAAc,EAAE,uBAAuB;EAEvC;EACA,YAAY,EAAE,gBAAgB;EAC9B,gBAAgB,EAAE,gBAAgB;EAClC,SAAS,EAAE,wBAAwB;EACnC,aAAa,EAAE,wBAAwB;EACvC,oBAAoB,EAAE,yBAAyB;EAC/C,uBAAuB,EAAE,yBAAyB;EAClD,oBAAoB,EAAE,yBAAyB;EAC/C,uBAAuB,EAAE,yBAAyB;EAClD,iBAAiB,EAAE,sBAAsB;EACzC,oBAAoB,EAAE,sBAAsB;EAC5C,iBAAiB,EAAE,sBAAsB;EACzC,oBAAoB,EAAE,sBAAsB;EAC5C,QAAQ,EAAE,wBAAwB;EAClC,YAAY,EAAE,wBAAwB;EAEtC;EACA,MAAM,EAAE,iBAAiB;EACzB,UAAU,EAAE,iBAAiB;EAC7B,OAAO,EAAE,uBAAuB;EAChC,WAAW,EAAE,uBAAuB;EACpC,QAAQ,EAAE,gBAAgB;EAC1B,YAAY,EAAE,gBAAgB;EAC9B,OAAO,EAAE,kBAAkB;EAC3B,WAAW,EAAE;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,mBAAmB,GAAIhD,UAAkB,IAAa;EACjE;EACA,IAAIiD,UAAU,GAAG,QAAQ,CAAC,CAAC;;EAE3B;EACAA,UAAU,IAAI,MAAMjD,UAAU,IAAI;;EAElC;EACAiD,UAAU,IAAI,gCAAgC;;EAE9C;EACA,MAAMC,QAAQ,GAAG,CACf,CAAC,UAAU,EAAE,GAAGvE,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAAC,EACpC,CAAC,eAAe,EAAE,GAAGD,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAAC,EACzC,CAAC,gBAAgB,EAAE,GAAGD,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAAC,EAC1C,CAAC,gBAAgB,EAAE,GAAGD,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAAC,EAC1C,CAAC,aAAa,EAAE,GAAGD,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAAC,EACvC,CAAC,uBAAuB,EAAE,GAAGD,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAAC,EACjD,CAAC,oBAAoB,EAAE,GAAGD,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAAC,EAC9C,CAAC,WAAW,EAAE,GAAGD,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC,CAAC,CACxC;;EAED;EACAsE,QAAQ,CAAC7C,OAAO,CAAC8C,GAAG,IAAI;IACtBF,UAAU,IAAIE,GAAG,CAACC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI;EACpC,CAAC,CAAC;EAEF,OAAOH,UAAU;AACnB,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMI,WAAW,GAAGA,CAACC,OAAe,EAAEC,QAAgB,KAAW;EACtE,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACH,OAAO,CAAC,EAAE;IAAEI,IAAI,EAAE;EAA0B,CAAC,CAAC;EACrE,MAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACL,IAAI,CAAC;EACrC,MAAMM,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;EACxCF,IAAI,CAACG,YAAY,CAAC,MAAM,EAAEN,GAAG,CAAC;EAC9BG,IAAI,CAACG,YAAY,CAAC,UAAU,EAAEV,QAAQ,CAAC;EACvCQ,QAAQ,CAACG,IAAI,CAACC,WAAW,CAACL,IAAI,CAAC;EAC/BA,IAAI,CAACM,KAAK,CAAC,CAAC;EACZL,QAAQ,CAACG,IAAI,CAACG,WAAW,CAACP,IAAI,CAAC;AACjC,CAAC;;AAED;AACA;AACA;AACA,MAAMQ,eAAe,GAAIC,OAAe,IAAoB;EAC1D;EACA,MAAMC,QAAQ,GAAG,CACf;IAAE/D,EAAE,EAAE,UAAU;IAAEgE,QAAQ,EAAE,CAAC,MAAM,CAAC;IAAEC,QAAQ,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,MAAM;EAAE,CAAC,EAC7E;IAAEjE,EAAE,EAAE,eAAe;IAAEgE,QAAQ,EAAE,CAAC,OAAO,EAAE,KAAK;EAAE,CAAC,EACnD;IAAEhE,EAAE,EAAE,gBAAgB;IAAEgE,QAAQ,EAAE,CAAC,QAAQ,EAAE,KAAK;EAAE,CAAC,EACrD;IAAEhE,EAAE,EAAE,cAAc;IAAEgE,QAAQ,EAAE,CAAC,MAAM,EAAE,KAAK;EAAE,CAAC,EACjD;IAAEhE,EAAE,EAAE,gBAAgB;IAAEgE,QAAQ,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC;IAAEC,QAAQ,EAAE,CAAC,QAAQ;EAAE,CAAC,EAC3E;IAAEjE,EAAE,EAAE,aAAa;IAAEgE,QAAQ,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC;IAAEC,QAAQ,EAAE,CAAC,QAAQ;EAAE,CAAC,EACtE;IAAEjE,EAAE,EAAE,uBAAuB;IAAEgE,QAAQ,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,QAAQ;EAAE,CAAC,EACtE;IAAEhE,EAAE,EAAE,oBAAoB;IAAEgE,QAAQ,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ;EAAE,CAAC,EACjE;IAAEhE,EAAE,EAAE,WAAW;IAAEgE,QAAQ,EAAE,CAAC,IAAI,EAAE,KAAK;EAAE,CAAC,CAC7C;EAED,KAAK,MAAME,OAAO,IAAIH,QAAQ,EAAE;IAC9B,MAAMI,gBAAgB,GAAGD,OAAO,CAACF,QAAQ,CAACI,KAAK,CAACC,EAAE,IAAIP,OAAO,CAACQ,QAAQ,CAACD,EAAE,CAAC,CAAC;IAC3E,MAAME,eAAe,GAAG,CAACL,OAAO,CAACD,QAAQ,IACvCC,OAAO,CAACD,QAAQ,CAACG,KAAK,CAACI,EAAE,IAAI,CAACV,OAAO,CAACQ,QAAQ,CAACE,EAAE,CAAC,CAAC;IAErD,IAAIL,gBAAgB,IAAII,eAAe,EAAE;MACvC,OAAOL,OAAO,CAAClE,EAAE;IACnB;EACF;EAEA,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA,MAAMyE,qBAAqB,GAAGA,CAC5BC,aAAqB,EACrBC,oBAA4B,EAC5BC,qBAA6B,EAC7BC,kBAA0B,KAOvB;EACH;EACA,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACN,aAAa,CAAC;EACtC,MAAMO,KAAK,GAAGF,IAAI,CAACC,KAAK,CAACL,oBAAoB,CAAC;EAC9C,MAAMO,SAAS,GAAGH,IAAI,CAACC,KAAK,CAACJ,qBAAqB,CAAC;EACnD,MAAMO,UAAU,GAAGJ,IAAI,CAACC,KAAK,CAACH,kBAAkB,CAAC;;EAEjD;EACA;EACA,MAAMO,KAAK,GAAIN,IAAI,GAAG,CAAC,GAAIG,KAAK,GAAIC,SAAS,GAAG,CAAC,GAAG,GAAI,GAAIC,UAAU,GAAG,GAAI;EAE7E,OAAO;IACL/E,cAAc,EAAE0E,IAAI;IACpBzE,sBAAsB,EAAE4E,KAAK;IAC7B3E,uBAAuB,EAAE4E,SAAS;IAClC3E,oBAAoB,EAAE4E,UAAU;IAChC1E,sBAAsB,EAAE2E;EAC1B,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,8BAA8B,GAAGA,CAACC,OAAc,EAAEC,iBAAyB,KAAuB;EAC7G;EACAC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEH,OAAO,CAAC;;EAE7C;EACA,IAAI/F,UAAU,GAAGgG,iBAAiB,CAAC,CAAC;EACpC,IAAIG,kBAAkB,GAAG,KAAK,CAAC,CAAK;;EAEpC;EACA,KAAK,MAAMhD,GAAG,IAAI4C,OAAO,EAAE;IACzB;IACA,IAAI,IAAI,IAAI5C,GAAG,IAAIA,GAAG,CAAC,IAAI,CAAC,KAAK,IAAI,IAAIA,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,IAAIA,GAAG,CAAC,IAAI,CAAC,KAAKpF,SAAS,EAAE;MACpF,MAAMqI,SAAS,GAAGjD,GAAG,CAAC,IAAI,CAAC;MAC3B,IAAIiD,SAAS,KAAK,IAAI,IAAIA,SAAS,KAAK,EAAE,IAAIA,SAAS,KAAKrI,SAAS,EAAE;QACrE;QACA,IAAIsI,OAAsB,GAAG,IAAI;QAEjC,IAAI,OAAOD,SAAS,KAAK,QAAQ,EAAE;UACjCC,OAAO,GAAGD,SAAS;QACrB,CAAC,MAAM,IAAI,OAAOA,SAAS,KAAK,QAAQ,EAAE;UACxC;UACA,MAAME,KAAK,GAAGF,SAAS,CAACE,KAAK,CAAC,OAAO,CAAC;UACtC,IAAIA,KAAK,EAAE;YACTD,OAAO,GAAGE,QAAQ,CAACD,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;UAClC,CAAC,MAAM;YACL,MAAME,SAAS,GAAGD,QAAQ,CAACH,SAAS,EAAE,EAAE,CAAC;YACzC,IAAI,CAAClI,KAAK,CAACsI,SAAS,CAAC,EAAE;cACrBH,OAAO,GAAGG,SAAS;YACrB;UACF;QACF;QAEA,IAAIH,OAAO,KAAK,IAAI,IAAI,CAACnI,KAAK,CAACmI,OAAO,CAAC,IAAIA,OAAO,IAAI,IAAI,IAAIA,OAAO,IAAI,IAAI,EAAE;UAC7E;UACArG,UAAU,GAAGqG,OAAO;UACpBF,kBAAkB,GAAG,IAAI;UACzBF,OAAO,CAACC,GAAG,CAAC,eAAelG,UAAU,EAAE,CAAC;UACxC;QACF;MACF;IACF;;IAEA;IACA,KAAK,MAAM,CAACyG,GAAG,EAAE3I,KAAK,CAAC,IAAI4I,MAAM,CAACC,OAAO,CAACxD,GAAG,CAAC,EAAE;MAC9C,IAAI,OAAOsD,GAAG,KAAK,QAAQ,IAAI,WAAW,CAACG,IAAI,CAACH,GAAG,CAAC,EAAE;QACpD,MAAMJ,OAAO,GAAGE,QAAQ,CAACE,GAAG,EAAE,EAAE,CAAC;QACjC,IAAI,CAACvI,KAAK,CAACmI,OAAO,CAAC,IAAIA,OAAO,IAAI,IAAI,IAAIA,OAAO,IAAI,IAAI,EAAE;UACzDrG,UAAU,GAAGqG,OAAO;UACpBF,kBAAkB,GAAG,IAAI;UACzBF,OAAO,CAACC,GAAG,CAAC,iBAAiBlG,UAAU,EAAE,CAAC;UAC1C;QACF;MACF;IACF;IAEA,IAAImG,kBAAkB,EAAE;EAC1B;;EAEA;EACA,IAAI,CAACA,kBAAkB,EAAE;IACvBF,OAAO,CAACC,GAAG,CAAC,+BAA+BF,iBAAiB,EAAE,CAAC;EACjE,CAAC,MAAM;IACLC,OAAO,CAACC,GAAG,CAAC,WAAWlG,UAAU,EAAE,CAAC;EACtC;;EAEA;EACA,OAAO6G,yBAAyB,CAACd,OAAO,EAAE/F,UAAU,CAAC;AACvD,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAM6G,yBAAyB,GAAGA,CAACd,OAAc,EAAE/F,UAAkB,KAAuB;EAC1FiG,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE;IAAEY,IAAI,EAAEf,OAAO,CAAC9F,MAAM;IAAED;EAAW,CAAC,CAAC;;EAElE;EACA,MAAM+G,WAA6B,GAAG,EAAE;;EAExC;EACA,MAAMC,YAAY,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;EAEpF,IAAIjB,OAAO,CAAC9F,MAAM,KAAK,CAAC,EAAE;IACxBgG,OAAO,CAACgB,KAAK,CAAC,YAAY,CAAC;IAC3B,OAAO,EAAE;EACX;;EAEA;EACAhB,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEH,OAAO,CAAC,CAAC,CAAC,CAAC;EACtCE,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEH,OAAO,CAACmB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE3C;EACA,MAAMC,OAAO,GAAG,IAAIC,GAAG,CAAS,CAAC;EACjCrB,OAAO,CAAC1F,OAAO,CAAC8C,GAAG,IAAI;IACrBuD,MAAM,CAACW,IAAI,CAAClE,GAAG,CAAC,CAAC9C,OAAO,CAACoG,GAAG,IAAIU,OAAO,CAACG,GAAG,CAACb,GAAG,CAAC,CAAC;EACnD,CAAC,CAAC;EACFR,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEvH,KAAK,CAAC4I,IAAI,CAACJ,OAAO,CAAC,CAAC;;EAE5C;EACA,IAAIK,WAAoC,GAAG,CAAC,CAAC;;EAE7C;EACA,KAAK,MAAMrE,GAAG,IAAI4C,OAAO,EAAE;IACzB;IACA,MAAM0B,SAAS,GAAGf,MAAM,CAACjE,MAAM,CAACU,GAAG,CAAC,CAAC7E,GAAG,CAACoJ,CAAC,IAAIC,MAAM,CAACD,CAAC,CAAC,CAACE,IAAI,CAAC,CAAC,CAAC;IAC/D,IAAIH,SAAS,CAAC1C,QAAQ,CAAC,GAAG,CAAC,EAAE;MAC3BkB,OAAO,CAACC,GAAG,CAAC,aAAa,EAAE/C,GAAG,CAAC;;MAE/B;MACAuD,MAAM,CAACC,OAAO,CAACxD,GAAG,CAAC,CAAC9C,OAAO,CAAC,CAAC,CAACoG,GAAG,EAAE3I,KAAK,CAAC,KAAK;QAC5C;QACA,IAAIkJ,YAAY,CAACjC,QAAQ,CAAC4C,MAAM,CAAC7J,KAAK,CAAC,CAAC,EAAE;UACxC0J,WAAW,CAACf,GAAG,CAAC,GAAGF,QAAQ,CAACoB,MAAM,CAAC7J,KAAK,CAAC,EAAE,EAAE,CAAC;QAChD;MACF,CAAC,CAAC;MAEF,IAAI4I,MAAM,CAACW,IAAI,CAACG,WAAW,CAAC,CAACvH,MAAM,GAAG,CAAC,EAAE;QACvCgG,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEsB,WAAW,CAAC;QACxC;MACF;IACF;EACF;;EAEA;EACA,IAAI,CAACA,WAAW,IAAId,MAAM,CAACW,IAAI,CAACG,WAAW,CAAC,CAACvH,MAAM,KAAK,CAAC,EAAE;IACzDgG,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IACzC,MAAM2B,QAAQ,GAAG9B,OAAO,CAAC,CAAC,CAAC;;IAE3B;IACA,IAAI8B,QAAQ,EAAE;MAAG;MACfnB,MAAM,CAACC,OAAO,CAACkB,QAAQ,CAAC,CAACxH,OAAO,CAAC,CAAC,CAACoG,GAAG,EAAE3I,KAAK,CAAC,KAAK;QACjD,MAAMgK,QAAQ,GAAGH,MAAM,CAAC7J,KAAK,CAAC,CAAC8J,IAAI,CAAC,CAAC;QACrC;QACA,IAAIZ,YAAY,CAACjC,QAAQ,CAAC+C,QAAQ,CAAC,IAAI,CAAC5J,KAAK,CAACqI,QAAQ,CAACuB,QAAQ,EAAE,EAAE,CAAC,CAAC,EAAE;UACrE;UACA,MAAMC,QAAQ,GAAGxB,QAAQ,CAACuB,QAAQ,EAAE,EAAE,CAAC;UACvC,IAAIC,QAAQ,IAAI,CAAC,IAAIA,QAAQ,IAAI,EAAE,EAAE;YACnCP,WAAW,CAACf,GAAG,CAAC,GAAGsB,QAAQ;UAC7B;QACF;MACF,CAAC,CAAC;IACJ;IAEA9B,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEsB,WAAW,CAAC;EAC5C;;EAEA;EACA,IAAId,MAAM,CAACW,IAAI,CAACG,WAAW,CAAC,CAACvH,MAAM,KAAK,CAAC,EAAE;IACzCgG,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;;IAE9C;IACA,MAAM8B,oBAAoB,GAAGrJ,KAAK,CAAC4I,IAAI,CAACJ,OAAO,CAAC,CAAC3H,MAAM,CAACiH,GAAG,IACzDA,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAK,GAC1B,CAAC;;IAED;IACAuB,oBAAoB,CAAC3H,OAAO,CAAC,CAACoG,GAAG,EAAEjI,KAAK,KAAK;MAC3C,MAAMM,UAAU,GAAGN,KAAK,GAAG,EAAE;MAC7B,MAAMuJ,QAAQ,GAAGjJ,UAAU,IAAI,CAAC,GAAGA,UAAU,GAAG,CAAC,GAAGA,UAAU,GAAG,CAAC,CAAC,CAAC;MACpE0I,WAAW,CAACf,GAAG,CAAC,GAAGsB,QAAQ;IAC7B,CAAC,CAAC;IAEF9B,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEsB,WAAW,CAAC;EAC/C;EAEA,IAAId,MAAM,CAACW,IAAI,CAACG,WAAW,CAAC,CAACvH,MAAM,KAAK,CAAC,EAAE;IACzCgG,OAAO,CAACgB,KAAK,CAAC,wBAAwB,CAAC;IACvC,OAAO,EAAE;EACX;;EAEA;EACA,MAAMgB,eAAqC,GAAG,CAAC,CAAC;;EAEhD;EACA,KAAK,MAAM9E,GAAG,IAAI4C,OAAO,EAAE;IACzB;IACA,MAAMxB,OAAO,GAAGmC,MAAM,CAACjE,MAAM,CAACU,GAAG,CAAC,CAAC7E,GAAG,CAACoJ,CAAC,IAAIC,MAAM,CAACD,CAAC,CAAC,CAACE,IAAI,CAAC,CAAC,CAAC,CAACxE,IAAI,CAAC,GAAG,CAAC;IACvE;IACA,MAAM8E,OAAO,GAAG5D,eAAe,CAACC,OAAO,CAAC;IAExC,IAAI2D,OAAO,EAAE;MACXjC,OAAO,CAACC,GAAG,CAAC,IAAIgC,OAAO,SAAS,EAAE/E,GAAG,CAAC;MACtC8E,eAAe,CAACC,OAAO,CAAC,GAAG/E,GAAG;IAChC;EACF;EAEA8C,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEQ,MAAM,CAACW,IAAI,CAACY,eAAe,CAAC,CAAC;;EAEvD;EACA,MAAME,YAAY,GAAG,CACnB,UAAU,EAAE,eAAe,EAAE,gBAAgB,EAC7C,gBAAgB,EAAE,aAAa,EAC/B,uBAAuB,EAAE,oBAAoB,EAC7C,WAAW,CACZ;EAED,MAAMC,WAAW,GAAGD,YAAY,CAAC3I,MAAM,CAAC2D,GAAG,IAAI,CAAC8E,eAAe,CAAC9E,GAAG,CAAC,CAAC;EACrE,IAAIiF,WAAW,CAACnI,MAAM,GAAG,CAAC,EAAE;IAC1BgG,OAAO,CAACoC,IAAI,CAAC,kBAAkB,EAAED,WAAW,CAAC;EAC/C;;EAEA;EACA1B,MAAM,CAACC,OAAO,CAACa,WAAW,CAAC,CAACnH,OAAO,CAAC,CAAC,CAACiI,SAAS,EAAEvJ,KAAK,CAAC,KAAK;IAC1D,IAAIA,KAAK,GAAG,CAAC,IAAIA,KAAK,GAAG,EAAE,EAAE;MAC3BkH,OAAO,CAACC,GAAG,CAAC,WAAWnH,KAAK,WAAW,CAAC;MACxC;IACF;IAEAkH,OAAO,CAACC,GAAG,CAAC,IAAInH,KAAK,qBAAqBuJ,SAAS,GAAG,CAAC;;IAEvD;IACA,MAAMC,cAAc,GAAGA,CAACC,MAAc,EAAEC,MAAc,KAAa;MACjE,MAAMC,UAAU,GAAGT,eAAe,CAACO,MAAM,CAAC;MAC1C,IAAI,CAACE,UAAU,EAAE,OAAO,CAAC;MAEzB,MAAM5K,KAAK,GAAG4K,UAAU,CAACD,MAAM,CAAC;MAChC,IAAI3K,KAAK,KAAKC,SAAS,IAAID,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,EAAE,EAAE,OAAO,CAAC;MAEnE,MAAM6K,QAAQ,GAAG,OAAO7K,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAGG,UAAU,CAAC0J,MAAM,CAAC7J,KAAK,CAAC,CAAC;MAC9E,OAAOI,KAAK,CAACyK,QAAQ,CAAC,GAAG,CAAC,GAAGA,QAAQ;IACvC,CAAC;;IAED;IACA,MAAMC,cAAc,GAAGL,cAAc,CAAC,UAAU,EAAED,SAAS,CAAC;IAC5D,MAAMO,aAAa,GAAGN,cAAc,CAAC,eAAe,EAAED,SAAS,CAAC;IAChE,MAAMQ,aAAa,GAAGP,cAAc,CAAC,gBAAgB,EAAED,SAAS,CAAC;;IAEjE;IACA,MAAMnD,aAAa,GAAGoD,cAAc,CAAC,gBAAgB,EAAED,SAAS,CAAC;IACjE,MAAMlD,oBAAoB,GAAGmD,cAAc,CAAC,aAAa,EAAED,SAAS,CAAC;IACrE,MAAMjD,qBAAqB,GAAGkD,cAAc,CAAC,uBAAuB,EAAED,SAAS,CAAC;IAChF,MAAMhD,kBAAkB,GAAGiD,cAAc,CAAC,oBAAoB,EAAED,SAAS,CAAC;;IAE1E;IACA,MAAMS,mBAAmB,GAAGR,cAAc,CAAC,WAAW,EAAED,SAAS,CAAC;;IAElE;IACA,MAAMU,cAAc,GAAG9D,qBAAqB,CAC1CC,aAAa,EACbC,oBAAoB,EACpBC,qBAAqB,EACrBC,kBACF,CAAC;;IAED;IACA,MAAM2D,SAAyB,GAAG;MAChC/I,WAAW,EAAEF,UAAU;MACvBjB,KAAK;MACL2B,eAAe,EAAE8E,IAAI,CAACC,KAAK,CAACmD,cAAc,CAAC;MAC3CjI,cAAc,EAAE6E,IAAI,CAACC,KAAK,CAACoD,aAAa,CAAC;MACzCjI,cAAc,EAAE4E,IAAI,CAACC,KAAK,CAACqD,aAAa,CAAC;MACzCjI,cAAc,EAAEmI,cAAc,CAACnI,cAAc;MAC7CC,sBAAsB,EAAEkI,cAAc,CAAClI,sBAAsB;MAC7DC,uBAAuB,EAAEiI,cAAc,CAACjI,uBAAuB;MAC/DC,oBAAoB,EAAEgI,cAAc,CAAChI,oBAAoB;MACzDC,qBAAqB,EAAE8H,mBAAmB;MAC1C7H,sBAAsB,EAAE8H,cAAc,CAAC9H;IACzC,CAAC;;IAED;IACA,IAAI0H,cAAc,GAAG,CAAC,EAAE;MACtB,MAAMM,OAAO,GAAIF,cAAc,CAAC9H,sBAAsB,GAAG0H,cAAc,GAAI,GAAG;MAC9EK,SAAS,CAAC9H,eAAe,GAAGqE,IAAI,CAAC2D,IAAI,CAACD,OAAO,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;IAC5D;;IAEA;IACA,IAAIN,cAAc,GAAG,CAAC,IAAIG,mBAAmB,GAAG,CAAC,EAAE;MACjDE,SAAS,CAAC7H,cAAc,GAAGoE,IAAI,CAAC2D,IAAI,CAACP,cAAc,IAAIG,mBAAmB,GAAG,GAAG,CAAC,CAAC;IACpF;;IAEA;IACA,IAAIE,SAAS,CAAC7H,cAAc,KAAKrD,SAAS,IAAIkL,SAAS,CAAC/H,sBAAsB,KAAKnD,SAAS,EAAE;MAC5FkL,SAAS,CAAC5H,gBAAgB,GAAG4H,SAAS,CAAC/H,sBAAsB,GAAG+H,SAAS,CAAC7H,cAAc;IAC1F;IAEA6E,OAAO,CAACC,GAAG,CAAC,IAAInH,KAAK,OAAO,EAAEkK,SAAS,CAAC;IACxClC,WAAW,CAACvG,IAAI,CAACyI,SAAS,CAAC;EAC7B,CAAC,CAAC;EAEFhD,OAAO,CAACC,GAAG,CAAC,GAAGa,WAAW,CAAC9G,MAAM,gBAAgB,CAAC;EAClD,OAAO8G,WAAW;AACpB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}