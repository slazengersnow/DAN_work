{"ast":null,"code":"/**\n * 従業員詳細の対象年度セレクタを表示するスクリプト\n * - 従業員詳細画面のツールバーに対象年度選択ドロップダウンを追加\n * - 他の機能に影響を与えずに動作\n * - デバッグ情報を詳細に出力\n */\n(function () {\n  'use strict';\n\n  // デバッグログ用の関数\n  function logDebug(message) {\n    console.log('[EmployeeYearRestorer] ' + message);\n  }\n  logDebug('スクリプトを開始します');\n\n  // 既存のMutationObserverを停止（存在する場合）\n  if (window._existingEmployeeObserver && typeof window._existingEmployeeObserver.disconnect === 'function') {\n    window._existingEmployeeObserver.disconnect();\n    logDebug('既存のObserverを停止しました');\n  }\n\n  // 従業員詳細の対象年度セレクタを追加する関数\n  function addEmployeeDetailYearSelector() {\n    // 従業員詳細画面が表示されているか確認（複数の方法で検出）\n    const headings = document.querySelectorAll('h1, h2, h3, h4');\n    let isEmployeeDetailActive = false;\n\n    // 見出しテキストで検出\n    for (const heading of headings) {\n      if (heading.textContent && heading.textContent.includes('従業員詳細')) {\n        isEmployeeDetailActive = true;\n        break;\n      }\n    }\n\n    // クラスで検出\n    if (!isEmployeeDetailActive) {\n      isEmployeeDetailActive = !!document.querySelector('.employee-detail, .employee-profile, .employee-info');\n    }\n\n    // タブで検出\n    if (!isEmployeeDetailActive) {\n      const activeTabs = document.querySelectorAll('.nav-link.active, .tab-pane.active');\n      for (const tab of activeTabs) {\n        if (tab.textContent && tab.textContent.includes('従業員')) {\n          isEmployeeDetailActive = true;\n          break;\n        }\n      }\n    }\n    if (!isEmployeeDetailActive) {\n      // 従業員情報フォームの有無で検出（最後の手段）\n      const formElements = document.querySelectorAll('form, .form-group');\n      for (const form of formElements) {\n        if (form.querySelector('input[name=\"name\"], input[name=\"employee_id\"]')) {\n          isEmployeeDetailActive = true;\n          break;\n        }\n      }\n    }\n    if (!isEmployeeDetailActive) {\n      logDebug('従業員詳細画面が表示されていません');\n      return false;\n    }\n    logDebug('従業員詳細画面を検出しました');\n\n    // すでに年度セレクタが存在する場合は処理しない\n    if (document.querySelector('.employee-year-selector-fixed')) {\n      logDebug('従業員詳細の年度セレクタはすでに存在します');\n      return true;\n    }\n\n    // ツールバー領域を特定（複数の方法で試行）\n    let toolbar = null;\n\n    // 方法1: ボタングループを探す\n    toolbar = document.querySelector('.btn-group, .button-group, .toolbar, .actions');\n    if (toolbar) {\n      logDebug('ボタングループをツールバーとして検出しました');\n    }\n\n    // 方法2: 編集ボタンの親要素を探す\n    if (!toolbar) {\n      const editButtons = document.querySelectorAll('button');\n      for (const button of editButtons) {\n        if (button.textContent && (button.textContent.includes('編集') || button.textContent.includes('修正') || button.textContent.includes('Edit'))) {\n          toolbar = button.parentElement;\n          logDebug('編集ボタンから親ツールバーを検出しました');\n          break;\n        }\n      }\n    }\n\n    // 方法3: 戻るボタンの親要素を探す\n    if (!toolbar) {\n      const backButtons = document.querySelectorAll('button');\n      for (const button of backButtons) {\n        if (button.textContent && (button.textContent.includes('戻る') || button.textContent.includes('Back'))) {\n          toolbar = button.parentElement;\n          logDebug('戻るボタンから親ツールバーを検出しました');\n          break;\n        }\n      }\n    }\n\n    // 方法4: いずれかのボタンが含まれるコンテナを探す\n    if (!toolbar) {\n      const anyButton = document.querySelector('button');\n      if (anyButton) {\n        // ボタンから上に3階層まで遡って適切なコンテナを探す\n        let parent = anyButton.parentElement;\n        for (let i = 0; i < 3; i++) {\n          if (parent && parent.querySelectorAll('button').length > 1) {\n            toolbar = parent;\n            logDebug(`ボタンコンテナをツールバーとして検出しました (階層: ${i + 1})`);\n            break;\n          }\n          if (parent) parent = parent.parentElement;\n        }\n      }\n    }\n\n    // 方法5: 最後の手段として、従業員詳細の見出しの次の要素を試す\n    if (!toolbar) {\n      for (const heading of headings) {\n        if (heading.textContent && heading.textContent.includes('従業員詳細')) {\n          if (heading.nextElementSibling) {\n            toolbar = heading.nextElementSibling;\n            logDebug('見出しの次の要素をツールバーとして使用します');\n            break;\n          }\n        }\n      }\n    }\n    if (!toolbar) {\n      // 最終手段：新しいツールバーを作成して挿入\n      const employeeDetailContainer = document.querySelector('.employee-detail, .employee-profile') || document.querySelector('h2, h3, h4').parentElement;\n      if (employeeDetailContainer) {\n        toolbar = document.createElement('div');\n        toolbar.className = 'employee-toolbar-created';\n        toolbar.style.cssText = 'margin-bottom: 15px; padding: 8px 0;';\n\n        // 最初の子要素の前に挿入\n        if (employeeDetailContainer.firstChild) {\n          employeeDetailContainer.insertBefore(toolbar, employeeDetailContainer.firstChild);\n          logDebug('新しいツールバーを作成しました');\n        } else {\n          employeeDetailContainer.appendChild(toolbar);\n          logDebug('新しいツールバーをコンテナの末尾に追加しました');\n        }\n      } else {\n        logDebug('従業員詳細のツールバーを作成できる適切なコンテナが見つかりませんでした');\n        return false;\n      }\n    }\n\n    // 年度セレクタを作成\n    const yearSelector = document.createElement('div');\n    yearSelector.className = 'employee-year-selector-fixed';\n    yearSelector.style.cssText = 'display: inline-block; margin-right: 15px; vertical-align: middle;';\n\n    // 現在の年を取得\n    const currentYear = new Date().getFullYear();\n\n    // セレクタの内容を作成\n    yearSelector.innerHTML = `\n      <label style=\"margin-right: 5px; font-weight: normal; display: inline-block; vertical-align: middle;\">対象年度:</label>\n      <select class=\"form-control form-control-sm\" style=\"display: inline-block; width: auto; height: 31px; padding: 0.25rem 0.5rem; vertical-align: middle;\">\n        <option value=\"${currentYear - 2}\">${currentYear - 2}年度</option>\n        <option value=\"${currentYear - 1}\">${currentYear - 1}年度</option>\n        <option value=\"${currentYear}\" selected>${currentYear}年度</option>\n        <option value=\"${currentYear + 1}\">${currentYear + 1}年度</option>\n      </select>\n    `;\n\n    // ツールバーの先頭に挿入\n    if (toolbar.firstChild) {\n      toolbar.insertBefore(yearSelector, toolbar.firstChild);\n    } else {\n      toolbar.appendChild(yearSelector);\n    }\n\n    // イベントリスナーの追加\n    const select = yearSelector.querySelector('select');\n    if (select) {\n      select.addEventListener('change', function (e) {\n        logDebug(`年度が変更されました: ${e.target.value}`);\n\n        // 年度変更イベントの発行（他のコンポーネントが購読可能）\n        const yearChangeEvent = new CustomEvent('employeeYearChanged', {\n          detail: {\n            year: parseInt(e.target.value, 10),\n            yearText: `${e.target.value}年度`\n          },\n          bubbles: true\n        });\n        document.dispatchEvent(yearChangeEvent);\n\n        // UIフィードバック（選択状態を視覚的に示す）\n        const yearText = document.createElement('span');\n        yearText.className = 'year-change-notification';\n        yearText.textContent = `${e.target.value}年度のデータを表示します`;\n        yearText.style.cssText = 'color: #3a66d4; margin-left: 10px; font-weight: bold; opacity: 0; transition: opacity 0.3s;';\n\n        // 既存の通知を削除\n        const existingNotification = document.querySelector('.year-change-notification');\n        if (existingNotification) {\n          existingNotification.remove();\n        }\n\n        // 新しい通知を追加\n        yearSelector.appendChild(yearText);\n\n        // アニメーション効果\n        setTimeout(() => {\n          yearText.style.opacity = '1';\n\n          // 3秒後にフェードアウト\n          setTimeout(() => {\n            yearText.style.opacity = '0';\n\n            // フェードアウト後に削除\n            setTimeout(() => {\n              yearText.remove();\n            }, 300);\n          }, 3000);\n        }, 10);\n      });\n    }\n    logDebug('従業員詳細の年度セレクタを追加しました');\n    return true;\n  }\n\n  // 初回実行\n  const result = addEmployeeDetailYearSelector();\n  logDebug(`初回実行結果: ${result ? '成功' : '要素が見つかりませんでした'}`);\n\n  // MutationObserverの設定\n  // デバウンス処理用の変数\n  let debounceTimer = null;\n  const observer = new MutationObserver(function (mutations) {\n    // 処理を間引く（デバウンス）\n    if (debounceTimer) {\n      clearTimeout(debounceTimer);\n    }\n    debounceTimer = setTimeout(() => {\n      // 重要な変更のみに反応するフィルタリング\n      let shouldUpdate = false;\n      for (const mutation of mutations) {\n        if (mutation.type === 'childList' && mutation.addedNodes.length) {\n          for (const node of mutation.addedNodes) {\n            if (node.nodeType === Node.ELEMENT_NODE) {\n              var _node$classList, _node$querySelector, _node$classList2, _node$querySelector2;\n              // タブペインや従業員関連要素の追加のみに反応\n              if ((_node$classList = node.classList) !== null && _node$classList !== void 0 && _node$classList.contains('tab-pane') || (_node$querySelector = node.querySelector) !== null && _node$querySelector !== void 0 && _node$querySelector.call(node, '.tab-pane') || (_node$classList2 = node.classList) !== null && _node$classList2 !== void 0 && _node$classList2.contains('employee-detail') || (_node$querySelector2 = node.querySelector) !== null && _node$querySelector2 !== void 0 && _node$querySelector2.call(node, 'button') || node.textContent && node.textContent.includes('従業員')) {\n                shouldUpdate = true;\n                break;\n              }\n            }\n          }\n        }\n        if (shouldUpdate) break;\n      }\n      if (shouldUpdate) {\n        logDebug('重要なDOM変更を検出しました - 年度セレクタの追加処理を再実行します');\n        addEmployeeDetailYearSelector();\n      }\n    }, 500); // 500ms以内の連続した変更をまとめて処理\n  });\n\n  // 監視設定（ページ全体、子要素の追加のみ監視）\n  observer.observe(document.body, {\n    childList: true,\n    subtree: true,\n    attributes: false // 属性変更は監視しない\n  });\n\n  // グローバル変数に保存（後で停止できるように）\n  window._existingEmployeeObserver = observer;\n\n  // タブ切り替えイベントでの処理\n  document.addEventListener('click', function (e) {\n    // タブのクリックを検出\n    if (e.target.classList.contains('nav-link') || e.target.closest && e.target.closest('.nav-link')) {\n      logDebug('タブ切り替えを検出しました');\n      // タブ切り替え後に少し遅延させて実行\n      setTimeout(addEmployeeDetailYearSelector, 300);\n    }\n  });\n\n  // URL変更の検出（ページ遷移）\n  let lastUrl = window.location.href;\n  new MutationObserver(() => {\n    const url = window.location.href;\n    if (url !== lastUrl) {\n      lastUrl = url;\n      logDebug('URL変更を検出しました - 年度セレクタの追加処理を再実行します');\n      setTimeout(addEmployeeDetailYearSelector, 500);\n    }\n  }).observe(document, {\n    subtree: true,\n    childList: true\n  });\n\n  // ページ読み込み完了時の処理\n  window.addEventListener('load', function () {\n    logDebug('ページ読み込み完了 - 年度セレクタの追加処理を実行します');\n    addEmployeeDetailYearSelector();\n  });\n  logDebug('従業員詳細の対象年度セレクタを表示するスクリプトを設定しました');\n})();","map":{"version":3,"names":["logDebug","message","console","log","window","_existingEmployeeObserver","disconnect","addEmployeeDetailYearSelector","headings","document","querySelectorAll","isEmployeeDetailActive","heading","textContent","includes","querySelector","activeTabs","tab","formElements","form","toolbar","editButtons","button","parentElement","backButtons","anyButton","parent","i","length","nextElementSibling","employeeDetailContainer","createElement","className","style","cssText","firstChild","insertBefore","appendChild","yearSelector","currentYear","Date","getFullYear","innerHTML","select","addEventListener","e","target","value","yearChangeEvent","CustomEvent","detail","year","parseInt","yearText","bubbles","dispatchEvent","existingNotification","remove","setTimeout","opacity","result","debounceTimer","observer","MutationObserver","mutations","clearTimeout","shouldUpdate","mutation","type","addedNodes","node","nodeType","Node","ELEMENT_NODE","_node$classList","_node$querySelector","_node$classList2","_node$querySelector2","classList","contains","call","observe","body","childList","subtree","attributes","closest","lastUrl","location","href","url"],"sources":["/Users/gotouhiroaki/Programming/DAN_work/disability-employment-system/frontend/src/pages/EmployeeDetail/EmployeeYearSelector.js"],"sourcesContent":["/**\n * 従業員詳細の対象年度セレクタを表示するスクリプト\n * - 従業員詳細画面のツールバーに対象年度選択ドロップダウンを追加\n * - 他の機能に影響を与えずに動作\n * - デバッグ情報を詳細に出力\n */\n(function() {\n  'use strict';\n  \n  // デバッグログ用の関数\n  function logDebug(message) {\n    console.log('[EmployeeYearRestorer] ' + message);\n  }\n\n  logDebug('スクリプトを開始します');\n\n  // 既存のMutationObserverを停止（存在する場合）\n  if (window._existingEmployeeObserver && typeof window._existingEmployeeObserver.disconnect === 'function') {\n    window._existingEmployeeObserver.disconnect();\n    logDebug('既存のObserverを停止しました');\n  }\n\n  // 従業員詳細の対象年度セレクタを追加する関数\n  function addEmployeeDetailYearSelector() {\n    // 従業員詳細画面が表示されているか確認（複数の方法で検出）\n    const headings = document.querySelectorAll('h1, h2, h3, h4');\n    let isEmployeeDetailActive = false;\n    \n    // 見出しテキストで検出\n    for (const heading of headings) {\n      if (heading.textContent && heading.textContent.includes('従業員詳細')) {\n        isEmployeeDetailActive = true;\n        break;\n      }\n    }\n    \n    // クラスで検出\n    if (!isEmployeeDetailActive) {\n      isEmployeeDetailActive = !!document.querySelector('.employee-detail, .employee-profile, .employee-info');\n    }\n    \n    // タブで検出\n    if (!isEmployeeDetailActive) {\n      const activeTabs = document.querySelectorAll('.nav-link.active, .tab-pane.active');\n      for (const tab of activeTabs) {\n        if (tab.textContent && tab.textContent.includes('従業員')) {\n          isEmployeeDetailActive = true;\n          break;\n        }\n      }\n    }\n\n    if (!isEmployeeDetailActive) {\n      // 従業員情報フォームの有無で検出（最後の手段）\n      const formElements = document.querySelectorAll('form, .form-group');\n      for (const form of formElements) {\n        if (form.querySelector('input[name=\"name\"], input[name=\"employee_id\"]')) {\n          isEmployeeDetailActive = true;\n          break;\n        }\n      }\n    }\n\n    if (!isEmployeeDetailActive) {\n      logDebug('従業員詳細画面が表示されていません');\n      return false;\n    }\n\n    logDebug('従業員詳細画面を検出しました');\n\n    // すでに年度セレクタが存在する場合は処理しない\n    if (document.querySelector('.employee-year-selector-fixed')) {\n      logDebug('従業員詳細の年度セレクタはすでに存在します');\n      return true;\n    }\n\n    // ツールバー領域を特定（複数の方法で試行）\n    let toolbar = null;\n\n    // 方法1: ボタングループを探す\n    toolbar = document.querySelector('.btn-group, .button-group, .toolbar, .actions');\n    if (toolbar) {\n      logDebug('ボタングループをツールバーとして検出しました');\n    }\n    \n    // 方法2: 編集ボタンの親要素を探す\n    if (!toolbar) {\n      const editButtons = document.querySelectorAll('button');\n      for (const button of editButtons) {\n        if (button.textContent && (\n            button.textContent.includes('編集') || \n            button.textContent.includes('修正') ||\n            button.textContent.includes('Edit')\n           )) {\n          toolbar = button.parentElement;\n          logDebug('編集ボタンから親ツールバーを検出しました');\n          break;\n        }\n      }\n    }\n    \n    // 方法3: 戻るボタンの親要素を探す\n    if (!toolbar) {\n      const backButtons = document.querySelectorAll('button');\n      for (const button of backButtons) {\n        if (button.textContent && (\n            button.textContent.includes('戻る') || \n            button.textContent.includes('Back')\n           )) {\n          toolbar = button.parentElement;\n          logDebug('戻るボタンから親ツールバーを検出しました');\n          break;\n        }\n      }\n    }\n    \n    // 方法4: いずれかのボタンが含まれるコンテナを探す\n    if (!toolbar) {\n      const anyButton = document.querySelector('button');\n      if (anyButton) {\n        // ボタンから上に3階層まで遡って適切なコンテナを探す\n        let parent = anyButton.parentElement;\n        for (let i = 0; i < 3; i++) {\n          if (parent && parent.querySelectorAll('button').length > 1) {\n            toolbar = parent;\n            logDebug(`ボタンコンテナをツールバーとして検出しました (階層: ${i+1})`);\n            break;\n          }\n          if (parent) parent = parent.parentElement;\n        }\n      }\n    }\n\n    // 方法5: 最後の手段として、従業員詳細の見出しの次の要素を試す\n    if (!toolbar) {\n      for (const heading of headings) {\n        if (heading.textContent && heading.textContent.includes('従業員詳細')) {\n          if (heading.nextElementSibling) {\n            toolbar = heading.nextElementSibling;\n            logDebug('見出しの次の要素をツールバーとして使用します');\n            break;\n          }\n        }\n      }\n    }\n\n    if (!toolbar) {\n      // 最終手段：新しいツールバーを作成して挿入\n      const employeeDetailContainer = document.querySelector('.employee-detail, .employee-profile') || \n                                      document.querySelector('h2, h3, h4').parentElement;\n      \n      if (employeeDetailContainer) {\n        toolbar = document.createElement('div');\n        toolbar.className = 'employee-toolbar-created';\n        toolbar.style.cssText = 'margin-bottom: 15px; padding: 8px 0;';\n        \n        // 最初の子要素の前に挿入\n        if (employeeDetailContainer.firstChild) {\n          employeeDetailContainer.insertBefore(toolbar, employeeDetailContainer.firstChild);\n          logDebug('新しいツールバーを作成しました');\n        } else {\n          employeeDetailContainer.appendChild(toolbar);\n          logDebug('新しいツールバーをコンテナの末尾に追加しました');\n        }\n      } else {\n        logDebug('従業員詳細のツールバーを作成できる適切なコンテナが見つかりませんでした');\n        return false;\n      }\n    }\n\n    // 年度セレクタを作成\n    const yearSelector = document.createElement('div');\n    yearSelector.className = 'employee-year-selector-fixed';\n    yearSelector.style.cssText = 'display: inline-block; margin-right: 15px; vertical-align: middle;';\n\n    // 現在の年を取得\n    const currentYear = new Date().getFullYear();\n    \n    // セレクタの内容を作成\n    yearSelector.innerHTML = `\n      <label style=\"margin-right: 5px; font-weight: normal; display: inline-block; vertical-align: middle;\">対象年度:</label>\n      <select class=\"form-control form-control-sm\" style=\"display: inline-block; width: auto; height: 31px; padding: 0.25rem 0.5rem; vertical-align: middle;\">\n        <option value=\"${currentYear-2}\">${currentYear-2}年度</option>\n        <option value=\"${currentYear-1}\">${currentYear-1}年度</option>\n        <option value=\"${currentYear}\" selected>${currentYear}年度</option>\n        <option value=\"${currentYear+1}\">${currentYear+1}年度</option>\n      </select>\n    `;\n\n    // ツールバーの先頭に挿入\n    if (toolbar.firstChild) {\n      toolbar.insertBefore(yearSelector, toolbar.firstChild);\n    } else {\n      toolbar.appendChild(yearSelector);\n    }\n\n    // イベントリスナーの追加\n    const select = yearSelector.querySelector('select');\n    if (select) {\n      select.addEventListener('change', function(e) {\n        logDebug(`年度が変更されました: ${e.target.value}`);\n        \n        // 年度変更イベントの発行（他のコンポーネントが購読可能）\n        const yearChangeEvent = new CustomEvent('employeeYearChanged', {\n          detail: { \n            year: parseInt(e.target.value, 10),\n            yearText: `${e.target.value}年度`\n          },\n          bubbles: true\n        });\n        document.dispatchEvent(yearChangeEvent);\n        \n        // UIフィードバック（選択状態を視覚的に示す）\n        const yearText = document.createElement('span');\n        yearText.className = 'year-change-notification';\n        yearText.textContent = `${e.target.value}年度のデータを表示します`;\n        yearText.style.cssText = 'color: #3a66d4; margin-left: 10px; font-weight: bold; opacity: 0; transition: opacity 0.3s;';\n        \n        // 既存の通知を削除\n        const existingNotification = document.querySelector('.year-change-notification');\n        if (existingNotification) {\n          existingNotification.remove();\n        }\n        \n        // 新しい通知を追加\n        yearSelector.appendChild(yearText);\n        \n        // アニメーション効果\n        setTimeout(() => {\n          yearText.style.opacity = '1';\n          \n          // 3秒後にフェードアウト\n          setTimeout(() => {\n            yearText.style.opacity = '0';\n            \n            // フェードアウト後に削除\n            setTimeout(() => {\n              yearText.remove();\n            }, 300);\n          }, 3000);\n        }, 10);\n      });\n    }\n\n    logDebug('従業員詳細の年度セレクタを追加しました');\n    return true;\n  }\n\n  // 初回実行\n  const result = addEmployeeDetailYearSelector();\n  logDebug(`初回実行結果: ${result ? '成功' : '要素が見つかりませんでした'}`);\n\n  // MutationObserverの設定\n  // デバウンス処理用の変数\n  let debounceTimer = null;\n  \n  const observer = new MutationObserver(function(mutations) {\n    // 処理を間引く（デバウンス）\n    if (debounceTimer) {\n      clearTimeout(debounceTimer);\n    }\n    \n    debounceTimer = setTimeout(() => {\n      // 重要な変更のみに反応するフィルタリング\n      let shouldUpdate = false;\n      \n      for (const mutation of mutations) {\n        if (mutation.type === 'childList' && mutation.addedNodes.length) {\n          for (const node of mutation.addedNodes) {\n            if (node.nodeType === Node.ELEMENT_NODE) {\n              // タブペインや従業員関連要素の追加のみに反応\n              if (\n                node.classList?.contains('tab-pane') || \n                node.querySelector?.('.tab-pane') ||\n                node.classList?.contains('employee-detail') ||\n                node.querySelector?.('button') ||\n                (node.textContent && node.textContent.includes('従業員'))\n              ) {\n                shouldUpdate = true;\n                break;\n              }\n            }\n          }\n        }\n        \n        if (shouldUpdate) break;\n      }\n      \n      if (shouldUpdate) {\n        logDebug('重要なDOM変更を検出しました - 年度セレクタの追加処理を再実行します');\n        addEmployeeDetailYearSelector();\n      }\n    }, 500); // 500ms以内の連続した変更をまとめて処理\n  });\n\n  // 監視設定（ページ全体、子要素の追加のみ監視）\n  observer.observe(document.body, {\n    childList: true,\n    subtree: true,\n    attributes: false // 属性変更は監視しない\n  });\n\n  // グローバル変数に保存（後で停止できるように）\n  window._existingEmployeeObserver = observer;\n  \n  // タブ切り替えイベントでの処理\n  document.addEventListener('click', function(e) {\n    // タブのクリックを検出\n    if (e.target.classList.contains('nav-link') || \n        (e.target.closest && e.target.closest('.nav-link'))) {\n      logDebug('タブ切り替えを検出しました');\n      // タブ切り替え後に少し遅延させて実行\n      setTimeout(addEmployeeDetailYearSelector, 300);\n    }\n  });\n  \n  // URL変更の検出（ページ遷移）\n  let lastUrl = window.location.href;\n  new MutationObserver(() => {\n    const url = window.location.href;\n    if (url !== lastUrl) {\n      lastUrl = url;\n      logDebug('URL変更を検出しました - 年度セレクタの追加処理を再実行します');\n      setTimeout(addEmployeeDetailYearSelector, 500);\n    }\n  }).observe(document, {subtree: true, childList: true});\n  \n  // ページ読み込み完了時の処理\n  window.addEventListener('load', function() {\n    logDebug('ページ読み込み完了 - 年度セレクタの追加処理を実行します');\n    addEmployeeDetailYearSelector();\n  });\n\n  logDebug('従業員詳細の対象年度セレクタを表示するスクリプトを設定しました');\n})();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}