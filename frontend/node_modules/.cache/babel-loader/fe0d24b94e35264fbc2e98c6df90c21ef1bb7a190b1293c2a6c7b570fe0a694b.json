{"ast":null,"code":"var _jsxFileName = \"/Users/gotouhiroaki/Programming/DAN_work/disability-employment-system/frontend/src/pages/MonthlyReport/index.tsx\",\n  _s2 = $RefreshSig$();\n// src/pages/MonthlyReport/index.tsx\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { useQuery, useQueryClient } from 'react-query';\nimport SummaryTab from './SummaryTab';\nimport EmployeesTab from './EmployeesTab';\nimport MonthlyReportDetail from './MonthlyReportDetail';\nimport { YearMonthProvider, useYearMonth } from './YearMonthContext';\nimport { getMonthlyReport, getMonthlyReports, createMonthlyReport } from '../../api/reportApi';\nimport { safeNumber } from './utils';\nimport Spinner from '../../components/common/Spinner';\nimport ErrorMessage from '../../components/common/ErrorMessage';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// API base URL \n// 開発環境ではproxy設定を使用するため、'/api'とする\nconst API_BASE_URL = process.env.NODE_ENV === 'development' ? '/api' : process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n// サンプル従業員データ（デフォルト表示用）\nconst sampleEmployees = [{\n  id: 1,\n  no: 1,\n  employee_id: '1001',\n  name: '山田 太郎',\n  disability_type: '身体障害',\n  disability: '視覚',\n  grade: '1級',\n  hire_date: '2020/04/01',\n  status: '在籍',\n  monthlyStatus: Array(12).fill(''),\n  memo: '',\n  count: 0\n}, {\n  id: 2,\n  no: 2,\n  employee_id: '2222',\n  name: '鈴木 花子',\n  disability_type: '身体障害',\n  disability: '聴覚',\n  grade: '4級',\n  hire_date: '2020/04/01',\n  status: '在籍',\n  monthlyStatus: Array(12).fill(''),\n  memo: '',\n  count: 0\n}, {\n  id: 3,\n  no: 3,\n  employee_id: '3333',\n  name: '佐藤 一郎',\n  disability_type: '知的障害',\n  disability: '',\n  grade: 'B',\n  hire_date: '2020/04/01',\n  status: '在籍',\n  monthlyStatus: Array(12).fill(''),\n  memo: '',\n  count: 0\n}];\n\n// 年間データをUI用の月次詳細形式に変換する関数\nexport const formatYearlyDataForUI = yearlyData => {\n  // 無効なデータをフィルタリング\n  const validData = yearlyData.filter(d => d != null);\n\n  // 月別に並べ替え（4月始まり会計年度を想定）\n  const orderedData = [...validData.filter(d => d.month >= 4).sort((a, b) => a.month - b.month), ...validData.filter(d => d.month <= 3).sort((a, b) => a.month - b.month)];\n\n  // 各月のデータを取得、存在しない月はデフォルト値（例: 0）を設定\n  const monthsInFiscalYear = [4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3];\n  const getMonthlyValue = (data, month, key, defaultValue = 0) => {\n    const report = data.find(d => d.month === month);\n\n    // 特定のキーが法定雇用率の場合、小数点以下2桁で表示\n    if (key === 'legal_employment_rate' || key === 'employment_rate') {\n      const value = report ? safeNumber(report[key]) : defaultValue;\n      // 小数点以下2桁まで保持\n      return parseFloat(value.toFixed(2));\n    }\n    return report ? safeNumber(report[key]) : defaultValue;\n  };\n  const totalEmployeesValues = monthsInFiscalYear.map(m => getMonthlyValue(orderedData, m, 'employees_count'));\n  const fullTimeEmployeesValues = monthsInFiscalYear.map(m => getMonthlyValue(orderedData, m, 'fulltime_count'));\n  const partTimeEmployeesValues = monthsInFiscalYear.map(m => getMonthlyValue(orderedData, m, 'parttime_count'));\n  const level1_2CountValues = monthsInFiscalYear.map(m => getMonthlyValue(orderedData, m, 'level1_2_count'));\n  const otherDisabilityCountValues = monthsInFiscalYear.map(m => getMonthlyValue(orderedData, m, 'other_disability_count'));\n  const level1_2ParttimeCountValues = monthsInFiscalYear.map(m => getMonthlyValue(orderedData, m, 'level1_2_parttime_count'));\n  const otherParttimeCountValues = monthsInFiscalYear.map(m => getMonthlyValue(orderedData, m, 'other_parttime_count'));\n  const totalDisabilityCountValues = monthsInFiscalYear.map(m => getMonthlyValue(orderedData, m, 'total_disability_count'));\n  const actualRateValues = monthsInFiscalYear.map(m => getMonthlyValue(orderedData, m, 'employment_rate', 0.0));\n  const legalRateValues = monthsInFiscalYear.map(m => getMonthlyValue(orderedData, m, 'legal_employment_rate', 0.0));\n  const legalCountValues = monthsInFiscalYear.map(m => getMonthlyValue(orderedData, m, 'required_count'));\n  const overUnderValues = monthsInFiscalYear.map(m => getMonthlyValue(orderedData, m, 'over_under_count'));\n\n  // 各値の合計または平均を計算\n  const sumTotalEmployees = totalEmployeesValues.reduce((sum, val) => sum + val, 0);\n  const sumFullTimeEmployees = fullTimeEmployeesValues.reduce((sum, val) => sum + val, 0);\n  const sumPartTimeEmployees = partTimeEmployeesValues.reduce((sum, val) => sum + val, 0);\n  const sumLevel1_2Count = level1_2CountValues.reduce((sum, val) => sum + val, 0);\n  const sumOtherDisabilityCount = otherDisabilityCountValues.reduce((sum, val) => sum + val, 0);\n  const sumLevel1_2ParttimeCount = level1_2ParttimeCountValues.reduce((sum, val) => sum + val, 0);\n  const sumOtherParttimeCount = otherParttimeCountValues.reduce((sum, val) => sum + val, 0);\n  const sumTotalDisabilityCount = totalDisabilityCountValues.reduce((sum, val) => sum + val, 0);\n  const avgActualRate = parseFloat((actualRateValues.reduce((sum, val) => sum + val, 0) / (orderedData.length || 1)).toFixed(2));\n  const avgLegalRate = parseFloat((legalRateValues.reduce((sum, val) => sum + val, 0) / (orderedData.length || 1)).toFixed(2));\n  const sumLegalCount = legalCountValues.reduce((sum, val) => sum + val, 0);\n  const sumOverUnder = overUnderValues.reduce((sum, val) => sum + val, 0);\n\n  // UI表示用のデータ形式に変換\n  return {\n    months: ['4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月', '1月', '2月', '3月', '合計'],\n    data: [{\n      id: 1,\n      item: '従業員数',\n      values: [...totalEmployeesValues, sumTotalEmployees],\n      suffix: '名'\n    }, {\n      id: 2,\n      item: 'フルタイム従業員数',\n      values: [...fullTimeEmployeesValues, sumFullTimeEmployees],\n      suffix: '名'\n    }, {\n      id: 3,\n      item: 'パートタイム従業員数',\n      values: [...partTimeEmployeesValues, sumPartTimeEmployees],\n      suffix: '名'\n    }, {\n      id: 4,\n      item: 'トータル従業員数',\n      values: [...totalEmployeesValues.map((v, i) => v + partTimeEmployeesValues[i] * 0.5), sumTotalEmployees + sumPartTimeEmployees * 0.5],\n      suffix: '名',\n      isCalculated: true\n    }, {\n      id: 5,\n      item: '1級・2級の障がい者',\n      values: [...level1_2CountValues, sumLevel1_2Count],\n      suffix: '名',\n      isDisability: true\n    }, {\n      id: 6,\n      item: 'その他障がい者',\n      values: [...otherDisabilityCountValues, sumOtherDisabilityCount],\n      suffix: '名',\n      isDisability: true\n    }, {\n      id: 7,\n      item: '1級・2級の障がい者(パートタイム)',\n      values: [...level1_2ParttimeCountValues, sumLevel1_2ParttimeCount],\n      suffix: '名',\n      isDisability: true\n    }, {\n      id: 8,\n      item: 'その他障がい者(パートタイム)',\n      values: [...otherParttimeCountValues, sumOtherParttimeCount],\n      suffix: '名',\n      isDisability: true\n    }, {\n      id: 9,\n      item: '障がい者合計',\n      values: [...totalDisabilityCountValues, sumTotalDisabilityCount],\n      suffix: '名',\n      isDisability: true,\n      isCalculated: true\n    }, {\n      id: 10,\n      item: '実雇用率',\n      values: [...actualRateValues, avgActualRate],\n      suffix: '%',\n      isRatio: true,\n      isCalculated: true\n    }, {\n      id: 11,\n      item: '法定雇用率',\n      values: [...legalRateValues, avgLegalRate],\n      suffix: '%',\n      isRatio: true\n    }, {\n      id: 12,\n      item: '法定雇用者数',\n      values: [...legalCountValues, sumLegalCount],\n      suffix: '名',\n      isCalculated: true\n    }, {\n      id: 13,\n      item: '超過・未達',\n      values: [...overUnderValues, sumOverUnder],\n      isNegative: true,\n      isCalculated: true,\n      suffix: '名'\n    }]\n  };\n};\n\n// デフォルトの月次レポートを作成する関数\nconst createDefaultMonthlyReport = async (year, month) => {\n  try {\n    const defaultData = {\n      fiscal_year: year,\n      month: month,\n      employees_count: 0,\n      fulltime_count: 0,\n      parttime_count: 0,\n      level1_2_count: 0,\n      other_disability_count: 0,\n      level1_2_parttime_count: 0,\n      other_parttime_count: 0,\n      legal_employment_rate: 2.3 // デフォルト値\n    };\n    console.log(`${year}年度${month}月のデータを新規作成します`);\n    const response = await createMonthlyReport(year, month, defaultData);\n    console.log(`${year}年度${month}月のデータを新規作成しました:`, response);\n    return response;\n  } catch (error) {\n    console.error('新規レポート作成エラー:', error);\n    throw error;\n  }\n};\n\n// 指定した年月のレポートが存在するかチェックする関数\nconst checkReportExists = async (year, month) => {\n  try {\n    // apiClient または enhancedClient を使用（直接axiosを使用しない）\n    // APIベースURLはプロキシ設定と一致させるため、ここでは相対パスを使用\n    console.log(`存在チェック: /api/monthly-reports/${year}/${month}`);\n    const response = await axios.get(`/api/monthly-reports/${year}/${month}`);\n    return !!response.data && !!response.data.success;\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      var _error$response, _error$request;\n      // 404エラーの場合はレポートが存在しないと判断\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 404) {\n        return false;\n      }\n\n      // HTMLレスポンスが返された場合（JSONパースエラーの原因）\n      const responseText = (_error$request = error.request) === null || _error$request === void 0 ? void 0 : _error$request.responseText;\n      if (responseText && typeof responseText === 'string' && (responseText.includes('<!DOCTYPE') || responseText.includes('<html'))) {\n        var _error$config;\n        console.error('HTML応答を検出:', (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url);\n        return false;\n      }\n    }\n    console.error('データ存在チェックエラー:', error);\n    return false;\n  }\n};\n\n// MonthlyReport コンポーネント\nconst MonthlyReport = () => {\n  _s2();\n  var _s = $RefreshSig$();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const queryClient = useQueryClient();\n  const tabFromUrl = queryParams.get('tab') || 'summary';\n\n  // 現在のタブ状態\n  const [activeTab, setActiveTab] = useState(tabFromUrl);\n\n  // 現在の日付から正しい年度と月を取得\n  const currentDate = new Date();\n  const currentMonthNumber = currentDate.getMonth() + 1; // JavaScriptは0から始まる\n\n  // 年月の初期値を設定\n  const initialYear = currentDate.getFullYear();\n  const initialMonth = currentMonthNumber;\n\n  // エラーメッセージ状態\n  const [errorMessage, setErrorMessage] = useState(null);\n  // 成功メッセージ状態\n  const [successMessage, setSuccessMessage] = useState(null);\n  // 新規作成フラグ\n  const [isCreatingNewReport, setIsCreatingNewReport] = useState(false);\n\n  // データがキャッシュから使用されているかどうかのフラグ\n  const [isUsingCachedData, setIsUsingCachedData] = useState(false);\n\n  // 年度ごとのデータキャッシュ\n  const [dataCache, setDataCache] = useState({});\n\n  // データ状態\n  const [currentReport, setCurrentReport] = useState({\n    summary: null,\n    employees: [],\n    detail: null\n  });\n\n  // タブ変更時のURL更新\n  useEffect(() => {\n    // URLのクエリパラメータを更新\n    navigate(`/monthly-report?tab=${activeTab}`, {\n      replace: true\n    });\n  }, [activeTab, navigate]);\n\n  // MonthlyReportContent コンポーネント - YearMonthContextを使用\n  const MonthlyReportContent = () => {\n    _s();\n    const {\n      fiscalYear,\n      month,\n      setFiscalYear,\n      setMonth,\n      dispatchYearMonthChange,\n      canShowYearMonthControls\n    } = useYearMonth();\n\n    // React Query - レポート一覧\n    const {\n      data: reportsList,\n      isLoading: isLoadingReportsList,\n      error: reportsListError\n    } = useQuery(['monthlyReports'], () => getMonthlyReports(), {\n      onSuccess: data => {\n        // 最新のレポートを取得\n        if (data && data.length > 0) {\n          const latestReport = data[0];\n          // 最新レポートの詳細を取得\n          queryClient.invalidateQueries(['monthlyReport', latestReport.fiscal_year, latestReport.month]);\n        }\n      },\n      staleTime: 5 * 60 * 1000,\n      // 5分間はStaleとみなさない\n      cacheTime: 10 * 60 * 1000 // 10分間キャッシュを保持\n    });\n\n    // React Query - 月次レポート取得\n    const {\n      data: reportData,\n      isLoading: isLoadingReportData,\n      error: reportDataError,\n      refetch: refetchReportData\n    } = useQuery(['monthlyReport', fiscalYear, month], async () => {\n      // 年月が有効値であることを確認\n      const validYear = fiscalYear || initialYear;\n      const validMonth = month || initialMonth;\n      console.log(`年度${validYear}、月${validMonth}のデータ取得開始`);\n      try {\n        // キャッシュキーを生成\n        const cacheKey = `${validYear}-${validMonth}`;\n\n        // まず、キャッシュに既にデータがあるか確認\n        if (dataCache[cacheKey] && !isUsingCachedData) {\n          console.log(`${validYear}年${validMonth}月のキャッシュデータを使用します`);\n          setIsUsingCachedData(true);\n          return dataCache[cacheKey];\n        }\n\n        // データ取得\n        const data = await getMonthlyReport(validYear, validMonth);\n        console.log('API応答:', data);\n\n        // キャッシュを更新\n        setDataCache(prev => ({\n          ...prev,\n          [cacheKey]: data\n        }));\n        setIsUsingCachedData(false);\n        return data;\n      } catch (error) {\n        var _error$response2;\n        // 404エラーの場合は新規作成モードに切り替え\n        if (axios.isAxiosError(error) && ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 404) {\n          console.log(`${validYear}年${validMonth}月のデータが存在しません。新規作成モードに切替`);\n          setIsCreatingNewReport(true);\n\n          // デフォルトの空データを自動生成\n          try {\n            await createDefaultMonthlyReport(validYear, validMonth);\n            // 再度データを取得\n            return await getMonthlyReport(validYear, validMonth);\n          } catch (createError) {\n            console.error('デフォルトデータの作成に失敗しました:', createError);\n            // 空のデータを返す\n            return {\n              success: true,\n              message: 'デフォルトデータを表示',\n              data: {\n                summary: null,\n                employees: [],\n                detail: null\n              }\n            };\n          }\n        }\n\n        // その他のエラーは再スロー\n        throw error;\n      }\n    }, {\n      onSuccess: data => {\n        // 新規作成モードの場合はリセット\n        if (isCreatingNewReport && data && data.success) {\n          setIsCreatingNewReport(false);\n        }\n        if (data) {\n          var _data$data, _data$data2, _data$data3;\n          // サマリーデータの安全な処理\n          const summaryData = ((_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.summary) || null;\n          let detailData = ((_data$data2 = data.data) === null || _data$data2 === void 0 ? void 0 : _data$data2.detail) || null;\n\n          // サマリーデータが存在する場合のみformatYearlyDataForUIを呼び出す\n          if (summaryData && !detailData) {\n            try {\n              detailData = formatYearlyDataForUI([summaryData]);\n            } catch (error) {\n              console.error(\"詳細データの生成中にエラーが発生しました:\", error);\n              detailData = null;\n            }\n          }\n\n          // 従業員データが空の場合はサンプルデータを使用\n          const employeesData = data !== null && data !== void 0 && (_data$data3 = data.data) !== null && _data$data3 !== void 0 && _data$data3.employees && data.data.employees.length > 0 ? data.data.employees : sampleEmployees;\n          setCurrentReport({\n            summary: summaryData,\n            employees: employeesData,\n            detail: detailData\n          });\n        } else {\n          // データがない場合はサンプルデータを使用\n          setCurrentReport({\n            summary: null,\n            employees: sampleEmployees,\n            detail: null\n          });\n        }\n      },\n      onError: error => {\n        console.error(\"月次レポートデータ取得エラー:\", error);\n        setErrorMessage('データの取得中にエラーが発生しました。');\n        setTimeout(() => setErrorMessage(null), 5000);\n\n        // エラー時はサンプルデータを表示\n        setCurrentReport(prev => ({\n          ...prev,\n          employees: sampleEmployees\n        }));\n      },\n      enabled: !!fiscalYear && !!month,\n      // 年月が設定されている場合のみクエリを実行\n      staleTime: 5 * 60 * 1000,\n      cacheTime: 10 * 60 * 1000,\n      retry: (failureCount, error) => {\n        var _error$response3;\n        // 404エラーの場合はリトライしない（存在しないデータ）\n        if (axios.isAxiosError(error) && ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 404) {\n          return false;\n        }\n        // その他のエラーは3回までリトライ\n        return failureCount < 3;\n      }\n    });\n\n    // サマリーデータ更新ハンドラー\n    const handleSummaryChange = updatedSummary => {\n      setCurrentReport(prev => ({\n        ...prev,\n        summary: updatedSummary\n      }));\n    };\n\n    // 従業員データ更新ハンドラー\n    const handleEmployeeChange = (id, field, value) => {\n      setCurrentReport(prev => {\n        if (!prev.employees) return prev;\n        return {\n          ...prev,\n          employees: prev.employees.map(emp => emp.id === id ? {\n            ...emp,\n            [field]: field === 'monthlyStatus' ? typeof value === 'string' ? JSON.parse(value) : value : value\n          } : emp)\n        };\n      });\n    };\n\n    // 月次詳細更新ハンドラー\n    const handleDetailCellChange = (rowId, colIndex, value) => {\n      setCurrentReport(prev => {\n        if (!prev.detail) return prev;\n        const newDetail = {\n          ...prev.detail\n        };\n        const rowIndex = newDetail.data.findIndex(row => row.id === rowId);\n        if (rowIndex !== -1 && colIndex < 12) {\n          // 法定雇用率フィールドの特別処理\n          const isLegalRateField = rowId === 11;\n          let numValue;\n          if (isLegalRateField) {\n            // 小数点を含む値の処理\n            if (value === '' || value === '.') {\n              numValue = 0;\n            } else if (value.endsWith('.')) {\n              numValue = parseFloat(value + '0');\n            } else {\n              numValue = parseFloat(value);\n            }\n          } else {\n            // 通常の数値変換\n            numValue = value === '' ? 0 : Number(value);\n          }\n          if (!isNaN(numValue)) {\n            const updatedValues = [...newDetail.data[rowIndex].values];\n            updatedValues[colIndex] = numValue;\n\n            // 合計の再計算\n            updatedValues[12] = updatedValues.slice(0, 12).reduce((a, b) => a + b, 0);\n            newDetail.data[rowIndex].values = updatedValues;\n          }\n        }\n        return {\n          ...prev,\n          detail: newDetail\n        };\n      });\n    };\n\n    // データ再取得ハンドラー\n    const handleRefreshData = useCallback(() => {\n      // 現在の年月のキャッシュのみをクリア\n      const cacheKey = `${fiscalYear}-${month}`;\n      setDataCache(prev => {\n        const newCache = {\n          ...prev\n        };\n        delete newCache[cacheKey];\n        return newCache;\n      });\n      setIsUsingCachedData(false);\n\n      // キャッシュを強制的に無効化\n      queryClient.invalidateQueries(['monthlyReport', fiscalYear, month]);\n\n      // データを明示的に再取得\n      refetchReportData().catch(error => {\n        console.error('データ再取得エラー:', error);\n        setErrorMessage('データの再取得中にエラーが発生しました。');\n        setTimeout(() => setErrorMessage(null), 5000);\n      });\n    }, [fiscalYear, month, queryClient, refetchReportData]);\n\n    // 年度変更ハンドラー\n    const handleYearChange = async year => {\n      console.log(`親コンポーネントで年度変更を検知: ${fiscalYear} → ${year}`);\n      try {\n        // 無効な年度チェック\n        if (isNaN(year) || year <= 0) {\n          console.error('無効な年度が指定されました:', year);\n          setErrorMessage('無効な年度が指定されました。');\n          setTimeout(() => setErrorMessage(null), 5000);\n          return;\n        }\n\n        // 指定した年度のデータが存在するかチェック\n        const exists = await checkReportExists(year, month);\n        if (!exists) {\n          // データが存在しない場合は新規作成\n          console.log(`${year}年度${month}月のデータが存在しないため、新規作成します`);\n\n          // デフォルトデータを作成\n          try {\n            await createDefaultMonthlyReport(year, month);\n            console.log(`${year}年度${month}月のデータを新規作成しました`);\n          } catch (error) {\n            console.error('新規レポート作成エラー:', error);\n            // エラーを無視して続行\n          }\n        }\n\n        // YearMonthContextの年度を更新\n        setFiscalYear(year);\n\n        // 現在表示中のキャッシュをクリア\n        const cacheKey = `${year}-${month}`;\n        setDataCache(prev => {\n          const newCache = {\n            ...prev\n          };\n          delete newCache[cacheKey];\n          return newCache;\n        });\n        setIsUsingCachedData(false);\n\n        // キャッシュを強制的に無効化して再取得\n        queryClient.invalidateQueries(['monthlyReport', year, month]);\n      } catch (error) {\n        console.error('年度変更処理中にエラーが発生しました:', error);\n\n        // エラーメッセージを表示\n        setErrorMessage('年度切り替え中にエラーが発生しました。');\n        setTimeout(() => setErrorMessage(null), 5000);\n      }\n    };\n\n    // 月変更ハンドラー\n    const handleMonthChange = async newMonth => {\n      console.log(`月変更を検知: ${month} → ${newMonth}`);\n      try {\n        // 無効な月チェック\n        if (isNaN(newMonth) || newMonth < 1 || newMonth > 12) {\n          console.error('無効な月が指定されました:', newMonth);\n          setErrorMessage('無効な月が指定されました。');\n          setTimeout(() => setErrorMessage(null), 5000);\n          return;\n        }\n\n        // 現在のステートを保存\n        const prevMonth = month;\n\n        // 先にUIを更新して即時フィードバックを提供\n        setMonth(newMonth);\n\n        // 指定した年月のデータが存在するかチェック\n        const exists = await checkReportExists(fiscalYear, newMonth);\n        if (!exists) {\n          // データが存在しない場合は新規作成\n          console.log(`${fiscalYear}年度${newMonth}月のデータが存在しないため、新規作成します`);\n\n          // デフォルトデータを作成\n          try {\n            await createDefaultMonthlyReport(fiscalYear, newMonth);\n            console.log(`${fiscalYear}年度${newMonth}月のデータを新規作成しました`);\n          } catch (error) {\n            console.error('新規レポート作成エラー:', error);\n            // エラー時はUIに通知するが、ステートは既に更新済み\n            setErrorMessage('新しい月のレポート作成中にエラーが発生しました。');\n            setTimeout(() => setErrorMessage(null), 5000);\n          }\n        }\n\n        // イベント発火 - 年月の同時変更を通知\n        const yearMonthChangeEvent = new CustomEvent('yearMonthChanged', {\n          detail: {\n            year: fiscalYear,\n            month: newMonth\n          }\n        });\n        window.dispatchEvent(yearMonthChangeEvent);\n\n        // YearMonthContextの値を更新\n        dispatchYearMonthChange(fiscalYear, newMonth);\n\n        // 現在表示中のキャッシュをクリア\n        const cacheKey = `${fiscalYear}-${newMonth}`;\n        setDataCache(prev => {\n          const newCache = {\n            ...prev\n          };\n          delete newCache[cacheKey];\n          return newCache;\n        });\n        setIsUsingCachedData(false);\n\n        // キャッシュを強制的に無効化して再取得\n        queryClient.invalidateQueries(['monthlyReport', fiscalYear, newMonth]);\n\n        // 成功メッセージを表示\n        setSuccessMessage(`${fiscalYear}年${newMonth}月のデータを表示しています`);\n        setTimeout(() => setSuccessMessage(null), 3000);\n      } catch (error) {\n        console.error('月変更処理中にエラーが発生しました:', error);\n\n        // エラーメッセージを表示\n        setErrorMessage('月の切り替え中にエラーが発生しました。');\n        setTimeout(() => setErrorMessage(null), 5000);\n      }\n    };\n\n    // 年月の同時変更ハンドラー\n    const handleYearMonthChange = async (year, newMonth) => {\n      console.log(`年月変更を検知: ${fiscalYear}年${month}月 → ${year}年${newMonth}月`);\n      try {\n        // 無効な年月チェック\n        if (isNaN(year) || year <= 0) {\n          console.error('無効な年度が指定されました:', year);\n          setErrorMessage('無効な年度が指定されました。');\n          setTimeout(() => setErrorMessage(null), 5000);\n          return;\n        }\n        if (isNaN(newMonth) || newMonth < 1 || newMonth > 12) {\n          console.error('無効な月が指定されました:', newMonth);\n          setErrorMessage('無効な月が指定されました。');\n          setTimeout(() => setErrorMessage(null), 5000);\n          return;\n        }\n\n        // 指定した年月のデータが存在するかチェック\n        const exists = await checkReportExists(year, newMonth);\n        if (!exists) {\n          // データが存在しない場合は新規作成\n          console.log(`${year}年度${newMonth}月のデータが存在しないため、新規作成します`);\n\n          // デフォルトデータを作成\n          try {\n            await createDefaultMonthlyReport(year, newMonth);\n            console.log(`${year}年度${newMonth}月のデータを新規作成しました`);\n          } catch (error) {\n            console.error('新規レポート作成エラー:', error);\n            // エラーを無視して続行\n          }\n        }\n\n        // YearMonthContextの年度と月を同時に更新\n        dispatchYearMonthChange(year, newMonth);\n\n        // 現在表示中のキャッシュをクリア\n        const cacheKey = `${year}-${newMonth}`;\n        setDataCache(prev => {\n          const newCache = {\n            ...prev\n          };\n          delete newCache[cacheKey];\n          return newCache;\n        });\n        setIsUsingCachedData(false);\n\n        // キャッシュを強制的に無効化して再取得\n        queryClient.invalidateQueries(['monthlyReport', year, newMonth]);\n      } catch (error) {\n        console.error('年月変更処理中にエラーが発生しました:', error);\n\n        // エラーメッセージを表示\n        setErrorMessage('年月の切り替え中にエラーが発生しました。');\n        setTimeout(() => setErrorMessage(null), 5000);\n      }\n    };\n\n    // タブ切り替えハンドラー\n    const handleTabChange = tab => {\n      setActiveTab(tab);\n      const params = new URLSearchParams(location.search);\n      params.set('tab', tab);\n      navigate(`${location.pathname}?${params.toString()}`, {\n        replace: true\n      });\n    };\n\n    // ローディングまたはエラー状態の処理\n    const isLoading = isLoadingReportsList || isLoadingReportData;\n    const hasError = reportsListError || reportDataError;\n    if (isLoading && !currentReport.summary && !currentReport.employees.length) {\n      return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 711,\n        columnNumber: 14\n      }, this);\n    }\n    if (hasError && !currentReport.employees.length) {\n      console.error(\"データ取得エラー:\", {\n        reportsListError,\n        reportDataError\n      });\n      return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        message: \"\\u30C7\\u30FC\\u30BF\\u306E\\u8AAD\\u307F\\u8FBC\\u307F\\u4E2D\\u306B\\u30A8\\u30E9\\u30FC\\u304C\\u767A\\u751F\\u3057\\u307E\\u3057\\u305F\\u3002\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 716,\n        columnNumber: 14\n      }, this);\n    }\n    const {\n      summary,\n      employees,\n      detail\n    } = currentReport;\n    const isConfirmed = (summary === null || summary === void 0 ? void 0 : summary.status) === '確定済';\n\n    // タブ定義\n    const tabItems = [{\n      id: 'summary',\n      label: 'サマリー'\n    }, {\n      id: 'employees',\n      label: '従業員詳細'\n    }, {\n      id: 'monthly',\n      label: '月次詳細'\n    }];\n\n    // デフォルトのMonthlyTotal型オブジェクト\n    const defaultSummary = {\n      fiscal_year: fiscalYear,\n      month: month,\n      employees_count: 0,\n      fulltime_count: 0,\n      parttime_count: 0,\n      level1_2_count: 0,\n      other_disability_count: 0,\n      level1_2_parttime_count: 0,\n      other_parttime_count: 0,\n      legal_employment_rate: 2.3,\n      total_disability_count: 0,\n      employment_rate: 0,\n      required_count: 0,\n      over_under_count: 0,\n      status: '未確定'\n    };\n\n    // 月選択用オプション\n    const monthOptions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n\n    // タブコンテンツをレンダリングするための関数\n    const renderTabContent = () => {\n      console.log('タブレンダリング:', {\n        activeTab,\n        employeesCount: (employees === null || employees === void 0 ? void 0 : employees.length) || 0,\n        hasSummary: !!summary\n      });\n      if (activeTab === 'summary') {\n        return /*#__PURE__*/_jsxDEV(SummaryTab, {\n          summaryData: summary,\n          onSummaryChange: handleSummaryChange,\n          onRefreshData: handleRefreshData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 761,\n          columnNumber: 11\n        }, this);\n      }\n      if (activeTab === 'employees') {\n        return /*#__PURE__*/_jsxDEV(EmployeesTab, {\n          employees: (employees || []).map(emp => ({\n            ...emp,\n            id: emp.id,\n            employee_id: emp.employee_id !== undefined ? String(emp.employee_id) : '',\n            // number型をstring型に変換\n            disability_type: emp.disability_type || '',\n            // undefinedの場合は空文字列に変換\n            disability: emp.disability || '',\n            // 念のため\n            grade: emp.grade || '',\n            // 念のため\n            name: emp.name || '',\n            // 念のため\n            status: emp.status || '在籍',\n            // 念のため\n            hire_date: emp.hire_date || new Date().toISOString().split('T')[0].replace(/-/g, '/') // 念のため\n          })),\n          onEmployeeChange: handleEmployeeChange,\n          onEmployeesUpdate: updatedEmployees => {\n            console.log('子コンポーネントから従業員データ更新を受信:', updatedEmployees.length, '件');\n            // 型互換性のために必要なプロパティを追加\n            const typeCompatibleEmployees = updatedEmployees.map(emp => ({\n              ...emp,\n              no: emp.no || 0 // noが未定義の場合は0を設定して型互換性を確保\n            }));\n\n            // イベントオブジェクトを生成して状態の同期を管理（デバッグ用識別値を追加）\n            const uniqueId = new Date().getTime();\n            console.log(`[${uniqueId}] 親コンポーネントで状態更新開始`);\n\n            // 非同期で状態更新を行い、無限ループを防ぐ\n            setTimeout(() => {\n              console.log(`[${uniqueId}] 親コンポーネントで状態更新実行`);\n              setCurrentReport(prev => {\n                // 前の状態と新しい状態が実質的に同じ場合は更新しない\n                if (JSON.stringify(prev.employees.map(e => e.id)) === JSON.stringify(typeCompatibleEmployees.map(e => e.id)) && prev.employees.length === typeCompatibleEmployees.length) {\n                  console.log(`[${uniqueId}] 従業員データに変更がないため、状態更新をスキップ`);\n                  return prev;\n                }\n                console.log(`[${uniqueId}] 従業員データを更新:`, typeCompatibleEmployees.length, '件');\n                return {\n                  ...prev,\n                  employees: typeCompatibleEmployees\n                };\n              });\n            }, 100); // 100ms遅延で実行\n          },\n          summaryData: summary || defaultSummary,\n          onRefreshData: handleRefreshData,\n          onYearChange: handleYearChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 771,\n          columnNumber: 11\n        }, this);\n      }\n      if (activeTab === 'monthly') {\n        return /*#__PURE__*/_jsxDEV(MonthlyReportDetail, {\n          isEmbedded: true,\n          summaryData: summary || undefined,\n          monthlyDetailData: detail || undefined,\n          onDetailCellChange: handleDetailCellChange,\n          onYearChange: handleYearChange,\n          onRefreshData: handleRefreshData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 825,\n          columnNumber: 11\n        }, this);\n      }\n\n      // データがない場合、各タブで新規作成UIを表示するためにnullを返す\n      return null;\n    };\n\n    // 条件付きレンダリング要素を事前に作成\n    const errorMessageElement = errorMessage ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      style: {\n        backgroundColor: '#f8d7da',\n        color: '#721c24',\n        padding: '10px',\n        borderRadius: '4px',\n        marginBottom: '15px'\n      },\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 842,\n      columnNumber: 7\n    }, this) : null;\n    const successMessageElement = successMessage ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"success-message\",\n      style: {\n        backgroundColor: '#d4edda',\n        color: '#155724',\n        padding: '10px',\n        borderRadius: '4px',\n        marginBottom: '15px'\n      },\n      children: successMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 854,\n      columnNumber: 7\n    }, this) : null;\n    const hasErrorElement = hasError ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: '#f8d7da',\n        color: '#721c24',\n        padding: '10px',\n        borderRadius: '4px',\n        marginBottom: '15px'\n      },\n      children: \"\\u30C7\\u30FC\\u30BF\\u306E\\u53D6\\u5F97\\u4E2D\\u306B\\u30A8\\u30E9\\u30FC\\u304C\\u767A\\u751F\\u3057\\u307E\\u3057\\u305F\\u3002\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 866,\n      columnNumber: 7\n    }, this) : null;\n    const isLoadingElement = isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: '#e9ecef',\n        padding: '10px',\n        borderRadius: '4px',\n        marginBottom: '15px',\n        textAlign: 'center'\n      },\n      children: \"\\u30C7\\u30FC\\u30BF\\u3092\\u8AAD\\u307F\\u8FBC\\u307F\\u4E2D...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 878,\n      columnNumber: 7\n    }, this) : null;\n\n    // サマリー表示要素（タブがサマリーの場合のみ表示）\n    const summaryElement = summary && activeTab === 'summary' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: '#e9f2ff',\n        padding: '15px 20px',\n        borderRadius: '8px',\n        marginBottom: '20px',\n        borderLeft: '4px solid #3a66d4',\n        fontSize: '0.9rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          fontSize: '1.1rem',\n          margin: '0 0 10px 0',\n          color: '#3a66d4'\n        },\n        children: [summary.fiscal_year, \"\\u5E74 \", summary.month, \"\\u6708 \\u30B5\\u30DE\\u30EA\\u30FC\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 899,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexWrap: 'wrap',\n          gap: '10px 20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"\\u5E38\\u7528\\u52B4\\u50CD\\u8005\\u6570: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: summary.employees_count\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 903,\n            columnNumber: 25\n          }, this), \"\\u540D\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 903,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"|\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 904,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"\\u3046\\u3061\\u30D5\\u30EB\\u30BF\\u30A4\\u30E0: \", summary.fulltime_count, \"\\u540D\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 905,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"|\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 906,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"\\u3046\\u3061\\u30D1\\u30FC\\u30C8\\u30BF\\u30A4\\u30E0: \", summary.parttime_count, \"\\u540D\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 907,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 908,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"\\u969C\\u5BB3\\u8005\\u6570 (\\u30AB\\u30A6\\u30F3\\u30C8): \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: safeNumber(summary.total_disability_count).toFixed(1)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 909,\n            columnNumber: 30\n          }, this), \"\\u540D\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 909,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"|\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 910,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"\\u5B9F\\u96C7\\u7528\\u7387: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: safeNumber(summary.employment_rate).toFixed(2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 911,\n            columnNumber: 23\n          }, this), \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 911,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"|\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 912,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"\\u6CD5\\u5B9A\\u96C7\\u7528\\u7387: \", safeNumber(summary.legal_employment_rate).toFixed(2), \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 913,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"|\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 914,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"\\u6CD5\\u5B9A\\u96C7\\u7528\\u969C\\u5BB3\\u8005\\u6570: \", safeNumber(summary.required_count).toFixed(1), \"\\u540D\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 915,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"|\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 916,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"\\u4E0D\\u8DB3\\u6570: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            style: {\n              color: safeNumber(summary.over_under_count) < 0 ? 'red' : 'inherit'\n            },\n            children: safeNumber(summary.over_under_count).toFixed(1)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 917,\n            columnNumber: 22\n          }, this), \"\\u540D\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 917,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 902,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 891,\n      columnNumber: 7\n    }, this) : null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"monthly-report-container\",\n      style: {\n        padding: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          marginBottom: '20px'\n        },\n        children: \"\\u6708\\u6B21\\u5831\\u544A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 924,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          gap: '20px',\n          marginBottom: '20px',\n          backgroundColor: '#f8f9fa',\n          padding: '10px 15px',\n          borderRadius: '4px',\n          border: '1px solid #ddd'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: canShowYearMonthControls ? 'block' : 'none',\n            visibility: canShowYearMonthControls ? 'visible' : 'hidden'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              marginRight: '8px',\n              fontSize: '0.9rem'\n            },\n            children: \"\\u5E74\\u5EA6:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 940,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: fiscalYear,\n            onChange: e => handleYearChange(parseInt(e.target.value, 10)),\n            style: {\n              padding: '6px 10px',\n              borderRadius: '4px',\n              border: '1px solid #ced4da',\n              fontSize: '0.9rem'\n            },\n            children: Array.from({\n              length: 11\n            }, (_, i) => currentDate.getFullYear() - 5 + i).map(year => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: year,\n              children: year\n            }, year, false, {\n              fileName: _jsxFileName,\n              lineNumber: 952,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 941,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 936,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: canShowYearMonthControls ? 'block' : 'none',\n            visibility: canShowYearMonthControls ? 'visible' : 'hidden'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              marginRight: '8px',\n              fontSize: '0.9rem'\n            },\n            children: \"\\u6708:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 961,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: month,\n            onChange: e => handleMonthChange(parseInt(e.target.value, 10)),\n            style: {\n              padding: '6px 10px',\n              borderRadius: '4px',\n              border: '1px solid #ced4da',\n              fontSize: '0.9rem'\n            },\n            children: monthOptions.map(m => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: m,\n              children: [m, \"\\u6708\"]\n            }, m, true, {\n              fileName: _jsxFileName,\n              lineNumber: 973,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 962,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 957,\n          columnNumber: 11\n        }, this), process.env.NODE_ENV === 'development' && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginLeft: 'auto',\n            fontSize: '0.8rem',\n            color: '#666'\n          },\n          children: [\"\\u5E74\\u5EA6: \", fiscalYear, \", \\u6708: \", month, \", \\u8868\\u793A\\u53EF: \", canShowYearMonthControls ? 'はい' : 'いいえ']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 980,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleRefreshData,\n          style: {\n            padding: '6px 12px',\n            backgroundColor: '#007bff',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          },\n          disabled: isLoading,\n          children: \"\\u66F4\\u65B0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 985,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 927,\n        columnNumber: 9\n      }, this), errorMessageElement, successMessageElement, hasErrorElement, isLoadingElement, summaryElement, /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          borderBottom: '1px solid #ddd',\n          marginBottom: '20px'\n        },\n        children: tabItems.map(tab => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleTabChange(tab.id),\n          style: {\n            padding: '10px 20px',\n            background: 'none',\n            border: 'none',\n            borderBottom: activeTab === tab.id ? '3px solid #007bff' : '3px solid transparent',\n            marginBottom: '-1px',\n            color: activeTab === tab.id ? '#007bff' : '#666',\n            fontWeight: activeTab === tab.id ? 'bold' : 'normal',\n            cursor: 'pointer',\n            transition: 'color 0.2s, border-bottom-color 0.2s',\n            fontSize: '1rem'\n          },\n          children: tab.label\n        }, tab.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1014,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1008,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tab-content\",\n        children: renderTabContent()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1035,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 923,\n      columnNumber: 7\n    }, this);\n  };\n\n  // メインコンポーネントのレンダリング\n  _s(MonthlyReportContent, \"6JUnYe+0hGgLchuCPs9SmP+vYOo=\", false, function () {\n    return [useYearMonth, useQuery, useQuery];\n  });\n  return /*#__PURE__*/_jsxDEV(YearMonthProvider, {\n    initialYear: initialYear,\n    initialMonth: initialMonth,\n    children: /*#__PURE__*/_jsxDEV(MonthlyReportContent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1045,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1044,\n    columnNumber: 5\n  }, this);\n};\n_s2(MonthlyReport, \"5+Qbb5D7QI+2dJRxO8k4m52SAlc=\", false, function () {\n  return [useNavigate, useLocation, useQueryClient];\n});\n_c = MonthlyReport;\nexport default MonthlyReport;\nvar _c;\n$RefreshReg$(_c, \"MonthlyReport\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useNavigate","useLocation","useQuery","useQueryClient","SummaryTab","EmployeesTab","MonthlyReportDetail","YearMonthProvider","useYearMonth","getMonthlyReport","getMonthlyReports","createMonthlyReport","safeNumber","Spinner","ErrorMessage","axios","jsxDEV","_jsxDEV","API_BASE_URL","process","env","NODE_ENV","REACT_APP_API_URL","sampleEmployees","id","no","employee_id","name","disability_type","disability","grade","hire_date","status","monthlyStatus","Array","fill","memo","count","formatYearlyDataForUI","yearlyData","validData","filter","d","orderedData","month","sort","a","b","monthsInFiscalYear","getMonthlyValue","data","key","defaultValue","report","find","value","parseFloat","toFixed","totalEmployeesValues","map","m","fullTimeEmployeesValues","partTimeEmployeesValues","level1_2CountValues","otherDisabilityCountValues","level1_2ParttimeCountValues","otherParttimeCountValues","totalDisabilityCountValues","actualRateValues","legalRateValues","legalCountValues","overUnderValues","sumTotalEmployees","reduce","sum","val","sumFullTimeEmployees","sumPartTimeEmployees","sumLevel1_2Count","sumOtherDisabilityCount","sumLevel1_2ParttimeCount","sumOtherParttimeCount","sumTotalDisabilityCount","avgActualRate","length","avgLegalRate","sumLegalCount","sumOverUnder","months","item","values","suffix","v","i","isCalculated","isDisability","isRatio","isNegative","createDefaultMonthlyReport","year","defaultData","fiscal_year","employees_count","fulltime_count","parttime_count","level1_2_count","other_disability_count","level1_2_parttime_count","other_parttime_count","legal_employment_rate","console","log","response","error","checkReportExists","get","success","isAxiosError","_error$response","_error$request","responseText","request","includes","_error$config","config","url","MonthlyReport","_s2","_s","$RefreshSig$","navigate","location","queryParams","URLSearchParams","search","queryClient","tabFromUrl","activeTab","setActiveTab","currentDate","Date","currentMonthNumber","getMonth","initialYear","getFullYear","initialMonth","errorMessage","setErrorMessage","successMessage","setSuccessMessage","isCreatingNewReport","setIsCreatingNewReport","isUsingCachedData","setIsUsingCachedData","dataCache","setDataCache","currentReport","setCurrentReport","summary","employees","detail","replace","MonthlyReportContent","fiscalYear","setFiscalYear","setMonth","dispatchYearMonthChange","canShowYearMonthControls","reportsList","isLoading","isLoadingReportsList","reportsListError","onSuccess","latestReport","invalidateQueries","staleTime","cacheTime","reportData","isLoadingReportData","reportDataError","refetch","refetchReportData","validYear","validMonth","cacheKey","prev","_error$response2","createError","message","_data$data","_data$data2","_data$data3","summaryData","detailData","employeesData","onError","setTimeout","enabled","retry","failureCount","_error$response3","handleSummaryChange","updatedSummary","handleEmployeeChange","field","emp","JSON","parse","handleDetailCellChange","rowId","colIndex","newDetail","rowIndex","findIndex","row","isLegalRateField","numValue","endsWith","Number","isNaN","updatedValues","slice","handleRefreshData","newCache","catch","handleYearChange","exists","handleMonthChange","newMonth","prevMonth","yearMonthChangeEvent","CustomEvent","window","dispatchEvent","handleYearMonthChange","handleTabChange","tab","params","set","pathname","toString","hasError","fileName","_jsxFileName","lineNumber","columnNumber","isConfirmed","tabItems","label","defaultSummary","total_disability_count","employment_rate","required_count","over_under_count","monthOptions","renderTabContent","employeesCount","hasSummary","onSummaryChange","onRefreshData","undefined","String","toISOString","split","onEmployeeChange","onEmployeesUpdate","updatedEmployees","typeCompatibleEmployees","uniqueId","getTime","stringify","e","onYearChange","isEmbedded","monthlyDetailData","onDetailCellChange","errorMessageElement","className","style","backgroundColor","color","padding","borderRadius","marginBottom","children","successMessageElement","hasErrorElement","isLoadingElement","textAlign","summaryElement","borderLeft","fontSize","margin","display","flexWrap","gap","border","visibility","marginRight","onChange","parseInt","target","from","_","marginLeft","onClick","cursor","disabled","borderBottom","background","fontWeight","transition","_c","$RefreshReg$"],"sources":["/Users/gotouhiroaki/Programming/DAN_work/disability-employment-system/frontend/src/pages/MonthlyReport/index.tsx"],"sourcesContent":["// src/pages/MonthlyReport/index.tsx\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { useQuery, useQueryClient } from 'react-query';\nimport SummaryTab from './SummaryTab';\nimport EmployeesTab from './EmployeesTab';\nimport MonthlyReportDetail from './MonthlyReportDetail';\nimport { MonthlyTotal, Employee, MonthlyDetailData } from './types';\nimport { YearMonthProvider, useYearMonth } from './YearMonthContext';\nimport { \n  getMonthlyReport, \n  getMonthlyReports, \n  handleApiError,\n  createMonthlyReport\n} from '../../api/reportApi';\nimport { safeNumber, processEmployeeData } from './utils';\nimport Spinner from '../../components/common/Spinner';\nimport ErrorMessage from '../../components/common/ErrorMessage';\nimport axios from 'axios';\nimport CSVImportModal from './CSVImportModal';\nimport { generateCSVTemplate, downloadCSV } from './utils';\n\n// API base URL \n// 開発環境ではproxy設定を使用するため、'/api'とする\nconst API_BASE_URL = process.env.NODE_ENV === 'development' \n  ? '/api' \n  : (process.env.REACT_APP_API_URL || 'http://localhost:5001/api');\n\n// サンプル従業員データ（デフォルト表示用）\nconst sampleEmployees: Employee[] = [\n  {\n    id: 1,\n    no: 1,\n    employee_id: '1001',\n    name: '山田 太郎',\n    disability_type: '身体障害',\n    disability: '視覚',\n    grade: '1級',\n    hire_date: '2020/04/01',\n    status: '在籍',\n    monthlyStatus: Array(12).fill(''),\n    memo: '',\n    count: 0\n  },\n  {\n    id: 2,\n    no: 2,\n    employee_id: '2222',\n    name: '鈴木 花子',\n    disability_type: '身体障害',\n    disability: '聴覚',\n    grade: '4級',\n    hire_date: '2020/04/01',\n    status: '在籍',\n    monthlyStatus: Array(12).fill(''),\n    memo: '',\n    count: 0\n  },\n  {\n    id: 3,\n    no: 3,\n    employee_id: '3333',\n    name: '佐藤 一郎',\n    disability_type: '知的障害',\n    disability: '',\n    grade: 'B',\n    hire_date: '2020/04/01',\n    status: '在籍',\n    monthlyStatus: Array(12).fill(''),\n    memo: '',\n    count: 0\n  }\n];\n\n// 年間データをUI用の月次詳細形式に変換する関数\nexport const formatYearlyDataForUI = (yearlyData: MonthlyTotal[]): MonthlyDetailData => {\n  // 無効なデータをフィルタリング\n  const validData = yearlyData.filter(d => d != null);\n  \n  // 月別に並べ替え（4月始まり会計年度を想定）\n  const orderedData = [\n    ...validData.filter(d => d.month >= 4).sort((a, b) => a.month - b.month),\n    ...validData.filter(d => d.month <= 3).sort((a, b) => a.month - b.month)\n  ];\n\n  // 各月のデータを取得、存在しない月はデフォルト値（例: 0）を設定\n  const monthsInFiscalYear = [4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3];\n  const getMonthlyValue = (data: MonthlyTotal[], month: number, key: keyof MonthlyTotal, defaultValue: number = 0): number => {\n    const report = data.find(d => d.month === month);\n    \n    // 特定のキーが法定雇用率の場合、小数点以下2桁で表示\n    if (key === 'legal_employment_rate' || key === 'employment_rate') {\n      const value = report ? safeNumber(report[key]) : defaultValue;\n      // 小数点以下2桁まで保持\n      return parseFloat(value.toFixed(2));\n    }\n    \n    return report ? safeNumber(report[key]) : defaultValue;\n  };\n\n  const totalEmployeesValues = monthsInFiscalYear.map(m => getMonthlyValue(orderedData, m, 'employees_count'));\n  const fullTimeEmployeesValues = monthsInFiscalYear.map(m => getMonthlyValue(orderedData, m, 'fulltime_count'));\n  const partTimeEmployeesValues = monthsInFiscalYear.map(m => getMonthlyValue(orderedData, m, 'parttime_count'));\n  const level1_2CountValues = monthsInFiscalYear.map(m => getMonthlyValue(orderedData, m, 'level1_2_count'));\n  const otherDisabilityCountValues = monthsInFiscalYear.map(m => getMonthlyValue(orderedData, m, 'other_disability_count'));\n  const level1_2ParttimeCountValues = monthsInFiscalYear.map(m => getMonthlyValue(orderedData, m, 'level1_2_parttime_count'));\n  const otherParttimeCountValues = monthsInFiscalYear.map(m => getMonthlyValue(orderedData, m, 'other_parttime_count'));\n  const totalDisabilityCountValues = monthsInFiscalYear.map(m => getMonthlyValue(orderedData, m, 'total_disability_count'));\n  const actualRateValues = monthsInFiscalYear.map(m => getMonthlyValue(orderedData, m, 'employment_rate', 0.0));\n  const legalRateValues = monthsInFiscalYear.map(m => getMonthlyValue(orderedData, m, 'legal_employment_rate', 0.0));\n  const legalCountValues = monthsInFiscalYear.map(m => getMonthlyValue(orderedData, m, 'required_count'));\n  const overUnderValues = monthsInFiscalYear.map(m => getMonthlyValue(orderedData, m, 'over_under_count'));\n\n  // 各値の合計または平均を計算\n  const sumTotalEmployees = totalEmployeesValues.reduce((sum, val) => sum + val, 0);\n  const sumFullTimeEmployees = fullTimeEmployeesValues.reduce((sum, val) => sum + val, 0);\n  const sumPartTimeEmployees = partTimeEmployeesValues.reduce((sum, val) => sum + val, 0);\n  const sumLevel1_2Count = level1_2CountValues.reduce((sum, val) => sum + val, 0);\n  const sumOtherDisabilityCount = otherDisabilityCountValues.reduce((sum, val) => sum + val, 0);\n  const sumLevel1_2ParttimeCount = level1_2ParttimeCountValues.reduce((sum, val) => sum + val, 0);\n  const sumOtherParttimeCount = otherParttimeCountValues.reduce((sum, val) => sum + val, 0);\n  const sumTotalDisabilityCount = totalDisabilityCountValues.reduce((sum, val) => sum + val, 0);\n  const avgActualRate = parseFloat((actualRateValues.reduce((sum, val) => sum + val, 0) / (orderedData.length || 1)).toFixed(2));\n  const avgLegalRate = parseFloat((legalRateValues.reduce((sum, val) => sum + val, 0) / (orderedData.length || 1)).toFixed(2));\n  const sumLegalCount = legalCountValues.reduce((sum, val) => sum + val, 0);\n  const sumOverUnder = overUnderValues.reduce((sum, val) => sum + val, 0);\n\n  // UI表示用のデータ形式に変換\n  return {\n    months: ['4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月', '1月', '2月', '3月', '合計'],\n    data: [\n      { id: 1, item: '従業員数', values: [...totalEmployeesValues, sumTotalEmployees], suffix: '名' },\n      { id: 2, item: 'フルタイム従業員数', values: [...fullTimeEmployeesValues, sumFullTimeEmployees], suffix: '名' },\n      { id: 3, item: 'パートタイム従業員数', values: [...partTimeEmployeesValues, sumPartTimeEmployees], suffix: '名' },\n      { id: 4, item: 'トータル従業員数', values: [...totalEmployeesValues.map((v, i) => v + (partTimeEmployeesValues[i] * 0.5)), sumTotalEmployees + (sumPartTimeEmployees * 0.5)], suffix: '名', isCalculated: true },\n      { id: 5, item: '1級・2級の障がい者', values: [...level1_2CountValues, sumLevel1_2Count], suffix: '名', isDisability: true },\n      { id: 6, item: 'その他障がい者', values: [...otherDisabilityCountValues, sumOtherDisabilityCount], suffix: '名', isDisability: true },\n      { id: 7, item: '1級・2級の障がい者(パートタイム)', values: [...level1_2ParttimeCountValues, sumLevel1_2ParttimeCount], suffix: '名', isDisability: true },\n      { id: 8, item: 'その他障がい者(パートタイム)', values: [...otherParttimeCountValues, sumOtherParttimeCount], suffix: '名', isDisability: true },\n      { id: 9, item: '障がい者合計', values: [...totalDisabilityCountValues, sumTotalDisabilityCount], suffix: '名', isDisability: true, isCalculated: true },\n      { id: 10, item: '実雇用率', values: [...actualRateValues, avgActualRate], suffix: '%', isRatio: true, isCalculated: true },\n      { id: 11, item: '法定雇用率', values: [...legalRateValues, avgLegalRate], suffix: '%', isRatio: true },\n      { id: 12, item: '法定雇用者数', values: [...legalCountValues, sumLegalCount], suffix: '名', isCalculated: true },\n      { id: 13, item: '超過・未達', values: [...overUnderValues, sumOverUnder], isNegative: true, isCalculated: true, suffix: '名' }\n    ]\n  };\n};\n\n// デフォルトの月次レポートを作成する関数\nconst createDefaultMonthlyReport = async (year: number, month: number) => {\n  try {\n    const defaultData = {\n      fiscal_year: year,\n      month: month,\n      employees_count: 0,\n      fulltime_count: 0,\n      parttime_count: 0,\n      level1_2_count: 0,\n      other_disability_count: 0,\n      level1_2_parttime_count: 0,\n      other_parttime_count: 0,\n      legal_employment_rate: 2.3 // デフォルト値\n    };\n    \n    console.log(`${year}年度${month}月のデータを新規作成します`);\n    const response = await createMonthlyReport(year, month, defaultData);\n    console.log(`${year}年度${month}月のデータを新規作成しました:`, response);\n    return response;\n  } catch (error) {\n    console.error('新規レポート作成エラー:', error);\n    throw error;\n  }\n};\n\n// 指定した年月のレポートが存在するかチェックする関数\nconst checkReportExists = async (year: number, month: number): Promise<boolean> => {\n  try {\n    // apiClient または enhancedClient を使用（直接axiosを使用しない）\n    // APIベースURLはプロキシ設定と一致させるため、ここでは相対パスを使用\n    console.log(`存在チェック: /api/monthly-reports/${year}/${month}`);\n    const response = await axios.get(`/api/monthly-reports/${year}/${month}`);\n    return !!response.data && !!response.data.success;\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      // 404エラーの場合はレポートが存在しないと判断\n      if (error.response?.status === 404) {\n        return false;\n      }\n      \n      // HTMLレスポンスが返された場合（JSONパースエラーの原因）\n      const responseText = error.request?.responseText;\n      if (responseText && typeof responseText === 'string' && \n          (responseText.includes('<!DOCTYPE') || \n           responseText.includes('<html'))) {\n        console.error('HTML応答を検出:', error.config?.url);\n        return false;\n      }\n    }\n    \n    console.error('データ存在チェックエラー:', error);\n    return false;\n  }\n};\n\n// MonthlyReport コンポーネント\nconst MonthlyReport: React.FC = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const queryClient = useQueryClient();\n  const tabFromUrl = queryParams.get('tab') || 'summary';\n\n  // 現在のタブ状態\n  const [activeTab, setActiveTab] = useState<string>(tabFromUrl);\n  \n  // 現在の日付から正しい年度と月を取得\n  const currentDate = new Date();\n  const currentMonthNumber = currentDate.getMonth() + 1; // JavaScriptは0から始まる\n  \n  // 年月の初期値を設定\n  const initialYear = currentDate.getFullYear();\n  const initialMonth = currentMonthNumber;\n\n  // エラーメッセージ状態\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\n  // 成功メッセージ状態\n  const [successMessage, setSuccessMessage] = useState<string | null>(null);\n  // 新規作成フラグ\n  const [isCreatingNewReport, setIsCreatingNewReport] = useState<boolean>(false);\n\n  // データがキャッシュから使用されているかどうかのフラグ\n  const [isUsingCachedData, setIsUsingCachedData] = useState<boolean>(false);\n\n  // 年度ごとのデータキャッシュ\n  const [dataCache, setDataCache] = useState<{[key: string]: any}>({});\n\n  // データ状態\n  const [currentReport, setCurrentReport] = useState<{\n    summary: MonthlyTotal | null;\n    employees: Employee[];\n    detail: MonthlyDetailData | null;\n  }>({\n    summary: null,\n    employees: [],\n    detail: null\n  });\n\n  // タブ変更時のURL更新\n  useEffect(() => {\n    // URLのクエリパラメータを更新\n    navigate(`/monthly-report?tab=${activeTab}`, { replace: true });\n  }, [activeTab, navigate]);\n\n  // MonthlyReportContent コンポーネント - YearMonthContextを使用\n  const MonthlyReportContent: React.FC = () => {\n    const { fiscalYear, month, setFiscalYear, setMonth, dispatchYearMonthChange, canShowYearMonthControls } = useYearMonth();\n  \n    // React Query - レポート一覧\n    const {\n      data: reportsList,\n      isLoading: isLoadingReportsList,\n      error: reportsListError\n    } = useQuery(\n      ['monthlyReports'],\n      () => getMonthlyReports(),\n      {\n        onSuccess: (data) => {\n          // 最新のレポートを取得\n          if (data && data.length > 0) {\n            const latestReport = data[0];\n            // 最新レポートの詳細を取得\n            queryClient.invalidateQueries(['monthlyReport', latestReport.fiscal_year, latestReport.month]);\n          }\n        },\n        staleTime: 5 * 60 * 1000, // 5分間はStaleとみなさない\n        cacheTime: 10 * 60 * 1000, // 10分間キャッシュを保持\n      }\n    );\n\n    // React Query - 月次レポート取得\n    const {\n      data: reportData,\n      isLoading: isLoadingReportData,\n      error: reportDataError,\n      refetch: refetchReportData\n    } = useQuery(\n      ['monthlyReport', fiscalYear, month],\n      async () => {\n        // 年月が有効値であることを確認\n        const validYear = fiscalYear || initialYear;\n        const validMonth = month || initialMonth;\n        \n        console.log(`年度${validYear}、月${validMonth}のデータ取得開始`);\n        \n        try {\n          // キャッシュキーを生成\n          const cacheKey = `${validYear}-${validMonth}`;\n          \n          // まず、キャッシュに既にデータがあるか確認\n          if (dataCache[cacheKey] && !isUsingCachedData) {\n            console.log(`${validYear}年${validMonth}月のキャッシュデータを使用します`);\n            setIsUsingCachedData(true);\n            return dataCache[cacheKey];\n          }\n          \n          // データ取得\n          const data = await getMonthlyReport(validYear, validMonth);\n          console.log('API応答:', data);\n          \n          // キャッシュを更新\n          setDataCache(prev => ({\n            ...prev,\n            [cacheKey]: data\n          }));\n          \n          setIsUsingCachedData(false);\n          return data;\n        } catch (error) {\n          // 404エラーの場合は新規作成モードに切り替え\n          if (axios.isAxiosError(error) && error.response?.status === 404) {\n            console.log(`${validYear}年${validMonth}月のデータが存在しません。新規作成モードに切替`);\n            setIsCreatingNewReport(true);\n            \n            // デフォルトの空データを自動生成\n            try {\n              await createDefaultMonthlyReport(validYear, validMonth);\n              // 再度データを取得\n              return await getMonthlyReport(validYear, validMonth);\n            } catch (createError) {\n              console.error('デフォルトデータの作成に失敗しました:', createError);\n              // 空のデータを返す\n              return {\n                success: true,\n                message: 'デフォルトデータを表示',\n                data: {\n                  summary: null,\n                  employees: [],\n                  detail: null\n                }\n              };\n            }\n          }\n          \n          // その他のエラーは再スロー\n          throw error;\n        }\n      },\n      {\n        onSuccess: (data) => {\n          // 新規作成モードの場合はリセット\n          if (isCreatingNewReport && data && data.success) {\n            setIsCreatingNewReport(false);\n          }\n          \n          if (data) {\n            // サマリーデータの安全な処理\n            const summaryData = data.data?.summary || null;\n            let detailData = data.data?.detail || null;\n            \n            // サマリーデータが存在する場合のみformatYearlyDataForUIを呼び出す\n            if (summaryData && !detailData) {\n              try {\n                detailData = formatYearlyDataForUI([summaryData]);\n              } catch (error) {\n                console.error(\"詳細データの生成中にエラーが発生しました:\", error);\n                detailData = null;\n              }\n            }\n            \n            // 従業員データが空の場合はサンプルデータを使用\n            const employeesData = data?.data?.employees && data.data.employees.length > 0 \n              ? data.data.employees \n              : sampleEmployees;\n            \n            setCurrentReport({\n              summary: summaryData,\n              employees: employeesData,\n              detail: detailData\n            });\n          } else {\n            // データがない場合はサンプルデータを使用\n            setCurrentReport({\n              summary: null,\n              employees: sampleEmployees,\n              detail: null\n            });\n          }\n        },\n        onError: (error) => {\n          console.error(\"月次レポートデータ取得エラー:\", error);\n          setErrorMessage('データの取得中にエラーが発生しました。');\n          setTimeout(() => setErrorMessage(null), 5000);\n          \n          // エラー時はサンプルデータを表示\n          setCurrentReport(prev => ({\n            ...prev,\n            employees: sampleEmployees\n          }));\n        },\n        enabled: !!fiscalYear && !!month, // 年月が設定されている場合のみクエリを実行\n        staleTime: 5 * 60 * 1000,\n        cacheTime: 10 * 60 * 1000,\n        retry: (failureCount, error) => {\n          // 404エラーの場合はリトライしない（存在しないデータ）\n          if (axios.isAxiosError(error) && error.response?.status === 404) {\n            return false;\n          }\n          // その他のエラーは3回までリトライ\n          return failureCount < 3;\n        }\n      }\n    );\n\n    // サマリーデータ更新ハンドラー\n    const handleSummaryChange = (updatedSummary: MonthlyTotal) => {\n      setCurrentReport(prev => ({\n        ...prev,\n        summary: updatedSummary\n      }));\n    };\n\n    // 従業員データ更新ハンドラー\n    const handleEmployeeChange = (id: number, field: string, value: string) => {\n      setCurrentReport(prev => {\n        if (!prev.employees) return prev;\n        \n        return {\n          ...prev,\n          employees: prev.employees.map(emp => \n            emp.id === id \n              ? { \n                  ...emp, \n                  [field]: field === 'monthlyStatus' ? \n                    (typeof value === 'string' ? JSON.parse(value) : value) : \n                    value \n                } \n              : emp\n          )\n        };\n      });\n    };\n\n    // 月次詳細更新ハンドラー\n    const handleDetailCellChange = (rowId: number, colIndex: number, value: string) => {\n      setCurrentReport(prev => {\n        if (!prev.detail) return prev;\n        \n        const newDetail = {...prev.detail};\n        const rowIndex = newDetail.data.findIndex(row => row.id === rowId);\n        \n        if (rowIndex !== -1 && colIndex < 12) {\n          // 法定雇用率フィールドの特別処理\n          const isLegalRateField = rowId === 11;\n          let numValue: number;\n          \n          if (isLegalRateField) {\n            // 小数点を含む値の処理\n            if (value === '' || value === '.') {\n              numValue = 0;\n            } else if (value.endsWith('.')) {\n              numValue = parseFloat(value + '0');\n            } else {\n              numValue = parseFloat(value);\n            }\n          } else {\n            // 通常の数値変換\n            numValue = value === '' ? 0 : Number(value);\n          }\n          \n          if (!isNaN(numValue)) {\n            const updatedValues = [...newDetail.data[rowIndex].values];\n            updatedValues[colIndex] = numValue;\n            \n            // 合計の再計算\n            updatedValues[12] = updatedValues.slice(0, 12).reduce((a, b) => a + b, 0);\n            \n            newDetail.data[rowIndex].values = updatedValues;\n          }\n        }\n        \n        return {\n          ...prev,\n          detail: newDetail\n        };\n      });\n    };\n\n    // データ再取得ハンドラー\n    const handleRefreshData = useCallback(() => {\n      // 現在の年月のキャッシュのみをクリア\n      const cacheKey = `${fiscalYear}-${month}`;\n      setDataCache(prev => {\n        const newCache = {...prev};\n        delete newCache[cacheKey];\n        return newCache;\n      });\n      \n      setIsUsingCachedData(false);\n      \n      // キャッシュを強制的に無効化\n      queryClient.invalidateQueries(['monthlyReport', fiscalYear, month]);\n      \n      // データを明示的に再取得\n      refetchReportData().catch(error => {\n        console.error('データ再取得エラー:', error);\n        setErrorMessage('データの再取得中にエラーが発生しました。');\n        setTimeout(() => setErrorMessage(null), 5000);\n      });\n    }, [fiscalYear, month, queryClient, refetchReportData]);\n\n    // 年度変更ハンドラー\n    const handleYearChange = async (year: number) => {\n      console.log(`親コンポーネントで年度変更を検知: ${fiscalYear} → ${year}`);\n      \n      try {\n        // 無効な年度チェック\n        if (isNaN(year) || year <= 0) {\n          console.error('無効な年度が指定されました:', year);\n          setErrorMessage('無効な年度が指定されました。');\n          setTimeout(() => setErrorMessage(null), 5000);\n          return;\n        }\n        \n        // 指定した年度のデータが存在するかチェック\n        const exists = await checkReportExists(year, month);\n        \n        if (!exists) {\n          // データが存在しない場合は新規作成\n          console.log(`${year}年度${month}月のデータが存在しないため、新規作成します`);\n          \n          // デフォルトデータを作成\n          try {\n            await createDefaultMonthlyReport(year, month);\n            console.log(`${year}年度${month}月のデータを新規作成しました`);\n          } catch (error) {\n            console.error('新規レポート作成エラー:', error);\n            // エラーを無視して続行\n          }\n        }\n        \n        // YearMonthContextの年度を更新\n        setFiscalYear(year);\n        \n        // 現在表示中のキャッシュをクリア\n        const cacheKey = `${year}-${month}`;\n        setDataCache(prev => {\n          const newCache = {...prev};\n          delete newCache[cacheKey];\n          return newCache;\n        });\n        \n        setIsUsingCachedData(false);\n        \n        // キャッシュを強制的に無効化して再取得\n        queryClient.invalidateQueries(['monthlyReport', year, month]);\n      } catch (error) {\n        console.error('年度変更処理中にエラーが発生しました:', error);\n        \n        // エラーメッセージを表示\n        setErrorMessage('年度切り替え中にエラーが発生しました。');\n        setTimeout(() => setErrorMessage(null), 5000);\n      }\n    };\n\n    // 月変更ハンドラー\n    const handleMonthChange = async (newMonth: number) => {\n      console.log(`月変更を検知: ${month} → ${newMonth}`);\n      \n      try {\n        // 無効な月チェック\n        if (isNaN(newMonth) || newMonth < 1 || newMonth > 12) {\n          console.error('無効な月が指定されました:', newMonth);\n          setErrorMessage('無効な月が指定されました。');\n          setTimeout(() => setErrorMessage(null), 5000);\n          return;\n        }\n        \n        // 現在のステートを保存\n        const prevMonth = month;\n        \n        // 先にUIを更新して即時フィードバックを提供\n        setMonth(newMonth);\n        \n        // 指定した年月のデータが存在するかチェック\n        const exists = await checkReportExists(fiscalYear, newMonth);\n        \n        if (!exists) {\n          // データが存在しない場合は新規作成\n          console.log(`${fiscalYear}年度${newMonth}月のデータが存在しないため、新規作成します`);\n          \n          // デフォルトデータを作成\n          try {\n            await createDefaultMonthlyReport(fiscalYear, newMonth);\n            console.log(`${fiscalYear}年度${newMonth}月のデータを新規作成しました`);\n          } catch (error) {\n            console.error('新規レポート作成エラー:', error);\n            // エラー時はUIに通知するが、ステートは既に更新済み\n            setErrorMessage('新しい月のレポート作成中にエラーが発生しました。');\n            setTimeout(() => setErrorMessage(null), 5000);\n          }\n        }\n        \n        // イベント発火 - 年月の同時変更を通知\n        const yearMonthChangeEvent = new CustomEvent('yearMonthChanged', {\n          detail: { year: fiscalYear, month: newMonth }\n        });\n        window.dispatchEvent(yearMonthChangeEvent);\n        \n        // YearMonthContextの値を更新\n        dispatchYearMonthChange(fiscalYear, newMonth);\n        \n        // 現在表示中のキャッシュをクリア\n        const cacheKey = `${fiscalYear}-${newMonth}`;\n        setDataCache(prev => {\n          const newCache = {...prev};\n          delete newCache[cacheKey];\n          return newCache;\n        });\n        \n        setIsUsingCachedData(false);\n        \n        // キャッシュを強制的に無効化して再取得\n        queryClient.invalidateQueries(['monthlyReport', fiscalYear, newMonth]);\n        \n        // 成功メッセージを表示\n        setSuccessMessage(`${fiscalYear}年${newMonth}月のデータを表示しています`);\n        setTimeout(() => setSuccessMessage(null), 3000);\n      } catch (error) {\n        console.error('月変更処理中にエラーが発生しました:', error);\n        \n        // エラーメッセージを表示\n        setErrorMessage('月の切り替え中にエラーが発生しました。');\n        setTimeout(() => setErrorMessage(null), 5000);\n      }\n    };\n\n    // 年月の同時変更ハンドラー\n    const handleYearMonthChange = async (year: number, newMonth: number) => {\n      console.log(`年月変更を検知: ${fiscalYear}年${month}月 → ${year}年${newMonth}月`);\n      \n      try {\n        // 無効な年月チェック\n        if (isNaN(year) || year <= 0) {\n          console.error('無効な年度が指定されました:', year);\n          setErrorMessage('無効な年度が指定されました。');\n          setTimeout(() => setErrorMessage(null), 5000);\n          return;\n        }\n        \n        if (isNaN(newMonth) || newMonth < 1 || newMonth > 12) {\n          console.error('無効な月が指定されました:', newMonth);\n          setErrorMessage('無効な月が指定されました。');\n          setTimeout(() => setErrorMessage(null), 5000);\n          return;\n        }\n        \n        // 指定した年月のデータが存在するかチェック\n        const exists = await checkReportExists(year, newMonth);\n        \n        if (!exists) {\n          // データが存在しない場合は新規作成\n          console.log(`${year}年度${newMonth}月のデータが存在しないため、新規作成します`);\n          \n          // デフォルトデータを作成\n          try {\n            await createDefaultMonthlyReport(year, newMonth);\n            console.log(`${year}年度${newMonth}月のデータを新規作成しました`);\n          } catch (error) {\n            console.error('新規レポート作成エラー:', error);\n            // エラーを無視して続行\n          }\n        }\n        \n        // YearMonthContextの年度と月を同時に更新\n        dispatchYearMonthChange(year, newMonth);\n        \n        // 現在表示中のキャッシュをクリア\n        const cacheKey = `${year}-${newMonth}`;\n        setDataCache(prev => {\n          const newCache = {...prev};\n          delete newCache[cacheKey];\n          return newCache;\n        });\n        \n        setIsUsingCachedData(false);\n        \n        // キャッシュを強制的に無効化して再取得\n        queryClient.invalidateQueries(['monthlyReport', year, newMonth]);\n      } catch (error) {\n        console.error('年月変更処理中にエラーが発生しました:', error);\n        \n        // エラーメッセージを表示\n        setErrorMessage('年月の切り替え中にエラーが発生しました。');\n        setTimeout(() => setErrorMessage(null), 5000);\n      }\n    };\n\n    // タブ切り替えハンドラー\n    const handleTabChange = (tab: string) => {\n      setActiveTab(tab);\n      const params = new URLSearchParams(location.search);\n      params.set('tab', tab);\n      navigate(`${location.pathname}?${params.toString()}`, { replace: true });\n    };\n\n    // ローディングまたはエラー状態の処理\n    const isLoading = isLoadingReportsList || isLoadingReportData;\n    const hasError = reportsListError || reportDataError;\n\n    if (isLoading && !currentReport.summary && !currentReport.employees.length) {\n      return <Spinner />;\n    }\n\n    if (hasError && !currentReport.employees.length) {\n      console.error(\"データ取得エラー:\", { reportsListError, reportDataError });\n      return <ErrorMessage message=\"データの読み込み中にエラーが発生しました。\" />;\n    }\n\n    const { summary, employees, detail } = currentReport;\n    const isConfirmed = summary?.status === '確定済';\n\n    // タブ定義\n    const tabItems = [\n      { id: 'summary', label: 'サマリー' },\n      { id: 'employees', label: '従業員詳細' },\n      { id: 'monthly', label: '月次詳細' }\n    ];\n\n    // デフォルトのMonthlyTotal型オブジェクト\n    const defaultSummary: MonthlyTotal = {\n      fiscal_year: fiscalYear,\n      month: month,\n      employees_count: 0,\n      fulltime_count: 0,\n      parttime_count: 0,\n      level1_2_count: 0,\n      other_disability_count: 0,\n      level1_2_parttime_count: 0,\n      other_parttime_count: 0,\n      legal_employment_rate: 2.3,\n      total_disability_count: 0,\n      employment_rate: 0,\n      required_count: 0,\n      over_under_count: 0,\n      status: '未確定'\n    };\n\n    // 月選択用オプション\n    const monthOptions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n\n    // タブコンテンツをレンダリングするための関数\n    const renderTabContent = () => {\n      console.log('タブレンダリング:', {\n        activeTab,\n        employeesCount: employees?.length || 0,\n        hasSummary: !!summary\n      });\n\n      if (activeTab === 'summary') {\n        return (\n          <SummaryTab \n            summaryData={summary} \n            onSummaryChange={handleSummaryChange}\n            onRefreshData={handleRefreshData}\n          />\n        );\n      }\n      \n      if (activeTab === 'employees') {\n        return (\n          <EmployeesTab \n            employees={(employees || []).map(emp => ({\n              ...emp,\n              id: emp.id,\n              employee_id: emp.employee_id !== undefined ? String(emp.employee_id) : '', // number型をstring型に変換\n              disability_type: emp.disability_type || '', // undefinedの場合は空文字列に変換\n              disability: emp.disability || '', // 念のため\n              grade: emp.grade || '', // 念のため\n              name: emp.name || '', // 念のため\n              status: emp.status || '在籍', // 念のため\n              hire_date: emp.hire_date || new Date().toISOString().split('T')[0].replace(/-/g, '/') // 念のため\n            }))} \n            onEmployeeChange={handleEmployeeChange}\n            onEmployeesUpdate={(updatedEmployees) => {\n              console.log('子コンポーネントから従業員データ更新を受信:', updatedEmployees.length, '件');\n              // 型互換性のために必要なプロパティを追加\n              const typeCompatibleEmployees = updatedEmployees.map(emp => ({\n                ...emp,\n                no: emp.no || 0, // noが未定義の場合は0を設定して型互換性を確保\n              }));\n              \n              // イベントオブジェクトを生成して状態の同期を管理（デバッグ用識別値を追加）\n              const uniqueId = new Date().getTime(); \n              console.log(`[${uniqueId}] 親コンポーネントで状態更新開始`);\n              \n              // 非同期で状態更新を行い、無限ループを防ぐ\n              setTimeout(() => {\n                console.log(`[${uniqueId}] 親コンポーネントで状態更新実行`);\n                setCurrentReport(prev => {\n                  // 前の状態と新しい状態が実質的に同じ場合は更新しない\n                  if (JSON.stringify(prev.employees.map(e => e.id)) === \n                      JSON.stringify(typeCompatibleEmployees.map(e => e.id)) &&\n                      prev.employees.length === typeCompatibleEmployees.length) {\n                    console.log(`[${uniqueId}] 従業員データに変更がないため、状態更新をスキップ`);\n                    return prev;\n                  }\n                  \n                  console.log(`[${uniqueId}] 従業員データを更新:`, typeCompatibleEmployees.length, '件');\n                  return {\n                    ...prev,\n                    employees: typeCompatibleEmployees as any\n                  };\n                });\n              }, 100); // 100ms遅延で実行\n            }}\n            summaryData={summary || defaultSummary}\n            onRefreshData={handleRefreshData}\n            onYearChange={handleYearChange}\n          />\n        );\n      }\n      \n      if (activeTab === 'monthly') {\n        return (\n          <MonthlyReportDetail \n            isEmbedded={true}\n            summaryData={summary || undefined}\n            monthlyDetailData={detail || undefined}\n            onDetailCellChange={handleDetailCellChange}\n            onYearChange={handleYearChange}\n            onRefreshData={handleRefreshData}\n          />\n        );\n      }\n      \n      // データがない場合、各タブで新規作成UIを表示するためにnullを返す\n      return null;\n    };\n\n    // 条件付きレンダリング要素を事前に作成\n    const errorMessageElement = errorMessage ? (\n      <div className=\"error-message\" style={{ \n        backgroundColor: '#f8d7da', \n        color: '#721c24', \n        padding: '10px', \n        borderRadius: '4px', \n        marginBottom: '15px' \n      }}>\n        {errorMessage}\n      </div>\n    ) : null;\n\n    const successMessageElement = successMessage ? (\n      <div className=\"success-message\" style={{ \n        backgroundColor: '#d4edda', \n        color: '#155724', \n        padding: '10px', \n        borderRadius: '4px', \n        marginBottom: '15px' \n      }}>\n        {successMessage}\n      </div>\n    ) : null;\n\n    const hasErrorElement = hasError ? (\n      <div style={{ \n        backgroundColor: '#f8d7da', \n        color: '#721c24', \n        padding: '10px', \n        borderRadius: '4px', \n        marginBottom: '15px' \n      }}>\n        データの取得中にエラーが発生しました。\n      </div>\n    ) : null;\n\n    const isLoadingElement = isLoading ? (\n      <div style={{ \n        backgroundColor: '#e9ecef', \n        padding: '10px', \n        borderRadius: '4px', \n        marginBottom: '15px',\n        textAlign: 'center'\n      }}>\n        データを読み込み中...\n      </div>\n    ) : null;\n\n    // サマリー表示要素（タブがサマリーの場合のみ表示）\n    const summaryElement = summary && activeTab === 'summary' ? (\n      <div style={{\n        backgroundColor: '#e9f2ff',\n        padding: '15px 20px',\n        borderRadius: '8px',\n        marginBottom: '20px',\n        borderLeft: '4px solid #3a66d4',\n        fontSize: '0.9rem'\n      }}>\n        <h3 style={{ fontSize: '1.1rem', margin: '0 0 10px 0', color: '#3a66d4' }}>\n          {summary.fiscal_year}年 {summary.month}月 サマリー\n        </h3>\n        <div style={{ display: 'flex', flexWrap: 'wrap', gap: '10px 20px' }}>\n          <span>常用労働者数: <strong>{summary.employees_count}</strong>名</span>\n          <span>|</span>\n          <span>うちフルタイム: {summary.fulltime_count}名</span>\n          <span>|</span>\n          <span>うちパートタイム: {summary.parttime_count}名</span>\n          <br />\n          <span>障害者数 (カウント): <strong>{safeNumber(summary.total_disability_count).toFixed(1)}</strong>名</span>\n          <span>|</span>\n          <span>実雇用率: <strong>{safeNumber(summary.employment_rate).toFixed(2)}</strong>%</span>\n          <span>|</span>\n          <span>法定雇用率: {safeNumber(summary.legal_employment_rate).toFixed(2)}%</span>\n          <span>|</span>\n          <span>法定雇用障害者数: {safeNumber(summary.required_count).toFixed(1)}名</span>\n          <span>|</span>\n          <span>不足数: <strong style={{ color: safeNumber(summary.over_under_count) < 0 ? 'red' : 'inherit' }}>{safeNumber(summary.over_under_count).toFixed(1)}</strong>名</span>\n        </div>\n      </div>\n    ) : null;\n\n    return (\n      <div className=\"monthly-report-container\" style={{ padding: '20px' }}>\n        <h1 style={{ marginBottom: '20px' }}>月次報告</h1>\n\n        {/* 年月選択パネル - 表示/非表示制御 */}\n        <div style={{\n          display: 'flex',\n          gap: '20px',\n          marginBottom: '20px',\n          backgroundColor: '#f8f9fa',\n          padding: '10px 15px',\n          borderRadius: '4px',\n          border: '1px solid #ddd'\n        }}>\n          <div style={{\n            display: canShowYearMonthControls ? 'block' : 'none',\n            visibility: canShowYearMonthControls ? 'visible' : 'hidden'\n          }}>\n            <label style={{ marginRight: '8px', fontSize: '0.9rem' }}>年度:</label>\n            <select\n              value={fiscalYear}\n              onChange={(e) => handleYearChange(parseInt(e.target.value, 10))}\n              style={{\n                padding: '6px 10px',\n                borderRadius: '4px',\n                border: '1px solid #ced4da',\n                fontSize: '0.9rem'\n              }}\n            >\n              {Array.from({ length: 11 }, (_, i) => currentDate.getFullYear() - 5 + i).map(year => (\n                <option key={year} value={year}>{year}</option>\n              ))}\n            </select>\n          </div>\n          \n          <div style={{\n            display: canShowYearMonthControls ? 'block' : 'none',\n            visibility: canShowYearMonthControls ? 'visible' : 'hidden'\n          }}>\n            <label style={{ marginRight: '8px', fontSize: '0.9rem' }}>月:</label>\n            <select\n              value={month}\n              onChange={(e) => handleMonthChange(parseInt(e.target.value, 10))}\n              style={{\n                padding: '6px 10px',\n                borderRadius: '4px',\n                border: '1px solid #ced4da',\n                fontSize: '0.9rem'\n              }}\n            >\n              {monthOptions.map(m => (\n                <option key={m} value={m}>{m}月</option>\n              ))}\n            </select>\n          </div>\n          \n          {/* デバッグ情報 - 開発環境のみ表示 */}\n          {process.env.NODE_ENV === 'development' && (\n            <div style={{ marginLeft: 'auto', fontSize: '0.8rem', color: '#666' }}>\n              年度: {fiscalYear}, 月: {month}, 表示可: {canShowYearMonthControls ? 'はい' : 'いいえ'}\n            </div>\n          )}\n          \n          <button\n            onClick={handleRefreshData}\n            style={{\n              padding: '6px 12px',\n              backgroundColor: '#007bff',\n              color: 'white',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: 'pointer'\n            }}\n            disabled={isLoading}\n          >\n            更新\n          </button>\n        </div>\n        \n        {errorMessageElement}\n        {successMessageElement}\n        {hasErrorElement}\n        {isLoadingElement}\n        \n        {summaryElement}\n        \n        <div style={{\n          display: 'flex',\n          borderBottom: '1px solid #ddd',\n          marginBottom: '20px'\n        }}>\n          {tabItems.map(tab => (\n            <button\n              key={tab.id}\n              onClick={() => handleTabChange(tab.id)}\n              style={{\n                padding: '10px 20px',\n                background: 'none',\n                border: 'none',\n                borderBottom: activeTab === tab.id ? '3px solid #007bff' : '3px solid transparent',\n                marginBottom: '-1px',\n                color: activeTab === tab.id ? '#007bff' : '#666',\n                fontWeight: activeTab === tab.id ? 'bold' : 'normal',\n                cursor: 'pointer',\n                transition: 'color 0.2s, border-bottom-color 0.2s',\n                fontSize: '1rem',\n              }}\n            >\n              {tab.label}\n            </button>\n          ))}\n        </div>\n        \n        <div className=\"tab-content\">\n          {renderTabContent()}\n        </div>\n      </div>\n    );\n  };\n\n  // メインコンポーネントのレンダリング\n  return (\n    <YearMonthProvider initialYear={initialYear} initialMonth={initialMonth}>\n      <MonthlyReportContent />\n    </YearMonthProvider>\n  );\n};\n\nexport default MonthlyReport;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAC3D,SAASC,QAAQ,EAAEC,cAAc,QAAQ,aAAa;AACtD,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,mBAAmB,MAAM,uBAAuB;AAEvD,SAASC,iBAAiB,EAAEC,YAAY,QAAQ,oBAAoB;AACpE,SACEC,gBAAgB,EAChBC,iBAAiB,EAEjBC,mBAAmB,QACd,qBAAqB;AAC5B,SAASC,UAAU,QAA6B,SAAS;AACzD,OAAOC,OAAO,MAAM,iCAAiC;AACrD,OAAOC,YAAY,MAAM,sCAAsC;AAC/D,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAI1B;AACA;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,GACvD,MAAM,GACLF,OAAO,CAACC,GAAG,CAACE,iBAAiB,IAAI,2BAA4B;;AAElE;AACA,MAAMC,eAA2B,GAAG,CAClC;EACEC,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,WAAW,EAAE,MAAM;EACnBC,IAAI,EAAE,OAAO;EACbC,eAAe,EAAE,MAAM;EACvBC,UAAU,EAAE,IAAI;EAChBC,KAAK,EAAE,IAAI;EACXC,SAAS,EAAE,YAAY;EACvBC,MAAM,EAAE,IAAI;EACZC,aAAa,EAAEC,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;EACjCC,IAAI,EAAE,EAAE;EACRC,KAAK,EAAE;AACT,CAAC,EACD;EACEb,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,WAAW,EAAE,MAAM;EACnBC,IAAI,EAAE,OAAO;EACbC,eAAe,EAAE,MAAM;EACvBC,UAAU,EAAE,IAAI;EAChBC,KAAK,EAAE,IAAI;EACXC,SAAS,EAAE,YAAY;EACvBC,MAAM,EAAE,IAAI;EACZC,aAAa,EAAEC,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;EACjCC,IAAI,EAAE,EAAE;EACRC,KAAK,EAAE;AACT,CAAC,EACD;EACEb,EAAE,EAAE,CAAC;EACLC,EAAE,EAAE,CAAC;EACLC,WAAW,EAAE,MAAM;EACnBC,IAAI,EAAE,OAAO;EACbC,eAAe,EAAE,MAAM;EACvBC,UAAU,EAAE,EAAE;EACdC,KAAK,EAAE,GAAG;EACVC,SAAS,EAAE,YAAY;EACvBC,MAAM,EAAE,IAAI;EACZC,aAAa,EAAEC,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;EACjCC,IAAI,EAAE,EAAE;EACRC,KAAK,EAAE;AACT,CAAC,CACF;;AAED;AACA,OAAO,MAAMC,qBAAqB,GAAIC,UAA0B,IAAwB;EACtF;EACA,MAAMC,SAAS,GAAGD,UAAU,CAACE,MAAM,CAACC,CAAC,IAAIA,CAAC,IAAI,IAAI,CAAC;;EAEnD;EACA,MAAMC,WAAW,GAAG,CAClB,GAAGH,SAAS,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACE,KAAK,IAAI,CAAC,CAAC,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACF,KAAK,GAAGG,CAAC,CAACH,KAAK,CAAC,EACxE,GAAGJ,SAAS,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACE,KAAK,IAAI,CAAC,CAAC,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACF,KAAK,GAAGG,CAAC,CAACH,KAAK,CAAC,CACzE;;EAED;EACA,MAAMI,kBAAkB,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAClE,MAAMC,eAAe,GAAGA,CAACC,IAAoB,EAAEN,KAAa,EAAEO,GAAuB,EAAEC,YAAoB,GAAG,CAAC,KAAa;IAC1H,MAAMC,MAAM,GAAGH,IAAI,CAACI,IAAI,CAACZ,CAAC,IAAIA,CAAC,CAACE,KAAK,KAAKA,KAAK,CAAC;;IAEhD;IACA,IAAIO,GAAG,KAAK,uBAAuB,IAAIA,GAAG,KAAK,iBAAiB,EAAE;MAChE,MAAMI,KAAK,GAAGF,MAAM,GAAGzC,UAAU,CAACyC,MAAM,CAACF,GAAG,CAAC,CAAC,GAAGC,YAAY;MAC7D;MACA,OAAOI,UAAU,CAACD,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC;IACrC;IAEA,OAAOJ,MAAM,GAAGzC,UAAU,CAACyC,MAAM,CAACF,GAAG,CAAC,CAAC,GAAGC,YAAY;EACxD,CAAC;EAED,MAAMM,oBAAoB,GAAGV,kBAAkB,CAACW,GAAG,CAACC,CAAC,IAAIX,eAAe,CAACN,WAAW,EAAEiB,CAAC,EAAE,iBAAiB,CAAC,CAAC;EAC5G,MAAMC,uBAAuB,GAAGb,kBAAkB,CAACW,GAAG,CAACC,CAAC,IAAIX,eAAe,CAACN,WAAW,EAAEiB,CAAC,EAAE,gBAAgB,CAAC,CAAC;EAC9G,MAAME,uBAAuB,GAAGd,kBAAkB,CAACW,GAAG,CAACC,CAAC,IAAIX,eAAe,CAACN,WAAW,EAAEiB,CAAC,EAAE,gBAAgB,CAAC,CAAC;EAC9G,MAAMG,mBAAmB,GAAGf,kBAAkB,CAACW,GAAG,CAACC,CAAC,IAAIX,eAAe,CAACN,WAAW,EAAEiB,CAAC,EAAE,gBAAgB,CAAC,CAAC;EAC1G,MAAMI,0BAA0B,GAAGhB,kBAAkB,CAACW,GAAG,CAACC,CAAC,IAAIX,eAAe,CAACN,WAAW,EAAEiB,CAAC,EAAE,wBAAwB,CAAC,CAAC;EACzH,MAAMK,2BAA2B,GAAGjB,kBAAkB,CAACW,GAAG,CAACC,CAAC,IAAIX,eAAe,CAACN,WAAW,EAAEiB,CAAC,EAAE,yBAAyB,CAAC,CAAC;EAC3H,MAAMM,wBAAwB,GAAGlB,kBAAkB,CAACW,GAAG,CAACC,CAAC,IAAIX,eAAe,CAACN,WAAW,EAAEiB,CAAC,EAAE,sBAAsB,CAAC,CAAC;EACrH,MAAMO,0BAA0B,GAAGnB,kBAAkB,CAACW,GAAG,CAACC,CAAC,IAAIX,eAAe,CAACN,WAAW,EAAEiB,CAAC,EAAE,wBAAwB,CAAC,CAAC;EACzH,MAAMQ,gBAAgB,GAAGpB,kBAAkB,CAACW,GAAG,CAACC,CAAC,IAAIX,eAAe,CAACN,WAAW,EAAEiB,CAAC,EAAE,iBAAiB,EAAE,GAAG,CAAC,CAAC;EAC7G,MAAMS,eAAe,GAAGrB,kBAAkB,CAACW,GAAG,CAACC,CAAC,IAAIX,eAAe,CAACN,WAAW,EAAEiB,CAAC,EAAE,uBAAuB,EAAE,GAAG,CAAC,CAAC;EAClH,MAAMU,gBAAgB,GAAGtB,kBAAkB,CAACW,GAAG,CAACC,CAAC,IAAIX,eAAe,CAACN,WAAW,EAAEiB,CAAC,EAAE,gBAAgB,CAAC,CAAC;EACvG,MAAMW,eAAe,GAAGvB,kBAAkB,CAACW,GAAG,CAACC,CAAC,IAAIX,eAAe,CAACN,WAAW,EAAEiB,CAAC,EAAE,kBAAkB,CAAC,CAAC;;EAExG;EACA,MAAMY,iBAAiB,GAAGd,oBAAoB,CAACe,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,EAAE,CAAC,CAAC;EACjF,MAAMC,oBAAoB,GAAGf,uBAAuB,CAACY,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,EAAE,CAAC,CAAC;EACvF,MAAME,oBAAoB,GAAGf,uBAAuB,CAACW,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,EAAE,CAAC,CAAC;EACvF,MAAMG,gBAAgB,GAAGf,mBAAmB,CAACU,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,EAAE,CAAC,CAAC;EAC/E,MAAMI,uBAAuB,GAAGf,0BAA0B,CAACS,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,EAAE,CAAC,CAAC;EAC7F,MAAMK,wBAAwB,GAAGf,2BAA2B,CAACQ,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,EAAE,CAAC,CAAC;EAC/F,MAAMM,qBAAqB,GAAGf,wBAAwB,CAACO,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,EAAE,CAAC,CAAC;EACzF,MAAMO,uBAAuB,GAAGf,0BAA0B,CAACM,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,EAAE,CAAC,CAAC;EAC7F,MAAMQ,aAAa,GAAG3B,UAAU,CAAC,CAACY,gBAAgB,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,EAAE,CAAC,CAAC,IAAIhC,WAAW,CAACyC,MAAM,IAAI,CAAC,CAAC,EAAE3B,OAAO,CAAC,CAAC,CAAC,CAAC;EAC9H,MAAM4B,YAAY,GAAG7B,UAAU,CAAC,CAACa,eAAe,CAACI,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,EAAE,CAAC,CAAC,IAAIhC,WAAW,CAACyC,MAAM,IAAI,CAAC,CAAC,EAAE3B,OAAO,CAAC,CAAC,CAAC,CAAC;EAC5H,MAAM6B,aAAa,GAAGhB,gBAAgB,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,EAAE,CAAC,CAAC;EACzE,MAAMY,YAAY,GAAGhB,eAAe,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,EAAE,CAAC,CAAC;;EAEvE;EACA,OAAO;IACLa,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IACzFtC,IAAI,EAAE,CACJ;MAAE1B,EAAE,EAAE,CAAC;MAAEiE,IAAI,EAAE,MAAM;MAAEC,MAAM,EAAE,CAAC,GAAGhC,oBAAoB,EAAEc,iBAAiB,CAAC;MAAEmB,MAAM,EAAE;IAAI,CAAC,EAC1F;MAAEnE,EAAE,EAAE,CAAC;MAAEiE,IAAI,EAAE,WAAW;MAAEC,MAAM,EAAE,CAAC,GAAG7B,uBAAuB,EAAEe,oBAAoB,CAAC;MAAEe,MAAM,EAAE;IAAI,CAAC,EACrG;MAAEnE,EAAE,EAAE,CAAC;MAAEiE,IAAI,EAAE,YAAY;MAAEC,MAAM,EAAE,CAAC,GAAG5B,uBAAuB,EAAEe,oBAAoB,CAAC;MAAEc,MAAM,EAAE;IAAI,CAAC,EACtG;MAAEnE,EAAE,EAAE,CAAC;MAAEiE,IAAI,EAAE,UAAU;MAAEC,MAAM,EAAE,CAAC,GAAGhC,oBAAoB,CAACC,GAAG,CAAC,CAACiC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAI9B,uBAAuB,CAAC+B,CAAC,CAAC,GAAG,GAAI,CAAC,EAAErB,iBAAiB,GAAIK,oBAAoB,GAAG,GAAI,CAAC;MAAEc,MAAM,EAAE,GAAG;MAAEG,YAAY,EAAE;IAAK,CAAC,EACvM;MAAEtE,EAAE,EAAE,CAAC;MAAEiE,IAAI,EAAE,YAAY;MAAEC,MAAM,EAAE,CAAC,GAAG3B,mBAAmB,EAAEe,gBAAgB,CAAC;MAAEa,MAAM,EAAE,GAAG;MAAEI,YAAY,EAAE;IAAK,CAAC,EAClH;MAAEvE,EAAE,EAAE,CAAC;MAAEiE,IAAI,EAAE,SAAS;MAAEC,MAAM,EAAE,CAAC,GAAG1B,0BAA0B,EAAEe,uBAAuB,CAAC;MAAEY,MAAM,EAAE,GAAG;MAAEI,YAAY,EAAE;IAAK,CAAC,EAC7H;MAAEvE,EAAE,EAAE,CAAC;MAAEiE,IAAI,EAAE,oBAAoB;MAAEC,MAAM,EAAE,CAAC,GAAGzB,2BAA2B,EAAEe,wBAAwB,CAAC;MAAEW,MAAM,EAAE,GAAG;MAAEI,YAAY,EAAE;IAAK,CAAC,EAC1I;MAAEvE,EAAE,EAAE,CAAC;MAAEiE,IAAI,EAAE,iBAAiB;MAAEC,MAAM,EAAE,CAAC,GAAGxB,wBAAwB,EAAEe,qBAAqB,CAAC;MAAEU,MAAM,EAAE,GAAG;MAAEI,YAAY,EAAE;IAAK,CAAC,EACjI;MAAEvE,EAAE,EAAE,CAAC;MAAEiE,IAAI,EAAE,QAAQ;MAAEC,MAAM,EAAE,CAAC,GAAGvB,0BAA0B,EAAEe,uBAAuB,CAAC;MAAES,MAAM,EAAE,GAAG;MAAEI,YAAY,EAAE,IAAI;MAAED,YAAY,EAAE;IAAK,CAAC,EAChJ;MAAEtE,EAAE,EAAE,EAAE;MAAEiE,IAAI,EAAE,MAAM;MAAEC,MAAM,EAAE,CAAC,GAAGtB,gBAAgB,EAAEe,aAAa,CAAC;MAAEQ,MAAM,EAAE,GAAG;MAAEK,OAAO,EAAE,IAAI;MAAEF,YAAY,EAAE;IAAK,CAAC,EACtH;MAAEtE,EAAE,EAAE,EAAE;MAAEiE,IAAI,EAAE,OAAO;MAAEC,MAAM,EAAE,CAAC,GAAGrB,eAAe,EAAEgB,YAAY,CAAC;MAAEM,MAAM,EAAE,GAAG;MAAEK,OAAO,EAAE;IAAK,CAAC,EACjG;MAAExE,EAAE,EAAE,EAAE;MAAEiE,IAAI,EAAE,QAAQ;MAAEC,MAAM,EAAE,CAAC,GAAGpB,gBAAgB,EAAEgB,aAAa,CAAC;MAAEK,MAAM,EAAE,GAAG;MAAEG,YAAY,EAAE;IAAK,CAAC,EACzG;MAAEtE,EAAE,EAAE,EAAE;MAAEiE,IAAI,EAAE,OAAO;MAAEC,MAAM,EAAE,CAAC,GAAGnB,eAAe,EAAEgB,YAAY,CAAC;MAAEU,UAAU,EAAE,IAAI;MAAEH,YAAY,EAAE,IAAI;MAAEH,MAAM,EAAE;IAAI,CAAC;EAE5H,CAAC;AACH,CAAC;;AAED;AACA,MAAMO,0BAA0B,GAAG,MAAAA,CAAOC,IAAY,EAAEvD,KAAa,KAAK;EACxE,IAAI;IACF,MAAMwD,WAAW,GAAG;MAClBC,WAAW,EAAEF,IAAI;MACjBvD,KAAK,EAAEA,KAAK;MACZ0D,eAAe,EAAE,CAAC;MAClBC,cAAc,EAAE,CAAC;MACjBC,cAAc,EAAE,CAAC;MACjBC,cAAc,EAAE,CAAC;MACjBC,sBAAsB,EAAE,CAAC;MACzBC,uBAAuB,EAAE,CAAC;MAC1BC,oBAAoB,EAAE,CAAC;MACvBC,qBAAqB,EAAE,GAAG,CAAC;IAC7B,CAAC;IAEDC,OAAO,CAACC,GAAG,CAAC,GAAGZ,IAAI,KAAKvD,KAAK,eAAe,CAAC;IAC7C,MAAMoE,QAAQ,GAAG,MAAMrG,mBAAmB,CAACwF,IAAI,EAAEvD,KAAK,EAAEwD,WAAW,CAAC;IACpEU,OAAO,CAACC,GAAG,CAAC,GAAGZ,IAAI,KAAKvD,KAAK,iBAAiB,EAAEoE,QAAQ,CAAC;IACzD,OAAOA,QAAQ;EACjB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpC,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,MAAMC,iBAAiB,GAAG,MAAAA,CAAOf,IAAY,EAAEvD,KAAa,KAAuB;EACjF,IAAI;IACF;IACA;IACAkE,OAAO,CAACC,GAAG,CAAC,gCAAgCZ,IAAI,IAAIvD,KAAK,EAAE,CAAC;IAC5D,MAAMoE,QAAQ,GAAG,MAAMjG,KAAK,CAACoG,GAAG,CAAC,wBAAwBhB,IAAI,IAAIvD,KAAK,EAAE,CAAC;IACzE,OAAO,CAAC,CAACoE,QAAQ,CAAC9D,IAAI,IAAI,CAAC,CAAC8D,QAAQ,CAAC9D,IAAI,CAACkE,OAAO;EACnD,CAAC,CAAC,OAAOH,KAAK,EAAE;IACd,IAAIlG,KAAK,CAACsG,YAAY,CAACJ,KAAK,CAAC,EAAE;MAAA,IAAAK,eAAA,EAAAC,cAAA;MAC7B;MACA,IAAI,EAAAD,eAAA,GAAAL,KAAK,CAACD,QAAQ,cAAAM,eAAA,uBAAdA,eAAA,CAAgBtF,MAAM,MAAK,GAAG,EAAE;QAClC,OAAO,KAAK;MACd;;MAEA;MACA,MAAMwF,YAAY,IAAAD,cAAA,GAAGN,KAAK,CAACQ,OAAO,cAAAF,cAAA,uBAAbA,cAAA,CAAeC,YAAY;MAChD,IAAIA,YAAY,IAAI,OAAOA,YAAY,KAAK,QAAQ,KAC/CA,YAAY,CAACE,QAAQ,CAAC,WAAW,CAAC,IAClCF,YAAY,CAACE,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE;QAAA,IAAAC,aAAA;QACpCb,OAAO,CAACG,KAAK,CAAC,YAAY,GAAAU,aAAA,GAAEV,KAAK,CAACW,MAAM,cAAAD,aAAA,uBAAZA,aAAA,CAAcE,GAAG,CAAC;QAC9C,OAAO,KAAK;MACd;IACF;IAEAf,OAAO,CAACG,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACrC,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,MAAMa,aAAuB,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAAA,IAAAC,EAAA,GAAAC,YAAA;EACpC,MAAMC,QAAQ,GAAGlI,WAAW,CAAC,CAAC;EAC9B,MAAMmI,QAAQ,GAAGlI,WAAW,CAAC,CAAC;EAC9B,MAAMmI,WAAW,GAAG,IAAIC,eAAe,CAACF,QAAQ,CAACG,MAAM,CAAC;EACxD,MAAMC,WAAW,GAAGpI,cAAc,CAAC,CAAC;EACpC,MAAMqI,UAAU,GAAGJ,WAAW,CAACjB,GAAG,CAAC,KAAK,CAAC,IAAI,SAAS;;EAEtD;EACA,MAAM,CAACsB,SAAS,EAAEC,YAAY,CAAC,GAAG7I,QAAQ,CAAS2I,UAAU,CAAC;;EAE9D;EACA,MAAMG,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC;EAC9B,MAAMC,kBAAkB,GAAGF,WAAW,CAACG,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;;EAEvD;EACA,MAAMC,WAAW,GAAGJ,WAAW,CAACK,WAAW,CAAC,CAAC;EAC7C,MAAMC,YAAY,GAAGJ,kBAAkB;;EAEvC;EACA,MAAM,CAACK,YAAY,EAAEC,eAAe,CAAC,GAAGtJ,QAAQ,CAAgB,IAAI,CAAC;EACrE;EACA,MAAM,CAACuJ,cAAc,EAAEC,iBAAiB,CAAC,GAAGxJ,QAAQ,CAAgB,IAAI,CAAC;EACzE;EACA,MAAM,CAACyJ,mBAAmB,EAAEC,sBAAsB,CAAC,GAAG1J,QAAQ,CAAU,KAAK,CAAC;;EAE9E;EACA,MAAM,CAAC2J,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG5J,QAAQ,CAAU,KAAK,CAAC;;EAE1E;EACA,MAAM,CAAC6J,SAAS,EAAEC,YAAY,CAAC,GAAG9J,QAAQ,CAAuB,CAAC,CAAC,CAAC;;EAEpE;EACA,MAAM,CAAC+J,aAAa,EAAEC,gBAAgB,CAAC,GAAGhK,QAAQ,CAI/C;IACDiK,OAAO,EAAE,IAAI;IACbC,SAAS,EAAE,EAAE;IACbC,MAAM,EAAE;EACV,CAAC,CAAC;;EAEF;EACAlK,SAAS,CAAC,MAAM;IACd;IACAoI,QAAQ,CAAC,uBAAuBO,SAAS,EAAE,EAAE;MAAEwB,OAAO,EAAE;IAAK,CAAC,CAAC;EACjE,CAAC,EAAE,CAACxB,SAAS,EAAEP,QAAQ,CAAC,CAAC;;EAEzB;EACA,MAAMgC,oBAA8B,GAAGA,CAAA,KAAM;IAAAlC,EAAA;IAC3C,MAAM;MAAEmC,UAAU;MAAEvH,KAAK;MAAEwH,aAAa;MAAEC,QAAQ;MAAEC,uBAAuB;MAAEC;IAAyB,CAAC,GAAG/J,YAAY,CAAC,CAAC;;IAExH;IACA,MAAM;MACJ0C,IAAI,EAAEsH,WAAW;MACjBC,SAAS,EAAEC,oBAAoB;MAC/BzD,KAAK,EAAE0D;IACT,CAAC,GAAGzK,QAAQ,CACV,CAAC,gBAAgB,CAAC,EAClB,MAAMQ,iBAAiB,CAAC,CAAC,EACzB;MACEkK,SAAS,EAAG1H,IAAI,IAAK;QACnB;QACA,IAAIA,IAAI,IAAIA,IAAI,CAACkC,MAAM,GAAG,CAAC,EAAE;UAC3B,MAAMyF,YAAY,GAAG3H,IAAI,CAAC,CAAC,CAAC;UAC5B;UACAqF,WAAW,CAACuC,iBAAiB,CAAC,CAAC,eAAe,EAAED,YAAY,CAACxE,WAAW,EAAEwE,YAAY,CAACjI,KAAK,CAAC,CAAC;QAChG;MACF,CAAC;MACDmI,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI;MAAE;MAC1BC,SAAS,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,CAAE;IAC7B,CACF,CAAC;;IAED;IACA,MAAM;MACJ9H,IAAI,EAAE+H,UAAU;MAChBR,SAAS,EAAES,mBAAmB;MAC9BjE,KAAK,EAAEkE,eAAe;MACtBC,OAAO,EAAEC;IACX,CAAC,GAAGnL,QAAQ,CACV,CAAC,eAAe,EAAEiK,UAAU,EAAEvH,KAAK,CAAC,EACpC,YAAY;MACV;MACA,MAAM0I,SAAS,GAAGnB,UAAU,IAAIpB,WAAW;MAC3C,MAAMwC,UAAU,GAAG3I,KAAK,IAAIqG,YAAY;MAExCnC,OAAO,CAACC,GAAG,CAAC,KAAKuE,SAAS,KAAKC,UAAU,UAAU,CAAC;MAEpD,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,GAAGF,SAAS,IAAIC,UAAU,EAAE;;QAE7C;QACA,IAAI7B,SAAS,CAAC8B,QAAQ,CAAC,IAAI,CAAChC,iBAAiB,EAAE;UAC7C1C,OAAO,CAACC,GAAG,CAAC,GAAGuE,SAAS,IAAIC,UAAU,kBAAkB,CAAC;UACzD9B,oBAAoB,CAAC,IAAI,CAAC;UAC1B,OAAOC,SAAS,CAAC8B,QAAQ,CAAC;QAC5B;;QAEA;QACA,MAAMtI,IAAI,GAAG,MAAMzC,gBAAgB,CAAC6K,SAAS,EAAEC,UAAU,CAAC;QAC1DzE,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAE7D,IAAI,CAAC;;QAE3B;QACAyG,YAAY,CAAC8B,IAAI,KAAK;UACpB,GAAGA,IAAI;UACP,CAACD,QAAQ,GAAGtI;QACd,CAAC,CAAC,CAAC;QAEHuG,oBAAoB,CAAC,KAAK,CAAC;QAC3B,OAAOvG,IAAI;MACb,CAAC,CAAC,OAAO+D,KAAK,EAAE;QAAA,IAAAyE,gBAAA;QACd;QACA,IAAI3K,KAAK,CAACsG,YAAY,CAACJ,KAAK,CAAC,IAAI,EAAAyE,gBAAA,GAAAzE,KAAK,CAACD,QAAQ,cAAA0E,gBAAA,uBAAdA,gBAAA,CAAgB1J,MAAM,MAAK,GAAG,EAAE;UAC/D8E,OAAO,CAACC,GAAG,CAAC,GAAGuE,SAAS,IAAIC,UAAU,yBAAyB,CAAC;UAChEhC,sBAAsB,CAAC,IAAI,CAAC;;UAE5B;UACA,IAAI;YACF,MAAMrD,0BAA0B,CAACoF,SAAS,EAAEC,UAAU,CAAC;YACvD;YACA,OAAO,MAAM9K,gBAAgB,CAAC6K,SAAS,EAAEC,UAAU,CAAC;UACtD,CAAC,CAAC,OAAOI,WAAW,EAAE;YACpB7E,OAAO,CAACG,KAAK,CAAC,qBAAqB,EAAE0E,WAAW,CAAC;YACjD;YACA,OAAO;cACLvE,OAAO,EAAE,IAAI;cACbwE,OAAO,EAAE,aAAa;cACtB1I,IAAI,EAAE;gBACJ4G,OAAO,EAAE,IAAI;gBACbC,SAAS,EAAE,EAAE;gBACbC,MAAM,EAAE;cACV;YACF,CAAC;UACH;QACF;;QAEA;QACA,MAAM/C,KAAK;MACb;IACF,CAAC,EACD;MACE2D,SAAS,EAAG1H,IAAI,IAAK;QACnB;QACA,IAAIoG,mBAAmB,IAAIpG,IAAI,IAAIA,IAAI,CAACkE,OAAO,EAAE;UAC/CmC,sBAAsB,CAAC,KAAK,CAAC;QAC/B;QAEA,IAAIrG,IAAI,EAAE;UAAA,IAAA2I,UAAA,EAAAC,WAAA,EAAAC,WAAA;UACR;UACA,MAAMC,WAAW,GAAG,EAAAH,UAAA,GAAA3I,IAAI,CAACA,IAAI,cAAA2I,UAAA,uBAATA,UAAA,CAAW/B,OAAO,KAAI,IAAI;UAC9C,IAAImC,UAAU,GAAG,EAAAH,WAAA,GAAA5I,IAAI,CAACA,IAAI,cAAA4I,WAAA,uBAATA,WAAA,CAAW9B,MAAM,KAAI,IAAI;;UAE1C;UACA,IAAIgC,WAAW,IAAI,CAACC,UAAU,EAAE;YAC9B,IAAI;cACFA,UAAU,GAAG3J,qBAAqB,CAAC,CAAC0J,WAAW,CAAC,CAAC;YACnD,CAAC,CAAC,OAAO/E,KAAK,EAAE;cACdH,OAAO,CAACG,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;cAC7CgF,UAAU,GAAG,IAAI;YACnB;UACF;;UAEA;UACA,MAAMC,aAAa,GAAGhJ,IAAI,aAAJA,IAAI,gBAAA6I,WAAA,GAAJ7I,IAAI,CAAEA,IAAI,cAAA6I,WAAA,eAAVA,WAAA,CAAYhC,SAAS,IAAI7G,IAAI,CAACA,IAAI,CAAC6G,SAAS,CAAC3E,MAAM,GAAG,CAAC,GACzElC,IAAI,CAACA,IAAI,CAAC6G,SAAS,GACnBxI,eAAe;UAEnBsI,gBAAgB,CAAC;YACfC,OAAO,EAAEkC,WAAW;YACpBjC,SAAS,EAAEmC,aAAa;YACxBlC,MAAM,EAAEiC;UACV,CAAC,CAAC;QACJ,CAAC,MAAM;UACL;UACApC,gBAAgB,CAAC;YACfC,OAAO,EAAE,IAAI;YACbC,SAAS,EAAExI,eAAe;YAC1ByI,MAAM,EAAE;UACV,CAAC,CAAC;QACJ;MACF,CAAC;MACDmC,OAAO,EAAGlF,KAAK,IAAK;QAClBH,OAAO,CAACG,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;QACvCkC,eAAe,CAAC,qBAAqB,CAAC;QACtCiD,UAAU,CAAC,MAAMjD,eAAe,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC;;QAE7C;QACAU,gBAAgB,CAAC4B,IAAI,KAAK;UACxB,GAAGA,IAAI;UACP1B,SAAS,EAAExI;QACb,CAAC,CAAC,CAAC;MACL,CAAC;MACD8K,OAAO,EAAE,CAAC,CAAClC,UAAU,IAAI,CAAC,CAACvH,KAAK;MAAE;MAClCmI,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI;MACxBC,SAAS,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;MACzBsB,KAAK,EAAEA,CAACC,YAAY,EAAEtF,KAAK,KAAK;QAAA,IAAAuF,gBAAA;QAC9B;QACA,IAAIzL,KAAK,CAACsG,YAAY,CAACJ,KAAK,CAAC,IAAI,EAAAuF,gBAAA,GAAAvF,KAAK,CAACD,QAAQ,cAAAwF,gBAAA,uBAAdA,gBAAA,CAAgBxK,MAAM,MAAK,GAAG,EAAE;UAC/D,OAAO,KAAK;QACd;QACA;QACA,OAAOuK,YAAY,GAAG,CAAC;MACzB;IACF,CACF,CAAC;;IAED;IACA,MAAME,mBAAmB,GAAIC,cAA4B,IAAK;MAC5D7C,gBAAgB,CAAC4B,IAAI,KAAK;QACxB,GAAGA,IAAI;QACP3B,OAAO,EAAE4C;MACX,CAAC,CAAC,CAAC;IACL,CAAC;;IAED;IACA,MAAMC,oBAAoB,GAAGA,CAACnL,EAAU,EAAEoL,KAAa,EAAErJ,KAAa,KAAK;MACzEsG,gBAAgB,CAAC4B,IAAI,IAAI;QACvB,IAAI,CAACA,IAAI,CAAC1B,SAAS,EAAE,OAAO0B,IAAI;QAEhC,OAAO;UACL,GAAGA,IAAI;UACP1B,SAAS,EAAE0B,IAAI,CAAC1B,SAAS,CAACpG,GAAG,CAACkJ,GAAG,IAC/BA,GAAG,CAACrL,EAAE,KAAKA,EAAE,GACT;YACE,GAAGqL,GAAG;YACN,CAACD,KAAK,GAAGA,KAAK,KAAK,eAAe,GAC/B,OAAOrJ,KAAK,KAAK,QAAQ,GAAGuJ,IAAI,CAACC,KAAK,CAACxJ,KAAK,CAAC,GAAGA,KAAK,GACtDA;UACJ,CAAC,GACDsJ,GACN;QACF,CAAC;MACH,CAAC,CAAC;IACJ,CAAC;;IAED;IACA,MAAMG,sBAAsB,GAAGA,CAACC,KAAa,EAAEC,QAAgB,EAAE3J,KAAa,KAAK;MACjFsG,gBAAgB,CAAC4B,IAAI,IAAI;QACvB,IAAI,CAACA,IAAI,CAACzB,MAAM,EAAE,OAAOyB,IAAI;QAE7B,MAAM0B,SAAS,GAAG;UAAC,GAAG1B,IAAI,CAACzB;QAAM,CAAC;QAClC,MAAMoD,QAAQ,GAAGD,SAAS,CAACjK,IAAI,CAACmK,SAAS,CAACC,GAAG,IAAIA,GAAG,CAAC9L,EAAE,KAAKyL,KAAK,CAAC;QAElE,IAAIG,QAAQ,KAAK,CAAC,CAAC,IAAIF,QAAQ,GAAG,EAAE,EAAE;UACpC;UACA,MAAMK,gBAAgB,GAAGN,KAAK,KAAK,EAAE;UACrC,IAAIO,QAAgB;UAEpB,IAAID,gBAAgB,EAAE;YACpB;YACA,IAAIhK,KAAK,KAAK,EAAE,IAAIA,KAAK,KAAK,GAAG,EAAE;cACjCiK,QAAQ,GAAG,CAAC;YACd,CAAC,MAAM,IAAIjK,KAAK,CAACkK,QAAQ,CAAC,GAAG,CAAC,EAAE;cAC9BD,QAAQ,GAAGhK,UAAU,CAACD,KAAK,GAAG,GAAG,CAAC;YACpC,CAAC,MAAM;cACLiK,QAAQ,GAAGhK,UAAU,CAACD,KAAK,CAAC;YAC9B;UACF,CAAC,MAAM;YACL;YACAiK,QAAQ,GAAGjK,KAAK,KAAK,EAAE,GAAG,CAAC,GAAGmK,MAAM,CAACnK,KAAK,CAAC;UAC7C;UAEA,IAAI,CAACoK,KAAK,CAACH,QAAQ,CAAC,EAAE;YACpB,MAAMI,aAAa,GAAG,CAAC,GAAGT,SAAS,CAACjK,IAAI,CAACkK,QAAQ,CAAC,CAAC1H,MAAM,CAAC;YAC1DkI,aAAa,CAACV,QAAQ,CAAC,GAAGM,QAAQ;;YAElC;YACAI,aAAa,CAAC,EAAE,CAAC,GAAGA,aAAa,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACpJ,MAAM,CAAC,CAAC3B,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,EAAE,CAAC,CAAC;YAEzEoK,SAAS,CAACjK,IAAI,CAACkK,QAAQ,CAAC,CAAC1H,MAAM,GAAGkI,aAAa;UACjD;QACF;QAEA,OAAO;UACL,GAAGnC,IAAI;UACPzB,MAAM,EAAEmD;QACV,CAAC;MACH,CAAC,CAAC;IACJ,CAAC;;IAED;IACA,MAAMW,iBAAiB,GAAG/N,WAAW,CAAC,MAAM;MAC1C;MACA,MAAMyL,QAAQ,GAAG,GAAGrB,UAAU,IAAIvH,KAAK,EAAE;MACzC+G,YAAY,CAAC8B,IAAI,IAAI;QACnB,MAAMsC,QAAQ,GAAG;UAAC,GAAGtC;QAAI,CAAC;QAC1B,OAAOsC,QAAQ,CAACvC,QAAQ,CAAC;QACzB,OAAOuC,QAAQ;MACjB,CAAC,CAAC;MAEFtE,oBAAoB,CAAC,KAAK,CAAC;;MAE3B;MACAlB,WAAW,CAACuC,iBAAiB,CAAC,CAAC,eAAe,EAAEX,UAAU,EAAEvH,KAAK,CAAC,CAAC;;MAEnE;MACAyI,iBAAiB,CAAC,CAAC,CAAC2C,KAAK,CAAC/G,KAAK,IAAI;QACjCH,OAAO,CAACG,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;QAClCkC,eAAe,CAAC,sBAAsB,CAAC;QACvCiD,UAAU,CAAC,MAAMjD,eAAe,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC;MAC/C,CAAC,CAAC;IACJ,CAAC,EAAE,CAACgB,UAAU,EAAEvH,KAAK,EAAE2F,WAAW,EAAE8C,iBAAiB,CAAC,CAAC;;IAEvD;IACA,MAAM4C,gBAAgB,GAAG,MAAO9H,IAAY,IAAK;MAC/CW,OAAO,CAACC,GAAG,CAAC,qBAAqBoD,UAAU,MAAMhE,IAAI,EAAE,CAAC;MAExD,IAAI;QACF;QACA,IAAIwH,KAAK,CAACxH,IAAI,CAAC,IAAIA,IAAI,IAAI,CAAC,EAAE;UAC5BW,OAAO,CAACG,KAAK,CAAC,gBAAgB,EAAEd,IAAI,CAAC;UACrCgD,eAAe,CAAC,gBAAgB,CAAC;UACjCiD,UAAU,CAAC,MAAMjD,eAAe,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC;UAC7C;QACF;;QAEA;QACA,MAAM+E,MAAM,GAAG,MAAMhH,iBAAiB,CAACf,IAAI,EAAEvD,KAAK,CAAC;QAEnD,IAAI,CAACsL,MAAM,EAAE;UACX;UACApH,OAAO,CAACC,GAAG,CAAC,GAAGZ,IAAI,KAAKvD,KAAK,uBAAuB,CAAC;;UAErD;UACA,IAAI;YACF,MAAMsD,0BAA0B,CAACC,IAAI,EAAEvD,KAAK,CAAC;YAC7CkE,OAAO,CAACC,GAAG,CAAC,GAAGZ,IAAI,KAAKvD,KAAK,gBAAgB,CAAC;UAChD,CAAC,CAAC,OAAOqE,KAAK,EAAE;YACdH,OAAO,CAACG,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;YACpC;UACF;QACF;;QAEA;QACAmD,aAAa,CAACjE,IAAI,CAAC;;QAEnB;QACA,MAAMqF,QAAQ,GAAG,GAAGrF,IAAI,IAAIvD,KAAK,EAAE;QACnC+G,YAAY,CAAC8B,IAAI,IAAI;UACnB,MAAMsC,QAAQ,GAAG;YAAC,GAAGtC;UAAI,CAAC;UAC1B,OAAOsC,QAAQ,CAACvC,QAAQ,CAAC;UACzB,OAAOuC,QAAQ;QACjB,CAAC,CAAC;QAEFtE,oBAAoB,CAAC,KAAK,CAAC;;QAE3B;QACAlB,WAAW,CAACuC,iBAAiB,CAAC,CAAC,eAAe,EAAE3E,IAAI,EAAEvD,KAAK,CAAC,CAAC;MAC/D,CAAC,CAAC,OAAOqE,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;;QAE3C;QACAkC,eAAe,CAAC,qBAAqB,CAAC;QACtCiD,UAAU,CAAC,MAAMjD,eAAe,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC;MAC/C;IACF,CAAC;;IAED;IACA,MAAMgF,iBAAiB,GAAG,MAAOC,QAAgB,IAAK;MACpDtH,OAAO,CAACC,GAAG,CAAC,WAAWnE,KAAK,MAAMwL,QAAQ,EAAE,CAAC;MAE7C,IAAI;QACF;QACA,IAAIT,KAAK,CAACS,QAAQ,CAAC,IAAIA,QAAQ,GAAG,CAAC,IAAIA,QAAQ,GAAG,EAAE,EAAE;UACpDtH,OAAO,CAACG,KAAK,CAAC,eAAe,EAAEmH,QAAQ,CAAC;UACxCjF,eAAe,CAAC,eAAe,CAAC;UAChCiD,UAAU,CAAC,MAAMjD,eAAe,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC;UAC7C;QACF;;QAEA;QACA,MAAMkF,SAAS,GAAGzL,KAAK;;QAEvB;QACAyH,QAAQ,CAAC+D,QAAQ,CAAC;;QAElB;QACA,MAAMF,MAAM,GAAG,MAAMhH,iBAAiB,CAACiD,UAAU,EAAEiE,QAAQ,CAAC;QAE5D,IAAI,CAACF,MAAM,EAAE;UACX;UACApH,OAAO,CAACC,GAAG,CAAC,GAAGoD,UAAU,KAAKiE,QAAQ,uBAAuB,CAAC;;UAE9D;UACA,IAAI;YACF,MAAMlI,0BAA0B,CAACiE,UAAU,EAAEiE,QAAQ,CAAC;YACtDtH,OAAO,CAACC,GAAG,CAAC,GAAGoD,UAAU,KAAKiE,QAAQ,gBAAgB,CAAC;UACzD,CAAC,CAAC,OAAOnH,KAAK,EAAE;YACdH,OAAO,CAACG,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;YACpC;YACAkC,eAAe,CAAC,0BAA0B,CAAC;YAC3CiD,UAAU,CAAC,MAAMjD,eAAe,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC;UAC/C;QACF;;QAEA;QACA,MAAMmF,oBAAoB,GAAG,IAAIC,WAAW,CAAC,kBAAkB,EAAE;UAC/DvE,MAAM,EAAE;YAAE7D,IAAI,EAAEgE,UAAU;YAAEvH,KAAK,EAAEwL;UAAS;QAC9C,CAAC,CAAC;QACFI,MAAM,CAACC,aAAa,CAACH,oBAAoB,CAAC;;QAE1C;QACAhE,uBAAuB,CAACH,UAAU,EAAEiE,QAAQ,CAAC;;QAE7C;QACA,MAAM5C,QAAQ,GAAG,GAAGrB,UAAU,IAAIiE,QAAQ,EAAE;QAC5CzE,YAAY,CAAC8B,IAAI,IAAI;UACnB,MAAMsC,QAAQ,GAAG;YAAC,GAAGtC;UAAI,CAAC;UAC1B,OAAOsC,QAAQ,CAACvC,QAAQ,CAAC;UACzB,OAAOuC,QAAQ;QACjB,CAAC,CAAC;QAEFtE,oBAAoB,CAAC,KAAK,CAAC;;QAE3B;QACAlB,WAAW,CAACuC,iBAAiB,CAAC,CAAC,eAAe,EAAEX,UAAU,EAAEiE,QAAQ,CAAC,CAAC;;QAEtE;QACA/E,iBAAiB,CAAC,GAAGc,UAAU,IAAIiE,QAAQ,eAAe,CAAC;QAC3DhC,UAAU,CAAC,MAAM/C,iBAAiB,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC;MACjD,CAAC,CAAC,OAAOpC,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;;QAE1C;QACAkC,eAAe,CAAC,qBAAqB,CAAC;QACtCiD,UAAU,CAAC,MAAMjD,eAAe,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC;MAC/C;IACF,CAAC;;IAED;IACA,MAAMuF,qBAAqB,GAAG,MAAAA,CAAOvI,IAAY,EAAEiI,QAAgB,KAAK;MACtEtH,OAAO,CAACC,GAAG,CAAC,YAAYoD,UAAU,IAAIvH,KAAK,OAAOuD,IAAI,IAAIiI,QAAQ,GAAG,CAAC;MAEtE,IAAI;QACF;QACA,IAAIT,KAAK,CAACxH,IAAI,CAAC,IAAIA,IAAI,IAAI,CAAC,EAAE;UAC5BW,OAAO,CAACG,KAAK,CAAC,gBAAgB,EAAEd,IAAI,CAAC;UACrCgD,eAAe,CAAC,gBAAgB,CAAC;UACjCiD,UAAU,CAAC,MAAMjD,eAAe,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC;UAC7C;QACF;QAEA,IAAIwE,KAAK,CAACS,QAAQ,CAAC,IAAIA,QAAQ,GAAG,CAAC,IAAIA,QAAQ,GAAG,EAAE,EAAE;UACpDtH,OAAO,CAACG,KAAK,CAAC,eAAe,EAAEmH,QAAQ,CAAC;UACxCjF,eAAe,CAAC,eAAe,CAAC;UAChCiD,UAAU,CAAC,MAAMjD,eAAe,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC;UAC7C;QACF;;QAEA;QACA,MAAM+E,MAAM,GAAG,MAAMhH,iBAAiB,CAACf,IAAI,EAAEiI,QAAQ,CAAC;QAEtD,IAAI,CAACF,MAAM,EAAE;UACX;UACApH,OAAO,CAACC,GAAG,CAAC,GAAGZ,IAAI,KAAKiI,QAAQ,uBAAuB,CAAC;;UAExD;UACA,IAAI;YACF,MAAMlI,0BAA0B,CAACC,IAAI,EAAEiI,QAAQ,CAAC;YAChDtH,OAAO,CAACC,GAAG,CAAC,GAAGZ,IAAI,KAAKiI,QAAQ,gBAAgB,CAAC;UACnD,CAAC,CAAC,OAAOnH,KAAK,EAAE;YACdH,OAAO,CAACG,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;YACpC;UACF;QACF;;QAEA;QACAqD,uBAAuB,CAACnE,IAAI,EAAEiI,QAAQ,CAAC;;QAEvC;QACA,MAAM5C,QAAQ,GAAG,GAAGrF,IAAI,IAAIiI,QAAQ,EAAE;QACtCzE,YAAY,CAAC8B,IAAI,IAAI;UACnB,MAAMsC,QAAQ,GAAG;YAAC,GAAGtC;UAAI,CAAC;UAC1B,OAAOsC,QAAQ,CAACvC,QAAQ,CAAC;UACzB,OAAOuC,QAAQ;QACjB,CAAC,CAAC;QAEFtE,oBAAoB,CAAC,KAAK,CAAC;;QAE3B;QACAlB,WAAW,CAACuC,iBAAiB,CAAC,CAAC,eAAe,EAAE3E,IAAI,EAAEiI,QAAQ,CAAC,CAAC;MAClE,CAAC,CAAC,OAAOnH,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;;QAE3C;QACAkC,eAAe,CAAC,sBAAsB,CAAC;QACvCiD,UAAU,CAAC,MAAMjD,eAAe,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC;MAC/C;IACF,CAAC;;IAED;IACA,MAAMwF,eAAe,GAAIC,GAAW,IAAK;MACvClG,YAAY,CAACkG,GAAG,CAAC;MACjB,MAAMC,MAAM,GAAG,IAAIxG,eAAe,CAACF,QAAQ,CAACG,MAAM,CAAC;MACnDuG,MAAM,CAACC,GAAG,CAAC,KAAK,EAAEF,GAAG,CAAC;MACtB1G,QAAQ,CAAC,GAAGC,QAAQ,CAAC4G,QAAQ,IAAIF,MAAM,CAACG,QAAQ,CAAC,CAAC,EAAE,EAAE;QAAE/E,OAAO,EAAE;MAAK,CAAC,CAAC;IAC1E,CAAC;;IAED;IACA,MAAMQ,SAAS,GAAGC,oBAAoB,IAAIQ,mBAAmB;IAC7D,MAAM+D,QAAQ,GAAGtE,gBAAgB,IAAIQ,eAAe;IAEpD,IAAIV,SAAS,IAAI,CAACb,aAAa,CAACE,OAAO,IAAI,CAACF,aAAa,CAACG,SAAS,CAAC3E,MAAM,EAAE;MAC1E,oBAAOnE,OAAA,CAACJ,OAAO;QAAAqO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IACpB;IAEA,IAAIJ,QAAQ,IAAI,CAACrF,aAAa,CAACG,SAAS,CAAC3E,MAAM,EAAE;MAC/C0B,OAAO,CAACG,KAAK,CAAC,WAAW,EAAE;QAAE0D,gBAAgB;QAAEQ;MAAgB,CAAC,CAAC;MACjE,oBAAOlK,OAAA,CAACH,YAAY;QAAC8K,OAAO,EAAC;MAAuB;QAAAsD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IACzD;IAEA,MAAM;MAAEvF,OAAO;MAAEC,SAAS;MAAEC;IAAO,CAAC,GAAGJ,aAAa;IACpD,MAAM0F,WAAW,GAAG,CAAAxF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE9H,MAAM,MAAK,KAAK;;IAE7C;IACA,MAAMuN,QAAQ,GAAG,CACf;MAAE/N,EAAE,EAAE,SAAS;MAAEgO,KAAK,EAAE;IAAO,CAAC,EAChC;MAAEhO,EAAE,EAAE,WAAW;MAAEgO,KAAK,EAAE;IAAQ,CAAC,EACnC;MAAEhO,EAAE,EAAE,SAAS;MAAEgO,KAAK,EAAE;IAAO,CAAC,CACjC;;IAED;IACA,MAAMC,cAA4B,GAAG;MACnCpJ,WAAW,EAAE8D,UAAU;MACvBvH,KAAK,EAAEA,KAAK;MACZ0D,eAAe,EAAE,CAAC;MAClBC,cAAc,EAAE,CAAC;MACjBC,cAAc,EAAE,CAAC;MACjBC,cAAc,EAAE,CAAC;MACjBC,sBAAsB,EAAE,CAAC;MACzBC,uBAAuB,EAAE,CAAC;MAC1BC,oBAAoB,EAAE,CAAC;MACvBC,qBAAqB,EAAE,GAAG;MAC1B6I,sBAAsB,EAAE,CAAC;MACzBC,eAAe,EAAE,CAAC;MAClBC,cAAc,EAAE,CAAC;MACjBC,gBAAgB,EAAE,CAAC;MACnB7N,MAAM,EAAE;IACV,CAAC;;IAED;IACA,MAAM8N,YAAY,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;;IAE5D;IACA,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;MAC7BjJ,OAAO,CAACC,GAAG,CAAC,WAAW,EAAE;QACvB0B,SAAS;QACTuH,cAAc,EAAE,CAAAjG,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAE3E,MAAM,KAAI,CAAC;QACtC6K,UAAU,EAAE,CAAC,CAACnG;MAChB,CAAC,CAAC;MAEF,IAAIrB,SAAS,KAAK,SAAS,EAAE;QAC3B,oBACExH,OAAA,CAACb,UAAU;UACT4L,WAAW,EAAElC,OAAQ;UACrBoG,eAAe,EAAEzD,mBAAoB;UACrC0D,aAAa,EAAErC;QAAkB;UAAAoB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClC,CAAC;MAEN;MAEA,IAAI5G,SAAS,KAAK,WAAW,EAAE;QAC7B,oBACExH,OAAA,CAACZ,YAAY;UACX0J,SAAS,EAAE,CAACA,SAAS,IAAI,EAAE,EAAEpG,GAAG,CAACkJ,GAAG,KAAK;YACvC,GAAGA,GAAG;YACNrL,EAAE,EAAEqL,GAAG,CAACrL,EAAE;YACVE,WAAW,EAAEmL,GAAG,CAACnL,WAAW,KAAK0O,SAAS,GAAGC,MAAM,CAACxD,GAAG,CAACnL,WAAW,CAAC,GAAG,EAAE;YAAE;YAC3EE,eAAe,EAAEiL,GAAG,CAACjL,eAAe,IAAI,EAAE;YAAE;YAC5CC,UAAU,EAAEgL,GAAG,CAAChL,UAAU,IAAI,EAAE;YAAE;YAClCC,KAAK,EAAE+K,GAAG,CAAC/K,KAAK,IAAI,EAAE;YAAE;YACxBH,IAAI,EAAEkL,GAAG,CAAClL,IAAI,IAAI,EAAE;YAAE;YACtBK,MAAM,EAAE6K,GAAG,CAAC7K,MAAM,IAAI,IAAI;YAAE;YAC5BD,SAAS,EAAE8K,GAAG,CAAC9K,SAAS,IAAI,IAAI6G,IAAI,CAAC,CAAC,CAAC0H,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACtG,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;UACxF,CAAC,CAAC,CAAE;UACJuG,gBAAgB,EAAE7D,oBAAqB;UACvC8D,iBAAiB,EAAGC,gBAAgB,IAAK;YACvC5J,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAE2J,gBAAgB,CAACtL,MAAM,EAAE,GAAG,CAAC;YACnE;YACA,MAAMuL,uBAAuB,GAAGD,gBAAgB,CAAC/M,GAAG,CAACkJ,GAAG,KAAK;cAC3D,GAAGA,GAAG;cACNpL,EAAE,EAAEoL,GAAG,CAACpL,EAAE,IAAI,CAAC,CAAE;YACnB,CAAC,CAAC,CAAC;;YAEH;YACA,MAAMmP,QAAQ,GAAG,IAAIhI,IAAI,CAAC,CAAC,CAACiI,OAAO,CAAC,CAAC;YACrC/J,OAAO,CAACC,GAAG,CAAC,IAAI6J,QAAQ,mBAAmB,CAAC;;YAE5C;YACAxE,UAAU,CAAC,MAAM;cACftF,OAAO,CAACC,GAAG,CAAC,IAAI6J,QAAQ,mBAAmB,CAAC;cAC5C/G,gBAAgB,CAAC4B,IAAI,IAAI;gBACvB;gBACA,IAAIqB,IAAI,CAACgE,SAAS,CAACrF,IAAI,CAAC1B,SAAS,CAACpG,GAAG,CAACoN,CAAC,IAAIA,CAAC,CAACvP,EAAE,CAAC,CAAC,KAC7CsL,IAAI,CAACgE,SAAS,CAACH,uBAAuB,CAAChN,GAAG,CAACoN,CAAC,IAAIA,CAAC,CAACvP,EAAE,CAAC,CAAC,IACtDiK,IAAI,CAAC1B,SAAS,CAAC3E,MAAM,KAAKuL,uBAAuB,CAACvL,MAAM,EAAE;kBAC5D0B,OAAO,CAACC,GAAG,CAAC,IAAI6J,QAAQ,4BAA4B,CAAC;kBACrD,OAAOnF,IAAI;gBACb;gBAEA3E,OAAO,CAACC,GAAG,CAAC,IAAI6J,QAAQ,cAAc,EAAED,uBAAuB,CAACvL,MAAM,EAAE,GAAG,CAAC;gBAC5E,OAAO;kBACL,GAAGqG,IAAI;kBACP1B,SAAS,EAAE4G;gBACb,CAAC;cACH,CAAC,CAAC;YACJ,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;UACX,CAAE;UACF3E,WAAW,EAAElC,OAAO,IAAI2F,cAAe;UACvCU,aAAa,EAAErC,iBAAkB;UACjCkD,YAAY,EAAE/C;QAAiB;UAAAiB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChC,CAAC;MAEN;MAEA,IAAI5G,SAAS,KAAK,SAAS,EAAE;QAC3B,oBACExH,OAAA,CAACX,mBAAmB;UAClB2Q,UAAU,EAAE,IAAK;UACjBjF,WAAW,EAAElC,OAAO,IAAIsG,SAAU;UAClCc,iBAAiB,EAAElH,MAAM,IAAIoG,SAAU;UACvCe,kBAAkB,EAAEnE,sBAAuB;UAC3CgE,YAAY,EAAE/C,gBAAiB;UAC/BkC,aAAa,EAAErC;QAAkB;UAAAoB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClC,CAAC;MAEN;;MAEA;MACA,OAAO,IAAI;IACb,CAAC;;IAED;IACA,MAAM+B,mBAAmB,GAAGlI,YAAY,gBACtCjI,OAAA;MAAKoQ,SAAS,EAAC,eAAe;MAACC,KAAK,EAAE;QACpCC,eAAe,EAAE,SAAS;QAC1BC,KAAK,EAAE,SAAS;QAChBC,OAAO,EAAE,MAAM;QACfC,YAAY,EAAE,KAAK;QACnBC,YAAY,EAAE;MAChB,CAAE;MAAAC,QAAA,EACC1I;IAAY;MAAAgG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC,GACJ,IAAI;IAER,MAAMwC,qBAAqB,GAAGzI,cAAc,gBAC1CnI,OAAA;MAAKoQ,SAAS,EAAC,iBAAiB;MAACC,KAAK,EAAE;QACtCC,eAAe,EAAE,SAAS;QAC1BC,KAAK,EAAE,SAAS;QAChBC,OAAO,EAAE,MAAM;QACfC,YAAY,EAAE,KAAK;QACnBC,YAAY,EAAE;MAChB,CAAE;MAAAC,QAAA,EACCxI;IAAc;MAAA8F,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CAAC,GACJ,IAAI;IAER,MAAMyC,eAAe,GAAG7C,QAAQ,gBAC9BhO,OAAA;MAAKqQ,KAAK,EAAE;QACVC,eAAe,EAAE,SAAS;QAC1BC,KAAK,EAAE,SAAS;QAChBC,OAAO,EAAE,MAAM;QACfC,YAAY,EAAE,KAAK;QACnBC,YAAY,EAAE;MAChB,CAAE;MAAAC,QAAA,EAAC;IAEH;MAAA1C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,GACJ,IAAI;IAER,MAAM0C,gBAAgB,GAAGtH,SAAS,gBAChCxJ,OAAA;MAAKqQ,KAAK,EAAE;QACVC,eAAe,EAAE,SAAS;QAC1BE,OAAO,EAAE,MAAM;QACfC,YAAY,EAAE,KAAK;QACnBC,YAAY,EAAE,MAAM;QACpBK,SAAS,EAAE;MACb,CAAE;MAAAJ,QAAA,EAAC;IAEH;MAAA1C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,GACJ,IAAI;;IAER;IACA,MAAM4C,cAAc,GAAGnI,OAAO,IAAIrB,SAAS,KAAK,SAAS,gBACvDxH,OAAA;MAAKqQ,KAAK,EAAE;QACVC,eAAe,EAAE,SAAS;QAC1BE,OAAO,EAAE,WAAW;QACpBC,YAAY,EAAE,KAAK;QACnBC,YAAY,EAAE,MAAM;QACpBO,UAAU,EAAE,mBAAmB;QAC/BC,QAAQ,EAAE;MACZ,CAAE;MAAAP,QAAA,gBACA3Q,OAAA;QAAIqQ,KAAK,EAAE;UAAEa,QAAQ,EAAE,QAAQ;UAAEC,MAAM,EAAE,YAAY;UAAEZ,KAAK,EAAE;QAAU,CAAE;QAAAI,QAAA,GACvE9H,OAAO,CAACzD,WAAW,EAAC,SAAE,EAACyD,OAAO,CAAClH,KAAK,EAAC,iCACxC;MAAA;QAAAsM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACLpO,OAAA;QAAKqQ,KAAK,EAAE;UAAEe,OAAO,EAAE,MAAM;UAAEC,QAAQ,EAAE,MAAM;UAAEC,GAAG,EAAE;QAAY,CAAE;QAAAX,QAAA,gBAClE3Q,OAAA;UAAA2Q,QAAA,GAAM,wCAAQ,eAAA3Q,OAAA;YAAA2Q,QAAA,EAAS9H,OAAO,CAACxD;UAAe;YAAA4I,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAS,CAAC,UAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAChEpO,OAAA;UAAA2Q,QAAA,EAAM;QAAC;UAAA1C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACdpO,OAAA;UAAA2Q,QAAA,GAAM,8CAAS,EAAC9H,OAAO,CAACvD,cAAc,EAAC,QAAC;QAAA;UAAA2I,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC/CpO,OAAA;UAAA2Q,QAAA,EAAM;QAAC;UAAA1C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACdpO,OAAA;UAAA2Q,QAAA,GAAM,oDAAU,EAAC9H,OAAO,CAACtD,cAAc,EAAC,QAAC;QAAA;UAAA0I,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAChDpO,OAAA;UAAAiO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACNpO,OAAA;UAAA2Q,QAAA,GAAM,uDAAa,eAAA3Q,OAAA;YAAA2Q,QAAA,EAAShR,UAAU,CAACkJ,OAAO,CAAC4F,sBAAsB,CAAC,CAACjM,OAAO,CAAC,CAAC;UAAC;YAAAyL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAS,CAAC,UAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACnGpO,OAAA;UAAA2Q,QAAA,EAAM;QAAC;UAAA1C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACdpO,OAAA;UAAA2Q,QAAA,GAAM,4BAAM,eAAA3Q,OAAA;YAAA2Q,QAAA,EAAShR,UAAU,CAACkJ,OAAO,CAAC6F,eAAe,CAAC,CAAClM,OAAO,CAAC,CAAC;UAAC;YAAAyL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAS,CAAC,KAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACrFpO,OAAA;UAAA2Q,QAAA,EAAM;QAAC;UAAA1C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACdpO,OAAA;UAAA2Q,QAAA,GAAM,kCAAO,EAAChR,UAAU,CAACkJ,OAAO,CAACjD,qBAAqB,CAAC,CAACpD,OAAO,CAAC,CAAC,CAAC,EAAC,GAAC;QAAA;UAAAyL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC3EpO,OAAA;UAAA2Q,QAAA,EAAM;QAAC;UAAA1C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACdpO,OAAA;UAAA2Q,QAAA,GAAM,oDAAU,EAAChR,UAAU,CAACkJ,OAAO,CAAC8F,cAAc,CAAC,CAACnM,OAAO,CAAC,CAAC,CAAC,EAAC,QAAC;QAAA;UAAAyL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACvEpO,OAAA;UAAA2Q,QAAA,EAAM;QAAC;UAAA1C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACdpO,OAAA;UAAA2Q,QAAA,GAAM,sBAAK,eAAA3Q,OAAA;YAAQqQ,KAAK,EAAE;cAAEE,KAAK,EAAE5Q,UAAU,CAACkJ,OAAO,CAAC+F,gBAAgB,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG;YAAU,CAAE;YAAA+B,QAAA,EAAEhR,UAAU,CAACkJ,OAAO,CAAC+F,gBAAgB,CAAC,CAACpM,OAAO,CAAC,CAAC;UAAC;YAAAyL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAS,CAAC,UAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,GACJ,IAAI;IAER,oBACEpO,OAAA;MAAKoQ,SAAS,EAAC,0BAA0B;MAACC,KAAK,EAAE;QAAEG,OAAO,EAAE;MAAO,CAAE;MAAAG,QAAA,gBACnE3Q,OAAA;QAAIqQ,KAAK,EAAE;UAAEK,YAAY,EAAE;QAAO,CAAE;QAAAC,QAAA,EAAC;MAAI;QAAA1C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAG9CpO,OAAA;QAAKqQ,KAAK,EAAE;UACVe,OAAO,EAAE,MAAM;UACfE,GAAG,EAAE,MAAM;UACXZ,YAAY,EAAE,MAAM;UACpBJ,eAAe,EAAE,SAAS;UAC1BE,OAAO,EAAE,WAAW;UACpBC,YAAY,EAAE,KAAK;UACnBc,MAAM,EAAE;QACV,CAAE;QAAAZ,QAAA,gBACA3Q,OAAA;UAAKqQ,KAAK,EAAE;YACVe,OAAO,EAAE9H,wBAAwB,GAAG,OAAO,GAAG,MAAM;YACpDkI,UAAU,EAAElI,wBAAwB,GAAG,SAAS,GAAG;UACrD,CAAE;UAAAqH,QAAA,gBACA3Q,OAAA;YAAOqQ,KAAK,EAAE;cAAEoB,WAAW,EAAE,KAAK;cAAEP,QAAQ,EAAE;YAAS,CAAE;YAAAP,QAAA,EAAC;UAAG;YAAA1C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACrEpO,OAAA;YACEsC,KAAK,EAAE4G,UAAW;YAClBwI,QAAQ,EAAG5B,CAAC,IAAK9C,gBAAgB,CAAC2E,QAAQ,CAAC7B,CAAC,CAAC8B,MAAM,CAACtP,KAAK,EAAE,EAAE,CAAC,CAAE;YAChE+N,KAAK,EAAE;cACLG,OAAO,EAAE,UAAU;cACnBC,YAAY,EAAE,KAAK;cACnBc,MAAM,EAAE,mBAAmB;cAC3BL,QAAQ,EAAE;YACZ,CAAE;YAAAP,QAAA,EAED1P,KAAK,CAAC4Q,IAAI,CAAC;cAAE1N,MAAM,EAAE;YAAG,CAAC,EAAE,CAAC2N,CAAC,EAAElN,CAAC,KAAK8C,WAAW,CAACK,WAAW,CAAC,CAAC,GAAG,CAAC,GAAGnD,CAAC,CAAC,CAAClC,GAAG,CAACwC,IAAI,iBAC/ElF,OAAA;cAAmBsC,KAAK,EAAE4C,IAAK;cAAAyL,QAAA,EAAEzL;YAAI,GAAxBA,IAAI;cAAA+I,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAA6B,CAC/C;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eAENpO,OAAA;UAAKqQ,KAAK,EAAE;YACVe,OAAO,EAAE9H,wBAAwB,GAAG,OAAO,GAAG,MAAM;YACpDkI,UAAU,EAAElI,wBAAwB,GAAG,SAAS,GAAG;UACrD,CAAE;UAAAqH,QAAA,gBACA3Q,OAAA;YAAOqQ,KAAK,EAAE;cAAEoB,WAAW,EAAE,KAAK;cAAEP,QAAQ,EAAE;YAAS,CAAE;YAAAP,QAAA,EAAC;UAAE;YAAA1C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACpEpO,OAAA;YACEsC,KAAK,EAAEX,KAAM;YACb+P,QAAQ,EAAG5B,CAAC,IAAK5C,iBAAiB,CAACyE,QAAQ,CAAC7B,CAAC,CAAC8B,MAAM,CAACtP,KAAK,EAAE,EAAE,CAAC,CAAE;YACjE+N,KAAK,EAAE;cACLG,OAAO,EAAE,UAAU;cACnBC,YAAY,EAAE,KAAK;cACnBc,MAAM,EAAE,mBAAmB;cAC3BL,QAAQ,EAAE;YACZ,CAAE;YAAAP,QAAA,EAED9B,YAAY,CAACnM,GAAG,CAACC,CAAC,iBACjB3C,OAAA;cAAgBsC,KAAK,EAAEK,CAAE;cAAAgO,QAAA,GAAEhO,CAAC,EAAC,QAAC;YAAA,GAAjBA,CAAC;cAAAsL,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAwB,CACvC;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,EAGLlO,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,iBACrCJ,OAAA;UAAKqQ,KAAK,EAAE;YAAE0B,UAAU,EAAE,MAAM;YAAEb,QAAQ,EAAE,QAAQ;YAAEX,KAAK,EAAE;UAAO,CAAE;UAAAI,QAAA,GAAC,gBACjE,EAACzH,UAAU,EAAC,YAAK,EAACvH,KAAK,EAAC,wBAAO,EAAC2H,wBAAwB,GAAG,IAAI,GAAG,KAAK;QAAA;UAAA2E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxE,CACN,eAEDpO,OAAA;UACEgS,OAAO,EAAEnF,iBAAkB;UAC3BwD,KAAK,EAAE;YACLG,OAAO,EAAE,UAAU;YACnBF,eAAe,EAAE,SAAS;YAC1BC,KAAK,EAAE,OAAO;YACdgB,MAAM,EAAE,MAAM;YACdd,YAAY,EAAE,KAAK;YACnBwB,MAAM,EAAE;UACV,CAAE;UACFC,QAAQ,EAAE1I,SAAU;UAAAmH,QAAA,EACrB;QAED;UAAA1C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,EAEL+B,mBAAmB,EACnBS,qBAAqB,EACrBC,eAAe,EACfC,gBAAgB,EAEhBE,cAAc,eAEfhR,OAAA;QAAKqQ,KAAK,EAAE;UACVe,OAAO,EAAE,MAAM;UACfe,YAAY,EAAE,gBAAgB;UAC9BzB,YAAY,EAAE;QAChB,CAAE;QAAAC,QAAA,EACCrC,QAAQ,CAAC5L,GAAG,CAACiL,GAAG,iBACf3N,OAAA;UAEEgS,OAAO,EAAEA,CAAA,KAAMtE,eAAe,CAACC,GAAG,CAACpN,EAAE,CAAE;UACvC8P,KAAK,EAAE;YACLG,OAAO,EAAE,WAAW;YACpB4B,UAAU,EAAE,MAAM;YAClBb,MAAM,EAAE,MAAM;YACdY,YAAY,EAAE3K,SAAS,KAAKmG,GAAG,CAACpN,EAAE,GAAG,mBAAmB,GAAG,uBAAuB;YAClFmQ,YAAY,EAAE,MAAM;YACpBH,KAAK,EAAE/I,SAAS,KAAKmG,GAAG,CAACpN,EAAE,GAAG,SAAS,GAAG,MAAM;YAChD8R,UAAU,EAAE7K,SAAS,KAAKmG,GAAG,CAACpN,EAAE,GAAG,MAAM,GAAG,QAAQ;YACpD0R,MAAM,EAAE,SAAS;YACjBK,UAAU,EAAE,sCAAsC;YAClDpB,QAAQ,EAAE;UACZ,CAAE;UAAAP,QAAA,EAEDhD,GAAG,CAACY;QAAK,GAfLZ,GAAG,CAACpN,EAAE;UAAA0N,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAgBL,CACT;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAENpO,OAAA;QAAKoQ,SAAS,EAAC,aAAa;QAAAO,QAAA,EACzB7B,gBAAgB,CAAC;MAAC;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEV,CAAC;;EAED;EAAArH,EAAA,CAnxBMkC,oBAA8B;IAAA,QACwE1J,YAAY,EAOlHN,QAAQ,EAuBRA,QAAQ;EAAA;EAqvBd,oBACEe,OAAA,CAACV,iBAAiB;IAACwI,WAAW,EAAEA,WAAY;IAACE,YAAY,EAAEA,YAAa;IAAA2I,QAAA,eACtE3Q,OAAA,CAACiJ,oBAAoB;MAAAgF,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAExB,CAAC;AAACtH,GAAA,CA10BID,aAAuB;EAAA,QACV9H,WAAW,EACXC,WAAW,EAERE,cAAc;AAAA;AAAAqT,EAAA,GAJ9B1L,aAAuB;AA40B7B,eAAeA,aAAa;AAAC,IAAA0L,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}