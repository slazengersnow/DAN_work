{"ast":null,"code":"/**\n * 月次報告と従業員詳細画面のUI修正スクリプト\n * - 既存のスクリプトの問題を修正\n * - 月次報告の年度セレクタを非表示\n * - 従業員詳細の年度セレクタを追加\n * - レンダリング問題の解決\n */\n(function () {\n  'use strict';\n\n  // デバッグログ\n  function log(message) {\n    console.log('[FixedUIScript] ' + message);\n  }\n  log('UI修正スクリプトを開始します');\n\n  // ステップ1: 既存のスクリプトをクリーンアップ\n  function cleanupExistingScripts() {\n    // すべてのObserverを切断\n    if (window._existingYearObserver) {\n      window._existingYearObserver.disconnect();\n      log('既存のYearObserverを切断しました');\n    }\n    if (window._existingObservers) {\n      window._existingObservers.forEach(observer => {\n        if (observer && typeof observer.disconnect === 'function') {\n          observer.disconnect();\n        }\n      });\n      log('既存のObserverをすべて切断しました');\n    }\n    if (window._screenRestorerObserver) {\n      window._screenRestorerObserver.disconnect();\n      log('ScreenRestorerObserverを切断しました');\n    }\n    if (window._uiFixObserver) {\n      window._uiFixObserver.disconnect();\n      log('UIFixObserverを切断しました');\n    }\n    if (window._employeeYearFixObserver) {\n      window._employeeYearFixObserver.disconnect();\n      log('EmployeeYearFixObserverを切断しました');\n    }\n\n    // インターバルをクリア\n    if (window._enhancerIntervals) {\n      window._enhancerIntervals.forEach(intervalId => {\n        clearInterval(intervalId);\n      });\n      log('すべてのインターバルをクリアしました');\n    }\n\n    // 新しい変数を初期化\n    window._fixedUIObserver = null;\n    window._processingUIFix = false;\n  }\n\n  // ステップ2: 月次報告の年度セレクタを非表示にする関数\n  function hideMonthlyReportYearSelector() {\n    try {\n      // 月次報告ヘッダーを探す\n      const monthlyHeaders = Array.from(document.querySelectorAll('h1, h2, h3, h4, .page-header')).filter(el => el.textContent && el.textContent.includes('月次報告'));\n\n      // 月次タブも確認\n      const monthlyTabs = Array.from(document.querySelectorAll('.nav-link.active')).filter(el => el.textContent && (el.textContent.includes('月次') || el.textContent.includes('サマリー')));\n\n      // 月次コンテナの直接確認\n      const monthlyContainer = document.querySelector('.monthly-report-container');\n      if (monthlyHeaders.length === 0 && monthlyTabs.length === 0 && !monthlyContainer) {\n        // 月次報告画面でない場合は何もしない\n        return false;\n      }\n      log('月次報告画面を検出しました');\n\n      // 方法1: 月次報告コンテナの上部パネルを非表示\n      const topPanel = document.querySelector('.monthly-report-container > div > div:nth-child(3)');\n      if (topPanel) {\n        topPanel.style.cssText = 'display: none !important;';\n        log('月次報告の上部パネルを非表示にしました');\n      }\n\n      // 方法2: 年度ラベルを含む要素を非表示\n      const yearElements = Array.from(document.querySelectorAll('.form-group, .row, .col, div')).filter(el => el.textContent && (el.textContent.includes('年度:') || el.textContent.includes('対象年度:')) && !el.querySelector('table') && !el.closest('.monthly-report-detail'));\n      yearElements.forEach(el => {\n        if (el.querySelector('select') || el.querySelector('label')) {\n          el.style.cssText = 'display: none !important;';\n          log('月次報告の年度要素を非表示にしました');\n        }\n      });\n\n      // 方法3: 月次詳細タブの年度セレクタは表示を維持\n      document.querySelectorAll('.monthly-report-detail select#fiscal-year-select').forEach(el => {\n        el.style.cssText = 'display: inline-block !important; visibility: visible !important;';\n        log('月次詳細タブの年度セレクタの表示を維持します');\n      });\n      return true;\n    } catch (e) {\n      log('月次報告の年度セレクタ非表示処理中にエラー: ' + e.message);\n      return false;\n    }\n  }\n\n  // ステップ3: 従業員詳細に年度セレクタを追加する関数\n  function addEmployeeDetailYearSelector() {\n    try {\n      // 従業員詳細画面かどうかを確認\n      const employeeHeaders = Array.from(document.querySelectorAll('h1, h2, h3, h4, .page-header')).filter(el => el.textContent && el.textContent.includes('従業員詳細'));\n\n      // 従業員詳細タブも確認\n      const employeeTabs = Array.from(document.querySelectorAll('.nav-link.active')).filter(el => el.textContent && el.textContent.includes('従業員詳細'));\n\n      // 従業員詳細コンテナの直接確認\n      const employeeContainer = document.querySelector('.employee-detail');\n      if (employeeHeaders.length === 0 && employeeTabs.length === 0 && !employeeContainer) {\n        // 従業員詳細画面でない場合は何もしない\n        return false;\n      }\n      log('従業員詳細画面を検出しました');\n\n      // 既存の修正済み年度セレクタがあれば何もしない\n      if (document.querySelector('.year-selector-fixed')) {\n        log('従業員詳細の年度セレクタは既に追加されています');\n        return false;\n      }\n\n      // ツールバーまたはボタングループを取得\n      let toolbar = null;\n\n      // 方法1: ボタングループを探す\n      toolbar = document.querySelector('.btn-group, .button-group, .toolbar');\n\n      // 方法2: 編集ボタンから親要素を取得\n      if (!toolbar) {\n        const editButtons = Array.from(document.querySelectorAll('button')).filter(btn => btn.textContent && (btn.textContent.includes('編集') || btn.textContent.includes('Edit')));\n        if (editButtons.length > 0) {\n          toolbar = editButtons[0].parentElement;\n          log('編集ボタンから親ツールバーを検出しました');\n        }\n      }\n\n      // 方法3: 戻るボタンから親要素を取得\n      if (!toolbar) {\n        const backButtons = Array.from(document.querySelectorAll('button')).filter(btn => btn.textContent && (btn.textContent.includes('戻る') || btn.textContent.includes('Back')));\n        if (backButtons.length > 0) {\n          toolbar = backButtons[0].parentElement;\n          log('戻るボタンから親ツールバーを検出しました');\n        }\n      }\n      if (!toolbar) {\n        log('従業員詳細のツールバーが見つかりません');\n        return false;\n      }\n\n      // 年度セレクタを作成\n      const yearSelector = document.createElement('div');\n      yearSelector.className = 'year-selector-fixed';\n      yearSelector.style.cssText = 'display: inline-block; margin-right: 15px;';\n\n      // 現在の年を取得\n      const currentYear = new Date().getFullYear();\n\n      // セレクタの内容を作成\n      yearSelector.innerHTML = `\n        <label style=\"margin-right: 5px; display: inline-block; font-weight: normal;\">対象年度:</label>\n        <select class=\"form-control form-control-sm\" style=\"display: inline-block; width: auto; height: 31px; padding: 0.25rem 0.5rem; vertical-align: middle;\">\n          <option value=\"${currentYear - 2}\">${currentYear - 2}年度</option>\n          <option value=\"${currentYear - 1}\">${currentYear - 1}年度</option>\n          <option value=\"${currentYear}\" selected>${currentYear}年度</option>\n          <option value=\"${currentYear + 1}\">${currentYear + 1}年度</option>\n        </select>\n      `;\n\n      // ツールバーの先頭に挿入\n      toolbar.insertBefore(yearSelector, toolbar.firstChild);\n\n      // イベントリスナーを追加\n      const select = yearSelector.querySelector('select');\n      if (select) {\n        select.addEventListener('change', function (e) {\n          log(`年度が変更されました: ${e.target.value}`);\n\n          // 年度変更イベントの発行\n          const yearChangeEvent = new CustomEvent('employeeYearChanged', {\n            detail: {\n              year: parseInt(e.target.value, 10),\n              yearText: `${e.target.value}年度`\n            },\n            bubbles: true\n          });\n          document.dispatchEvent(yearChangeEvent);\n\n          // UI フィードバック\n          const feedbackEl = document.createElement('span');\n          feedbackEl.className = 'year-feedback';\n          feedbackEl.textContent = `${e.target.value}年度のデータを表示します`;\n          feedbackEl.style.cssText = 'color: #3a66d4; margin-left: 10px; font-weight: bold; opacity: 0; transition: opacity 0.3s;';\n\n          // 既存のフィードバックを削除\n          const existing = document.querySelector('.year-feedback');\n          if (existing) existing.remove();\n\n          // フィードバック要素を追加\n          yearSelector.appendChild(feedbackEl);\n\n          // フェードイン\n          setTimeout(() => {\n            feedbackEl.style.opacity = '1';\n\n            // 3秒後にフェードアウト\n            setTimeout(() => {\n              feedbackEl.style.opacity = '0';\n\n              // フェードアウト後に削除\n              setTimeout(() => {\n                if (feedbackEl.parentNode) feedbackEl.parentNode.removeChild(feedbackEl);\n              }, 300);\n            }, 3000);\n          }, 10);\n        });\n      }\n      log('従業員詳細の年度セレクタを追加しました');\n      return true;\n    } catch (e) {\n      log('従業員詳細の年度セレクタ追加処理中にエラー: ' + e.message);\n      return false;\n    }\n  }\n\n  // ステップ4: 安全なDOM監視と処理を行う\n  function setupSafeObserver() {\n    // 既にObserverが存在する場合は作成しない\n    if (window._fixedUIObserver) return;\n\n    // 既存フラグの初期化\n    window._processingUIFix = false;\n\n    // デバウンス用タイマー\n    let debounceTimer = null;\n\n    // MutationObserverの作成\n    const observer = new MutationObserver(function (mutations) {\n      // 処理中なら重複実行しない\n      if (window._processingUIFix) return;\n\n      // デバウンス処理\n      if (debounceTimer) {\n        clearTimeout(debounceTimer);\n      }\n      debounceTimer = setTimeout(() => {\n        window._processingUIFix = true;\n        try {\n          // 重要な変更のみに反応\n          let shouldUpdate = false;\n          for (const mutation of mutations) {\n            var _mutation$target$clas;\n            // 要素追加の場合\n            if (mutation.type === 'childList' && mutation.addedNodes.length) {\n              for (const node of mutation.addedNodes) {\n                if (node.nodeType === Node.ELEMENT_NODE) {\n                  var _node$classList, _node$querySelector;\n                  // 重要な要素の追加\n                  if (node.textContent && (node.textContent.includes('従業員詳細') || node.textContent.includes('月次報告')) || (_node$classList = node.classList) !== null && _node$classList !== void 0 && _node$classList.contains('tab-pane') || (_node$querySelector = node.querySelector) !== null && _node$querySelector !== void 0 && _node$querySelector.call(node, 'h2, h3, h4, button, .nav-tabs')) {\n                    shouldUpdate = true;\n                    break;\n                  }\n                }\n              }\n            }\n\n            // タブのアクティブ状態変更\n            if (mutation.type === 'attributes' && mutation.attributeName === 'class' && (_mutation$target$clas = mutation.target.classList) !== null && _mutation$target$clas !== void 0 && _mutation$target$clas.contains('active')) {\n              shouldUpdate = true;\n            }\n            if (shouldUpdate) break;\n          }\n          if (shouldUpdate) {\n            // 両方の処理を実行\n            hideMonthlyReportYearSelector();\n            addEmployeeDetailYearSelector();\n          }\n        } finally {\n          window._processingUIFix = false;\n        }\n      }, 300);\n    });\n\n    // 監視設定（パフォーマンスに配慮）\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      attributeFilter: ['class'] // クラス属性の変更のみ監視\n    });\n\n    // グローバル変数に保存\n    window._fixedUIObserver = observer;\n    log('安全なObserverを設定しました');\n  }\n\n  // ステップ5: URLの変更を監視する\n  function setupURLChangeMonitor() {\n    // URL変更を監視\n    let lastURL = window.location.href;\n\n    // URL変更の監視をMutationObserverで行う（より効率的）\n    const urlObserver = new MutationObserver(() => {\n      const currentURL = window.location.href;\n      if (currentURL !== lastURL) {\n        lastURL = currentURL;\n        log('URL変更を検出しました');\n\n        // URL変更後に少し遅延して処理\n        setTimeout(() => {\n          window._processingUIFix = true;\n          try {\n            hideMonthlyReportYearSelector();\n            addEmployeeDetailYearSelector();\n          } finally {\n            window._processingUIFix = false;\n          }\n        }, 500);\n      }\n    });\n\n    // 監視設定\n    urlObserver.observe(document, {\n      subtree: true,\n      childList: true\n    });\n\n    // URLチェック用のObserverをグローバル変数に保存\n    window._existingObservers = window._existingObservers || [];\n    window._existingObservers.push(urlObserver);\n  }\n\n  // ステップ6: タブ切り替えイベントの監視\n  function setupTabChangeListener() {\n    // タブ切り替えイベントでの処理\n    document.addEventListener('click', function (e) {\n      var _e$target$classList;\n      if ((_e$target$classList = e.target.classList) !== null && _e$target$classList !== void 0 && _e$target$classList.contains('nav-link') || e.target.closest && e.target.closest('.nav-link')) {\n        log('タブ切り替えを検出しました');\n        setTimeout(() => {\n          const clickedTab = e.target.closest('.nav-link') || e.target;\n          const tabText = clickedTab.textContent || '';\n          if (tabText.includes('従業員詳細')) {\n            addEmployeeDetailYearSelector();\n          } else if (tabText.includes('月次') || tabText.includes('サマリー')) {\n            hideMonthlyReportYearSelector();\n          }\n        }, 300);\n      }\n    });\n    log('タブ切り替えリスナーを設定しました');\n  }\n\n  // メイン処理を実行\n  cleanupExistingScripts();\n\n  // 初期実行\n  setTimeout(() => {\n    hideMonthlyReportYearSelector();\n    addEmployeeDetailYearSelector();\n\n    // Observerの設定\n    setupSafeObserver();\n    setupURLChangeMonitor();\n    setupTabChangeListener();\n\n    // ページ読み込み完了時の処理\n    window.addEventListener('load', function () {\n      log('ページ読み込み完了');\n      setTimeout(() => {\n        hideMonthlyReportYearSelector();\n        addEmployeeDetailYearSelector();\n      }, 300);\n    });\n    log('UI修正スクリプトの初期設定が完了しました');\n  }, 300);\n})();","map":{"version":3,"names":["log","message","console","cleanupExistingScripts","window","_existingYearObserver","disconnect","_existingObservers","forEach","observer","_screenRestorerObserver","_uiFixObserver","_employeeYearFixObserver","_enhancerIntervals","intervalId","clearInterval","_fixedUIObserver","_processingUIFix","hideMonthlyReportYearSelector","monthlyHeaders","Array","from","document","querySelectorAll","filter","el","textContent","includes","monthlyTabs","monthlyContainer","querySelector","length","topPanel","style","cssText","yearElements","closest","e","addEmployeeDetailYearSelector","employeeHeaders","employeeTabs","employeeContainer","toolbar","editButtons","btn","parentElement","backButtons","yearSelector","createElement","className","currentYear","Date","getFullYear","innerHTML","insertBefore","firstChild","select","addEventListener","target","value","yearChangeEvent","CustomEvent","detail","year","parseInt","yearText","bubbles","dispatchEvent","feedbackEl","existing","remove","appendChild","setTimeout","opacity","parentNode","removeChild","setupSafeObserver","debounceTimer","MutationObserver","mutations","clearTimeout","shouldUpdate","mutation","_mutation$target$clas","type","addedNodes","node","nodeType","Node","ELEMENT_NODE","_node$classList","_node$querySelector","classList","contains","call","attributeName","observe","body","childList","subtree","attributes","attributeFilter","setupURLChangeMonitor","lastURL","location","href","urlObserver","currentURL","push","setupTabChangeListener","_e$target$classList","clickedTab","tabText"],"sources":["/Users/gotouhiroaki/Programming/DAN_work/disability-employment-system/frontend/src/pages/FixedUIScript.js"],"sourcesContent":["/**\n * 月次報告と従業員詳細画面のUI修正スクリプト\n * - 既存のスクリプトの問題を修正\n * - 月次報告の年度セレクタを非表示\n * - 従業員詳細の年度セレクタを追加\n * - レンダリング問題の解決\n */\n(function() {\n  'use strict';\n  \n  // デバッグログ\n  function log(message) {\n    console.log('[FixedUIScript] ' + message);\n  }\n\n  log('UI修正スクリプトを開始します');\n\n  // ステップ1: 既存のスクリプトをクリーンアップ\n  function cleanupExistingScripts() {\n    // すべてのObserverを切断\n    if (window._existingYearObserver) {\n      window._existingYearObserver.disconnect();\n      log('既存のYearObserverを切断しました');\n    }\n    \n    if (window._existingObservers) {\n      window._existingObservers.forEach(observer => {\n        if (observer && typeof observer.disconnect === 'function') {\n          observer.disconnect();\n        }\n      });\n      log('既存のObserverをすべて切断しました');\n    }\n    \n    if (window._screenRestorerObserver) {\n      window._screenRestorerObserver.disconnect();\n      log('ScreenRestorerObserverを切断しました');\n    }\n    \n    if (window._uiFixObserver) {\n      window._uiFixObserver.disconnect();\n      log('UIFixObserverを切断しました');\n    }\n    \n    if (window._employeeYearFixObserver) {\n      window._employeeYearFixObserver.disconnect();\n      log('EmployeeYearFixObserverを切断しました');\n    }\n    \n    // インターバルをクリア\n    if (window._enhancerIntervals) {\n      window._enhancerIntervals.forEach(intervalId => {\n        clearInterval(intervalId);\n      });\n      log('すべてのインターバルをクリアしました');\n    }\n    \n    // 新しい変数を初期化\n    window._fixedUIObserver = null;\n    window._processingUIFix = false;\n  }\n\n  // ステップ2: 月次報告の年度セレクタを非表示にする関数\n  function hideMonthlyReportYearSelector() {\n    try {\n      // 月次報告ヘッダーを探す\n      const monthlyHeaders = Array.from(document.querySelectorAll('h1, h2, h3, h4, .page-header')).filter(\n        el => el.textContent && el.textContent.includes('月次報告')\n      );\n      \n      // 月次タブも確認\n      const monthlyTabs = Array.from(document.querySelectorAll('.nav-link.active')).filter(\n        el => el.textContent && (el.textContent.includes('月次') || el.textContent.includes('サマリー'))\n      );\n      \n      // 月次コンテナの直接確認\n      const monthlyContainer = document.querySelector('.monthly-report-container');\n      \n      if (monthlyHeaders.length === 0 && monthlyTabs.length === 0 && !monthlyContainer) {\n        // 月次報告画面でない場合は何もしない\n        return false;\n      }\n      \n      log('月次報告画面を検出しました');\n      \n      // 方法1: 月次報告コンテナの上部パネルを非表示\n      const topPanel = document.querySelector('.monthly-report-container > div > div:nth-child(3)');\n      if (topPanel) {\n        topPanel.style.cssText = 'display: none !important;';\n        log('月次報告の上部パネルを非表示にしました');\n      }\n      \n      // 方法2: 年度ラベルを含む要素を非表示\n      const yearElements = Array.from(document.querySelectorAll('.form-group, .row, .col, div')).filter(\n        el => el.textContent && \n             (el.textContent.includes('年度:') || el.textContent.includes('対象年度:')) && \n             !el.querySelector('table') && \n             !el.closest('.monthly-report-detail')\n      );\n      \n      yearElements.forEach(el => {\n        if (el.querySelector('select') || el.querySelector('label')) {\n          el.style.cssText = 'display: none !important;';\n          log('月次報告の年度要素を非表示にしました');\n        }\n      });\n      \n      // 方法3: 月次詳細タブの年度セレクタは表示を維持\n      document.querySelectorAll('.monthly-report-detail select#fiscal-year-select').forEach(el => {\n        el.style.cssText = 'display: inline-block !important; visibility: visible !important;';\n        log('月次詳細タブの年度セレクタの表示を維持します');\n      });\n      \n      return true;\n    } catch (e) {\n      log('月次報告の年度セレクタ非表示処理中にエラー: ' + e.message);\n      return false;\n    }\n  }\n\n  // ステップ3: 従業員詳細に年度セレクタを追加する関数\n  function addEmployeeDetailYearSelector() {\n    try {\n      // 従業員詳細画面かどうかを確認\n      const employeeHeaders = Array.from(document.querySelectorAll('h1, h2, h3, h4, .page-header')).filter(\n        el => el.textContent && el.textContent.includes('従業員詳細')\n      );\n      \n      // 従業員詳細タブも確認\n      const employeeTabs = Array.from(document.querySelectorAll('.nav-link.active')).filter(\n        el => el.textContent && el.textContent.includes('従業員詳細')\n      );\n      \n      // 従業員詳細コンテナの直接確認\n      const employeeContainer = document.querySelector('.employee-detail');\n      \n      if (employeeHeaders.length === 0 && employeeTabs.length === 0 && !employeeContainer) {\n        // 従業員詳細画面でない場合は何もしない\n        return false;\n      }\n      \n      log('従業員詳細画面を検出しました');\n      \n      // 既存の修正済み年度セレクタがあれば何もしない\n      if (document.querySelector('.year-selector-fixed')) {\n        log('従業員詳細の年度セレクタは既に追加されています');\n        return false;\n      }\n      \n      // ツールバーまたはボタングループを取得\n      let toolbar = null;\n      \n      // 方法1: ボタングループを探す\n      toolbar = document.querySelector('.btn-group, .button-group, .toolbar');\n      \n      // 方法2: 編集ボタンから親要素を取得\n      if (!toolbar) {\n        const editButtons = Array.from(document.querySelectorAll('button')).filter(\n          btn => btn.textContent && (btn.textContent.includes('編集') || btn.textContent.includes('Edit'))\n        );\n        \n        if (editButtons.length > 0) {\n          toolbar = editButtons[0].parentElement;\n          log('編集ボタンから親ツールバーを検出しました');\n        }\n      }\n      \n      // 方法3: 戻るボタンから親要素を取得\n      if (!toolbar) {\n        const backButtons = Array.from(document.querySelectorAll('button')).filter(\n          btn => btn.textContent && (btn.textContent.includes('戻る') || btn.textContent.includes('Back'))\n        );\n        \n        if (backButtons.length > 0) {\n          toolbar = backButtons[0].parentElement;\n          log('戻るボタンから親ツールバーを検出しました');\n        }\n      }\n      \n      if (!toolbar) {\n        log('従業員詳細のツールバーが見つかりません');\n        return false;\n      }\n      \n      // 年度セレクタを作成\n      const yearSelector = document.createElement('div');\n      yearSelector.className = 'year-selector-fixed';\n      yearSelector.style.cssText = 'display: inline-block; margin-right: 15px;';\n      \n      // 現在の年を取得\n      const currentYear = new Date().getFullYear();\n      \n      // セレクタの内容を作成\n      yearSelector.innerHTML = `\n        <label style=\"margin-right: 5px; display: inline-block; font-weight: normal;\">対象年度:</label>\n        <select class=\"form-control form-control-sm\" style=\"display: inline-block; width: auto; height: 31px; padding: 0.25rem 0.5rem; vertical-align: middle;\">\n          <option value=\"${currentYear-2}\">${currentYear-2}年度</option>\n          <option value=\"${currentYear-1}\">${currentYear-1}年度</option>\n          <option value=\"${currentYear}\" selected>${currentYear}年度</option>\n          <option value=\"${currentYear+1}\">${currentYear+1}年度</option>\n        </select>\n      `;\n      \n      // ツールバーの先頭に挿入\n      toolbar.insertBefore(yearSelector, toolbar.firstChild);\n      \n      // イベントリスナーを追加\n      const select = yearSelector.querySelector('select');\n      if (select) {\n        select.addEventListener('change', function(e) {\n          log(`年度が変更されました: ${e.target.value}`);\n          \n          // 年度変更イベントの発行\n          const yearChangeEvent = new CustomEvent('employeeYearChanged', {\n            detail: { \n              year: parseInt(e.target.value, 10),\n              yearText: `${e.target.value}年度`\n            },\n            bubbles: true\n          });\n          document.dispatchEvent(yearChangeEvent);\n          \n          // UI フィードバック\n          const feedbackEl = document.createElement('span');\n          feedbackEl.className = 'year-feedback';\n          feedbackEl.textContent = `${e.target.value}年度のデータを表示します`;\n          feedbackEl.style.cssText = 'color: #3a66d4; margin-left: 10px; font-weight: bold; opacity: 0; transition: opacity 0.3s;';\n          \n          // 既存のフィードバックを削除\n          const existing = document.querySelector('.year-feedback');\n          if (existing) existing.remove();\n          \n          // フィードバック要素を追加\n          yearSelector.appendChild(feedbackEl);\n          \n          // フェードイン\n          setTimeout(() => {\n            feedbackEl.style.opacity = '1';\n            \n            // 3秒後にフェードアウト\n            setTimeout(() => {\n              feedbackEl.style.opacity = '0';\n              \n              // フェードアウト後に削除\n              setTimeout(() => {\n                if (feedbackEl.parentNode) feedbackEl.parentNode.removeChild(feedbackEl);\n              }, 300);\n            }, 3000);\n          }, 10);\n        });\n      }\n      \n      log('従業員詳細の年度セレクタを追加しました');\n      return true;\n    } catch (e) {\n      log('従業員詳細の年度セレクタ追加処理中にエラー: ' + e.message);\n      return false;\n    }\n  }\n\n  // ステップ4: 安全なDOM監視と処理を行う\n  function setupSafeObserver() {\n    // 既にObserverが存在する場合は作成しない\n    if (window._fixedUIObserver) return;\n    \n    // 既存フラグの初期化\n    window._processingUIFix = false;\n    \n    // デバウンス用タイマー\n    let debounceTimer = null;\n    \n    // MutationObserverの作成\n    const observer = new MutationObserver(function(mutations) {\n      // 処理中なら重複実行しない\n      if (window._processingUIFix) return;\n      \n      // デバウンス処理\n      if (debounceTimer) {\n        clearTimeout(debounceTimer);\n      }\n      \n      debounceTimer = setTimeout(() => {\n        window._processingUIFix = true;\n        try {\n          // 重要な変更のみに反応\n          let shouldUpdate = false;\n          \n          for (const mutation of mutations) {\n            // 要素追加の場合\n            if (mutation.type === 'childList' && mutation.addedNodes.length) {\n              for (const node of mutation.addedNodes) {\n                if (node.nodeType === Node.ELEMENT_NODE) {\n                  // 重要な要素の追加\n                  if (\n                    (node.textContent && (\n                      node.textContent.includes('従業員詳細') || \n                      node.textContent.includes('月次報告')\n                    )) ||\n                    node.classList?.contains('tab-pane') ||\n                    node.querySelector?.('h2, h3, h4, button, .nav-tabs')\n                  ) {\n                    shouldUpdate = true;\n                    break;\n                  }\n                }\n              }\n            }\n            \n            // タブのアクティブ状態変更\n            if (mutation.type === 'attributes' && \n                mutation.attributeName === 'class' && \n                mutation.target.classList?.contains('active')) {\n              shouldUpdate = true;\n            }\n            \n            if (shouldUpdate) break;\n          }\n          \n          if (shouldUpdate) {\n            // 両方の処理を実行\n            hideMonthlyReportYearSelector();\n            addEmployeeDetailYearSelector();\n          }\n        } finally {\n          window._processingUIFix = false;\n        }\n      }, 300);\n    });\n    \n    // 監視設定（パフォーマンスに配慮）\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      attributeFilter: ['class'] // クラス属性の変更のみ監視\n    });\n    \n    // グローバル変数に保存\n    window._fixedUIObserver = observer;\n    log('安全なObserverを設定しました');\n  }\n\n  // ステップ5: URLの変更を監視する\n  function setupURLChangeMonitor() {\n    // URL変更を監視\n    let lastURL = window.location.href;\n    \n    // URL変更の監視をMutationObserverで行う（より効率的）\n    const urlObserver = new MutationObserver(() => {\n      const currentURL = window.location.href;\n      if (currentURL !== lastURL) {\n        lastURL = currentURL;\n        log('URL変更を検出しました');\n        \n        // URL変更後に少し遅延して処理\n        setTimeout(() => {\n          window._processingUIFix = true;\n          try {\n            hideMonthlyReportYearSelector();\n            addEmployeeDetailYearSelector();\n          } finally {\n            window._processingUIFix = false;\n          }\n        }, 500);\n      }\n    });\n    \n    // 監視設定\n    urlObserver.observe(document, {\n      subtree: true,\n      childList: true\n    });\n    \n    // URLチェック用のObserverをグローバル変数に保存\n    window._existingObservers = window._existingObservers || [];\n    window._existingObservers.push(urlObserver);\n  }\n\n  // ステップ6: タブ切り替えイベントの監視\n  function setupTabChangeListener() {\n    // タブ切り替えイベントでの処理\n    document.addEventListener('click', function(e) {\n      if (e.target.classList?.contains('nav-link') || \n          (e.target.closest && e.target.closest('.nav-link'))) {\n        log('タブ切り替えを検出しました');\n        \n        setTimeout(() => {\n          const clickedTab = e.target.closest('.nav-link') || e.target;\n          const tabText = clickedTab.textContent || '';\n          \n          if (tabText.includes('従業員詳細')) {\n            addEmployeeDetailYearSelector();\n          } else if (tabText.includes('月次') || tabText.includes('サマリー')) {\n            hideMonthlyReportYearSelector();\n          }\n        }, 300);\n      }\n    });\n    \n    log('タブ切り替えリスナーを設定しました');\n  }\n\n  // メイン処理を実行\n  cleanupExistingScripts();\n  \n  // 初期実行\n  setTimeout(() => {\n    hideMonthlyReportYearSelector();\n    addEmployeeDetailYearSelector();\n    \n    // Observerの設定\n    setupSafeObserver();\n    setupURLChangeMonitor();\n    setupTabChangeListener();\n    \n    // ページ読み込み完了時の処理\n    window.addEventListener('load', function() {\n      log('ページ読み込み完了');\n      setTimeout(() => {\n        hideMonthlyReportYearSelector();\n        addEmployeeDetailYearSelector();\n      }, 300);\n    });\n    \n    log('UI修正スクリプトの初期設定が完了しました');\n  }, 300);\n})();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}