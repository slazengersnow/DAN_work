{"ast":null,"code":"/**\n * 年度・月選択コントロールの表示/非表示を制御するハンドラ\n * \n * このスクリプトは以下の機能を提供します：\n * - APIレスポンスに含まれる表示設定をチェック\n * - 表示設定に基づいてコントロールの表示/非表示を切り替え\n * - グローバル状態としての表示設定の保持\n */\n\nimport './yearMonthControls.css';\n// 表示設定のグローバル状態\nlet showYearMonthControls = false;\n\n// 非表示スタイルの型安全な定義\nconst hiddenStyle = {\n  display: 'none',\n  visibility: 'hidden',\n  height: 0,\n  overflow: 'hidden',\n  margin: 0,\n  padding: 0\n};\n\n// 空のスタイル\nconst emptyStyle = {};\n\n/**\n * APIレスポンスヘッダーから表示設定を取得\n * \n * @param response - APIレスポンス\n * @returns 表示設定（trueなら表示、falseなら非表示）\n */\nexport const checkControlVisibilityFromHeader = response => {\n  // レスポンスヘッダーからフラグを取得\n  if (response && response.headers) {\n    const visibilityHeader = response.headers.get('X-Show-Year-Month-Controls');\n    if (visibilityHeader !== null) {\n      // ヘッダー値を解析（\"true\" or \"false\"）\n      showYearMonthControls = visibilityHeader === 'true';\n      console.log(`年度・月選択コントロール表示設定を更新: ${showYearMonthControls}`);\n      return showYearMonthControls;\n    }\n  }\n\n  // ヘッダーがない場合は現在の設定を維持\n  return showYearMonthControls;\n};\n\n/**\n * APIレスポンスデータから表示設定を取得\n * \n * @param data - APIレスポンスデータ\n * @returns 表示設定（trueなら表示、falseなら非表示）\n */\nexport const checkControlVisibilityFromData = data => {\n  // レスポンスデータから表示設定を取得\n  if (data && typeof data.showYearMonthControls !== 'undefined') {\n    showYearMonthControls = !!data.showYearMonthControls;\n    console.log(`データから年度・月選択コントロール表示設定を更新: ${showYearMonthControls}`);\n    return showYearMonthControls;\n  }\n\n  // 設定データがない場合は現在の設定を維持\n  return showYearMonthControls;\n};\n\n/**\n * 設定データから表示設定を取得\n * \n * @param settings - 設定データ\n * @returns 表示設定（trueなら表示、falseなら非表示）\n */\nexport const checkControlVisibilityFromSettings = settings => {\n  // 設定データから表示設定を取得\n  if (settings && settings.ui && typeof settings.ui.showYearMonthControls !== 'undefined') {\n    showYearMonthControls = !!settings.ui.showYearMonthControls;\n    console.log(`設定から年度・月選択コントロール表示設定を更新: ${showYearMonthControls}`);\n    return showYearMonthControls;\n  }\n\n  // 設定データがない場合は現在の設定を維持\n  return showYearMonthControls;\n};\n\n/**\n * 現在の表示設定を取得\n * \n * @returns 表示設定（trueなら表示、falseなら非表示）\n */\nexport const shouldShowYearMonthControls = () => {\n  return showYearMonthControls;\n};\n\n/**\n * 表示設定を強制的に設定（主にデバッグ用）\n * \n * @param value - 表示設定（trueなら表示、falseなら非表示）\n * @returns 設定後の表示設定値\n */\nexport const setShowYearMonthControls = value => {\n  showYearMonthControls = !!value;\n  console.log(`年度・月選択コントロール表示設定を手動で変更: ${showYearMonthControls}`);\n  return showYearMonthControls;\n};\n\n/**\n * CSSクラスを動的に管理するための関数\n * \n * @returns 表示/非表示に対応するCSSクラス名\n */\nexport const getYearMonthControlClass = () => {\n  return showYearMonthControls ? 'year-month-controls-visible' : 'year-month-controls-hidden';\n};\n\n/**\n * スタイルを動的に生成するための関数\n * \n * @returns 表示/非表示に対応するCSSプロパティオブジェクト\n */\nexport const getYearMonthControlStyle = () => {\n  return showYearMonthControls ? emptyStyle : hiddenStyle;\n};\nexport default {\n  checkControlVisibilityFromHeader,\n  checkControlVisibilityFromData,\n  checkControlVisibilityFromSettings,\n  shouldShowYearMonthControls,\n  setShowYearMonthControls,\n  getYearMonthControlClass,\n  getYearMonthControlStyle\n};","map":{"version":3,"names":["showYearMonthControls","hiddenStyle","display","visibility","height","overflow","margin","padding","emptyStyle","checkControlVisibilityFromHeader","response","headers","visibilityHeader","get","console","log","checkControlVisibilityFromData","data","checkControlVisibilityFromSettings","settings","ui","shouldShowYearMonthControls","setShowYearMonthControls","value","getYearMonthControlClass","getYearMonthControlStyle"],"sources":["/Users/gotouhiroaki/Programming/DAN_work/disability-employment-system/frontend/src/api/yearMonthControlsHandler.ts"],"sourcesContent":["/**\n * 年度・月選択コントロールの表示/非表示を制御するハンドラ\n * \n * このスクリプトは以下の機能を提供します：\n * - APIレスポンスに含まれる表示設定をチェック\n * - 表示設定に基づいてコントロールの表示/非表示を切り替え\n * - グローバル状態としての表示設定の保持\n */\n\nimport './yearMonthControls.css';\nimport { CSSProperties } from 'react';\n\n// 表示設定のグローバル状態\nlet showYearMonthControls = false;\n\n// 非表示スタイルの型安全な定義\nconst hiddenStyle: CSSProperties = {\n  display: 'none',\n  visibility: 'hidden',\n  height: 0,\n  overflow: 'hidden',\n  margin: 0,\n  padding: 0\n};\n\n// 空のスタイル\nconst emptyStyle: CSSProperties = {};\n\n/**\n * APIレスポンスヘッダーから表示設定を取得\n * \n * @param response - APIレスポンス\n * @returns 表示設定（trueなら表示、falseなら非表示）\n */\nexport const checkControlVisibilityFromHeader = (response: Response): boolean => {\n  // レスポンスヘッダーからフラグを取得\n  if (response && response.headers) {\n    const visibilityHeader = response.headers.get('X-Show-Year-Month-Controls');\n    \n    if (visibilityHeader !== null) {\n      // ヘッダー値を解析（\"true\" or \"false\"）\n      showYearMonthControls = visibilityHeader === 'true';\n      console.log(`年度・月選択コントロール表示設定を更新: ${showYearMonthControls}`);\n      return showYearMonthControls;\n    }\n  }\n  \n  // ヘッダーがない場合は現在の設定を維持\n  return showYearMonthControls;\n};\n\n/**\n * APIレスポンスデータから表示設定を取得\n * \n * @param data - APIレスポンスデータ\n * @returns 表示設定（trueなら表示、falseなら非表示）\n */\nexport const checkControlVisibilityFromData = (data: any): boolean => {\n  // レスポンスデータから表示設定を取得\n  if (data && typeof data.showYearMonthControls !== 'undefined') {\n    showYearMonthControls = !!data.showYearMonthControls;\n    console.log(`データから年度・月選択コントロール表示設定を更新: ${showYearMonthControls}`);\n    return showYearMonthControls;\n  }\n  \n  // 設定データがない場合は現在の設定を維持\n  return showYearMonthControls;\n};\n\n/**\n * 設定データから表示設定を取得\n * \n * @param settings - 設定データ\n * @returns 表示設定（trueなら表示、falseなら非表示）\n */\nexport const checkControlVisibilityFromSettings = (settings: any): boolean => {\n  // 設定データから表示設定を取得\n  if (settings && settings.ui && typeof settings.ui.showYearMonthControls !== 'undefined') {\n    showYearMonthControls = !!settings.ui.showYearMonthControls;\n    console.log(`設定から年度・月選択コントロール表示設定を更新: ${showYearMonthControls}`);\n    return showYearMonthControls;\n  }\n  \n  // 設定データがない場合は現在の設定を維持\n  return showYearMonthControls;\n};\n\n/**\n * 現在の表示設定を取得\n * \n * @returns 表示設定（trueなら表示、falseなら非表示）\n */\nexport const shouldShowYearMonthControls = (): boolean => {\n  return showYearMonthControls;\n};\n\n/**\n * 表示設定を強制的に設定（主にデバッグ用）\n * \n * @param value - 表示設定（trueなら表示、falseなら非表示）\n * @returns 設定後の表示設定値\n */\nexport const setShowYearMonthControls = (value: boolean): boolean => {\n  showYearMonthControls = !!value;\n  console.log(`年度・月選択コントロール表示設定を手動で変更: ${showYearMonthControls}`);\n  return showYearMonthControls;\n};\n\n/**\n * CSSクラスを動的に管理するための関数\n * \n * @returns 表示/非表示に対応するCSSクラス名\n */\nexport const getYearMonthControlClass = (): string => {\n  return showYearMonthControls ? 'year-month-controls-visible' : 'year-month-controls-hidden';\n};\n\n/**\n * スタイルを動的に生成するための関数\n * \n * @returns 表示/非表示に対応するCSSプロパティオブジェクト\n */\nexport const getYearMonthControlStyle = (): CSSProperties => {\n  return showYearMonthControls ? emptyStyle : hiddenStyle;\n};\n\nexport default {\n  checkControlVisibilityFromHeader,\n  checkControlVisibilityFromData,\n  checkControlVisibilityFromSettings,\n  shouldShowYearMonthControls,\n  setShowYearMonthControls,\n  getYearMonthControlClass,\n  getYearMonthControlStyle\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,yBAAyB;AAGhC;AACA,IAAIA,qBAAqB,GAAG,KAAK;;AAEjC;AACA,MAAMC,WAA0B,GAAG;EACjCC,OAAO,EAAE,MAAM;EACfC,UAAU,EAAE,QAAQ;EACpBC,MAAM,EAAE,CAAC;EACTC,QAAQ,EAAE,QAAQ;EAClBC,MAAM,EAAE,CAAC;EACTC,OAAO,EAAE;AACX,CAAC;;AAED;AACA,MAAMC,UAAyB,GAAG,CAAC,CAAC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,gCAAgC,GAAIC,QAAkB,IAAc;EAC/E;EACA,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,EAAE;IAChC,MAAMC,gBAAgB,GAAGF,QAAQ,CAACC,OAAO,CAACE,GAAG,CAAC,4BAA4B,CAAC;IAE3E,IAAID,gBAAgB,KAAK,IAAI,EAAE;MAC7B;MACAZ,qBAAqB,GAAGY,gBAAgB,KAAK,MAAM;MACnDE,OAAO,CAACC,GAAG,CAAC,wBAAwBf,qBAAqB,EAAE,CAAC;MAC5D,OAAOA,qBAAqB;IAC9B;EACF;;EAEA;EACA,OAAOA,qBAAqB;AAC9B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMgB,8BAA8B,GAAIC,IAAS,IAAc;EACpE;EACA,IAAIA,IAAI,IAAI,OAAOA,IAAI,CAACjB,qBAAqB,KAAK,WAAW,EAAE;IAC7DA,qBAAqB,GAAG,CAAC,CAACiB,IAAI,CAACjB,qBAAqB;IACpDc,OAAO,CAACC,GAAG,CAAC,6BAA6Bf,qBAAqB,EAAE,CAAC;IACjE,OAAOA,qBAAqB;EAC9B;;EAEA;EACA,OAAOA,qBAAqB;AAC9B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMkB,kCAAkC,GAAIC,QAAa,IAAc;EAC5E;EACA,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,EAAE,IAAI,OAAOD,QAAQ,CAACC,EAAE,CAACpB,qBAAqB,KAAK,WAAW,EAAE;IACvFA,qBAAqB,GAAG,CAAC,CAACmB,QAAQ,CAACC,EAAE,CAACpB,qBAAqB;IAC3Dc,OAAO,CAACC,GAAG,CAAC,4BAA4Bf,qBAAqB,EAAE,CAAC;IAChE,OAAOA,qBAAqB;EAC9B;;EAEA;EACA,OAAOA,qBAAqB;AAC9B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMqB,2BAA2B,GAAGA,CAAA,KAAe;EACxD,OAAOrB,qBAAqB;AAC9B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMsB,wBAAwB,GAAIC,KAAc,IAAc;EACnEvB,qBAAqB,GAAG,CAAC,CAACuB,KAAK;EAC/BT,OAAO,CAACC,GAAG,CAAC,2BAA2Bf,qBAAqB,EAAE,CAAC;EAC/D,OAAOA,qBAAqB;AAC9B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMwB,wBAAwB,GAAGA,CAAA,KAAc;EACpD,OAAOxB,qBAAqB,GAAG,6BAA6B,GAAG,4BAA4B;AAC7F,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMyB,wBAAwB,GAAGA,CAAA,KAAqB;EAC3D,OAAOzB,qBAAqB,GAAGQ,UAAU,GAAGP,WAAW;AACzD,CAAC;AAED,eAAe;EACbQ,gCAAgC;EAChCO,8BAA8B;EAC9BE,kCAAkC;EAClCG,2BAA2B;EAC3BC,wBAAwB;EACxBE,wBAAwB;EACxBC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}