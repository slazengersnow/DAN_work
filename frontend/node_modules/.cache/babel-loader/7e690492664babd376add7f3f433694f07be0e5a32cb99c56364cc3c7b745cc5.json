{"ast":null,"code":"/**\n * 年度・月選択コントロールの表示/非表示を制御するハンドラ\n * \n * このスクリプトは以下の機能を提供します：\n * - APIレスポンスに含まれる表示設定をチェック\n * - 表示設定に基づいてコントロールの表示/非表示を切り替え\n * - グローバル状態としての表示設定の保持\n */\n\nimport './yearMonthControls.css';\nimport React from 'react';\n\n// 表示設定のグローバル状態\nlet showYearMonthControls = false;\n\n/**\n * APIレスポンスヘッダーから表示設定を取得\n * \n * @param {Response} response - APIレスポンス\n * @returns {boolean} 表示設定（trueなら表示、falseなら非表示）\n */\nexport const checkControlVisibilityFromHeader = response => {\n  // レスポンスヘッダーからフラグを取得\n  if (response && response.headers) {\n    const visibilityHeader = response.headers.get('X-Show-Year-Month-Controls');\n    if (visibilityHeader !== null) {\n      // ヘッダー値を解析（\"true\" or \"false\"）\n      showYearMonthControls = visibilityHeader === 'true';\n      console.log(`年度・月選択コントロール表示設定を更新: ${showYearMonthControls}`);\n      return showYearMonthControls;\n    }\n  }\n\n  // ヘッダーがない場合は現在の設定を維持\n  return showYearMonthControls;\n};\n\n/**\n * APIレスポンスデータから表示設定を取得\n * \n * @param {Object} data - APIレスポンスデータ\n * @returns {boolean} 表示設定（trueなら表示、falseなら非表示）\n */\nexport const checkControlVisibilityFromData = data => {\n  // レスポンスデータから表示設定を取得\n  if (data && typeof data.showYearMonthControls !== 'undefined') {\n    showYearMonthControls = !!data.showYearMonthControls;\n    console.log(`データから年度・月選択コントロール表示設定を更新: ${showYearMonthControls}`);\n    return showYearMonthControls;\n  }\n\n  // 設定データがない場合は現在の設定を維持\n  return showYearMonthControls;\n};\n\n/**\n * 設定データから表示設定を取得\n * \n * @param {Object} settings - 設定データ\n * @returns {boolean} 表示設定（trueなら表示、falseなら非表示）\n */\nexport const checkControlVisibilityFromSettings = settings => {\n  // 設定データから表示設定を取得\n  if (settings && settings.ui && typeof settings.ui.showYearMonthControls !== 'undefined') {\n    showYearMonthControls = !!settings.ui.showYearMonthControls;\n    console.log(`設定から年度・月選択コントロール表示設定を更新: ${showYearMonthControls}`);\n    return showYearMonthControls;\n  }\n\n  // 設定データがない場合は現在の設定を維持\n  return showYearMonthControls;\n};\n\n/**\n * 現在の表示設定を取得\n * \n * @returns {boolean} 表示設定（trueなら表示、falseなら非表示）\n */\nexport const shouldShowYearMonthControls = () => {\n  return showYearMonthControls;\n};\n\n/**\n * 表示設定を強制的に設定（主にデバッグ用）\n * \n * @param {boolean} value - 表示設定（trueなら表示、falseなら非表示）\n */\nexport const setShowYearMonthControls = value => {\n  showYearMonthControls = !!value;\n  console.log(`年度・月選択コントロール表示設定を手動で変更: ${showYearMonthControls}`);\n  return showYearMonthControls;\n};\n\n// CSSクラスを動的に管理するための関数\nexport const getYearMonthControlClass = () => {\n  return showYearMonthControls ? 'year-month-controls-visible' : 'year-month-controls-hidden';\n};\n\n// スタイルを動的に生成するための関数\nexport const getYearMonthControlStyle = () => {\n  // 非表示時のスタイル\n  const hiddenStyle = {\n    display: 'none',\n    visibility: 'hidden',\n    height: 0,\n    overflow: 'hidden',\n    margin: 0,\n    padding: 0\n  };\n\n  // 表示設定に基づいて適切なスタイルを返す\n  return showYearMonthControls ? {} : hiddenStyle;\n};\nexport default {\n  checkControlVisibilityFromHeader,\n  checkControlVisibilityFromData,\n  checkControlVisibilityFromSettings,\n  shouldShowYearMonthControls,\n  setShowYearMonthControls,\n  getYearMonthControlClass,\n  getYearMonthControlStyle\n};","map":{"version":3,"names":["React","showYearMonthControls","checkControlVisibilityFromHeader","response","headers","visibilityHeader","get","console","log","checkControlVisibilityFromData","data","checkControlVisibilityFromSettings","settings","ui","shouldShowYearMonthControls","setShowYearMonthControls","value","getYearMonthControlClass","getYearMonthControlStyle","hiddenStyle","display","visibility","height","overflow","margin","padding"],"sources":["/Users/gotouhiroaki/Programming/DAN_work/disability-employment-system/frontend/src/api/yearMonthControlsHandler.js"],"sourcesContent":["/**\n * 年度・月選択コントロールの表示/非表示を制御するハンドラ\n * \n * このスクリプトは以下の機能を提供します：\n * - APIレスポンスに含まれる表示設定をチェック\n * - 表示設定に基づいてコントロールの表示/非表示を切り替え\n * - グローバル状態としての表示設定の保持\n */\n\nimport './yearMonthControls.css';\nimport React from 'react';\n\n// 表示設定のグローバル状態\nlet showYearMonthControls = false;\n\n/**\n * APIレスポンスヘッダーから表示設定を取得\n * \n * @param {Response} response - APIレスポンス\n * @returns {boolean} 表示設定（trueなら表示、falseなら非表示）\n */\nexport const checkControlVisibilityFromHeader = (response) => {\n  // レスポンスヘッダーからフラグを取得\n  if (response && response.headers) {\n    const visibilityHeader = response.headers.get('X-Show-Year-Month-Controls');\n    \n    if (visibilityHeader !== null) {\n      // ヘッダー値を解析（\"true\" or \"false\"）\n      showYearMonthControls = visibilityHeader === 'true';\n      console.log(`年度・月選択コントロール表示設定を更新: ${showYearMonthControls}`);\n      return showYearMonthControls;\n    }\n  }\n  \n  // ヘッダーがない場合は現在の設定を維持\n  return showYearMonthControls;\n};\n\n/**\n * APIレスポンスデータから表示設定を取得\n * \n * @param {Object} data - APIレスポンスデータ\n * @returns {boolean} 表示設定（trueなら表示、falseなら非表示）\n */\nexport const checkControlVisibilityFromData = (data) => {\n  // レスポンスデータから表示設定を取得\n  if (data && typeof data.showYearMonthControls !== 'undefined') {\n    showYearMonthControls = !!data.showYearMonthControls;\n    console.log(`データから年度・月選択コントロール表示設定を更新: ${showYearMonthControls}`);\n    return showYearMonthControls;\n  }\n  \n  // 設定データがない場合は現在の設定を維持\n  return showYearMonthControls;\n};\n\n/**\n * 設定データから表示設定を取得\n * \n * @param {Object} settings - 設定データ\n * @returns {boolean} 表示設定（trueなら表示、falseなら非表示）\n */\nexport const checkControlVisibilityFromSettings = (settings) => {\n  // 設定データから表示設定を取得\n  if (settings && settings.ui && typeof settings.ui.showYearMonthControls !== 'undefined') {\n    showYearMonthControls = !!settings.ui.showYearMonthControls;\n    console.log(`設定から年度・月選択コントロール表示設定を更新: ${showYearMonthControls}`);\n    return showYearMonthControls;\n  }\n  \n  // 設定データがない場合は現在の設定を維持\n  return showYearMonthControls;\n};\n\n/**\n * 現在の表示設定を取得\n * \n * @returns {boolean} 表示設定（trueなら表示、falseなら非表示）\n */\nexport const shouldShowYearMonthControls = () => {\n  return showYearMonthControls;\n};\n\n/**\n * 表示設定を強制的に設定（主にデバッグ用）\n * \n * @param {boolean} value - 表示設定（trueなら表示、falseなら非表示）\n */\nexport const setShowYearMonthControls = (value) => {\n  showYearMonthControls = !!value;\n  console.log(`年度・月選択コントロール表示設定を手動で変更: ${showYearMonthControls}`);\n  return showYearMonthControls;\n};\n\n// CSSクラスを動的に管理するための関数\nexport const getYearMonthControlClass = () => {\n  return showYearMonthControls ? 'year-month-controls-visible' : 'year-month-controls-hidden';\n};\n\n// スタイルを動的に生成するための関数\nexport const getYearMonthControlStyle = () => {\n  // 非表示時のスタイル\n  const hiddenStyle = {\n    display: 'none', \n    visibility: 'hidden',\n    height: 0,\n    overflow: 'hidden',\n    margin: 0,\n    padding: 0\n  };\n  \n  // 表示設定に基づいて適切なスタイルを返す\n  return showYearMonthControls ? {} : hiddenStyle;\n};\n\nexport default {\n  checkControlVisibilityFromHeader,\n  checkControlVisibilityFromData,\n  checkControlVisibilityFromSettings,\n  shouldShowYearMonthControls,\n  setShowYearMonthControls,\n  getYearMonthControlClass,\n  getYearMonthControlStyle\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,yBAAyB;AAChC,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,IAAIC,qBAAqB,GAAG,KAAK;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,gCAAgC,GAAIC,QAAQ,IAAK;EAC5D;EACA,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,EAAE;IAChC,MAAMC,gBAAgB,GAAGF,QAAQ,CAACC,OAAO,CAACE,GAAG,CAAC,4BAA4B,CAAC;IAE3E,IAAID,gBAAgB,KAAK,IAAI,EAAE;MAC7B;MACAJ,qBAAqB,GAAGI,gBAAgB,KAAK,MAAM;MACnDE,OAAO,CAACC,GAAG,CAAC,wBAAwBP,qBAAqB,EAAE,CAAC;MAC5D,OAAOA,qBAAqB;IAC9B;EACF;;EAEA;EACA,OAAOA,qBAAqB;AAC9B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMQ,8BAA8B,GAAIC,IAAI,IAAK;EACtD;EACA,IAAIA,IAAI,IAAI,OAAOA,IAAI,CAACT,qBAAqB,KAAK,WAAW,EAAE;IAC7DA,qBAAqB,GAAG,CAAC,CAACS,IAAI,CAACT,qBAAqB;IACpDM,OAAO,CAACC,GAAG,CAAC,6BAA6BP,qBAAqB,EAAE,CAAC;IACjE,OAAOA,qBAAqB;EAC9B;;EAEA;EACA,OAAOA,qBAAqB;AAC9B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMU,kCAAkC,GAAIC,QAAQ,IAAK;EAC9D;EACA,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,EAAE,IAAI,OAAOD,QAAQ,CAACC,EAAE,CAACZ,qBAAqB,KAAK,WAAW,EAAE;IACvFA,qBAAqB,GAAG,CAAC,CAACW,QAAQ,CAACC,EAAE,CAACZ,qBAAqB;IAC3DM,OAAO,CAACC,GAAG,CAAC,4BAA4BP,qBAAqB,EAAE,CAAC;IAChE,OAAOA,qBAAqB;EAC9B;;EAEA;EACA,OAAOA,qBAAqB;AAC9B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMa,2BAA2B,GAAGA,CAAA,KAAM;EAC/C,OAAOb,qBAAqB;AAC9B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMc,wBAAwB,GAAIC,KAAK,IAAK;EACjDf,qBAAqB,GAAG,CAAC,CAACe,KAAK;EAC/BT,OAAO,CAACC,GAAG,CAAC,2BAA2BP,qBAAqB,EAAE,CAAC;EAC/D,OAAOA,qBAAqB;AAC9B,CAAC;;AAED;AACA,OAAO,MAAMgB,wBAAwB,GAAGA,CAAA,KAAM;EAC5C,OAAOhB,qBAAqB,GAAG,6BAA6B,GAAG,4BAA4B;AAC7F,CAAC;;AAED;AACA,OAAO,MAAMiB,wBAAwB,GAAGA,CAAA,KAAM;EAC5C;EACA,MAAMC,WAAW,GAAG;IAClBC,OAAO,EAAE,MAAM;IACfC,UAAU,EAAE,QAAQ;IACpBC,MAAM,EAAE,CAAC;IACTC,QAAQ,EAAE,QAAQ;IAClBC,MAAM,EAAE,CAAC;IACTC,OAAO,EAAE;EACX,CAAC;;EAED;EACA,OAAOxB,qBAAqB,GAAG,CAAC,CAAC,GAAGkB,WAAW;AACjD,CAAC;AAED,eAAe;EACbjB,gCAAgC;EAChCO,8BAA8B;EAC9BE,kCAAkC;EAClCG,2BAA2B;EAC3BC,wBAAwB;EACxBE,wBAAwB;EACxBC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}