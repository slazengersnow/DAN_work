{"ast":null,"code":"// src/api/settingsApi.ts\nimport client from './client';\n\n// 必要なスキル型定義\n\n// 職種カテゴリー型定義\n\n// 事業所情報型定義\n\n// 設定情報の型定義\n\n// キャメルケースとスネークケースの変換ヘルパー\nconst convertToSnakeCase = data => {\n  const result = {};\n  for (const key in data) {\n    if (Object.prototype.hasOwnProperty.call(data, key)) {\n      // キャメルケースをスネークケースに変換\n      const snakeKey = key.replace(/([A-Z])/g, '_$1').toLowerCase();\n      result[snakeKey] = data[key];\n    }\n  }\n  return result;\n};\nconst convertToCamelCase = data => {\n  const result = {};\n  for (const key in data) {\n    if (Object.prototype.hasOwnProperty.call(data, key)) {\n      // スネークケースをキャメルケースに変換\n      const camelKey = key.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());\n      result[camelKey] = data[key];\n\n      // 元のスネークケースも保持 (互換性のため)\n      result[key] = data[key];\n    }\n  }\n  return result;\n};\n\n// API関数\nexport const settingsApi = {\n  // 会社設定を取得\n  getCompanySettings: async () => {\n    try {\n      const response = await client.get('/api/settings');\n      // バックエンドのレスポンスに応じてキャメルケースに変換\n      const data = convertToCamelCase(response.data);\n      return data;\n    } catch (error) {\n      console.log('会社設定は利用できません。デフォルト値を使用します。');\n\n      // デフォルト値を返す\n      return {\n        // APIの既存フィールド\n        company_name: \"株式会社サンプルカンパニー\",\n        company_code: \"00000\",\n        company_address: \"東京都千代田区〇〇町1-2-3\",\n        legal_rate: 2.5,\n        fiscal_year_start: \"04-01\",\n        fiscal_year_end: \"03-31\",\n        monthly_report_reminder: true,\n        legal_rate_alert: true,\n        employment_end_notice: true,\n        theme: \"default\",\n        payment_report_reminder: true,\n        // キャメルケース互換フィールド\n        companyName: \"株式会社サンプルカンパニー\",\n        companyAddress: \"東京都千代田区〇〇町1-2-3\",\n        // 拡張プロパティ\n        language: 'ja',\n        notifications: true,\n        // 追加: 産業分類と除外率\n        industryType: \"情報通信業\",\n        exclusionRate: 0,\n        // 追加フィールド（納付金計算用）\n        subsidyAmount: 27000,\n        // 調整金額単価\n        paymentAmount: 50000,\n        // 納付金額単価\n        rewardAmount: 21000,\n        // 報奨金額単価\n\n        // 追加の会社情報\n        representativeName: \"山田 太郎\",\n        businessContent: \"IT・ソフトウェア開発、コンサルティング\",\n        industryCode: \"399（情報サービス）\",\n        // 拡張フィールド\n        legalRates: {\n          '2024年度': {\n            '4月': '2.5',\n            '5月': '2.5',\n            '6月': '2.5',\n            '7月': '2.5',\n            '8月': '2.5',\n            '9月': '2.5',\n            '10月': '2.5',\n            '11月': '2.5',\n            '12月': '2.5',\n            '1月': '2.5',\n            '2月': '2.5',\n            '3月': '2.5'\n          }\n        },\n        employmentGoals: {\n          '2023年度': 10,\n          '2024年度': 12,\n          '2025年度': 15\n        },\n        jobCategories: [],\n        // 事業所情報\n        offices: [{\n          id: 1,\n          name: \"本社\",\n          address: \"東京都千代田区〇〇町1-2-3\",\n          employeeCount: 350,\n          serialNumber: \"000\"\n        }, {\n          id: 2,\n          name: \"大阪支社\",\n          address: \"大阪府大阪市〇〇区△△町4-5-6\",\n          employeeCount: 150,\n          serialNumber: \"001\"\n        }]\n      };\n    }\n  },\n  // 会社設定を更新\n  updateCompanySettings: async settings => {\n    try {\n      // キャメルケースをスネークケースに変換してバックエンドに送信\n      const snakeCaseData = convertToSnakeCase(settings);\n      const response = await client.put('/api/settings', snakeCaseData);\n      const data = convertToCamelCase(response.data);\n      return data;\n    } catch (error) {\n      console.error('会社設定更新エラー:', error);\n      // エラー時は単に渡された設定を返す\n      return settings;\n    }\n  },\n  // ユーザー一覧を取得\n  getUsers: async () => {\n    try {\n      const response = await client.get('/api/settings/users');\n      return response.data.data || [];\n    } catch (error) {\n      console.error('ユーザー取得エラー:', error);\n      // 開発中はモックデータを返す\n      return [{\n        id: 1,\n        username: 'admin',\n        role: 'admin',\n        created_at: '2023-01-01T00:00:00Z'\n      }, {\n        id: 2,\n        username: 'user1',\n        role: 'user',\n        created_at: '2023-01-15T00:00:00Z'\n      }, {\n        id: 3,\n        username: 'user2',\n        role: 'user',\n        created_at: '2023-02-01T00:00:00Z'\n      }];\n    }\n  },\n  // パスワード変更メソッドを追加\n  changePassword: async passwordData => {\n    try {\n      const response = await client.post('/api/settings/change-password', passwordData);\n      return response.data;\n    } catch (error) {\n      console.error('パスワード変更エラー:', error);\n      throw error;\n    }\n  },\n  createUser: async user => {\n    try {\n      const response = await client.post('/api/settings/users', user);\n      return response.data.data;\n    } catch (error) {\n      console.error('ユーザー作成エラー:', error);\n      throw error;\n    }\n  },\n  updateUser: async (id, user) => {\n    try {\n      const response = await client.put(`/api/settings/users/${id}`, user);\n      return response.data.data;\n    } catch (error) {\n      console.error('ユーザー更新エラー:', error);\n      throw error;\n    }\n  },\n  deleteUser: async id => {\n    try {\n      await client.delete(`/api/settings/users/${id}`);\n    } catch (error) {\n      console.error('ユーザー削除エラー:', error);\n      throw error;\n    }\n  }\n};\n\n// デフォルトエクスポートも提供（両方のインポート形式をサポートするため）\nexport default settingsApi;","map":{"version":3,"names":["client","convertToSnakeCase","data","result","key","Object","prototype","hasOwnProperty","call","snakeKey","replace","toLowerCase","convertToCamelCase","camelKey","_","letter","toUpperCase","settingsApi","getCompanySettings","response","get","error","console","log","company_name","company_code","company_address","legal_rate","fiscal_year_start","fiscal_year_end","monthly_report_reminder","legal_rate_alert","employment_end_notice","theme","payment_report_reminder","companyName","companyAddress","language","notifications","industryType","exclusionRate","subsidyAmount","paymentAmount","rewardAmount","representativeName","businessContent","industryCode","legalRates","employmentGoals","jobCategories","offices","id","name","address","employeeCount","serialNumber","updateCompanySettings","settings","snakeCaseData","put","getUsers","username","role","created_at","changePassword","passwordData","post","createUser","user","updateUser","deleteUser","delete"],"sources":["/Users/gotouhiroaki/Programming/DAN_work/disability-employment-system/frontend/src/api/settingsApi.ts"],"sourcesContent":["// src/api/settingsApi.ts\nimport client from './client';\n\n// 必要なスキル型定義\nexport interface Skill {\n  name: string;\n  level: number;\n}\n\n// 職種カテゴリー型定義\nexport interface JobCategory {\n  name: string;\n  description: string;\n  suitabilityScore: number;\n  requiredSkills: Skill[];\n}\n\n// 事業所情報型定義\nexport interface Office {\n  id?: number;\n  name: string;\n  address: string;\n  employeeCount: number;\n  serialNumber?: string; // 事業所別連番 (001:特例子会社等、002:就労継続支援A型)\n}\n\n// 設定情報の型定義\nexport interface CompanySettings {\n  id?: number;\n  company_name: string;  // スネークケース (バックエンド互換)\n  company_code: string;\n  company_address: string;\n  legal_rate: number;\n  fiscal_year_start: string;\n  fiscal_year_end: string;\n  monthly_report_reminder: boolean;\n  payment_report_reminder: boolean;\n  legal_rate_alert: boolean; // 非オプションに変更\n  employment_end_notice?: boolean;\n  theme?: string;\n  \n  // フロントエンドのキャメルケース互換プロパティ\n  companyName?: string;  // company_nameのエイリアス\n  companyAddress?: string;  // company_addressのエイリアス\n  representativeName?: string;\n  businessContent?: string;\n  industryCode?: string;\n  \n  // 拡張プロパティ\n  language?: string;\n  notifications?: boolean;\n  \n  // 追加: 産業分類と除外率\n  industryType?: string;\n  exclusionRate?: number;\n  \n  // 支払い関連\n  paymentAmount?: number;\n  subsidyAmount?: number;\n  rewardAmount?: number;\n  \n  // 拡張\n  legalRates?: { [key: string]: { [key: string]: string } };\n  employmentGoals?: { [key: string]: number };\n  jobCategories?: JobCategory[];\n  offices?: Office[];\n  \n  // その他のプロパティがある場合、ここに追加\n  [key: string]: any; // インデックスシグネチャを追加してより柔軟にする\n}\n\nexport interface User {\n  id?: number;\n  username: string;\n  password?: string;\n  role: string;\n  created_at?: string;\n  updated_at?: string;\n}\n\n// キャメルケースとスネークケースの変換ヘルパー\nconst convertToSnakeCase = (data: any): any => {\n  const result: any = {};\n  for (const key in data) {\n    if (Object.prototype.hasOwnProperty.call(data, key)) {\n      // キャメルケースをスネークケースに変換\n      const snakeKey = key.replace(/([A-Z])/g, '_$1').toLowerCase();\n      result[snakeKey] = data[key];\n    }\n  }\n  return result;\n};\n\nconst convertToCamelCase = (data: any): any => {\n  const result: any = {};\n  for (const key in data) {\n    if (Object.prototype.hasOwnProperty.call(data, key)) {\n      // スネークケースをキャメルケースに変換\n      const camelKey = key.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());\n      result[camelKey] = data[key];\n      \n      // 元のスネークケースも保持 (互換性のため)\n      result[key] = data[key];\n    }\n  }\n  return result;\n};\n\n// API関数\nexport const settingsApi = {\n  // 会社設定を取得\n  getCompanySettings: async (): Promise<CompanySettings> => {\n    try {\n      const response = await client.get('/api/settings');\n      // バックエンドのレスポンスに応じてキャメルケースに変換\n      const data = convertToCamelCase(response.data);\n      return data;\n    } catch (error) {\n      console.log('会社設定は利用できません。デフォルト値を使用します。');\n      \n      // デフォルト値を返す\n      return {\n        // APIの既存フィールド\n        company_name: \"株式会社サンプルカンパニー\",\n        company_code: \"00000\",\n        company_address: \"東京都千代田区〇〇町1-2-3\",\n        legal_rate: 2.5,\n        fiscal_year_start: \"04-01\",\n        fiscal_year_end: \"03-31\",\n        monthly_report_reminder: true,\n        legal_rate_alert: true,\n        employment_end_notice: true,\n        theme: \"default\",\n        payment_report_reminder: true,\n        \n        // キャメルケース互換フィールド\n        companyName: \"株式会社サンプルカンパニー\",\n        companyAddress: \"東京都千代田区〇〇町1-2-3\",\n        \n        // 拡張プロパティ\n        language: 'ja',\n        notifications: true,\n        \n        // 追加: 産業分類と除外率\n        industryType: \"情報通信業\",\n        exclusionRate: 0,\n        \n        // 追加フィールド（納付金計算用）\n        subsidyAmount: 27000, // 調整金額単価\n        paymentAmount: 50000, // 納付金額単価\n        rewardAmount: 21000, // 報奨金額単価\n        \n        // 追加の会社情報\n        representativeName: \"山田 太郎\",\n        businessContent: \"IT・ソフトウェア開発、コンサルティング\",\n        industryCode: \"399（情報サービス）\",\n        \n        // 拡張フィールド\n        legalRates: {\n          '2024年度': {\n            '4月': '2.5', '5月': '2.5', '6月': '2.5', '7月': '2.5', '8月': '2.5', '9月': '2.5',\n            '10月': '2.5', '11月': '2.5', '12月': '2.5', '1月': '2.5', '2月': '2.5', '3月': '2.5'\n          }\n        },\n        employmentGoals: {\n          '2023年度': 10,\n          '2024年度': 12,\n          '2025年度': 15\n        },\n        jobCategories: [],\n        \n        // 事業所情報\n        offices: [\n          {\n            id: 1,\n            name: \"本社\",\n            address: \"東京都千代田区〇〇町1-2-3\",\n            employeeCount: 350,\n            serialNumber: \"000\"\n          },\n          {\n            id: 2,\n            name: \"大阪支社\",\n            address: \"大阪府大阪市〇〇区△△町4-5-6\",\n            employeeCount: 150,\n            serialNumber: \"001\"\n          }\n        ]\n      };\n    }\n  },\n  \n  // 会社設定を更新\n  updateCompanySettings: async (settings: CompanySettings): Promise<CompanySettings> => {\n    try {\n      // キャメルケースをスネークケースに変換してバックエンドに送信\n      const snakeCaseData = convertToSnakeCase(settings);\n      const response = await client.put('/api/settings', snakeCaseData);\n      const data = convertToCamelCase(response.data);\n      return data;\n    } catch (error) {\n      console.error('会社設定更新エラー:', error);\n      // エラー時は単に渡された設定を返す\n      return settings;\n    }\n  },\n  \n  // ユーザー一覧を取得\n  getUsers: async (): Promise<User[]> => {\n    try {\n      const response = await client.get('/api/settings/users');\n      return response.data.data || [];\n    } catch (error) {\n      console.error('ユーザー取得エラー:', error);\n      // 開発中はモックデータを返す\n      return [\n        { id: 1, username: 'admin', role: 'admin', created_at: '2023-01-01T00:00:00Z' },\n        { id: 2, username: 'user1', role: 'user', created_at: '2023-01-15T00:00:00Z' },\n        { id: 3, username: 'user2', role: 'user', created_at: '2023-02-01T00:00:00Z' }\n      ];\n    }\n  },\n  \n  // パスワード変更メソッドを追加\n  changePassword: async (passwordData: any) => {\n    try {\n      const response = await client.post('/api/settings/change-password', passwordData);\n      return response.data;\n    } catch (error) {\n      console.error('パスワード変更エラー:', error);\n      throw error;\n    }\n  },\n  \n  createUser: async (user: User): Promise<User> => {\n    try {\n      const response = await client.post('/api/settings/users', user);\n      return response.data.data;\n    } catch (error) {\n      console.error('ユーザー作成エラー:', error);\n      throw error;\n    }\n  },\n  \n  updateUser: async (id: number, user: User): Promise<User> => {\n    try {\n      const response = await client.put(`/api/settings/users/${id}`, user);\n      return response.data.data;\n    } catch (error) {\n      console.error('ユーザー更新エラー:', error);\n      throw error;\n    }\n  },\n  \n  deleteUser: async (id: number): Promise<void> => {\n    try {\n      await client.delete(`/api/settings/users/${id}`);\n    } catch (error) {\n      console.error('ユーザー削除エラー:', error);\n      throw error;\n    }\n  }\n};\n\n// デフォルトエクスポートも提供（両方のインポート形式をサポートするため）\nexport default settingsApi;"],"mappings":"AAAA;AACA,OAAOA,MAAM,MAAM,UAAU;;AAE7B;;AAMA;;AAQA;;AASA;;AAsDA;AACA,MAAMC,kBAAkB,GAAIC,IAAS,IAAU;EAC7C,MAAMC,MAAW,GAAG,CAAC,CAAC;EACtB,KAAK,MAAMC,GAAG,IAAIF,IAAI,EAAE;IACtB,IAAIG,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACN,IAAI,EAAEE,GAAG,CAAC,EAAE;MACnD;MACA,MAAMK,QAAQ,GAAGL,GAAG,CAACM,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC,CAACC,WAAW,CAAC,CAAC;MAC7DR,MAAM,CAACM,QAAQ,CAAC,GAAGP,IAAI,CAACE,GAAG,CAAC;IAC9B;EACF;EACA,OAAOD,MAAM;AACf,CAAC;AAED,MAAMS,kBAAkB,GAAIV,IAAS,IAAU;EAC7C,MAAMC,MAAW,GAAG,CAAC,CAAC;EACtB,KAAK,MAAMC,GAAG,IAAIF,IAAI,EAAE;IACtB,IAAIG,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACN,IAAI,EAAEE,GAAG,CAAC,EAAE;MACnD;MACA,MAAMS,QAAQ,GAAGT,GAAG,CAACM,OAAO,CAAC,WAAW,EAAE,CAACI,CAAC,EAAEC,MAAM,KAAKA,MAAM,CAACC,WAAW,CAAC,CAAC,CAAC;MAC9Eb,MAAM,CAACU,QAAQ,CAAC,GAAGX,IAAI,CAACE,GAAG,CAAC;;MAE5B;MACAD,MAAM,CAACC,GAAG,CAAC,GAAGF,IAAI,CAACE,GAAG,CAAC;IACzB;EACF;EACA,OAAOD,MAAM;AACf,CAAC;;AAED;AACA,OAAO,MAAMc,WAAW,GAAG;EACzB;EACAC,kBAAkB,EAAE,MAAAA,CAAA,KAAsC;IACxD,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMnB,MAAM,CAACoB,GAAG,CAAC,eAAe,CAAC;MAClD;MACA,MAAMlB,IAAI,GAAGU,kBAAkB,CAACO,QAAQ,CAACjB,IAAI,CAAC;MAC9C,OAAOA,IAAI;IACb,CAAC,CAAC,OAAOmB,KAAK,EAAE;MACdC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;;MAEzC;MACA,OAAO;QACL;QACAC,YAAY,EAAE,eAAe;QAC7BC,YAAY,EAAE,OAAO;QACrBC,eAAe,EAAE,iBAAiB;QAClCC,UAAU,EAAE,GAAG;QACfC,iBAAiB,EAAE,OAAO;QAC1BC,eAAe,EAAE,OAAO;QACxBC,uBAAuB,EAAE,IAAI;QAC7BC,gBAAgB,EAAE,IAAI;QACtBC,qBAAqB,EAAE,IAAI;QAC3BC,KAAK,EAAE,SAAS;QAChBC,uBAAuB,EAAE,IAAI;QAE7B;QACAC,WAAW,EAAE,eAAe;QAC5BC,cAAc,EAAE,iBAAiB;QAEjC;QACAC,QAAQ,EAAE,IAAI;QACdC,aAAa,EAAE,IAAI;QAEnB;QACAC,YAAY,EAAE,OAAO;QACrBC,aAAa,EAAE,CAAC;QAEhB;QACAC,aAAa,EAAE,KAAK;QAAE;QACtBC,aAAa,EAAE,KAAK;QAAE;QACtBC,YAAY,EAAE,KAAK;QAAE;;QAErB;QACAC,kBAAkB,EAAE,OAAO;QAC3BC,eAAe,EAAE,sBAAsB;QACvCC,YAAY,EAAE,aAAa;QAE3B;QACAC,UAAU,EAAE;UACV,QAAQ,EAAE;YACR,IAAI,EAAE,KAAK;YAAE,IAAI,EAAE,KAAK;YAAE,IAAI,EAAE,KAAK;YAAE,IAAI,EAAE,KAAK;YAAE,IAAI,EAAE,KAAK;YAAE,IAAI,EAAE,KAAK;YAC5E,KAAK,EAAE,KAAK;YAAE,KAAK,EAAE,KAAK;YAAE,KAAK,EAAE,KAAK;YAAE,IAAI,EAAE,KAAK;YAAE,IAAI,EAAE,KAAK;YAAE,IAAI,EAAE;UAC5E;QACF,CAAC;QACDC,eAAe,EAAE;UACf,QAAQ,EAAE,EAAE;UACZ,QAAQ,EAAE,EAAE;UACZ,QAAQ,EAAE;QACZ,CAAC;QACDC,aAAa,EAAE,EAAE;QAEjB;QACAC,OAAO,EAAE,CACP;UACEC,EAAE,EAAE,CAAC;UACLC,IAAI,EAAE,IAAI;UACVC,OAAO,EAAE,iBAAiB;UAC1BC,aAAa,EAAE,GAAG;UAClBC,YAAY,EAAE;QAChB,CAAC,EACD;UACEJ,EAAE,EAAE,CAAC;UACLC,IAAI,EAAE,MAAM;UACZC,OAAO,EAAE,mBAAmB;UAC5BC,aAAa,EAAE,GAAG;UAClBC,YAAY,EAAE;QAChB,CAAC;MAEL,CAAC;IACH;EACF,CAAC;EAED;EACAC,qBAAqB,EAAE,MAAOC,QAAyB,IAA+B;IACpF,IAAI;MACF;MACA,MAAMC,aAAa,GAAGzD,kBAAkB,CAACwD,QAAQ,CAAC;MAClD,MAAMtC,QAAQ,GAAG,MAAMnB,MAAM,CAAC2D,GAAG,CAAC,eAAe,EAAED,aAAa,CAAC;MACjE,MAAMxD,IAAI,GAAGU,kBAAkB,CAACO,QAAQ,CAACjB,IAAI,CAAC;MAC9C,OAAOA,IAAI;IACb,CAAC,CAAC,OAAOmB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;MAClC;MACA,OAAOoC,QAAQ;IACjB;EACF,CAAC;EAED;EACAG,QAAQ,EAAE,MAAAA,CAAA,KAA6B;IACrC,IAAI;MACF,MAAMzC,QAAQ,GAAG,MAAMnB,MAAM,CAACoB,GAAG,CAAC,qBAAqB,CAAC;MACxD,OAAOD,QAAQ,CAACjB,IAAI,CAACA,IAAI,IAAI,EAAE;IACjC,CAAC,CAAC,OAAOmB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;MAClC;MACA,OAAO,CACL;QAAE8B,EAAE,EAAE,CAAC;QAAEU,QAAQ,EAAE,OAAO;QAAEC,IAAI,EAAE,OAAO;QAAEC,UAAU,EAAE;MAAuB,CAAC,EAC/E;QAAEZ,EAAE,EAAE,CAAC;QAAEU,QAAQ,EAAE,OAAO;QAAEC,IAAI,EAAE,MAAM;QAAEC,UAAU,EAAE;MAAuB,CAAC,EAC9E;QAAEZ,EAAE,EAAE,CAAC;QAAEU,QAAQ,EAAE,OAAO;QAAEC,IAAI,EAAE,MAAM;QAAEC,UAAU,EAAE;MAAuB,CAAC,CAC/E;IACH;EACF,CAAC;EAED;EACAC,cAAc,EAAE,MAAOC,YAAiB,IAAK;IAC3C,IAAI;MACF,MAAM9C,QAAQ,GAAG,MAAMnB,MAAM,CAACkE,IAAI,CAAC,+BAA+B,EAAED,YAAY,CAAC;MACjF,OAAO9C,QAAQ,CAACjB,IAAI;IACtB,CAAC,CAAC,OAAOmB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;MACnC,MAAMA,KAAK;IACb;EACF,CAAC;EAED8C,UAAU,EAAE,MAAOC,IAAU,IAAoB;IAC/C,IAAI;MACF,MAAMjD,QAAQ,GAAG,MAAMnB,MAAM,CAACkE,IAAI,CAAC,qBAAqB,EAAEE,IAAI,CAAC;MAC/D,OAAOjD,QAAQ,CAACjB,IAAI,CAACA,IAAI;IAC3B,CAAC,CAAC,OAAOmB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;MAClC,MAAMA,KAAK;IACb;EACF,CAAC;EAEDgD,UAAU,EAAE,MAAAA,CAAOlB,EAAU,EAAEiB,IAAU,KAAoB;IAC3D,IAAI;MACF,MAAMjD,QAAQ,GAAG,MAAMnB,MAAM,CAAC2D,GAAG,CAAC,uBAAuBR,EAAE,EAAE,EAAEiB,IAAI,CAAC;MACpE,OAAOjD,QAAQ,CAACjB,IAAI,CAACA,IAAI;IAC3B,CAAC,CAAC,OAAOmB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;MAClC,MAAMA,KAAK;IACb;EACF,CAAC;EAEDiD,UAAU,EAAE,MAAOnB,EAAU,IAAoB;IAC/C,IAAI;MACF,MAAMnD,MAAM,CAACuE,MAAM,CAAC,uBAAuBpB,EAAE,EAAE,CAAC;IAClD,CAAC,CAAC,OAAO9B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;MAClC,MAAMA,KAAK;IACb;EACF;AACF,CAAC;;AAED;AACA,eAAeJ,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}